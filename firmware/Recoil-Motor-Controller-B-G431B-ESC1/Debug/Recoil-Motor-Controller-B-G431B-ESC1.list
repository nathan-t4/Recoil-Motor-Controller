
Recoil-Motor-Controller-B-G431B-ESC1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010dfc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a04  08010fe0  08010fe0  00020fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080119e4  080119e4  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  080119e4  080119e4  000219e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080119ec  080119ec  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080119ec  080119ec  000219ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080119f0  080119f0  000219f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080119f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  200001fc  08011bf0  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000780  08011bf0  00030780  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000281e8  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047eb  00000000  00000000  00058414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed8  00000000  00000000  0005cc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ce0  00000000  00000000  0005ead8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b64  00000000  00000000  000607b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024e8e  00000000  00000000  0008531c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e88b4  00000000  00000000  000aa1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00192a5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000098e0  00000000  00000000  00192ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010fc4 	.word	0x08010fc4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08010fc4 	.word	0x08010fc4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:
float pot_init_pos;
float motor_init_pos;
uint8_t user_input_button;
uint8_t user_output_led;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000fae:	f000 fbe1 	bl	8001774 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000fba:	f002 fe43 	bl	8003c44 <MotorController_handleCANMessage>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000440 	.word	0x20000440
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d104      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x1a>
    MotorController_updateCommutation(&controller, &hadc1);
 8000fe0:	4914      	ldr	r1, [pc, #80]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fe4:	f002 fa4c 	bl	8003480 <MotorController_updateCommutation>
    }
  }
  else if (htim == &htim4) {
    MotorController_triggerPositionUpdate(&controller);
  }
}
 8000fe8:	e01d      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim2) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d112      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
    if (controller.mode != MODE_IDLE && controller.mode != MODE_CALIBRATION) {
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d014      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ffe:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8001002:	2b05      	cmp	r3, #5
 8001004:	d00f      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
      MotorController_setMode(&controller, MODE_DISABLED);
 8001006:	2100      	movs	r1, #0
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800100a:	f001 ffef 	bl	8002fec <MotorController_setMode>
      controller.error = ERROR_HEARTBEAT_TIMEOUT;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001010:	2204      	movs	r2, #4
 8001012:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
}
 8001016:	e006      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim4) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
    MotorController_triggerPositionUpdate(&controller);
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001022:	f002 fa91 	bl	8003548 <MotorController_triggerPositionUpdate>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200005a4 	.word	0x200005a4
 8001034:	20000368 	.word	0x20000368
 8001038:	20000218 	.word	0x20000218
 800103c:	200005f0 	.word	0x200005f0
 8001040:	2000063c 	.word	0x2000063c

08001044 <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  MotorController_updatePositionReading(&controller);
 800104c:	4804      	ldr	r0, [pc, #16]	; (8001060 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 800104e:	f002 facf 	bl	80035f0 <MotorController_updatePositionReading>
//	  controller.position_controller.velocity_target = APP_getUserPot() * 2 * M_PI;
//  }

  /* ====== End user APP code ====== */

  MotorController_updatePositionController(&controller);
 8001052:	4803      	ldr	r0, [pc, #12]	; (8001060 <HAL_I2C_MasterRxCpltCallback+0x1c>)
 8001054:	f002 fb1c 	bl	8003690 <MotorController_updatePositionController>
}
 8001058:	bf00      	nop
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000218 	.word	0x20000218

08001064 <APP_getUserButton>:

uint8_t APP_getUserButton() {
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  user_input_button = HAL_GPIO_ReadPin(GPIO_BUTTON_GPIO_Port, GPIO_BUTTON_Pin) ? 0 : 1;
 8001068:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <APP_getUserButton+0x28>)
 800106e:	f006 ff07 	bl	8007e80 <HAL_GPIO_ReadPin>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	bf0c      	ite	eq
 8001078:	2301      	moveq	r3, #1
 800107a:	2300      	movne	r3, #0
 800107c:	b2db      	uxtb	r3, r3
 800107e:	461a      	mov	r2, r3
 8001080:	4b03      	ldr	r3, [pc, #12]	; (8001090 <APP_getUserButton+0x2c>)
 8001082:	701a      	strb	r2, [r3, #0]
  return user_input_button;
 8001084:	4b02      	ldr	r3, [pc, #8]	; (8001090 <APP_getUserButton+0x2c>)
 8001086:	781b      	ldrb	r3, [r3, #0]
}
 8001088:	4618      	mov	r0, r3
 800108a:	bd80      	pop	{r7, pc}
 800108c:	48000800 	.word	0x48000800
 8001090:	20000364 	.word	0x20000364
 8001094:	00000000 	.word	0x00000000

08001098 <APP_getUserPot>:

float APP_getUserPot() {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  user_input_pot = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3) * ADC_READING_COEFFICIENT / 3.3;
 800109c:	f240 2115 	movw	r1, #533	; 0x215
 80010a0:	4817      	ldr	r0, [pc, #92]	; (8001100 <APP_getUserPot+0x68>)
 80010a2:	f004 fd65 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 80010a6:	4603      	mov	r3, r0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa53 	bl	8000554 <__aeabi_ui2d>
 80010ae:	a310      	add	r3, pc, #64	; (adr r3, 80010f0 <APP_getUserPot+0x58>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	f7ff fac8 	bl	8000648 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	4610      	mov	r0, r2
 80010be:	4619      	mov	r1, r3
 80010c0:	a30d      	add	r3, pc, #52	; (adr r3, 80010f8 <APP_getUserPot+0x60>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fbe9 	bl	800089c <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4610      	mov	r0, r2
 80010d0:	4619      	mov	r1, r3
 80010d2:	f7ff fd91 	bl	8000bf8 <__aeabi_d2f>
 80010d6:	4603      	mov	r3, r0
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <APP_getUserPot+0x6c>)
 80010da:	6013      	str	r3, [r2, #0]
  return user_input_pot;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <APP_getUserPot+0x6c>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	ee07 3a90 	vmov	s15, r3
}
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	f3af 8000 	nop.w
 80010f0:	66666666 	.word	0x66666666
 80010f4:	3f4a6666 	.word	0x3f4a6666
 80010f8:	66666666 	.word	0x66666666
 80010fc:	400a6666 	.word	0x400a6666
 8001100:	20000368 	.word	0x20000368
 8001104:	20000358 	.word	0x20000358

08001108 <handleHostCommand>:

  HAL_FLASH_Lock();
  HAL_FLASH_OB_Launch();  // reload the new settings
}

void handleHostCommand() {
 8001108:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800110c:	b0b8      	sub	sp, #224	; 0xe0
 800110e:	af0e      	add	r7, sp, #56	; 0x38
  char str[128];

  uint8_t command = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (HAL_UART_Receive(&huart2, &command, 1, 1000) != HAL_OK) {
 8001116:	f107 0127 	add.w	r1, r7, #39	; 0x27
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	2201      	movs	r2, #1
 8001120:	488f      	ldr	r0, [pc, #572]	; (8001360 <handleHostCommand+0x258>)
 8001122:	f00b fb2e 	bl	800c782 <HAL_UART_Receive>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	f040 8296 	bne.w	800165a <handleHostCommand+0x552>
    return;
  }

  if (command == '0') {  // idle mode
 800112e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001132:	2b30      	cmp	r3, #48	; 0x30
 8001134:	d118      	bne.n	8001168 <handleHostCommand+0x60>
    MotorController_setMode(&controller, MODE_IDLE);
 8001136:	2101      	movs	r1, #1
 8001138:	488a      	ldr	r0, [pc, #552]	; (8001364 <handleHostCommand+0x25c>)
 800113a:	f001 ff57 	bl	8002fec <MotorController_setMode>
    sprintf(str, "IDLE mode\r\n");
 800113e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001142:	4989      	ldr	r1, [pc, #548]	; (8001368 <handleHostCommand+0x260>)
 8001144:	4618      	mov	r0, r3
 8001146:	f00c fe0f 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800114a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f866 	bl	8000220 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800115c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001160:	487f      	ldr	r0, [pc, #508]	; (8001360 <handleHostCommand+0x258>)
 8001162:	f00b fa78 	bl	800c656 <HAL_UART_Transmit>
    return;
 8001166:	e279      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == '1') {  // position mode
 8001168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800116c:	2b31      	cmp	r3, #49	; 0x31
 800116e:	d12c      	bne.n	80011ca <handleHostCommand+0xc2>
    sprintf(str, "Start Calibration\r\n");
 8001170:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001174:	497d      	ldr	r1, [pc, #500]	; (800136c <handleHostCommand+0x264>)
 8001176:	4618      	mov	r0, r3
 8001178:	f00c fdf6 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800117c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f84d 	bl	8000220 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800118e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001192:	4873      	ldr	r0, [pc, #460]	; (8001360 <handleHostCommand+0x258>)
 8001194:	f00b fa5f 	bl	800c656 <HAL_UART_Transmit>

    MotorController_setMode(&controller, MODE_CALIBRATION);
 8001198:	2105      	movs	r1, #5
 800119a:	4872      	ldr	r0, [pc, #456]	; (8001364 <handleHostCommand+0x25c>)
 800119c:	f001 ff26 	bl	8002fec <MotorController_setMode>
    sprintf(str, "Calibration Done!\r\n");
 80011a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a4:	4972      	ldr	r1, [pc, #456]	; (8001370 <handleHostCommand+0x268>)
 80011a6:	4618      	mov	r0, r3
 80011a8:	f00c fdde 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80011ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff f835 	bl	8000220 <strlen>
 80011b6:	4603      	mov	r3, r0
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c2:	4867      	ldr	r0, [pc, #412]	; (8001360 <handleHostCommand+0x258>)
 80011c4:	f00b fa47 	bl	800c656 <HAL_UART_Transmit>
    return;
 80011c8:	e248      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == '2') {  // torque mode
 80011ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011ce:	2b32      	cmp	r3, #50	; 0x32
 80011d0:	d118      	bne.n	8001204 <handleHostCommand+0xfc>
    MotorController_setMode(&controller, MODE_TORQUE);
 80011d2:	2110      	movs	r1, #16
 80011d4:	4863      	ldr	r0, [pc, #396]	; (8001364 <handleHostCommand+0x25c>)
 80011d6:	f001 ff09 	bl	8002fec <MotorController_setMode>
    sprintf(str, "TORQUE mode\r\n");
 80011da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011de:	4965      	ldr	r1, [pc, #404]	; (8001374 <handleHostCommand+0x26c>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	f00c fdc1 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80011e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f818 	bl	8000220 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80011f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fc:	4858      	ldr	r0, [pc, #352]	; (8001360 <handleHostCommand+0x258>)
 80011fe:	f00b fa2a 	bl	800c656 <HAL_UART_Transmit>
    return;
 8001202:	e22b      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == '3') {  // velocity mode
 8001204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001208:	2b33      	cmp	r3, #51	; 0x33
 800120a:	d118      	bne.n	800123e <handleHostCommand+0x136>
    MotorController_setMode(&controller, MODE_VELOCITY);
 800120c:	2111      	movs	r1, #17
 800120e:	4855      	ldr	r0, [pc, #340]	; (8001364 <handleHostCommand+0x25c>)
 8001210:	f001 feec 	bl	8002fec <MotorController_setMode>
    sprintf(str, "VELOCITY mode\r\n");
 8001214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001218:	4957      	ldr	r1, [pc, #348]	; (8001378 <handleHostCommand+0x270>)
 800121a:	4618      	mov	r0, r3
 800121c:	f00c fda4 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001220:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001224:	4618      	mov	r0, r3
 8001226:	f7fe fffb 	bl	8000220 <strlen>
 800122a:	4603      	mov	r3, r0
 800122c:	b29a      	uxth	r2, r3
 800122e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	484a      	ldr	r0, [pc, #296]	; (8001360 <handleHostCommand+0x258>)
 8001238:	f00b fa0d 	bl	800c656 <HAL_UART_Transmit>
    return;
 800123c:	e20e      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == '4') {  // position mode
 800123e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001242:	2b34      	cmp	r3, #52	; 0x34
 8001244:	d12a      	bne.n	800129c <handleHostCommand+0x194>
    MotorController_setMode(&controller, MODE_POSITION);
 8001246:	2112      	movs	r1, #18
 8001248:	4846      	ldr	r0, [pc, #280]	; (8001364 <handleHostCommand+0x25c>)
 800124a:	f001 fecf 	bl	8002fec <MotorController_setMode>

    // update pot_init_pos to current position
    MotorController_triggerPositionUpdate(&controller);
 800124e:	4845      	ldr	r0, [pc, #276]	; (8001364 <handleHostCommand+0x25c>)
 8001250:	f002 f97a 	bl	8003548 <MotorController_triggerPositionUpdate>
    MotorController_updatePositionReading(&controller);
 8001254:	4843      	ldr	r0, [pc, #268]	; (8001364 <handleHostCommand+0x25c>)
 8001256:	f002 f9cb 	bl	80035f0 <MotorController_updatePositionReading>
    motor_init_pos = controller.position_controller.position_measured;
 800125a:	4b42      	ldr	r3, [pc, #264]	; (8001364 <handleHostCommand+0x25c>)
 800125c:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8001260:	4a46      	ldr	r2, [pc, #280]	; (800137c <handleHostCommand+0x274>)
 8001262:	6013      	str	r3, [r2, #0]
    pot_init_pos = APP_getUserPot();
 8001264:	f7ff ff18 	bl	8001098 <APP_getUserPot>
 8001268:	eef0 7a40 	vmov.f32	s15, s0
 800126c:	4b44      	ldr	r3, [pc, #272]	; (8001380 <handleHostCommand+0x278>)
 800126e:	edc3 7a00 	vstr	s15, [r3]

//    sprintf(str, "POSITION mode, init pos: %f,\t current pot: %f \r\n", motor_init_pos, pot_init_pos);
    sprintf(str, "POSITION mode\r\n");
 8001272:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001276:	4943      	ldr	r1, [pc, #268]	; (8001384 <handleHostCommand+0x27c>)
 8001278:	4618      	mov	r0, r3
 800127a:	f00c fd75 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	4618      	mov	r0, r3
 8001284:	f7fe ffcc 	bl	8000220 <strlen>
 8001288:	4603      	mov	r3, r0
 800128a:	b29a      	uxth	r2, r3
 800128c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	4832      	ldr	r0, [pc, #200]	; (8001360 <handleHostCommand+0x258>)
 8001296:	f00b f9de 	bl	800c656 <HAL_UART_Transmit>
    return;
 800129a:	e1df      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == 'I') {  // log currents
 800129c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012a0:	2b49      	cmp	r3, #73	; 0x49
 80012a2:	d173      	bne.n	800138c <handleHostCommand+0x284>
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
        controller.current_controller.i_a_measured,
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <handleHostCommand+0x25c>)
 80012a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f974 	bl	8000598 <__aeabi_f2d>
 80012b0:	e9c7 0106 	strd	r0, r1, [r7, #24]
		controller.current_controller.i_b_measured,
 80012b4:	4b2b      	ldr	r3, [pc, #172]	; (8001364 <handleHostCommand+0x25c>)
 80012b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f96c 	bl	8000598 <__aeabi_f2d>
 80012c0:	4680      	mov	r8, r0
 80012c2:	4689      	mov	r9, r1
		controller.current_controller.i_c_measured,
 80012c4:	4b27      	ldr	r3, [pc, #156]	; (8001364 <handleHostCommand+0x25c>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f964 	bl	8000598 <__aeabi_f2d>
 80012d0:	4682      	mov	sl, r0
 80012d2:	468b      	mov	fp, r1
        controller.current_controller.i_alpha_measured,
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <handleHostCommand+0x25c>)
 80012d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f95c 	bl	8000598 <__aeabi_f2d>
 80012e0:	e9c7 0104 	strd	r0, r1, [r7, #16]
		controller.current_controller.i_beta_measured,
 80012e4:	4b1f      	ldr	r3, [pc, #124]	; (8001364 <handleHostCommand+0x25c>)
 80012e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff f954 	bl	8000598 <__aeabi_f2d>
 80012f0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		controller.current_controller.i_q_measured,
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <handleHostCommand+0x25c>)
 80012f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f94c 	bl	8000598 <__aeabi_f2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
		controller.current_controller.i_d_measured);
 8001304:	4b17      	ldr	r3, [pc, #92]	; (8001364 <handleHostCommand+0x25c>)
 8001306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f944 	bl	8000598 <__aeabi_f2d>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001318:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800131c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001320:	ed97 7b02 	vldr	d7, [r7, #8]
 8001324:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001328:	ed97 7b04 	vldr	d7, [r7, #16]
 800132c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001330:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001334:	e9cd 8900 	strd	r8, r9, [sp]
 8001338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800133c:	4912      	ldr	r1, [pc, #72]	; (8001388 <handleHostCommand+0x280>)
 800133e:	f00c fd13 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff6a 	bl	8000220 <strlen>
 800134c:	4603      	mov	r3, r0
 800134e:	b29a      	uxth	r2, r3
 8001350:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001354:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001358:	4801      	ldr	r0, [pc, #4]	; (8001360 <handleHostCommand+0x258>)
 800135a:	f00b f97c 	bl	800c656 <HAL_UART_Transmit>
    return;
 800135e:	e17d      	b.n	800165c <handleHostCommand+0x554>
 8001360:	200006d4 	.word	0x200006d4
 8001364:	20000218 	.word	0x20000218
 8001368:	08010fe0 	.word	0x08010fe0
 800136c:	08010fec 	.word	0x08010fec
 8001370:	08011000 	.word	0x08011000
 8001374:	08011014 	.word	0x08011014
 8001378:	08011024 	.word	0x08011024
 800137c:	20000360 	.word	0x20000360
 8001380:	2000035c 	.word	0x2000035c
 8001384:	08011034 	.word	0x08011034
 8001388:	08011044 	.word	0x08011044
  }
  if (command == 'V') {  // log voltages
 800138c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001390:	2b56      	cmp	r3, #86	; 0x56
 8001392:	d168      	bne.n	8001466 <handleHostCommand+0x35e>
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
    	controller.current_controller.v_a_setpoint,
 8001394:	4bb3      	ldr	r3, [pc, #716]	; (8001664 <handleHostCommand+0x55c>)
 8001396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8fc 	bl	8000598 <__aeabi_f2d>
 80013a0:	e9c7 0106 	strd	r0, r1, [r7, #24]
		controller.current_controller.v_b_setpoint,
 80013a4:	4baf      	ldr	r3, [pc, #700]	; (8001664 <handleHostCommand+0x55c>)
 80013a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8f4 	bl	8000598 <__aeabi_f2d>
 80013b0:	4682      	mov	sl, r0
 80013b2:	468b      	mov	fp, r1
		controller.current_controller.v_c_setpoint,
 80013b4:	4bab      	ldr	r3, [pc, #684]	; (8001664 <handleHostCommand+0x55c>)
 80013b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff f8ec 	bl	8000598 <__aeabi_f2d>
 80013c0:	e9c7 0104 	strd	r0, r1, [r7, #16]
		controller.current_controller.v_alpha_setpoint,
 80013c4:	4ba7      	ldr	r3, [pc, #668]	; (8001664 <handleHostCommand+0x55c>)
 80013c6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff f8e4 	bl	8000598 <__aeabi_f2d>
 80013d0:	e9c7 0102 	strd	r0, r1, [r7, #8]
		controller.current_controller.v_beta_setpoint,
 80013d4:	4ba3      	ldr	r3, [pc, #652]	; (8001664 <handleHostCommand+0x55c>)
 80013d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8dc 	bl	8000598 <__aeabi_f2d>
 80013e0:	e9c7 0100 	strd	r0, r1, [r7]
		controller.current_controller.v_q_setpoint,
 80013e4:	4b9f      	ldr	r3, [pc, #636]	; (8001664 <handleHostCommand+0x55c>)
 80013e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8d4 	bl	8000598 <__aeabi_f2d>
 80013f0:	4680      	mov	r8, r0
 80013f2:	4689      	mov	r9, r1
		controller.current_controller.v_d_setpoint,
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <handleHostCommand+0x55c>)
 80013f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff f8cc 	bl	8000598 <__aeabi_f2d>
 8001400:	4604      	mov	r4, r0
 8001402:	460d      	mov	r5, r1
		controller.powerstage.bus_voltage_measured);
 8001404:	4b97      	ldr	r3, [pc, #604]	; (8001664 <handleHostCommand+0x55c>)
 8001406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8c5 	bl	8000598 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001416:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800141a:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800141e:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8001422:	ed97 7b00 	vldr	d7, [r7]
 8001426:	ed8d 7b06 	vstr	d7, [sp, #24]
 800142a:	ed97 7b02 	vldr	d7, [r7, #8]
 800142e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001432:	ed97 7b04 	vldr	d7, [r7, #16]
 8001436:	ed8d 7b02 	vstr	d7, [sp, #8]
 800143a:	e9cd ab00 	strd	sl, fp, [sp]
 800143e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001442:	4989      	ldr	r1, [pc, #548]	; (8001668 <handleHostCommand+0x560>)
 8001444:	f00c fc90 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001448:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800144c:	4618      	mov	r0, r3
 800144e:	f7fe fee7 	bl	8000220 <strlen>
 8001452:	4603      	mov	r3, r0
 8001454:	b29a      	uxth	r2, r3
 8001456:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800145a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145e:	4883      	ldr	r0, [pc, #524]	; (800166c <handleHostCommand+0x564>)
 8001460:	f00b f8f9 	bl	800c656 <HAL_UART_Transmit>
    return;
 8001464:	e0fa      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == 'p') {  // log position
 8001466:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800146a:	2b70      	cmp	r3, #112	; 0x70
 800146c:	d127      	bne.n	80014be <handleHostCommand+0x3b6>
    sprintf(str, "%f\t%f\r\n",
    	controller.position_controller.position_measured,
 800146e:	4b7d      	ldr	r3, [pc, #500]	; (8001664 <handleHostCommand+0x55c>)
 8001470:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    sprintf(str, "%f\t%f\r\n",
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff f88f 	bl	8000598 <__aeabi_f2d>
 800147a:	4604      	mov	r4, r0
 800147c:	460d      	mov	r5, r1
		controller.position_controller.position_target
 800147e:	4b79      	ldr	r3, [pc, #484]	; (8001664 <handleHostCommand+0x55c>)
 8001480:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
    sprintf(str, "%f\t%f\r\n",
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff f887 	bl	8000598 <__aeabi_f2d>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001492:	e9cd 2300 	strd	r2, r3, [sp]
 8001496:	4622      	mov	r2, r4
 8001498:	462b      	mov	r3, r5
 800149a:	4975      	ldr	r1, [pc, #468]	; (8001670 <handleHostCommand+0x568>)
 800149c:	f00c fc64 	bl	800dd68 <siprintf>
		);
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80014a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7fe febb 	bl	8000220 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014b6:	486d      	ldr	r0, [pc, #436]	; (800166c <handleHostCommand+0x564>)
 80014b8:	f00b f8cd 	bl	800c656 <HAL_UART_Transmit>
    return;
 80014bc:	e0ce      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == 'v') {  // log velocity
 80014be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80014c2:	2b76      	cmp	r3, #118	; 0x76
 80014c4:	d127      	bne.n	8001516 <handleHostCommand+0x40e>
	sprintf(str, "%f\t%f\r\n",
		controller.position_controller.velocity_measured,
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <handleHostCommand+0x55c>)
 80014c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
	sprintf(str, "%f\t%f\r\n",
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff f863 	bl	8000598 <__aeabi_f2d>
 80014d2:	4604      	mov	r4, r0
 80014d4:	460d      	mov	r5, r1
		controller.position_controller.velocity_target
 80014d6:	4b63      	ldr	r3, [pc, #396]	; (8001664 <handleHostCommand+0x55c>)
 80014d8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
	sprintf(str, "%f\t%f\r\n",
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff f85b 	bl	8000598 <__aeabi_f2d>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80014ea:	e9cd 2300 	strd	r2, r3, [sp]
 80014ee:	4622      	mov	r2, r4
 80014f0:	462b      	mov	r3, r5
 80014f2:	495f      	ldr	r1, [pc, #380]	; (8001670 <handleHostCommand+0x568>)
 80014f4:	f00c fc38 	bl	800dd68 <siprintf>
		);
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80014f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7fe fe8f 	bl	8000220 <strlen>
 8001502:	4603      	mov	r3, r0
 8001504:	b29a      	uxth	r2, r3
 8001506:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800150a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150e:	4857      	ldr	r0, [pc, #348]	; (800166c <handleHostCommand+0x564>)
 8001510:	f00b f8a1 	bl	800c656 <HAL_UART_Transmit>
    return;
 8001514:	e0a2      	b.n	800165c <handleHostCommand+0x554>
  }
  if (command == 'G') {  // log general
 8001516:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800151a:	2b47      	cmp	r3, #71	; 0x47
 800151c:	d151      	bne.n	80015c2 <handleHostCommand+0x4ba>
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
        controller.position_controller.position_measured,
 800151e:	4b51      	ldr	r3, [pc, #324]	; (8001664 <handleHostCommand+0x55c>)
 8001520:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f837 	bl	8000598 <__aeabi_f2d>
 800152a:	e9c7 0106 	strd	r0, r1, [r7, #24]
        controller.position_controller.position_setpoint,
 800152e:	4b4d      	ldr	r3, [pc, #308]	; (8001664 <handleHostCommand+0x55c>)
 8001530:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff f82f 	bl	8000598 <__aeabi_f2d>
 800153a:	4604      	mov	r4, r0
 800153c:	460d      	mov	r5, r1
		controller.position_controller.velocity_measured,
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <handleHostCommand+0x55c>)
 8001540:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff f827 	bl	8000598 <__aeabi_f2d>
 800154a:	4680      	mov	r8, r0
 800154c:	4689      	mov	r9, r1
		controller.position_controller.velocity_setpoint,
 800154e:	4b45      	ldr	r3, [pc, #276]	; (8001664 <handleHostCommand+0x55c>)
 8001550:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff f81f 	bl	8000598 <__aeabi_f2d>
 800155a:	4682      	mov	sl, r0
 800155c:	468b      	mov	fp, r1
		controller.current_controller.i_q_setpoint,
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <handleHostCommand+0x55c>)
 8001560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff f817 	bl	8000598 <__aeabi_f2d>
 800156a:	e9c7 0104 	strd	r0, r1, [r7, #16]
		controller.position_controller.torque_setpoint
 800156e:	4b3d      	ldr	r3, [pc, #244]	; (8001664 <handleHostCommand+0x55c>)
 8001570:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    sprintf(str, "%f\t%f\t%f\t%f\t%f\t%f\r\n",
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff f80f 	bl	8000598 <__aeabi_f2d>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001582:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8001586:	ed97 7b04 	vldr	d7, [r7, #16]
 800158a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800158e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001592:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001596:	e9cd 4500 	strd	r4, r5, [sp]
 800159a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800159e:	4935      	ldr	r1, [pc, #212]	; (8001674 <handleHostCommand+0x56c>)
 80015a0:	f00c fbe2 	bl	800dd68 <siprintf>
        );
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80015a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fe39 	bl	8000220 <strlen>
 80015ae:	4603      	mov	r3, r0
 80015b0:	b29a      	uxth	r2, r3
 80015b2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ba:	482c      	ldr	r0, [pc, #176]	; (800166c <handleHostCommand+0x564>)
 80015bc:	f00b f84b 	bl	800c656 <HAL_UART_Transmit>
    return;
 80015c0:	e04c      	b.n	800165c <handleHostCommand+0x554>
  } if (command == 'c') { // config
 80015c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015c6:	2b63      	cmp	r3, #99	; 0x63
 80015c8:	d11b      	bne.n	8001602 <handleHostCommand+0x4fa>
	sprintf(str, "flux angle offset: %f\t device id: %d\r\n",
			controller.motor.flux_angle_offset,
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <handleHostCommand+0x55c>)
 80015cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
	sprintf(str, "flux angle offset: %f\t device id: %d\r\n",
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ffe2 	bl	8000598 <__aeabi_f2d>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80015dc:	2102      	movs	r1, #2
 80015de:	9100      	str	r1, [sp, #0]
 80015e0:	4925      	ldr	r1, [pc, #148]	; (8001678 <handleHostCommand+0x570>)
 80015e2:	f00c fbc1 	bl	800dd68 <siprintf>
			DEVICE_CAN_ID);
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80015e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7fe fe18 	bl	8000220 <strlen>
 80015f0:	4603      	mov	r3, r0
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fc:	481b      	ldr	r0, [pc, #108]	; (800166c <handleHostCommand+0x564>)
 80015fe:	f00b f82a 	bl	800c656 <HAL_UART_Transmit>
  } if (command == 't') { // torques
 8001602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001606:	2b74      	cmp	r3, #116	; 0x74
 8001608:	d128      	bne.n	800165c <handleHostCommand+0x554>
	sprintf(str, "measured: %f\t setpoint: %f\r\n",
			controller.position_controller.torque_measured,
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <handleHostCommand+0x55c>)
 800160c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	sprintf(str, "measured: %f\t setpoint: %f\r\n",
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffc1 	bl	8000598 <__aeabi_f2d>
 8001616:	4604      	mov	r4, r0
 8001618:	460d      	mov	r5, r1
			controller.position_controller.torque_setpoint);
 800161a:	4b12      	ldr	r3, [pc, #72]	; (8001664 <handleHostCommand+0x55c>)
 800161c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
	sprintf(str, "measured: %f\t setpoint: %f\r\n",
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ffb9 	bl	8000598 <__aeabi_f2d>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800162e:	e9cd 2300 	strd	r2, r3, [sp]
 8001632:	4622      	mov	r2, r4
 8001634:	462b      	mov	r3, r5
 8001636:	4911      	ldr	r1, [pc, #68]	; (800167c <handleHostCommand+0x574>)
 8001638:	f00c fb96 	bl	800dd68 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 800163c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f7fe fded 	bl	8000220 <strlen>
 8001646:	4603      	mov	r3, r0
 8001648:	b29a      	uxth	r2, r3
 800164a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800164e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001652:	4806      	ldr	r0, [pc, #24]	; (800166c <handleHostCommand+0x564>)
 8001654:	f00a ffff 	bl	800c656 <HAL_UART_Transmit>
 8001658:	e000      	b.n	800165c <handleHostCommand+0x554>
    return;
 800165a:	bf00      	nop
  }
}
 800165c:	37a8      	adds	r7, #168	; 0xa8
 800165e:	46bd      	mov	sp, r7
 8001660:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001664:	20000218 	.word	0x20000218
 8001668:	0801105c 	.word	0x0801105c
 800166c:	200006d4 	.word	0x200006d4
 8001670:	08011078 	.word	0x08011078
 8001674:	08011080 	.word	0x08011080
 8001678:	08011094 	.word	0x08011094
 800167c:	080110bc 	.word	0x080110bc

08001680 <APP_init>:


void APP_init() {
 8001680:	b580      	push	{r7, lr}
 8001682:	b0a0      	sub	sp, #128	; 0x80
 8001684:	af00      	add	r7, sp, #0
  MotorController_init(&controller);
 8001686:	4827      	ldr	r0, [pc, #156]	; (8001724 <APP_init+0xa4>)
 8001688:	f001 fba8 	bl	8002ddc <MotorController_init>

  controller.position_controller.position_kp = 0.3;
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <APP_init+0xa4>)
 800168e:	4a26      	ldr	r2, [pc, #152]	; (8001728 <APP_init+0xa8>)
 8001690:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  controller.position_controller.torque_limit_lower = -5;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <APP_init+0xa4>)
 8001696:	4a25      	ldr	r2, [pc, #148]	; (800172c <APP_init+0xac>)
 8001698:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  controller.position_controller.torque_limit_upper = 5;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <APP_init+0xa4>)
 800169e:	4a24      	ldr	r2, [pc, #144]	; (8001730 <APP_init+0xb0>)
 80016a0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

  {
    char str[128];
    sprintf(str, "motor pp: %d\r\n", controller.motor.pole_pairs);
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <APP_init+0xa4>)
 80016a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016a8:	463b      	mov	r3, r7
 80016aa:	4922      	ldr	r1, [pc, #136]	; (8001734 <APP_init+0xb4>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00c fb5b 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80016b2:	463b      	mov	r3, r7
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe fdb3 	bl	8000220 <strlen>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4639      	mov	r1, r7
 80016c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c4:	481c      	ldr	r0, [pc, #112]	; (8001738 <APP_init+0xb8>)
 80016c6:	f00a ffc6 	bl	800c656 <HAL_UART_Transmit>
    sprintf(str, "motor offset angle: %f\r\n", controller.motor.flux_angle_offset);
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <APP_init+0xa4>)
 80016cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff62 	bl	8000598 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4638      	mov	r0, r7
 80016da:	4918      	ldr	r1, [pc, #96]	; (800173c <APP_init+0xbc>)
 80016dc:	f00c fb44 	bl	800dd68 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 80016e0:	463b      	mov	r3, r7
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd9c 	bl	8000220 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4639      	mov	r1, r7
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	4811      	ldr	r0, [pc, #68]	; (8001738 <APP_init+0xb8>)
 80016f4:	f00a ffaf 	bl	800c656 <HAL_UART_Transmit>
	sprintf(str, "device id: %d\r\n", DEVICE_CAN_ID);
 80016f8:	463b      	mov	r3, r7
 80016fa:	2202      	movs	r2, #2
 80016fc:	4910      	ldr	r1, [pc, #64]	; (8001740 <APP_init+0xc0>)
 80016fe:	4618      	mov	r0, r3
 8001700:	f00c fb32 	bl	800dd68 <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);
 8001704:	463b      	mov	r3, r7
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe fd8a 	bl	8000220 <strlen>
 800170c:	4603      	mov	r3, r0
 800170e:	b29a      	uxth	r2, r3
 8001710:	4639      	mov	r1, r7
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	4808      	ldr	r0, [pc, #32]	; (8001738 <APP_init+0xb8>)
 8001718:	f00a ff9d 	bl	800c656 <HAL_UART_Transmit>
  }
}
 800171c:	bf00      	nop
 800171e:	3780      	adds	r7, #128	; 0x80
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000218 	.word	0x20000218
 8001728:	3e99999a 	.word	0x3e99999a
 800172c:	c0a00000 	.word	0xc0a00000
 8001730:	40a00000 	.word	0x40a00000
 8001734:	080110dc 	.word	0x080110dc
 8001738:	200006d4 	.word	0x200006d4
 800173c:	080110ec 	.word	0x080110ec
 8001740:	08011108 	.word	0x08011108

08001744 <APP_main>:


void APP_main() {
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  MotorController_updateService(&controller);
 8001748:	4809      	ldr	r0, [pc, #36]	; (8001770 <APP_main+0x2c>)
 800174a:	f001 ffdd 	bl	8003708 <MotorController_updateService>

  if (APP_getUserButton(&controller)) {
 800174e:	4808      	ldr	r0, [pc, #32]	; (8001770 <APP_main+0x2c>)
 8001750:	f7ff fc88 	bl	8001064 <APP_getUserButton>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <APP_main+0x1e>
//    controller.current_controller.i_d_target = 0.;
//    controller.current_controller.i_q_target = 0.5;
//    MotorController_setMode(&controller, MODE_OPEN_IDQ);

    MotorController_setMode(&controller, MODE_CALIBRATION);
 800175a:	2105      	movs	r1, #5
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <APP_main+0x2c>)
 800175e:	f001 fc45 	bl	8002fec <MotorController_setMode>

//    MotorController_setMode(&controller, MODE_POSITION);
//    MotorController_setMode(&controller, MODE_DISABLED);
  }

  handleHostCommand();
 8001762:	f7ff fcd1 	bl	8001108 <handleHostCommand>
//    sprintf(str, "vbus:%f\tvel:%f\r\n",
//        controller.powerstage.bus_voltage_measured,
//        controller.encoder.velocity);
//  HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 1000);

  HAL_Delay(10);
 8001766:	200a      	movs	r0, #10
 8001768:	f003 fd18 	bl	800519c <HAL_Delay>

}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000218 	.word	0x20000218

08001774 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	; 0x30
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	3308      	adds	r3, #8
 8001782:	f107 0208 	add.w	r2, r7, #8
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f005 fb51 	bl	8006e30 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 800178e:	68ba      	ldr	r2, [r7, #8]
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	bf14      	ite	ne
 800179a:	2301      	movne	r3, #1
 800179c:	2300      	moveq	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	461a      	mov	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <CAN_getRxFrame+0x3c>
 80017ac:	2201      	movs	r2, #1
 80017ae:	e000      	b.n	80017b2 <CAN_getRxFrame+0x3e>
 80017b0:	2200      	movs	r2, #0
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017bc:	d04c      	beq.n	8001858 <CAN_getRxFrame+0xe4>
 80017be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017c2:	d84d      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 80017c4:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80017c8:	d042      	beq.n	8001850 <CAN_getRxFrame+0xdc>
 80017ca:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80017ce:	d847      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 80017d0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80017d4:	d038      	beq.n	8001848 <CAN_getRxFrame+0xd4>
 80017d6:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80017da:	d841      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 80017dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e0:	d02e      	beq.n	8001840 <CAN_getRxFrame+0xcc>
 80017e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017e6:	d83b      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 80017e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017ec:	d024      	beq.n	8001838 <CAN_getRxFrame+0xc4>
 80017ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80017f2:	d835      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 80017f4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80017f8:	d01a      	beq.n	8001830 <CAN_getRxFrame+0xbc>
 80017fa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80017fe:	d82f      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 8001800:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001804:	d010      	beq.n	8001828 <CAN_getRxFrame+0xb4>
 8001806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800180a:	d829      	bhi.n	8001860 <CAN_getRxFrame+0xec>
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <CAN_getRxFrame+0xa4>
 8001810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001814:	d004      	beq.n	8001820 <CAN_getRxFrame+0xac>
 8001816:	e023      	b.n	8001860 <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2200      	movs	r2, #0
 800181c:	80da      	strh	r2, [r3, #6]
 800181e:	e023      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	80da      	strh	r2, [r3, #6]
 8001826:	e01f      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	2202      	movs	r2, #2
 800182c:	80da      	strh	r2, [r3, #6]
 800182e:	e01b      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2203      	movs	r2, #3
 8001834:	80da      	strh	r2, [r3, #6]
 8001836:	e017      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	2204      	movs	r2, #4
 800183c:	80da      	strh	r2, [r3, #6]
 800183e:	e013      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	2205      	movs	r2, #5
 8001844:	80da      	strh	r2, [r3, #6]
 8001846:	e00f      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2206      	movs	r2, #6
 800184c:	80da      	strh	r2, [r3, #6]
 800184e:	e00b      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2207      	movs	r2, #7
 8001854:	80da      	strh	r2, [r3, #6]
 8001856:	e007      	b.n	8001868 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2208      	movs	r2, #8
 800185c:	80da      	strh	r2, [r3, #6]
 800185e:	e003      	b.n	8001868 <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	80da      	strh	r2, [r3, #6]
  }
}
 8001866:	bf00      	nop
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	791b      	ldrb	r3, [r3, #4]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <CAN_putTxFrame+0x1c>
 8001888:	2300      	movs	r3, #0
 800188a:	e001      	b.n	8001890 <CAN_putTxFrame+0x20>
 800188c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001890:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	795b      	ldrb	r3, [r3, #5]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <CAN_putTxFrame+0x2e>
 800189a:	2300      	movs	r3, #0
 800189c:	e001      	b.n	80018a2 <CAN_putTxFrame+0x32>
 800189e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80018a2:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	88db      	ldrh	r3, [r3, #6]
 80018a8:	2b08      	cmp	r3, #8
 80018aa:	d838      	bhi.n	800191e <CAN_putTxFrame+0xae>
 80018ac:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <CAN_putTxFrame+0x44>)
 80018ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b2:	bf00      	nop
 80018b4:	080018d9 	.word	0x080018d9
 80018b8:	080018df 	.word	0x080018df
 80018bc:	080018e7 	.word	0x080018e7
 80018c0:	080018ef 	.word	0x080018ef
 80018c4:	080018f7 	.word	0x080018f7
 80018c8:	080018ff 	.word	0x080018ff
 80018cc:	08001907 	.word	0x08001907
 80018d0:	0800190f 	.word	0x0800190f
 80018d4:	08001917 	.word	0x08001917
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80018d8:	2300      	movs	r3, #0
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	e021      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80018de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018e2:	61bb      	str	r3, [r7, #24]
 80018e4:	e01d      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80018e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	e019      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80018ee:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	e015      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 80018f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	e011      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 80018fe:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001902:	61bb      	str	r3, [r7, #24]
 8001904:	e00d      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 8001906:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	e009      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 800190e:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 8001912:	61bb      	str	r3, [r7, #24]
 8001914:	e005      	b.n	8001922 <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 8001916:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	e001      	b.n	8001922 <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 8001922:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001926:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 800192c:	2300      	movs	r3, #0
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001930:	2300      	movs	r3, #0
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f103 0208 	add.w	r2, r3, #8
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	4619      	mov	r1, r3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f005 fa2f 	bl	8006da8 <HAL_FDCAN_AddMessageToTxFifoQ>
 800194a:	4603      	mov	r3, r0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3730      	adds	r7, #48	; 0x30
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <clampf>:
#define SET_BITS(REG, BIT)                    ((REG) |= (BIT))
#define CLEAR_BITS(REG, BIT)                  ((REG) &= ~(BIT))
#define READ_BITS(REG, BIT)                   ((REG) & (BIT))
#define WRITE_BITS(REG, CLEARMASK, SETMASK)   ((REG) = (((REG) & (~(CLEARMASK))) | (SETMASK)))

static inline float clampf(float value, float min, float max) {
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	ed87 0a03 	vstr	s0, [r7, #12]
 800195e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001962:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8001966:	ed97 7a03 	vldr	s14, [r7, #12]
 800196a:	edd7 7a01 	vldr	s15, [r7, #4]
 800196e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001976:	dd01      	ble.n	800197c <clampf+0x28>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	e00b      	b.n	8001994 <clampf+0x40>
 800197c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001980:	edd7 7a02 	vldr	s15, [r7, #8]
 8001984:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198c:	d501      	bpl.n	8001992 <clampf+0x3e>
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	e000      	b.n	8001994 <clampf+0x40>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	ee07 3a90 	vmov	s15, r3
}
 8001998:	eeb0 0a67 	vmov.f32	s0, s15
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <CurrentController_init>:

#include "current_controller.h"

void CurrentController_init(CurrentController *controller) {
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  controller->current_filter_alpha = 0.5;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80019b4:	601a      	str	r2, [r3, #0]

  controller->i_q_kp = 1.;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019bc:	605a      	str	r2, [r3, #4]
  controller->i_q_ki = 0.; // 0.01
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	609a      	str	r2, [r3, #8]

  controller->i_d_kp = 1.;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80019cc:	60da      	str	r2, [r3, #12]
  controller->i_d_ki = 0.;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f04f 0200 	mov.w	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
}
 80019d6:	bf00      	nop
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	0000      	movs	r0, r0
 80019e4:	0000      	movs	r0, r0
	...

080019e8 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 80019e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80019ec:	b08c      	sub	sp, #48	; 0x30
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6178      	str	r0, [r7, #20]
 80019f2:	460b      	mov	r3, r1
 80019f4:	ed87 0a03 	vstr	s0, [r7, #12]
 80019f8:	edc7 0a02 	vstr	s1, [r7, #8]
 80019fc:	ed87 1a01 	vstr	s2, [r7, #4]
 8001a00:	74fb      	strb	r3, [r7, #19]
  //  current_error = command_current - feedback_current
  //  current_integrator = limit(current_integrator + ki * current_error, ilimit)
  //  voltage = current_integrator + kp * current_error

  FOC_clarkTransform(
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	f103 0220 	add.w	r2, r3, #32
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	ed93 7a06 	vldr	s14, [r3, #24]
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a20:	eeb0 1a66 	vmov.f32	s2, s13
 8001a24:	eef0 0a47 	vmov.f32	s1, s14
 8001a28:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2c:	4610      	mov	r0, r2
 8001a2e:	f000 fb1f 	bl	8002070 <FOC_clarkTransform>
    controller->i_c_measured);

  float i_q;
  float i_d;

  FOC_parkTransform(
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a3e:	f107 021c 	add.w	r2, r7, #28
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	edd7 1a02 	vldr	s3, [r7, #8]
 8001a4a:	ed97 1a03 	vldr	s2, [r7, #12]
 8001a4e:	eef0 0a47 	vmov.f32	s1, s14
 8001a52:	eeb0 0a67 	vmov.f32	s0, s15
 8001a56:	4611      	mov	r1, r2
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f000 fb6d 	bl	8002138 <FOC_parkTransform>
    controller->i_alpha_measured,
    controller->i_beta_measured,
    sin_theta, cos_theta);

  controller->i_q_measured = (
      controller->current_filter_alpha * i_q
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	ed93 7a00 	vldr	s14, [r3]
 8001a64:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6c:	ee17 0a90 	vmov	r0, s15
 8001a70:	f7fe fd92 	bl	8000598 <__aeabi_f2d>
 8001a74:	4604      	mov	r4, r0
 8001a76:	460d      	mov	r5, r1
      + (1.-controller->current_filter_alpha) * controller->i_q_measured
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd8b 	bl	8000598 <__aeabi_f2d>
 8001a82:	4602      	mov	r2, r0
 8001a84:	460b      	mov	r3, r1
 8001a86:	f04f 0000 	mov.w	r0, #0
 8001a8a:	49bd      	ldr	r1, [pc, #756]	; (8001d80 <CurrentController_update+0x398>)
 8001a8c:	f7fe fc24 	bl	80002d8 <__aeabi_dsub>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4690      	mov	r8, r2
 8001a96:	4699      	mov	r9, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7fe fd7b 	bl	8000598 <__aeabi_f2d>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4640      	mov	r0, r8
 8001aa8:	4649      	mov	r1, r9
 8001aaa:	f7fe fdcd 	bl	8000648 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fc11 	bl	80002dc <__adddf3>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f7ff f899 	bl	8000bf8 <__aeabi_d2f>
 8001ac6:	4602      	mov	r2, r0
  controller->i_q_measured = (
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
      );

  controller->i_d_measured = (
      controller->current_filter_alpha * i_d
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ada:	ee17 0a90 	vmov	r0, s15
 8001ade:	f7fe fd5b 	bl	8000598 <__aeabi_f2d>
 8001ae2:	4604      	mov	r4, r0
 8001ae4:	460d      	mov	r5, r1
      + (1.-controller->current_filter_alpha) * controller->i_d_measured
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7fe fd54 	bl	8000598 <__aeabi_f2d>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f04f 0000 	mov.w	r0, #0
 8001af8:	49a1      	ldr	r1, [pc, #644]	; (8001d80 <CurrentController_update+0x398>)
 8001afa:	f7fe fbed 	bl	80002d8 <__aeabi_dsub>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4690      	mov	r8, r2
 8001b04:	4699      	mov	r9, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd44 	bl	8000598 <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4640      	mov	r0, r8
 8001b16:	4649      	mov	r1, r9
 8001b18:	f7fe fd96 	bl	8000648 <__aeabi_dmul>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4620      	mov	r0, r4
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7fe fbda 	bl	80002dc <__adddf3>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	f7ff f862 	bl	8000bf8 <__aeabi_d2f>
 8001b34:	4602      	mov	r2, r0
  controller->i_d_measured = (
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	62da      	str	r2, [r3, #44]	; 0x2c
      );


  if (mode != MODE_OPEN_IDQ) {
 8001b3a:	7cfb      	ldrb	r3, [r7, #19]
 8001b3c:	2b25      	cmp	r3, #37	; 0x25
 8001b3e:	d016      	beq.n	8001b6e <CurrentController_update+0x186>
    controller->i_q_setpoint = controller->i_q_target - controller->i_q_measured;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    controller->i_d_setpoint = controller->i_d_target - controller->i_d_measured;
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8001b6c:	e007      	b.n	8001b7e <CurrentController_update+0x196>
  }
  else {
    controller->i_q_setpoint = controller->i_q_target;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_setpoint = controller->i_d_target;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (mode != MODE_OPEN_VDQ) {
 8001b7e:	7cfb      	ldrb	r3, [r7, #19]
 8001b80:	2b22      	cmp	r3, #34	; 0x22
 8001b82:	d054      	beq.n	8001c2e <CurrentController_update+0x246>
    controller->i_q_intergrator = clampf(
        controller->i_q_intergrator + controller->i_q_ki * controller->i_q_setpoint, -1, 1);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b96:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_q_intergrator = clampf(
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001ba2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	f7ff fed3 	bl	8001954 <clampf>
 8001bae:	eef0 7a40 	vmov.f32	s15, s0
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    controller->i_d_intergrator = clampf(
        controller->i_d_intergrator + controller->i_d_ki * controller->i_d_setpoint, -1, 1);
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	edd3 6a04 	vldr	s13, [r3, #16]
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_d_intergrator = clampf(
 8001bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001bd6:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001bda:	eeb0 0a67 	vmov.f32	s0, s15
 8001bde:	f7ff feb9 	bl	8001954 <clampf>
 8001be2:	eef0 7a40 	vmov.f32	s15, s0
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

    controller->v_q_setpoint =
        controller->i_q_kp * controller->i_q_setpoint + controller->i_q_intergrator;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001bf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_q_setpoint =
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
    controller->v_d_setpoint =
        controller->i_d_kp * controller->i_d_setpoint + controller->i_d_intergrator;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8001c18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001c22:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_d_setpoint =
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
 8001c2c:	e007      	b.n	8001c3e <CurrentController_update+0x256>
  }
  else {
    controller->v_q_setpoint = controller->v_q_target;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	651a      	str	r2, [r3, #80]	; 0x50
    controller->v_d_setpoint = controller->v_d_target;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  // clamp voltage
  if (v_bus > 0) {
 8001c3e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4a:	dd53      	ble.n	8001cf4 <CurrentController_update+0x30c>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15;
 8001c4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c54:	ee17 0a90 	vmov	r0, s15
 8001c58:	f7fe fc9e 	bl	8000598 <__aeabi_f2d>
 8001c5c:	a346      	add	r3, pc, #280	; (adr r3, 8001d78 <CurrentController_update+0x390>)
 8001c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c62:	f7fe fcf1 	bl	8000648 <__aeabi_dmul>
 8001c66:	4602      	mov	r2, r0
 8001c68:	460b      	mov	r3, r1
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f7fe ffc3 	bl	8000bf8 <__aeabi_d2f>
 8001c72:	4603      	mov	r3, r0
 8001c74:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_norm = (
        (controller->v_q_setpoint * controller->v_q_setpoint)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001c82:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (controller->v_d_setpoint * controller->v_d_setpoint)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001c92:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float v_norm = (
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        );
    if (v_norm > v_max_sq) {
 8001c9e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001ca2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	dd21      	ble.n	8001cf4 <CurrentController_update+0x30c>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 8001cb0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8001cb4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001cb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cbc:	eef0 7ae7 	vabs.f32	s15, s15
 8001cc0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc4:	f00e fbc4 	bl	8010450 <sqrtf>
 8001cc8:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      controller->v_q_setpoint *= k;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8001cd2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
      controller->v_d_setpoint *= k;
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001ce6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
    }
  }

  if (mode != MODE_OPEN_VALPHABETA && mode != MODE_CALIBRATION) {
 8001cf4:	7cfb      	ldrb	r3, [r7, #19]
 8001cf6:	2b23      	cmp	r3, #35	; 0x23
 8001cf8:	d01a      	beq.n	8001d30 <CurrentController_update+0x348>
 8001cfa:	7cfb      	ldrb	r3, [r7, #19]
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d017      	beq.n	8001d30 <CurrentController_update+0x348>
    FOC_invParkTransform(
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001d18:	edd7 1a02 	vldr	s3, [r7, #8]
 8001d1c:	ed97 1a03 	vldr	s2, [r7, #12]
 8001d20:	eef0 0a47 	vmov.f32	s1, s14
 8001d24:	eeb0 0a67 	vmov.f32	s0, s15
 8001d28:	4610      	mov	r0, r2
 8001d2a:	f000 fa3a 	bl	80021a2 <FOC_invParkTransform>
 8001d2e:	e007      	b.n	8001d40 <CurrentController_update+0x358>
      controller->v_q_setpoint,
      controller->v_d_setpoint,
      sin_theta, cos_theta);
  }
  else {
    controller->v_alpha_setpoint = controller->v_alpha_target;
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	661a      	str	r2, [r3, #96]	; 0x60
    controller->v_beta_setpoint = controller->v_beta_target;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	665a      	str	r2, [r3, #100]	; 0x64
  }

  if (mode != MODE_OPEN_VABC) {
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	2b24      	cmp	r3, #36	; 0x24
 8001d44:	d01e      	beq.n	8001d84 <CurrentController_update+0x39c>
    FOC_invClarkSVPWM(
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f103 0074 	add.w	r0, r3, #116	; 0x74
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001d64:	eef0 0a47 	vmov.f32	s1, s14
 8001d68:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6c:	f000 fa50 	bl	8002210 <FOC_invClarkSVPWM>
  else {
    controller->v_a_setpoint = controller->v_a_target;
    controller->v_b_setpoint = controller->v_b_target;
    controller->v_c_setpoint = controller->v_c_target;
  }
}
 8001d70:	e014      	b.n	8001d9c <CurrentController_update+0x3b4>
 8001d72:	bf00      	nop
 8001d74:	f3af 8000 	nop.w
 8001d78:	66666666 	.word	0x66666666
 8001d7c:	3ff26666 	.word	0x3ff26666
 8001d80:	3ff00000 	.word	0x3ff00000
    controller->v_a_setpoint = controller->v_a_target;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	675a      	str	r2, [r3, #116]	; 0x74
    controller->v_b_setpoint = controller->v_b_target;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	679a      	str	r2, [r3, #120]	; 0x78
    controller->v_c_setpoint = controller->v_c_target;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8001d9c:	bf00      	nop
 8001d9e:	3730      	adds	r7, #48	; 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001da6:	bf00      	nop

08001da8 <Encoder_init>:


#include "encoder.h"


void Encoder_init(Encoder *encoder, I2C_HandleTypeDef *hi2c, TIM_HandleTypeDef *htim) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  encoder->hi2c = hi2c;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	601a      	str	r2, [r3, #0]
  encoder->htim = htim;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	605a      	str	r2, [r3, #4]
  encoder->cpr = 4096;  // 12 bit precision
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001dc6:	60da      	str	r2, [r3, #12]

  encoder->direction = -1;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	22ff      	movs	r2, #255	; 0xff
 8001dcc:	729a      	strb	r2, [r3, #10]
  encoder->velocity_filter_alpha = 0.02;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4a0c      	ldr	r2, [pc, #48]	; (8001e04 <Encoder_init+0x5c>)
 8001dd2:	615a      	str	r2, [r3, #20]
  encoder->position_offset = 0;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]

  encoder->n_rotations = 0;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]

  HAL_I2C_Mem_Read_IT(encoder->hi2c, 0b0110110<<1, 0x0E, I2C_MEMADD_SIZE_8BIT, encoder->i2c_buffer, 2);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6818      	ldr	r0, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3308      	adds	r3, #8
 8001dea:	2202      	movs	r2, #2
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	9300      	str	r3, [sp, #0]
 8001df0:	2301      	movs	r3, #1
 8001df2:	220e      	movs	r2, #14
 8001df4:	216c      	movs	r1, #108	; 0x6c
 8001df6:	f006 f973 	bl	80080e0 <HAL_I2C_Mem_Read_IT>
}
 8001dfa:	bf00      	nop
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	3ca3d70a 	.word	0x3ca3d70a

08001e08 <Encoder_triggerUpdate>:

void Encoder_setOffset(Encoder *encoder, float offset) {
  encoder->position_offset = offset;
}

void Encoder_triggerUpdate(Encoder *encoder) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  HAL_I2C_Master_Receive_IT(encoder->hi2c, 0b0110110<<1, encoder->i2c_buffer, 2);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6818      	ldr	r0, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f103 0208 	add.w	r2, r3, #8
 8001e24:	2302      	movs	r3, #2
 8001e26:	216c      	movs	r1, #108	; 0x6c
 8001e28:	f006 f8ea 	bl	8008000 <HAL_I2C_Master_Receive_IT>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	0000      	movs	r0, r0
	...

08001e38 <Encoder_update>:

void Encoder_update(Encoder *encoder) {
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  float dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 100000.;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e50:	ee17 0a90 	vmov	r0, s15
 8001e54:	f7fe fba0 	bl	8000598 <__aeabi_f2d>
 8001e58:	a365      	add	r3, pc, #404	; (adr r3, 8001ff0 <Encoder_update+0x1b8>)
 8001e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5e:	f7fe fd1d 	bl	800089c <__aeabi_ddiv>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fec5 	bl	8000bf8 <__aeabi_d2f>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]
//
//  float dt = 1/4000.;

  uint16_t reading = ((uint16_t)encoder->i2c_buffer[0] << 8) | encoder->i2c_buffer[1];
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	7a5b      	ldrb	r3, [r3, #9]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b21b      	sxth	r3, r3
 8001e84:	81fb      	strh	r3, [r7, #14]
  float position_relative = encoder->direction * ((float)reading / (float)encoder->cpr) * (2*M_PI);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e94:	89fb      	ldrh	r3, [r7, #14]
 8001e96:	ee07 3a90 	vmov	s15, r3
 8001e9a:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eaa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eb2:	ee17 0a90 	vmov	r0, s15
 8001eb6:	f7fe fb6f 	bl	8000598 <__aeabi_f2d>
 8001eba:	a34f      	add	r3, pc, #316	; (adr r3, 8001ff8 <Encoder_update+0x1c0>)
 8001ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec0:	f7fe fbc2 	bl	8000648 <__aeabi_dmul>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe fe94 	bl	8000bf8 <__aeabi_d2f>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60bb      	str	r3, [r7, #8]

  float delta_position = position_relative - encoder->position_relative;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	edd3 7a07 	vldr	s15, [r3, #28]
 8001eda:	ed97 7a02 	vldr	s14, [r7, #8]
 8001ede:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ee2:	edc7 7a05 	vstr	s15, [r7, #20]

  if (fabsf(delta_position) > 0.75 * (2*M_PI)) {
 8001ee6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eea:	eef0 7ae7 	vabs.f32	s15, s15
 8001eee:	ee17 0a90 	vmov	r0, s15
 8001ef2:	f7fe fb51 	bl	8000598 <__aeabi_f2d>
 8001ef6:	a342      	add	r3, pc, #264	; (adr r3, 8002000 <Encoder_update+0x1c8>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fe34 	bl	8000b68 <__aeabi_dcmpgt>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d02c      	beq.n	8001f60 <Encoder_update+0x128>
    encoder->n_rotations += (delta_position > 0) ? -1 : 1;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f16:	dd02      	ble.n	8001f1e <Encoder_update+0xe6>
 8001f18:	f04f 32ff 	mov.w	r2, #4294967295
 8001f1c:	e000      	b.n	8001f20 <Encoder_update+0xe8>
 8001f1e:	2201      	movs	r2, #1
 8001f20:	441a      	add	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]

    // unwrap delta pos to correct value for velocity calculation
    delta_position += (delta_position > 0) ? -2*M_PI : 2*M_PI;
 8001f26:	6978      	ldr	r0, [r7, #20]
 8001f28:	f7fe fb36 	bl	8000598 <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f3c:	dd03      	ble.n	8001f46 <Encoder_update+0x10e>
 8001f3e:	a132      	add	r1, pc, #200	; (adr r1, 8002008 <Encoder_update+0x1d0>)
 8001f40:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f44:	e002      	b.n	8001f4c <Encoder_update+0x114>
 8001f46:	a12c      	add	r1, pc, #176	; (adr r1, 8001ff8 <Encoder_update+0x1c0>)
 8001f48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f4c:	f7fe f9c6 	bl	80002dc <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe4e 	bl	8000bf8 <__aeabi_d2f>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	617b      	str	r3, [r7, #20]
  }

  encoder->position_relative = position_relative;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	61da      	str	r2, [r3, #28]
  encoder->position_raw = encoder->position_relative + (encoder->n_rotations * (2*M_PI));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fb14 	bl	8000598 <__aeabi_f2d>
 8001f70:	4604      	mov	r4, r0
 8001f72:	460d      	mov	r5, r1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fafb 	bl	8000574 <__aeabi_i2d>
 8001f7e:	a31e      	add	r3, pc, #120	; (adr r3, 8001ff8 <Encoder_update+0x1c0>)
 8001f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f84:	f7fe fb60 	bl	8000648 <__aeabi_dmul>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	4629      	mov	r1, r5
 8001f90:	f7fe f9a4 	bl	80002dc <__adddf3>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f7fe fe2c 	bl	8000bf8 <__aeabi_d2f>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	621a      	str	r2, [r3, #32]
  encoder->position = encoder->position_raw;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24
  encoder->velocity = (encoder->velocity_filter_alpha * delta_position / dt) + ((1 - encoder->velocity_filter_alpha) * encoder->velocity);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	ed93 7a05 	vldr	s14, [r3, #20]
 8001fb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001fb8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001fbc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	edd3 7a05 	vldr	s15, [r3, #20]
 8001fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bdb0      	pop	{r4, r5, r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	00000000 	.word	0x00000000
 8001ff4:	40f86a00 	.word	0x40f86a00
 8001ff8:	54442d18 	.word	0x54442d18
 8001ffc:	401921fb 	.word	0x401921fb
 8002000:	7f3321d2 	.word	0x7f3321d2
 8002004:	4012d97c 	.word	0x4012d97c
 8002008:	54442d18 	.word	0x54442d18
 800200c:	c01921fb 	.word	0xc01921fb

08002010 <Encoder_getRelativePosition>:

float Encoder_getRelativePosition(Encoder *encoder) {
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  return encoder->position_relative;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	ee07 3a90 	vmov	s15, r3
}
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <Encoder_getPosition>:

float Encoder_getRawPosition(Encoder *encoder) {
  return encoder->position_raw;
}

float Encoder_getPosition(Encoder *encoder) {
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  return encoder->position;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	ee07 3a90 	vmov	s15, r3
//  float dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 1000000.;
//  return encoder->position + encoder->velocity * dt;
}
 800203e:	eeb0 0a67 	vmov.f32	s0, s15
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <Encoder_getVelocity>:

float Encoder_getVelocity(Encoder *encoder) {
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  return encoder->velocity;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	ee07 3a90 	vmov	s15, r3
}
 800205c:	eeb0 0a67 	vmov.f32	s0, s15
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
 800206a:	0000      	movs	r0, r0
 800206c:	0000      	movs	r0, r0
	...

08002070 <FOC_clarkTransform>:
 *      Author: TK
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
 8002070:	b5b0      	push	{r4, r5, r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6178      	str	r0, [r7, #20]
 8002078:	6139      	str	r1, [r7, #16]
 800207a:	ed87 0a03 	vstr	s0, [r7, #12]
 800207e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002082:	ed87 1a01 	vstr	s2, [r7, #4]
//  float i_beta_raw  = sinf((2./3.) * M_PI) * i_b + sinf((4./3.) * M_PI) * i_c;
//
//  *i_alpha = i_alpha_raw * (2.f/3.f);
//  *i_beta  = i_beta_raw * (2.f/3.f);

  *i_alpha = (1. / 3.) * (2. * i_a - i_b - i_c);
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7fe fa86 	bl	8000598 <__aeabi_f2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	f7fe f924 	bl	80002dc <__adddf3>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4614      	mov	r4, r2
 800209a:	461d      	mov	r5, r3
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f7fe fa7b 	bl	8000598 <__aeabi_f2d>
 80020a2:	4602      	mov	r2, r0
 80020a4:	460b      	mov	r3, r1
 80020a6:	4620      	mov	r0, r4
 80020a8:	4629      	mov	r1, r5
 80020aa:	f7fe f915 	bl	80002d8 <__aeabi_dsub>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4614      	mov	r4, r2
 80020b4:	461d      	mov	r5, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4620      	mov	r0, r4
 80020c2:	4629      	mov	r1, r5
 80020c4:	f7fe f908 	bl	80002d8 <__aeabi_dsub>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	a315      	add	r3, pc, #84	; (adr r3, 8002128 <FOC_clarkTransform+0xb8>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fab7 	bl	8000648 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4610      	mov	r0, r2
 80020e0:	4619      	mov	r1, r3
 80020e2:	f7fe fd89 	bl	8000bf8 <__aeabi_d2f>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	601a      	str	r2, [r3, #0]
  *i_beta = (1. / sqrtf(3.)) * (i_b - i_c);
 80020ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80020f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f8:	ee17 0a90 	vmov	r0, s15
 80020fc:	f7fe fa4c 	bl	8000598 <__aeabi_f2d>
 8002100:	a30b      	add	r3, pc, #44	; (adr r3, 8002130 <FOC_clarkTransform+0xc0>)
 8002102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002106:	f7fe fa9f 	bl	8000648 <__aeabi_dmul>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fd71 	bl	8000bf8 <__aeabi_d2f>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bdb0      	pop	{r4, r5, r7, pc}
 8002124:	f3af 8000 	nop.w
 8002128:	55555555 	.word	0x55555555
 800212c:	3fd55555 	.word	0x3fd55555
 8002130:	4b20663a 	.word	0x4b20663a
 8002134:	3fe279a7 	.word	0x3fe279a7

08002138 <FOC_parkTransform>:


void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
 8002138:	b480      	push	{r7}
 800213a:	b087      	sub	sp, #28
 800213c:	af00      	add	r7, sp, #0
 800213e:	6178      	str	r0, [r7, #20]
 8002140:	6139      	str	r1, [r7, #16]
 8002142:	ed87 0a03 	vstr	s0, [r7, #12]
 8002146:	edc7 0a02 	vstr	s1, [r7, #8]
 800214a:	ed87 1a01 	vstr	s2, [r7, #4]
 800214e:	edc7 1a00 	vstr	s3, [r7]
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8002152:	ed97 7a00 	vldr	s14, [r7]
 8002156:	edd7 7a02 	vldr	s15, [r7, #8]
 800215a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800215e:	edd7 6a01 	vldr	s13, [r7, #4]
 8002162:	edd7 7a03 	vldr	s15, [r7, #12]
 8002166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800216a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	edc3 7a00 	vstr	s15, [r3]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8002174:	ed97 7a00 	vldr	s14, [r7]
 8002178:	edd7 7a03 	vldr	s15, [r7, #12]
 800217c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002180:	edd7 6a01 	vldr	s13, [r7, #4]
 8002184:	edd7 7a02 	vldr	s15, [r7, #8]
 8002188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800218c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	edc3 7a00 	vstr	s15, [r3]

}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <FOC_invParkTransform>:

void FOC_invParkTransform(float *v_alpha, float *v_beta, float v_q, float v_d, float sin_theta, float cos_theta) {
 80021a2:	b480      	push	{r7}
 80021a4:	b087      	sub	sp, #28
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6178      	str	r0, [r7, #20]
 80021aa:	6139      	str	r1, [r7, #16]
 80021ac:	ed87 0a03 	vstr	s0, [r7, #12]
 80021b0:	edc7 0a02 	vstr	s1, [r7, #8]
 80021b4:	ed87 1a01 	vstr	s2, [r7, #4]
 80021b8:	edc7 1a00 	vstr	s3, [r7]
  *v_alpha  = -sin_theta * v_q + cos_theta * v_d;
 80021bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80021c0:	eeb1 7a67 	vneg.f32	s14, s15
 80021c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80021c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021cc:	edd7 6a00 	vldr	s13, [r7]
 80021d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	edc3 7a00 	vstr	s15, [r3]
  *v_beta   =  cos_theta * v_q + sin_theta * v_d;
 80021e2:	ed97 7a00 	vldr	s14, [r7]
 80021e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80021ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021ee:	edd7 6a01 	vldr	s13, [r7, #4]
 80021f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	edc3 7a00 	vstr	s15, [r3]
}
 8002204:	bf00      	nop
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <FOC_invClarkSVPWM>:


void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
 8002210:	b580      	push	{r7, lr}
 8002212:	ed2d 8b02 	vpush	{d8}
 8002216:	b08a      	sub	sp, #40	; 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6178      	str	r0, [r7, #20]
 800221c:	6139      	str	r1, [r7, #16]
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	ed87 0a02 	vstr	s0, [r7, #8]
 8002224:	edc7 0a01 	vstr	s1, [r7, #4]
  float v_a_phase = v_alpha;
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 800222c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002230:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002234:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002238:	edd7 7a01 	vldr	s15, [r7, #4]
 800223c:	eddf 6a30 	vldr	s13, [pc, #192]	; 8002300 <FOC_invClarkSVPWM+0xf0>
 8002240:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002244:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002248:	edc7 7a08 	vstr	s15, [r7, #32]
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 800224c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002250:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8002254:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002258:	edd7 7a01 	vldr	s15, [r7, #4]
 800225c:	eddf 6a28 	vldr	s13, [pc, #160]	; 8002300 <FOC_invClarkSVPWM+0xf0>
 8002260:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002268:	edc7 7a07 	vstr	s15, [r7, #28]

  float v_neutral = .5f * (fmaxf(fmaxf(v_a_phase, v_b_phase), v_c_phase) + fminf(fminf(v_a_phase, v_b_phase), v_c_phase));
 800226c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002270:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002274:	f00e f834 	bl	80102e0 <fmaxf>
 8002278:	eef0 7a40 	vmov.f32	s15, s0
 800227c:	edd7 0a07 	vldr	s1, [r7, #28]
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	f00e f82c 	bl	80102e0 <fmaxf>
 8002288:	eeb0 8a40 	vmov.f32	s16, s0
 800228c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002290:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002294:	f00e f83f 	bl	8010316 <fminf>
 8002298:	eef0 7a40 	vmov.f32	s15, s0
 800229c:	edd7 0a07 	vldr	s1, [r7, #28]
 80022a0:	eeb0 0a67 	vmov.f32	s0, s15
 80022a4:	f00e f837 	bl	8010316 <fminf>
 80022a8:	eef0 7a40 	vmov.f32	s15, s0
 80022ac:	ee78 7a27 	vadd.f32	s15, s16, s15
 80022b0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80022b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022b8:	edc7 7a06 	vstr	s15, [r7, #24]

  *v_a = v_a_phase - v_neutral;
 80022bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80022c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80022c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	edc3 7a00 	vstr	s15, [r3]
  *v_b = v_b_phase - v_neutral;
 80022ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80022d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80022d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	edc3 7a00 	vstr	s15, [r3]
  *v_c = v_c_phase - v_neutral;
 80022e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80022e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80022e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	edc3 7a00 	vstr	s15, [r3]
}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	; 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	ecbd 8b02 	vpop	{d8}
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	3f5db3d7 	.word	0x3f5db3d7

08002304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002308:	f002 fed7 	bl	80050ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800230c:	f000 f81f 	bl	800234e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002310:	f000 fc9a 	bl	8002c48 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002314:	f000 f866 	bl	80023e4 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8002318:	f000 f98e 	bl	8002638 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 800231c:	f000 f9d2 	bl	80026c4 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8002320:	f000 fa10 	bl	8002744 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8002324:	f000 fa3c 	bl	80027a0 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8002328:	f000 fa68 	bl	80027fc <MX_OPAMP3_Init>
  MX_TIM1_Init();
 800232c:	f000 fa94 	bl	8002858 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8002330:	f000 fc3e 	bl	8002bb0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8002334:	f000 f8fc 	bl	8002530 <MX_ADC2_Init>
  MX_TIM4_Init();
 8002338:	f000 fbb4 	bl	8002aa4 <MX_TIM4_Init>
  MX_TIM2_Init();
 800233c:	f000 fb64 	bl	8002a08 <MX_TIM2_Init>
  MX_TIM6_Init();
 8002340:	f000 fbfe 	bl	8002b40 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8002344:	f7ff f99c 	bl	8001680 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8002348:	f7ff f9fc 	bl	8001744 <APP_main>
 800234c:	e7fc      	b.n	8002348 <main+0x44>

0800234e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b094      	sub	sp, #80	; 0x50
 8002352:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002354:	f107 0318 	add.w	r3, r7, #24
 8002358:	2238      	movs	r2, #56	; 0x38
 800235a:	2100      	movs	r1, #0
 800235c:	4618      	mov	r0, r3
 800235e:	f00b f891 	bl	800d484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002362:	1d3b      	adds	r3, r7, #4
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
 800236e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002370:	2000      	movs	r0, #0
 8002372:	f007 fc93 	bl	8009c9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002376:	2302      	movs	r3, #2
 8002378:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800237a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800237e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002380:	2340      	movs	r3, #64	; 0x40
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002384:	2302      	movs	r3, #2
 8002386:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002388:	2302      	movs	r3, #2
 800238a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800238c:	2301      	movs	r3, #1
 800238e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8002390:	2314      	movs	r3, #20
 8002392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002394:	2302      	movs	r3, #2
 8002396:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002398:	2302      	movs	r3, #2
 800239a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800239c:	2302      	movs	r3, #2
 800239e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a0:	f107 0318 	add.w	r3, r7, #24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f007 fd1d 	bl	8009de4 <HAL_RCC_OscConfig>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80023b0:	f000 fcc4 	bl	8002d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023b4:	230f      	movs	r3, #15
 80023b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023b8:	2303      	movs	r3, #3
 80023ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023c0:	2300      	movs	r3, #0
 80023c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80023c8:	1d3b      	adds	r3, r7, #4
 80023ca:	2104      	movs	r1, #4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f008 f821 	bl	800a414 <HAL_RCC_ClockConfig>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80023d8:	f000 fcb0 	bl	8002d3c <Error_Handler>
  }
}
 80023dc:	bf00      	nop
 80023de:	3750      	adds	r7, #80	; 0x50
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b092      	sub	sp, #72	; 0x48
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80023ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80023f6:	463b      	mov	r3, r7
 80023f8:	223c      	movs	r2, #60	; 0x3c
 80023fa:	2100      	movs	r1, #0
 80023fc:	4618      	mov	r0, r3
 80023fe:	f00b f841 	bl	800d484 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002404:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002408:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <MX_ADC1_Init+0x13c>)
 800240c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002410:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002412:	4b43      	ldr	r3, [pc, #268]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <MX_ADC1_Init+0x13c>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002420:	2200      	movs	r2, #0
 8002422:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002424:	4b3e      	ldr	r3, [pc, #248]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002426:	2201      	movs	r2, #1
 8002428:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <MX_ADC1_Init+0x13c>)
 800242c:	2208      	movs	r2, #8
 800242e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002432:	2200      	movs	r2, #0
 8002434:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002436:	4b3a      	ldr	r3, [pc, #232]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002438:	2200      	movs	r2, #0
 800243a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800243c:	4b38      	ldr	r3, [pc, #224]	; (8002520 <MX_ADC1_Init+0x13c>)
 800243e:	2201      	movs	r2, #1
 8002440:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002442:	4b37      	ldr	r3, [pc, #220]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800244a:	4b35      	ldr	r3, [pc, #212]	; (8002520 <MX_ADC1_Init+0x13c>)
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002452:	4b33      	ldr	r3, [pc, #204]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002454:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002458:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800245a:	4b31      	ldr	r3, [pc, #196]	; (8002520 <MX_ADC1_Init+0x13c>)
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002462:	482f      	ldr	r0, [pc, #188]	; (8002520 <MX_ADC1_Init+0x13c>)
 8002464:	f002 ff6a 	bl	800533c <HAL_ADC_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800246e:	f000 fc65 	bl	8002d3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002472:	2300      	movs	r3, #0
 8002474:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002476:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247a:	4619      	mov	r1, r3
 800247c:	4828      	ldr	r0, [pc, #160]	; (8002520 <MX_ADC1_Init+0x13c>)
 800247e:	f004 f88f 	bl	80065a0 <HAL_ADCEx_MultiModeConfigChannel>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002488:	f000 fc58 	bl	8002d3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <MX_ADC1_Init+0x140>)
 800248e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002490:	2309      	movs	r3, #9
 8002492:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002494:	2300      	movs	r3, #0
 8002496:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002498:	237f      	movs	r3, #127	; 0x7f
 800249a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800249c:	2304      	movs	r3, #4
 800249e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 80024a4:	2303      	movs	r3, #3
 80024a6:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80024a8:	2300      	movs	r3, #0
 80024aa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80024b4:	2300      	movs	r3, #0
 80024b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80024c8:	463b      	mov	r3, r7
 80024ca:	4619      	mov	r1, r3
 80024cc:	4814      	ldr	r0, [pc, #80]	; (8002520 <MX_ADC1_Init+0x13c>)
 80024ce:	f003 fb87 	bl	8005be0 <HAL_ADCEx_InjectedConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80024d8:	f000 fc30 	bl	8002d3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80024dc:	4b12      	ldr	r3, [pc, #72]	; (8002528 <MX_ADC1_Init+0x144>)
 80024de:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80024e0:	f240 130f 	movw	r3, #271	; 0x10f
 80024e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80024e6:	463b      	mov	r3, r7
 80024e8:	4619      	mov	r1, r3
 80024ea:	480d      	ldr	r0, [pc, #52]	; (8002520 <MX_ADC1_Init+0x13c>)
 80024ec:	f003 fb78 	bl	8005be0 <HAL_ADCEx_InjectedConfigChannel>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80024f6:	f000 fc21 	bl	8002d3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 80024fa:	4b0c      	ldr	r3, [pc, #48]	; (800252c <MX_ADC1_Init+0x148>)
 80024fc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80024fe:	f240 2315 	movw	r3, #533	; 0x215
 8002502:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002504:	463b      	mov	r3, r7
 8002506:	4619      	mov	r1, r3
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <MX_ADC1_Init+0x13c>)
 800250a:	f003 fb69 	bl	8005be0 <HAL_ADCEx_InjectedConfigChannel>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8002514:	f000 fc12 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002518:	bf00      	nop
 800251a:	3748      	adds	r7, #72	; 0x48
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000368 	.word	0x20000368
 8002524:	b6902000 	.word	0xb6902000
 8002528:	04300002 	.word	0x04300002
 800252c:	2e300800 	.word	0x2e300800

08002530 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b090      	sub	sp, #64	; 0x40
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002536:	1d3b      	adds	r3, r7, #4
 8002538:	223c      	movs	r2, #60	; 0x3c
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f00a ffa1 	bl	800d484 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002542:	4b39      	ldr	r3, [pc, #228]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002544:	4a39      	ldr	r2, [pc, #228]	; (800262c <MX_ADC2_Init+0xfc>)
 8002546:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002548:	4b37      	ldr	r3, [pc, #220]	; (8002628 <MX_ADC2_Init+0xf8>)
 800254a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800254e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002550:	4b35      	ldr	r3, [pc, #212]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002556:	4b34      	ldr	r3, [pc, #208]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002558:	2200      	movs	r2, #0
 800255a:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800255c:	4b32      	ldr	r3, [pc, #200]	; (8002628 <MX_ADC2_Init+0xf8>)
 800255e:	2200      	movs	r2, #0
 8002560:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002562:	4b31      	ldr	r3, [pc, #196]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002564:	2201      	movs	r2, #1
 8002566:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002568:	4b2f      	ldr	r3, [pc, #188]	; (8002628 <MX_ADC2_Init+0xf8>)
 800256a:	2208      	movs	r2, #8
 800256c:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800256e:	4b2e      	ldr	r3, [pc, #184]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002570:	2200      	movs	r2, #0
 8002572:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8002574:	4b2c      	ldr	r3, [pc, #176]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002576:	2200      	movs	r2, #0
 8002578:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800257a:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <MX_ADC2_Init+0xf8>)
 800257c:	2201      	movs	r2, #1
 800257e:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002582:	2200      	movs	r2, #0
 8002584:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002588:	4b27      	ldr	r3, [pc, #156]	; (8002628 <MX_ADC2_Init+0xf8>)
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002590:	4b25      	ldr	r3, [pc, #148]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002592:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <MX_ADC2_Init+0xf8>)
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80025a0:	4821      	ldr	r0, [pc, #132]	; (8002628 <MX_ADC2_Init+0xf8>)
 80025a2:	f002 fecb 	bl	800533c <HAL_ADC_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80025ac:	f000 fbc6 	bl	8002d3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP2;
 80025b0:	4b1f      	ldr	r3, [pc, #124]	; (8002630 <MX_ADC2_Init+0x100>)
 80025b2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80025b4:	2309      	movs	r3, #9
 80025b6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80025bc:	237f      	movs	r3, #127	; 0x7f
 80025be:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80025c0:	2304      	movs	r3, #4
 80025c2:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 80025c8:	2302      	movs	r3, #2
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80025ec:	1d3b      	adds	r3, r7, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <MX_ADC2_Init+0xf8>)
 80025f2:	f003 faf5 	bl	8005be0 <HAL_ADCEx_InjectedConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80025fc:	f000 fb9e 	bl	8002d3c <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_ADC2_Init+0x104>)
 8002602:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002604:	f240 130f 	movw	r3, #271	; 0x10f
 8002608:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800260a:	1d3b      	adds	r3, r7, #4
 800260c:	4619      	mov	r1, r3
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <MX_ADC2_Init+0xf8>)
 8002610:	f003 fae6 	bl	8005be0 <HAL_ADCEx_InjectedConfigChannel>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800261a:	f000 fb8f 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	3740      	adds	r7, #64	; 0x40
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	200003d4 	.word	0x200003d4
 800262c:	50000100 	.word	0x50000100
 8002630:	c3290000 	.word	0xc3290000
 8002634:	cb8c0000 	.word	0xcb8c0000

08002638 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800263e:	4a20      	ldr	r2, [pc, #128]	; (80026c0 <MX_FDCAN1_Init+0x88>)
 8002640:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002644:	2200      	movs	r2, #0
 8002646:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800264a:	2200      	movs	r2, #0
 800264c:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800264e:	4b1b      	ldr	r3, [pc, #108]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002650:	2200      	movs	r2, #0
 8002652:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002656:	2200      	movs	r2, #0
 8002658:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800265a:	4b18      	ldr	r3, [pc, #96]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800265c:	2200      	movs	r2, #0
 800265e:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002660:	4b16      	ldr	r3, [pc, #88]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002662:	2200      	movs	r2, #0
 8002664:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002668:	2210      	movs	r2, #16
 800266a:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800266e:	2201      	movs	r2, #1
 8002670:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 8002672:	4b12      	ldr	r3, [pc, #72]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002674:	2207      	movs	r2, #7
 8002676:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800267a:	2202      	movs	r2, #2
 800267c:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800267e:	4b0f      	ldr	r3, [pc, #60]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002680:	2201      	movs	r2, #1
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002684:	4b0d      	ldr	r3, [pc, #52]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002686:	2201      	movs	r2, #1
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 800268a:	4b0c      	ldr	r3, [pc, #48]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800268c:	2201      	movs	r2, #1
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002692:	2201      	movs	r2, #1
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <MX_FDCAN1_Init+0x84>)
 8002698:	2200      	movs	r2, #0
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800269c:	4b07      	ldr	r3, [pc, #28]	; (80026bc <MX_FDCAN1_Init+0x84>)
 800269e:	2200      	movs	r2, #0
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <MX_FDCAN1_Init+0x84>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80026a8:	4804      	ldr	r0, [pc, #16]	; (80026bc <MX_FDCAN1_Init+0x84>)
 80026aa:	f004 f9a1 	bl	80069f0 <HAL_FDCAN_Init>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 80026b4:	f000 fb42 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80026b8:	bf00      	nop
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000440 	.word	0x20000440
 80026c0:	40006400 	.word	0x40006400

080026c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026c8:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <MX_I2C1_Init+0x74>)
 80026ca:	4a1c      	ldr	r2, [pc, #112]	; (800273c <MX_I2C1_Init+0x78>)
 80026cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00F07BFF;
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <MX_I2C1_Init+0x74>)
 80026d0:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <MX_I2C1_Init+0x7c>)
 80026d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <MX_I2C1_Init+0x74>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026da:	4b17      	ldr	r3, [pc, #92]	; (8002738 <MX_I2C1_Init+0x74>)
 80026dc:	2201      	movs	r2, #1
 80026de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <MX_I2C1_Init+0x74>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80026e6:	4b14      	ldr	r3, [pc, #80]	; (8002738 <MX_I2C1_Init+0x74>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80026ec:	4b12      	ldr	r3, [pc, #72]	; (8002738 <MX_I2C1_Init+0x74>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80026f2:	4b11      	ldr	r3, [pc, #68]	; (8002738 <MX_I2C1_Init+0x74>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <MX_I2C1_Init+0x74>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80026fe:	480e      	ldr	r0, [pc, #56]	; (8002738 <MX_I2C1_Init+0x74>)
 8002700:	f005 fbee 	bl	8007ee0 <HAL_I2C_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800270a:	f000 fb17 	bl	8002d3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800270e:	2100      	movs	r1, #0
 8002710:	4809      	ldr	r0, [pc, #36]	; (8002738 <MX_I2C1_Init+0x74>)
 8002712:	f007 f929 	bl	8009968 <HAL_I2CEx_ConfigAnalogFilter>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800271c:	f000 fb0e 	bl	8002d3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002720:	2100      	movs	r1, #0
 8002722:	4805      	ldr	r0, [pc, #20]	; (8002738 <MX_I2C1_Init+0x74>)
 8002724:	f007 f96b 	bl	80099fe <HAL_I2CEx_ConfigDigitalFilter>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800272e:	f000 fb05 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002732:	bf00      	nop
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	200004a4 	.word	0x200004a4
 800273c:	40005400 	.word	0x40005400
 8002740:	00f07bff 	.word	0x00f07bff

08002744 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <MX_OPAMP1_Init+0x54>)
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <MX_OPAMP1_Init+0x58>)
 800274c:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <MX_OPAMP1_Init+0x54>)
 8002750:	2200      	movs	r2, #0
 8002752:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <MX_OPAMP1_Init+0x54>)
 8002756:	2240      	movs	r2, #64	; 0x40
 8002758:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <MX_OPAMP1_Init+0x54>)
 800275c:	2200      	movs	r2, #0
 800275e:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002760:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <MX_OPAMP1_Init+0x54>)
 8002762:	2201      	movs	r2, #1
 8002764:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002766:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <MX_OPAMP1_Init+0x54>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <MX_OPAMP1_Init+0x54>)
 800276e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002772:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <MX_OPAMP1_Init+0x54>)
 8002776:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800277a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <MX_OPAMP1_Init+0x54>)
 800277e:	2200      	movs	r2, #0
 8002780:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002782:	4805      	ldr	r0, [pc, #20]	; (8002798 <MX_OPAMP1_Init+0x54>)
 8002784:	f007 f988 	bl	8009a98 <HAL_OPAMP_Init>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 800278e:	f000 fad5 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200004f0 	.word	0x200004f0
 800279c:	40010300 	.word	0x40010300

080027a0 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80027a4:	4b13      	ldr	r3, [pc, #76]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027a6:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <MX_OPAMP2_Init+0x58>)
 80027a8:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80027b0:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027b2:	2240      	movs	r2, #64	; 0x40
 80027b4:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80027b6:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027be:	2201      	movs	r2, #1
 80027c0:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80027c2:	4b0c      	ldr	r3, [pc, #48]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80027c8:	4b0a      	ldr	r3, [pc, #40]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027ca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027ce:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027d2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80027d6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027da:	2200      	movs	r2, #0
 80027dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80027de:	4805      	ldr	r0, [pc, #20]	; (80027f4 <MX_OPAMP2_Init+0x54>)
 80027e0:	f007 f95a 	bl	8009a98 <HAL_OPAMP_Init>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80027ea:	f000 faa7 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	2000052c 	.word	0x2000052c
 80027f8:	40010304 	.word	0x40010304

080027fc <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002800:	4b13      	ldr	r3, [pc, #76]	; (8002850 <MX_OPAMP3_Init+0x54>)
 8002802:	4a14      	ldr	r2, [pc, #80]	; (8002854 <MX_OPAMP3_Init+0x58>)
 8002804:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <MX_OPAMP3_Init+0x54>)
 8002808:	2200      	movs	r2, #0
 800280a:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 800280c:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_OPAMP3_Init+0x54>)
 800280e:	2240      	movs	r2, #64	; 0x40
 8002810:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <MX_OPAMP3_Init+0x54>)
 8002814:	2200      	movs	r2, #0
 8002816:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <MX_OPAMP3_Init+0x54>)
 800281a:	2201      	movs	r2, #1
 800281c:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800281e:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_OPAMP3_Init+0x54>)
 8002820:	2200      	movs	r2, #0
 8002822:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <MX_OPAMP3_Init+0x54>)
 8002826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800282c:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_OPAMP3_Init+0x54>)
 800282e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_OPAMP3_Init+0x54>)
 8002836:	2200      	movs	r2, #0
 8002838:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_OPAMP3_Init+0x54>)
 800283c:	f007 f92c 	bl	8009a98 <HAL_OPAMP_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8002846:	f000 fa79 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000568 	.word	0x20000568
 8002854:	40010308 	.word	0x40010308

08002858 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b09c      	sub	sp, #112	; 0x70
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002878:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
 8002888:	615a      	str	r2, [r3, #20]
 800288a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2234      	movs	r2, #52	; 0x34
 8002890:	2100      	movs	r1, #0
 8002892:	4618      	mov	r0, r3
 8002894:	f00a fdf6 	bl	800d484 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 800289a:	4a5a      	ldr	r2, [pc, #360]	; (8002a04 <MX_TIM1_Init+0x1ac>)
 800289c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80028a4:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028a6:	2220      	movs	r2, #32
 80028a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 80028aa:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028ac:	f640 729f 	movw	r2, #3999	; 0xf9f
 80028b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028b2:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80028b8:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028ba:	2201      	movs	r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028be:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80028c4:	484e      	ldr	r0, [pc, #312]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028c6:	f008 f9b1 	bl	800ac2c <HAL_TIM_Base_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80028d0:	f000 fa34 	bl	8002d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80028da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80028de:	4619      	mov	r1, r3
 80028e0:	4847      	ldr	r0, [pc, #284]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028e2:	f008 febd 	bl	800b660 <HAL_TIM_ConfigClockSource>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80028ec:	f000 fa26 	bl	8002d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80028f0:	4843      	ldr	r0, [pc, #268]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80028f2:	f008 fabf 	bl	800ae74 <HAL_TIM_PWM_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80028fc:	f000 fa1e 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002900:	2370      	movs	r3, #112	; 0x70
 8002902:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002904:	2300      	movs	r3, #0
 8002906:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800290c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002910:	4619      	mov	r1, r3
 8002912:	483b      	ldr	r0, [pc, #236]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 8002914:	f009 fcc2 	bl	800c29c <HAL_TIMEx_MasterConfigSynchronization>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800291e:	f000 fa0d 	bl	8002d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002922:	2360      	movs	r3, #96	; 0x60
 8002924:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800292a:	2300      	movs	r3, #0
 800292c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800292e:	2300      	movs	r3, #0
 8002930:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800293a:	2300      	movs	r3, #0
 800293c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800293e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002942:	2200      	movs	r2, #0
 8002944:	4619      	mov	r1, r3
 8002946:	482e      	ldr	r0, [pc, #184]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 8002948:	f008 fd76 	bl	800b438 <HAL_TIM_PWM_ConfigChannel>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002952:	f000 f9f3 	bl	8002d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002956:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800295a:	2204      	movs	r2, #4
 800295c:	4619      	mov	r1, r3
 800295e:	4828      	ldr	r0, [pc, #160]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 8002960:	f008 fd6a 	bl	800b438 <HAL_TIM_PWM_ConfigChannel>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800296a:	f000 f9e7 	bl	8002d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800296e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002972:	2208      	movs	r2, #8
 8002974:	4619      	mov	r1, r3
 8002976:	4822      	ldr	r0, [pc, #136]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 8002978:	f008 fd5e 	bl	800b438 <HAL_TIM_PWM_ConfigChannel>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002982:	f000 f9db 	bl	8002d3c <Error_Handler>
  }
  sConfigOC.Pulse = 3998;
 8002986:	f640 739e 	movw	r3, #3998	; 0xf9e
 800298a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800298c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002990:	220c      	movs	r2, #12
 8002992:	4619      	mov	r1, r3
 8002994:	481a      	ldr	r0, [pc, #104]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 8002996:	f008 fd4f 	bl	800b438 <HAL_TIM_PWM_ConfigChannel>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80029a0:	f000 f9cc 	bl	8002d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80029a4:	2300      	movs	r3, #0
 80029a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80029ac:	2300      	movs	r3, #0
 80029ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 80029b0:	2380      	movs	r3, #128	; 0x80
 80029b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80029b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80029ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80029d4:	2300      	movs	r3, #0
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80029dc:	1d3b      	adds	r3, r7, #4
 80029de:	4619      	mov	r1, r3
 80029e0:	4807      	ldr	r0, [pc, #28]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80029e2:	f009 fcdd 	bl	800c3a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 80029ec:	f000 f9a6 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80029f0:	4803      	ldr	r0, [pc, #12]	; (8002a00 <MX_TIM1_Init+0x1a8>)
 80029f2:	f002 f92d 	bl	8004c50 <HAL_TIM_MspPostInit>

}
 80029f6:	bf00      	nop
 80029f8:	3770      	adds	r7, #112	; 0x70
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200005a4 	.word	0x200005a4
 8002a04:	40012c00 	.word	0x40012c00

08002a08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a0e:	f107 0310 	add.w	r3, r7, #16
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
 8002a18:	609a      	str	r2, [r3, #8]
 8002a1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a1c:	1d3b      	adds	r3, r7, #4
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	605a      	str	r2, [r3, #4]
 8002a24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a26:	4b1e      	ldr	r3, [pc, #120]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a30:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002a34:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002a3c:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a3e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a44:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002a50:	4813      	ldr	r0, [pc, #76]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a52:	f008 f8eb 	bl	800ac2c <HAL_TIM_Base_Init>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002a5c:	f000 f96e 	bl	8002d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a64:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480c      	ldr	r0, [pc, #48]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a6e:	f008 fdf7 	bl	800b660 <HAL_TIM_ConfigClockSource>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8002a78:	f000 f960 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a80:	2300      	movs	r3, #0
 8002a82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a84:	1d3b      	adds	r3, r7, #4
 8002a86:	4619      	mov	r1, r3
 8002a88:	4805      	ldr	r0, [pc, #20]	; (8002aa0 <MX_TIM2_Init+0x98>)
 8002a8a:	f009 fc07 	bl	800c29c <HAL_TIMEx_MasterConfigSynchronization>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002a94:	f000 f952 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a98:	bf00      	nop
 8002a9a:	3720      	adds	r7, #32
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200005f0 	.word	0x200005f0

08002aa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002aaa:	f107 0310 	add.w	r3, r7, #16
 8002aae:	2200      	movs	r2, #0
 8002ab0:	601a      	str	r2, [r3, #0]
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	609a      	str	r2, [r3, #8]
 8002ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ab8:	1d3b      	adds	r3, r7, #4
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	605a      	str	r2, [r3, #4]
 8002ac0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002ac4:	4a1d      	ldr	r2, [pc, #116]	; (8002b3c <MX_TIM4_Init+0x98>)
 8002ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 8002ac8:	4b1b      	ldr	r3, [pc, #108]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002aca:	2227      	movs	r2, #39	; 0x27
 8002acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ace:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002ad4:	4b18      	ldr	r3, [pc, #96]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ae8:	4813      	ldr	r0, [pc, #76]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002aea:	f008 f89f 	bl	800ac2c <HAL_TIM_Base_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002af4:	f000 f922 	bl	8002d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002afc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002afe:	f107 0310 	add.w	r3, r7, #16
 8002b02:	4619      	mov	r1, r3
 8002b04:	480c      	ldr	r0, [pc, #48]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002b06:	f008 fdab 	bl	800b660 <HAL_TIM_ConfigClockSource>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b10:	f000 f914 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b14:	2320      	movs	r3, #32
 8002b16:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b1c:	1d3b      	adds	r3, r7, #4
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_TIM4_Init+0x94>)
 8002b22:	f009 fbbb 	bl	800c29c <HAL_TIMEx_MasterConfigSynchronization>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b2c:	f000 f906 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b30:	bf00      	nop
 8002b32:	3720      	adds	r7, #32
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	2000063c 	.word	0x2000063c
 8002b3c:	40000800 	.word	0x40000800

08002b40 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b084      	sub	sp, #16
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b46:	1d3b      	adds	r3, r7, #4
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002b50:	4b15      	ldr	r3, [pc, #84]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b52:	4a16      	ldr	r2, [pc, #88]	; (8002bac <MX_TIM6_Init+0x6c>)
 8002b54:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b58:	f240 623f 	movw	r2, #1599	; 0x63f
 8002b5c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5e:	4b12      	ldr	r3, [pc, #72]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b6a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b6c:	4b0e      	ldr	r3, [pc, #56]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002b72:	480d      	ldr	r0, [pc, #52]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b74:	f008 f85a 	bl	800ac2c <HAL_TIM_Base_Init>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002b7e:	f000 f8dd 	bl	8002d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002b8a:	1d3b      	adds	r3, r7, #4
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4806      	ldr	r0, [pc, #24]	; (8002ba8 <MX_TIM6_Init+0x68>)
 8002b90:	f009 fb84 	bl	800c29c <HAL_TIMEx_MasterConfigSynchronization>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002b9a:	f000 f8cf 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002b9e:	bf00      	nop
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000688 	.word	0x20000688
 8002bac:	40001000 	.word	0x40001000

08002bb0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bb6:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <MX_USART2_UART_Init+0x94>)
 8002bb8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002bba:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002bc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002bc2:	4b1f      	ldr	r3, [pc, #124]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002bd4:	4b1a      	ldr	r3, [pc, #104]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bd6:	220c      	movs	r2, #12
 8002bd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bda:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002be0:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002be6:	4b16      	ldr	r3, [pc, #88]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bec:	4b14      	ldr	r3, [pc, #80]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bf2:	4b13      	ldr	r3, [pc, #76]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bf8:	4811      	ldr	r0, [pc, #68]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002bfa:	f009 fcdc 	bl	800c5b6 <HAL_UART_Init>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002c04:	f000 f89a 	bl	8002d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c08:	2100      	movs	r1, #0
 8002c0a:	480d      	ldr	r0, [pc, #52]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002c0c:	f00a fb46 	bl	800d29c <HAL_UARTEx_SetTxFifoThreshold>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002c16:	f000 f891 	bl	8002d3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4808      	ldr	r0, [pc, #32]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002c1e:	f00a fb7b 	bl	800d318 <HAL_UARTEx_SetRxFifoThreshold>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002c28:	f000 f888 	bl	8002d3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002c2c:	4804      	ldr	r0, [pc, #16]	; (8002c40 <MX_USART2_UART_Init+0x90>)
 8002c2e:	f00a fafc 	bl	800d22a <HAL_UARTEx_DisableFifoMode>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002c38:	f000 f880 	bl	8002d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c3c:	bf00      	nop
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	200006d4 	.word	0x200006d4
 8002c44:	40004400 	.word	0x40004400

08002c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b08a      	sub	sp, #40	; 0x28
 8002c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	2200      	movs	r2, #0
 8002c54:	601a      	str	r2, [r3, #0]
 8002c56:	605a      	str	r2, [r3, #4]
 8002c58:	609a      	str	r2, [r3, #8]
 8002c5a:	60da      	str	r2, [r3, #12]
 8002c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	4a33      	ldr	r2, [pc, #204]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c6a:	4b31      	ldr	r3, [pc, #196]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c7a:	4a2d      	ldr	r2, [pc, #180]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c7c:	f043 0320 	orr.w	r3, r3, #32
 8002c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c8e:	4b28      	ldr	r3, [pc, #160]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c92:	4a27      	ldr	r2, [pc, #156]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c9a:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca6:	4b22      	ldr	r3, [pc, #136]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002caa:	4a21      	ldr	r2, [pc, #132]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002cac:	f043 0302 	orr.w	r3, r3, #2
 8002cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cb2:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <MX_GPIO_Init+0xe8>)
 8002cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	607b      	str	r3, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_CAN_TERM_Pin|GPIO_STATUS_Pin, GPIO_PIN_RESET);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f244 0140 	movw	r1, #16448	; 0x4040
 8002cc4:	481b      	ldr	r0, [pc, #108]	; (8002d34 <MX_GPIO_Init+0xec>)
 8002cc6:	f005 f8f3 	bl	8007eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	481a      	ldr	r0, [pc, #104]	; (8002d38 <MX_GPIO_Init+0xf0>)
 8002cd0:	f005 f8ee 	bl	8007eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GPIO_CAN_TERM_Pin GPIO_STATUS_Pin */
  GPIO_InitStruct.Pin = GPIO_CAN_TERM_Pin|GPIO_STATUS_Pin;
 8002cd4:	f244 0340 	movw	r3, #16448	; 0x4040
 8002cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4811      	ldr	r0, [pc, #68]	; (8002d34 <MX_GPIO_Init+0xec>)
 8002cee:	f004 ff45 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_BUTTON_Pin */
  GPIO_InitStruct.Pin = GPIO_BUTTON_Pin;
 8002cf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <MX_GPIO_Init+0xec>)
 8002d08:	f004 ff38 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d0c:	2340      	movs	r3, #64	; 0x40
 8002d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d10:	2301      	movs	r3, #1
 8002d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d14:	2300      	movs	r3, #0
 8002d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4619      	mov	r1, r3
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_GPIO_Init+0xf0>)
 8002d24:	f004 ff2a 	bl	8007b7c <HAL_GPIO_Init>

}
 8002d28:	bf00      	nop
 8002d2a:	3728      	adds	r7, #40	; 0x28
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	48000800 	.word	0x48000800
 8002d38:	48000400 	.word	0x48000400

08002d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d40:	b672      	cpsid	i
}
 8002d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <Error_Handler+0x8>
	...

08002d48 <Motor_init>:
 */

#include "motor.h"


void Motor_init(Motor *motor) {
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  motor->pole_pairs = 7; // gripper: 12
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2207      	movs	r2, #7
 8002d54:	601a      	str	r2, [r3, #0]
  motor->kv_rating = 340; // gripper: 250
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f44f 72aa 	mov.w	r2, #340	; 0x154
 8002d5c:	605a      	str	r2, [r3, #4]

  motor->flux_angle_offset = 3.202; // motor 1: 5.626, motor 2: 3.202, motor 3: 3.466, motor 4: 3.534
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a03      	ldr	r2, [pc, #12]	; (8002d70 <Motor_init+0x28>)
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	404ced91 	.word	0x404ced91
 8002d74:	00000000 	.word	0x00000000

08002d78 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b082      	sub	sp, #8
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8002d82:	eddf 0a15 	vldr	s1, [pc, #84]	; 8002dd8 <wrapTo2Pi+0x60>
 8002d86:	ed97 0a01 	vldr	s0, [r7, #4]
 8002d8a:	f00d fb41 	bl	8010410 <fmodf>
 8002d8e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 8002d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9e:	db01      	blt.n	8002da4 <wrapTo2Pi+0x2c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	e00e      	b.n	8002dc2 <wrapTo2Pi+0x4a>
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f7fd fbf7 	bl	8000598 <__aeabi_f2d>
 8002daa:	a309      	add	r3, pc, #36	; (adr r3, 8002dd0 <wrapTo2Pi+0x58>)
 8002dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db0:	f7fd fa94 	bl	80002dc <__adddf3>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4610      	mov	r0, r2
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f7fd ff1c 	bl	8000bf8 <__aeabi_d2f>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	ee07 3a90 	vmov	s15, r3
}
 8002dc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002dca:	3708      	adds	r7, #8
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	54442d18 	.word	0x54442d18
 8002dd4:	401921fb 	.word	0x401921fb
 8002dd8:	40c90fdb 	.word	0x40c90fdb

08002ddc <MotorController_init>:
extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart2;

void MotorController_init(MotorController *controller) {
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	; 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  controller->mode = MODE_DISABLED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
  controller->device_id = DEVICE_CAN_ID;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  controller->firmware_version = FIRMWARE_VERSION;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a64      	ldr	r2, [pc, #400]	; (8002f88 <MotorController_init+0x1ac>)
 8002df8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  filter_config.FilterIndex = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	613b      	str	r3, [r7, #16]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 8002e04:	2302      	movs	r3, #2
 8002e06:	617b      	str	r3, [r7, #20]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
  filter_config.FilterID1 = controller->device_id;    // filter
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8002e12:	61fb      	str	r3, [r7, #28]
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8002e14:	2300      	movs	r3, #0
 8002e16:	623b      	str	r3, [r7, #32]

  HAL_StatusTypeDef status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 8002e1e:	f107 030c 	add.w	r3, r7, #12
 8002e22:	4619      	mov	r1, r3
 8002e24:	4859      	ldr	r0, [pc, #356]	; (8002f8c <MotorController_init+0x1b0>)
 8002e26:	f003 ff3d 	bl	8006ca4 <HAL_FDCAN_ConfigFilter>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_Start(&hfdcan1);
 8002e38:	4854      	ldr	r0, [pc, #336]	; (8002f8c <MotorController_init+0x1b0>)
 8002e3a:	f003 ff8d 	bl	8006d58 <HAL_FDCAN_Start>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e46:	4313      	orrs	r3, r2
 8002e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2101      	movs	r1, #1
 8002e50:	484e      	ldr	r0, [pc, #312]	; (8002f8c <MotorController_init+0x1b0>)
 8002e52:	f004 f8c7 	bl	8006fe4 <HAL_FDCAN_ActivateNotification>
 8002e56:	4603      	mov	r3, r0
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  Encoder_init(&controller->encoder, &hi2c1, &htim6);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <MotorController_init+0x1b4>)
 8002e68:	494a      	ldr	r1, [pc, #296]	; (8002f94 <MotorController_init+0x1b8>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7fe ff9c 	bl	8001da8 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <MotorController_init+0x1bc>)
 8002e78:	4a48      	ldr	r2, [pc, #288]	; (8002f9c <MotorController_init+0x1c0>)
 8002e7a:	4949      	ldr	r1, [pc, #292]	; (8002fa0 <MotorController_init+0x1c4>)
 8002e7c:	f001 fa6c 	bl	8004358 <PowerStage_init>
  Motor_init(&controller->motor);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3360      	adds	r3, #96	; 0x60
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ff5f 	bl	8002d48 <Motor_init>

  CurrentController_init(&controller->current_controller);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	336c      	adds	r3, #108	; 0x6c
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fe fd89 	bl	80019a6 <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	33ec      	adds	r3, #236	; 0xec
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f001 f9a9 	bl	80041f0 <PositionController_init>

  status |= HAL_OPAMP_Start(&hopamp1);
 8002e9e:	4841      	ldr	r0, [pc, #260]	; (8002fa4 <MotorController_init+0x1c8>)
 8002ea0:	f006 feca 	bl	8009c38 <HAL_OPAMP_Start>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_OPAMP_Start(&hopamp2);
 8002eb2:	483d      	ldr	r0, [pc, #244]	; (8002fa8 <MotorController_init+0x1cc>)
 8002eb4:	f006 fec0 	bl	8009c38 <HAL_OPAMP_Start>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_OPAMP_Start(&hopamp3);
 8002ec6:	4839      	ldr	r0, [pc, #228]	; (8002fac <MotorController_init+0x1d0>)
 8002ec8:	f006 feb6 	bl	8009c38 <HAL_OPAMP_Start>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_TIM_Base_Start_IT(&htim2);    // safety watchdog timer
 8002eda:	4835      	ldr	r0, [pc, #212]	; (8002fb0 <MotorController_init+0x1d4>)
 8002edc:	f007 ff60 	bl	800ada0 <HAL_TIM_Base_Start_IT>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_TIM_Base_Start_IT(&htim4);    // position update trigger timer
 8002eee:	4831      	ldr	r0, [pc, #196]	; (8002fb4 <MotorController_init+0x1d8>)
 8002ef0:	f007 ff56 	bl	800ada0 <HAL_TIM_Base_Start_IT>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_TIM_Base_Start(&htim6);       // time keeper timer
 8002f02:	4823      	ldr	r0, [pc, #140]	; (8002f90 <MotorController_init+0x1b4>)
 8002f04:	f007 feea 	bl	800acdc <HAL_TIM_Base_Start>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002f16:	4821      	ldr	r0, [pc, #132]	; (8002f9c <MotorController_init+0x1c0>)
 8002f18:	f002 fd7a 	bl	8005a10 <HAL_ADCEx_InjectedStart>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f24:	4313      	orrs	r3, r2
 8002f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002f2a:	481b      	ldr	r0, [pc, #108]	; (8002f98 <MotorController_init+0x1bc>)
 8002f2c:	f002 fd70 	bl	8005a10 <HAL_ADCEx_InjectedStart>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status != HAL_OK) {
 8002f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d000      	beq.n	8002f48 <MotorController_init+0x16c>
    while (1) {
 8002f46:	e7fe      	b.n	8002f46 <MotorController_init+0x16a>
      // error loop
    }
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe ff5c 	bl	8001e08 <Encoder_triggerUpdate>

  HAL_Delay(100);
 8002f50:	2064      	movs	r0, #100	; 0x64
 8002f52:	f002 f923 	bl	800519c <HAL_Delay>
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	332c      	adds	r3, #44	; 0x2c
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f001 fb16 	bl	800458c <PowerStage_calibratePhaseCurrentOffset>
	   Can check flash memory with STM32CubeProgrammer to verify.
	3. Set OVERWRITE_CONFIG = 0 and re-flash firmware.
*/

	#if OVERWRITE_CONFIG
  	  MotorController_runCalibrationSequence(controller);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 fbe1 	bl	8003728 <MotorController_runCalibrationSequence>
//	  MotorController_storeConfig(controller);
	#else
	  MotorController_loadConfig(controller);
	#endif

  if (controller->mode == MODE_DISABLED) {
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <MotorController_init+0x1a4>
    controller->mode = MODE_IDLE;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
    controller->error = ERROR_NO_ERROR;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
  }
}
 8002f80:	bf00      	nop
 8002f82:	3728      	adds	r7, #40	; 0x28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	00100003 	.word	0x00100003
 8002f8c:	20000440 	.word	0x20000440
 8002f90:	20000688 	.word	0x20000688
 8002f94:	200004a4 	.word	0x200004a4
 8002f98:	200003d4 	.word	0x200003d4
 8002f9c:	20000368 	.word	0x20000368
 8002fa0:	200005a4 	.word	0x200005a4
 8002fa4:	200004f0 	.word	0x200004f0
 8002fa8:	2000052c 	.word	0x2000052c
 8002fac:	20000568 	.word	0x20000568
 8002fb0:	200005f0 	.word	0x200005f0
 8002fb4:	2000063c 	.word	0x2000063c

08002fb8 <MotorController_getError>:

ErrorCode MotorController_getError(MotorController *controller) {
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  return controller->error;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 3135 	ldrb.w	r3, [r3, #309]	; 0x135
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <MotorController_getMode>:

Mode MotorController_getMode(MotorController *controller) {
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  return controller->mode;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <MotorController_setMode>:

void MotorController_setMode(MotorController *controller, Mode mode) {
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	70fb      	strb	r3, [r7, #3]
  switch (mode) {
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	2b25      	cmp	r3, #37	; 0x25
 8002ffc:	dc54      	bgt.n	80030a8 <MotorController_setMode+0xbc>
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f2c0 8084 	blt.w	800310c <MotorController_setMode+0x120>
 8003004:	2b25      	cmp	r3, #37	; 0x25
 8003006:	f200 8081 	bhi.w	800310c <MotorController_setMode+0x120>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <MotorController_setMode+0x24>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	080030af 	.word	0x080030af
 8003014:	080030bb 	.word	0x080030bb
 8003018:	0800310d 	.word	0x0800310d
 800301c:	0800310d 	.word	0x0800310d
 8003020:	0800310d 	.word	0x0800310d
 8003024:	080030cf 	.word	0x080030cf
 8003028:	0800310d 	.word	0x0800310d
 800302c:	0800310d 	.word	0x0800310d
 8003030:	0800310d 	.word	0x0800310d
 8003034:	0800310d 	.word	0x0800310d
 8003038:	0800310d 	.word	0x0800310d
 800303c:	0800310d 	.word	0x0800310d
 8003040:	0800310d 	.word	0x0800310d
 8003044:	0800310d 	.word	0x0800310d
 8003048:	0800310d 	.word	0x0800310d
 800304c:	0800310d 	.word	0x0800310d
 8003050:	080030db 	.word	0x080030db
 8003054:	080030db 	.word	0x080030db
 8003058:	080030db 	.word	0x080030db
 800305c:	0800310d 	.word	0x0800310d
 8003060:	0800310d 	.word	0x0800310d
 8003064:	0800310d 	.word	0x0800310d
 8003068:	0800310d 	.word	0x0800310d
 800306c:	0800310d 	.word	0x0800310d
 8003070:	0800310d 	.word	0x0800310d
 8003074:	0800310d 	.word	0x0800310d
 8003078:	0800310d 	.word	0x0800310d
 800307c:	0800310d 	.word	0x0800310d
 8003080:	0800310d 	.word	0x0800310d
 8003084:	0800310d 	.word	0x0800310d
 8003088:	0800310d 	.word	0x0800310d
 800308c:	0800310d 	.word	0x0800310d
 8003090:	0800310d 	.word	0x0800310d
 8003094:	0800310d 	.word	0x0800310d
 8003098:	080030db 	.word	0x080030db
 800309c:	080030db 	.word	0x080030db
 80030a0:	080030db 	.word	0x080030db
 80030a4:	080030db 	.word	0x080030db
 80030a8:	2b80      	cmp	r3, #128	; 0x80
 80030aa:	d016      	beq.n	80030da <MotorController_setMode+0xee>
 80030ac:	e02e      	b.n	800310c <MotorController_setMode+0x120>
    case MODE_DISABLED:
      PowerStage_disable(&controller->powerstage);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	332c      	adds	r3, #44	; 0x2c
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 f99a 	bl	80043ec <PowerStage_disable>
      break;
 80030b8:	e036      	b.n	8003128 <MotorController_setMode+0x13c>

    case MODE_IDLE:
      PowerStage_disable(&controller->powerstage);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	332c      	adds	r3, #44	; 0x2c
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 f994 	bl	80043ec <PowerStage_disable>
      controller->error = ERROR_NO_ERROR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
      break;
 80030cc:	e02c      	b.n	8003128 <MotorController_setMode+0x13c>

    case MODE_CALIBRATION:
      PowerStage_enable(&controller->powerstage);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	332c      	adds	r3, #44	; 0x2c
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f99e 	bl	8004414 <PowerStage_enable>
      break;
 80030d8:	e026      	b.n	8003128 <MotorController_setMode+0x13c>
    case MODE_DEBUG:
    case MODE_OPEN_VDQ:
    case MODE_OPEN_VALPHABETA:
    case MODE_OPEN_VABC:
    case MODE_OPEN_IDQ:
      if (controller->mode != MODE_IDLE) {
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d00d      	beq.n	8003100 <MotorController_setMode+0x114>
        PowerStage_disable(&controller->powerstage);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	332c      	adds	r3, #44	; 0x2c
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 f97f 	bl	80043ec <PowerStage_disable>
        controller->mode = MODE_DISABLED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
        controller->error = ERROR_INVALID_MODE_SWITCH;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2203      	movs	r2, #3
 80030fa:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
        return;  // return directly, do not update mode
 80030fe:	e017      	b.n	8003130 <MotorController_setMode+0x144>
      }
      PowerStage_enable(&controller->powerstage);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	332c      	adds	r3, #44	; 0x2c
 8003104:	4618      	mov	r0, r3
 8003106:	f001 f985 	bl	8004414 <PowerStage_enable>
      break;
 800310a:	e00d      	b.n	8003128 <MotorController_setMode+0x13c>

    default:
      PowerStage_disable(&controller->powerstage);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	332c      	adds	r3, #44	; 0x2c
 8003110:	4618      	mov	r0, r3
 8003112:	f001 f96b 	bl	80043ec <PowerStage_disable>
      controller->mode = MODE_DISABLED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
      controller->error = ERROR_INVALID_MODE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
      return;  // return directly, do not update mode
 8003126:	e003      	b.n	8003130 <MotorController_setMode+0x144>
  }
  controller->mode = mode;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	78fa      	ldrb	r2, [r7, #3]
 800312c:	f883 2134 	strb.w	r2, [r3, #308]	; 0x134
}
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <MotorController_setFluxAngle>:

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b08a      	sub	sp, #40	; 0x28
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	ed87 0a02 	vstr	s0, [r7, #8]
 8003144:	edc7 0a01 	vstr	s1, [r7, #4]
  float theta = wrapTo2Pi(angle_setpoint);
 8003148:	ed97 0a02 	vldr	s0, [r7, #8]
 800314c:	f7ff fe14 	bl	8002d78 <wrapTo2Pi>
 8003150:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float sin_theta = sinf(theta);
 8003154:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003158:	f00d f914 	bl	8010384 <sinf>
 800315c:	ed87 0a08 	vstr	s0, [r7, #32]
  float cos_theta = cosf(theta);
 8003160:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003164:	f00d f878 	bl	8010258 <cosf>
 8003168:	ed87 0a07 	vstr	s0, [r7, #28]
  float v_q = 0.0;
 800316c:	f04f 0300 	mov.w	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
  float v_d = voltage_setpoint;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	617b      	str	r3, [r7, #20]

  controller->current_controller.v_alpha_target = -sin_theta * v_q + cos_theta * v_d;
 8003176:	edd7 7a08 	vldr	s15, [r7, #32]
 800317a:	eeb1 7a67 	vneg.f32	s14, s15
 800317e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003182:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003186:	edd7 6a07 	vldr	s13, [r7, #28]
 800318a:	edd7 7a05 	vldr	s15, [r7, #20]
 800318e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	edc3 7a31 	vstr	s15, [r3, #196]	; 0xc4
  controller->current_controller.v_beta_target =   cos_theta * v_q + sin_theta * v_d;
 800319c:	ed97 7a07 	vldr	s14, [r7, #28]
 80031a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80031a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80031a8:	edd7 6a08 	vldr	s13, [r7, #32]
 80031ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80031b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	edc3 7a32 	vstr	s15, [r3, #200]	; 0xc8
}
 80031be:	bf00      	nop
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
	...

080031c8 <MotorController_loadConfig>:

void MotorController_loadConfig(MotorController *controller) {
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  EEPROMConfig *config = (EEPROMConfig *)FLASH_CONFIG_ADDRESS;
 80031d0:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <MotorController_loadConfig+0xfc>)
 80031d2:	60fb      	str	r3, [r7, #12]

  controller->firmware_version                  = config->firmware_version;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  controller->device_id                         = config->device_id;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
  controller->encoder.direction                 = config->encoder_direction;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	7a1b      	ldrb	r3, [r3, #8]
 80031ee:	b25a      	sxtb	r2, r3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	729a      	strb	r2, [r3, #10]
  controller->encoder.cpr                       = config->encoder_cpr;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68da      	ldr	r2, [r3, #12]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]
  controller->encoder.position_offset           = config->encoder_position_offset;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	691a      	ldr	r2, [r3, #16]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	611a      	str	r2, [r3, #16]
  controller->encoder.velocity_filter_alpha     = config->encoder_velocity_filter_alpha;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	615a      	str	r2, [r3, #20]
  controller->powerstage.undervoltage_threshold = config->powerstage_undervoltage_threshold;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	645a      	str	r2, [r3, #68]	; 0x44
  controller->powerstage.overvoltage_threshold  = config->powerstage_overvoltage_threshold;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	69da      	ldr	r2, [r3, #28]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	649a      	str	r2, [r3, #72]	; 0x48
  controller->motor.pole_pairs                  = config->motor_pole_pairs;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	661a      	str	r2, [r3, #96]	; 0x60
  controller->motor.kv_rating                   = config->motor_kv_rating;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	665a      	str	r2, [r3, #100]	; 0x64
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	669a      	str	r2, [r3, #104]	; 0x68

  controller->current_controller.current_filter_alpha   =   config->current_controller_current_filter_alpha;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	66da      	str	r2, [r3, #108]	; 0x6c
  controller->current_controller.i_q_kp         = config->current_controller_i_q_kp;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	671a      	str	r2, [r3, #112]	; 0x70
  controller->current_controller.i_q_ki         = config->current_controller_i_q_ki;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	675a      	str	r2, [r3, #116]	; 0x74
  controller->current_controller.i_d_kp         = config->current_controller_i_d_kp;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	679a      	str	r2, [r3, #120]	; 0x78
  controller->current_controller.i_d_ki         = config->current_controller_i_d_ki;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	67da      	str	r2, [r3, #124]	; 0x7c

  controller->position_controller.position_kp   = config->position_controller_position_kp;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  controller->position_controller.position_ki   = config->position_controller_position_ki;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  controller->position_controller.position_kd   = config->position_controller_position_kd;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4

  controller->position_controller.torque_limit_upper    = config->position_controller_torque_limit_upper;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  controller->position_controller.torque_limit_lower    = config->position_controller_torque_limit_lower;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  controller->position_controller.velocity_limit_upper  = config->position_controller_velocity_limit_upper;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  controller->position_controller.velocity_limit_lower  = config->position_controller_velocity_limit_lower;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	0801f800 	.word	0x0801f800

080032c8 <MotorController_storeConfig>:

uint32_t MotorController_storeConfig(MotorController *controller) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b0a6      	sub	sp, #152	; 0x98
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  EEPROMConfig config;

  config.firmware_version                     = controller->firmware_version;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80032d6:	623b      	str	r3, [r7, #32]
  config.device_id                            = controller->device_id;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
  config.encoder_direction                    = controller->encoder.direction;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  config.encoder_cpr                          = controller->encoder.cpr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  config.encoder_position_offset              = controller->encoder.position_offset;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	633b      	str	r3, [r7, #48]	; 0x30
  config.encoder_velocity_filter_alpha        = controller->encoder.velocity_filter_alpha;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003302:	63bb      	str	r3, [r7, #56]	; 0x38
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003308:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800330e:	643b      	str	r3, [r7, #64]	; 0x40
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003314:	647b      	str	r3, [r7, #68]	; 0x44
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48

  config.current_controller_current_filter_alpha  = controller->current_controller.current_filter_alpha;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003320:	64fb      	str	r3, [r7, #76]	; 0x4c
  config.current_controller_i_q_kp            = controller->current_controller.i_q_kp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003326:	653b      	str	r3, [r7, #80]	; 0x50
  config.current_controller_i_q_ki            = controller->current_controller.i_q_ki;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	657b      	str	r3, [r7, #84]	; 0x54
  config.current_controller_i_d_kp            = controller->current_controller.i_d_kp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003332:	65bb      	str	r3, [r7, #88]	; 0x58
  config.current_controller_i_d_ki            = controller->current_controller.i_d_ki;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003338:	65fb      	str	r3, [r7, #92]	; 0x5c

  config.position_controller_position_kp      = controller->position_controller.position_kp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003340:	663b      	str	r3, [r7, #96]	; 0x60
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003348:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_position_kd      = controller->position_controller.position_kd;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003350:	66bb      	str	r3, [r7, #104]	; 0x68

  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_upper;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8003358:	66fb      	str	r3, [r7, #108]	; 0x6c
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_lower;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8003360:	66fb      	str	r3, [r7, #108]	; 0x6c
  config.position_controller_velocity_limit_upper     = controller->position_controller.velocity_limit_upper;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003368:	677b      	str	r3, [r7, #116]	; 0x74
  config.position_controller_velocity_limit_lower     = controller->position_controller.velocity_limit_lower;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003370:	67bb      	str	r3, [r7, #120]	; 0x78
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003378:	67fb      	str	r3, [r7, #124]	; 0x7c
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8003380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_error;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8003384:	f004 f9de 	bl	8007744 <HAL_FLASH_Unlock>

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8003388:	2300      	movs	r3, #0
 800338a:	613b      	str	r3, [r7, #16]
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 800338c:	2301      	movs	r3, #1
 800338e:	617b      	str	r3, [r7, #20]
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8003390:	233f      	movs	r3, #63	; 0x3f
 8003392:	61bb      	str	r3, [r7, #24]
  erase_init_struct.NbPages = 1;
 8003394:	2301      	movs	r3, #1
 8003396:	61fb      	str	r3, [r7, #28]

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8003398:	f107 020c 	add.w	r2, r7, #12
 800339c:	f107 0310 	add.w	r3, r7, #16
 80033a0:	4611      	mov	r1, r2
 80033a2:	4618      	mov	r0, r3
 80033a4:	f004 fac6 	bl	8007934 <HAL_FLASHEx_Erase>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <MotorController_storeConfig+0xee>
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
 80033ae:	f004 fa05 	bl	80077bc <HAL_FLASH_GetError>
 80033b2:	4603      	mov	r3, r0
 80033b4:	e030      	b.n	8003418 <MotorController_storeConfig+0x150>
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<FLASH_CONFIG_SIZE; i+=1) {
 80033b6:	2300      	movs	r3, #0
 80033b8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80033bc:	e025      	b.n	800340a <MotorController_storeConfig+0x142>
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 80033be:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	f107 0220 	add.w	r2, r7, #32
 80033c8:	4413      	add	r3, r2
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
 80033d2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80033dc:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 80033e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 80033e4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80033e8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80033ec:	2000      	movs	r0, #0
 80033ee:	f004 f953 	bl	8007698 <HAL_FLASH_Program>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <MotorController_storeConfig+0x138>
      return HAL_FLASH_GetError();
 80033f8:	f004 f9e0 	bl	80077bc <HAL_FLASH_GetError>
 80033fc:	4603      	mov	r3, r0
 80033fe:	e00b      	b.n	8003418 <MotorController_storeConfig+0x150>
  for (uint16_t i=0; i<FLASH_CONFIG_SIZE; i+=1) {
 8003400:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8003404:	3301      	adds	r3, #1
 8003406:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800340a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800340e:	2b1f      	cmp	r3, #31
 8003410:	d9d5      	bls.n	80033be <MotorController_storeConfig+0xf6>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8003412:	f004 f9b9 	bl	8007788 <HAL_FLASH_Lock>

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3798      	adds	r7, #152	; 0x98
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <MotorController_getTorque>:

float MotorController_getTorque(MotorController *controller) {
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  return controller->position_controller.torque_measured;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800342e:	ee07 3a90 	vmov	s15, r3
}
 8003432:	eeb0 0a67 	vmov.f32	s0, s15
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <MotorController_getVelocity>:

float MotorController_getVelocity(MotorController *controller) {
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  return controller->position_controller.velocity_measured;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800344e:	ee07 3a90 	vmov	s15, r3
}
 8003452:	eeb0 0a67 	vmov.f32	s0, s15
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <MotorController_getPosition>:

float MotorController_getPosition(MotorController *controller) {
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  return controller->position_controller.position_measured;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 800346e:	ee07 3a90 	vmov	s15, r3
}
 8003472:	eeb0 0a67 	vmov.f32	s0, s15
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <MotorController_updateCommutation>:

void MotorController_updateCommutation(MotorController *controller, ADC_HandleTypeDef *hadc) {
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  float position_measured = Encoder_getRelativePosition(&controller->encoder);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe fdbf 	bl	8002010 <Encoder_getRelativePosition>
 8003492:	ed87 0a05 	vstr	s0, [r7, #20]

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80034a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 80034b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b4:	eeb0 0a67 	vmov.f32	s0, s15
 80034b8:	f7ff fc5e 	bl	8002d78 <wrapTo2Pi>
 80034bc:	ed87 0a04 	vstr	s0, [r7, #16]
  float sin_theta = sinf(theta);
 80034c0:	ed97 0a04 	vldr	s0, [r7, #16]
 80034c4:	f00c ff5e 	bl	8010384 <sinf>
 80034c8:	ed87 0a03 	vstr	s0, [r7, #12]
  float cos_theta = cosf(theta);
 80034cc:	ed97 0a04 	vldr	s0, [r7, #16]
 80034d0:	f00c fec2 	bl	8010258 <cosf>
 80034d4:	ed87 0a02 	vstr	s0, [r7, #8]

  PowerStage_getPhaseCurrent(&controller->powerstage,
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f103 0180 	add.w	r1, r3, #128	; 0x80
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f103 0284 	add.w	r2, r3, #132	; 0x84
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	3388      	adds	r3, #136	; 0x88
 80034ee:	f001 f89f 	bl	8004630 <PowerStage_getPhaseCurrent>
    &controller->current_controller.i_a_measured,
    &controller->current_controller.i_b_measured,
    &controller->current_controller.i_c_measured);

  CurrentController_update(&controller->current_controller,
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 1134 	ldrb.w	r1, [r3, #308]	; 0x134
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003504:	eeb0 1a67 	vmov.f32	s2, s15
 8003508:	edd7 0a02 	vldr	s1, [r7, #8]
 800350c:	ed97 0a03 	vldr	s0, [r7, #12]
 8003510:	4610      	mov	r0, r2
 8003512:	f7fe fa69 	bl	80019e8 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  PowerStage_setBridgeOutput(&controller->powerstage,
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	edd3 6a3a 	vldr	s13, [r3, #232]	; 0xe8
 800352e:	eeb0 1a66 	vmov.f32	s2, s13
 8003532:	eef0 0a47 	vmov.f32	s1, s14
 8003536:	eeb0 0a67 	vmov.f32	s0, s15
 800353a:	4610      	mov	r0, r2
 800353c:	f000 ff7e 	bl	800443c <PowerStage_setBridgeOutput>
    controller->current_controller.v_a_setpoint,
    controller->current_controller.v_b_setpoint,
    controller->current_controller.v_c_setpoint);
}
 8003540:	bf00      	nop
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <MotorController_triggerPositionUpdate>:

void MotorController_triggerPositionUpdate(MotorController *controller) {
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_DISABLED
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003556:	2b00      	cmp	r3, #0
 8003558:	d004      	beq.n	8003564 <MotorController_triggerPositionUpdate+0x1c>
      || controller->mode == MODE_IDLE) {
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003560:	2b01      	cmp	r3, #1
 8003562:	d105      	bne.n	8003570 <MotorController_triggerPositionUpdate+0x28>
    PowerStage_disable(&controller->powerstage);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	332c      	adds	r3, #44	; 0x2c
 8003568:	4618      	mov	r0, r3
 800356a:	f000 ff3f 	bl	80043ec <PowerStage_disable>
 800356e:	e035      	b.n	80035dc <MotorController_triggerPositionUpdate+0x94>
  }
  else if (controller->mode == MODE_CALIBRATION
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003576:	2b05      	cmp	r3, #5
 8003578:	d022      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_TORQUE
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003580:	2b10      	cmp	r3, #16
 8003582:	d01d      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_VELOCITY
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800358a:	2b11      	cmp	r3, #17
 800358c:	d018      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_POSITION
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003594:	2b12      	cmp	r3, #18
 8003596:	d013      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VDQ
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 800359e:	2b22      	cmp	r3, #34	; 0x22
 80035a0:	d00e      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VALPHABETA
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80035a8:	2b23      	cmp	r3, #35	; 0x23
 80035aa:	d009      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VABC
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80035b2:	2b24      	cmp	r3, #36	; 0x24
 80035b4:	d004      	beq.n	80035c0 <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_IDQ) {
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80035bc:	2b25      	cmp	r3, #37	; 0x25
 80035be:	d105      	bne.n	80035cc <MotorController_triggerPositionUpdate+0x84>
    PowerStage_enable(&controller->powerstage);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	332c      	adds	r3, #44	; 0x2c
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 ff25 	bl	8004414 <PowerStage_enable>
 80035ca:	e007      	b.n	80035dc <MotorController_triggerPositionUpdate+0x94>
  }
  else {
    MotorController_setMode(controller, MODE_DISABLED);
 80035cc:	2100      	movs	r1, #0
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7ff fd0c 	bl	8002fec <MotorController_setMode>
    controller->error = ERROR_INVALID_MODE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2135 	strb.w	r2, [r3, #309]	; 0x135
  }

  Encoder_triggerUpdate(&controller->encoder);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fe fc12 	bl	8001e08 <Encoder_triggerUpdate>
}
 80035e4:	bf00      	nop
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	0000      	movs	r0, r0
	...

080035f0 <MotorController_updatePositionReading>:

void MotorController_updatePositionReading(MotorController *controller) {
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  Encoder_update(&controller->encoder);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe fc1c 	bl	8001e38 <Encoder_update>

  PowerStage_getBusVoltage(&controller->powerstage);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	332c      	adds	r3, #44	; 0x2c
 8003604:	4618      	mov	r0, r3
 8003606:	f000 ffeb 	bl	80045e0 <PowerStage_getBusVoltage>

  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fe fd0e 	bl	800202e <Encoder_getPosition>
 8003612:	eef0 7a40 	vmov.f32	s15, s0
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	edc3 7a4a 	vstr	s15, [r3, #296]	; 0x128
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4618      	mov	r0, r3
 8003620:	f7fe fd14 	bl	800204c <Encoder_getVelocity>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
  controller->position_controller.torque_measured = (8.3 * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003634:	4618      	mov	r0, r3
 8003636:	f7fc ffaf 	bl	8000598 <__aeabi_f2d>
 800363a:	a313      	add	r3, pc, #76	; (adr r3, 8003688 <MotorController_updatePositionReading+0x98>)
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	f7fd f802 	bl	8000648 <__aeabi_dmul>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003650:	ee07 3a90 	vmov	s15, r3
 8003654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003658:	ee17 0a90 	vmov	r0, s15
 800365c:	f7fc ff9c 	bl	8000598 <__aeabi_f2d>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4620      	mov	r0, r4
 8003666:	4629      	mov	r1, r5
 8003668:	f7fd f918 	bl	800089c <__aeabi_ddiv>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	4610      	mov	r0, r2
 8003672:	4619      	mov	r1, r3
 8003674:	f7fd fac0 	bl	8000bf8 <__aeabi_d2f>
 8003678:	4602      	mov	r2, r0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bdb0      	pop	{r4, r5, r7, pc}
 8003688:	9999999a 	.word	0x9999999a
 800368c:	40209999 	.word	0x40209999

08003690 <MotorController_updatePositionController>:

void MotorController_updatePositionController(MotorController *controller) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  PositionController_update(&controller->position_controller);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	33ec      	adds	r3, #236	; 0xec
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fdd1 	bl	8004244 <PositionController_update>

  if (controller->mode != MODE_OPEN_IDQ) {
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 80036a8:	2b25      	cmp	r3, #37	; 0x25
 80036aa:	d022      	beq.n	80036f2 <MotorController_updatePositionController+0x62>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	ed93 7a46 	vldr	s14, [r3, #280]	; 0x118
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036b6:	ee07 3a90 	vmov	s15, r3
 80036ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036c2:	ee17 0a90 	vmov	r0, s15
 80036c6:	f7fc ff67 	bl	8000598 <__aeabi_f2d>
 80036ca:	a30d      	add	r3, pc, #52	; (adr r3, 8003700 <MotorController_updatePositionController+0x70>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fd f8e4 	bl	800089c <__aeabi_ddiv>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4610      	mov	r0, r2
 80036da:	4619      	mov	r1, r3
 80036dc:	f7fd fa8c 	bl	8000bf8 <__aeabi_d2f>
 80036e0:	4602      	mov	r2, r0
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    controller->current_controller.i_d_target = 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f04f 0200 	mov.w	r2, #0
 80036ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  }
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	f3af 8000 	nop.w
 8003700:	9999999a 	.word	0x9999999a
 8003704:	40209999 	.word	0x40209999

08003708 <MotorController_updateService>:

void MotorController_updateService(MotorController *controller) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_CALIBRATION) {
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3134 	ldrb.w	r3, [r3, #308]	; 0x134
 8003716:	2b05      	cmp	r3, #5
 8003718:	d103      	bne.n	8003722 <MotorController_updateService+0x1a>
    MotorController_runCalibrationSequence(controller);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f804 	bl	8003728 <MotorController_runCalibrationSequence>
    return;
 8003720:	bf00      	nop
  }
}
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <MotorController_runCalibrationSequence>:

void MotorController_runCalibrationSequence(MotorController *controller) {
 8003728:	b5b0      	push	{r4, r5, r7, lr}
 800372a:	b0ae      	sub	sp, #184	; 0xb8
 800372c:	af02      	add	r7, sp, #8
 800372e:	6078      	str	r0, [r7, #4]
  MotorController_setMode(controller, MODE_CALIBRATION);
 8003730:	2105      	movs	r1, #5
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7ff fc5a 	bl	8002fec <MotorController_setMode>

  // open loop calibration
  float prev_v_alpha_target = controller->current_controller.v_alpha_target;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  float prev_v_beta_target = controller->current_controller.v_beta_target;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  float flux_angle_setpoint = 0;
 800374c:	f04f 0300 	mov.w	r3, #0
 8003750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float voltage_setpoint = 0.2;
 8003754:	4b7c      	ldr	r3, [pc, #496]	; (8003948 <MotorController_runCalibrationSequence+0x220>)
 8003756:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 800375a:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 800375e:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7ff fce8 	bl	8003138 <MotorController_setFluxAngle>
  HAL_Delay(100);
 8003768:	2064      	movs	r0, #100	; 0x64
 800376a:	f001 fd17 	bl	800519c <HAL_Delay>
  PowerStage_enable(&controller->powerstage);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	332c      	adds	r3, #44	; 0x2c
 8003772:	4618      	mov	r0, r3
 8003774:	f000 fe4e 	bl	8004414 <PowerStage_enable>
  HAL_Delay(500);
 8003778:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800377c:	f001 fd0e 	bl	800519c <HAL_Delay>

  float phase_current = 0;
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  while (phase_current < MAX_CALIBRATION_CURRENT) {
 8003788:	e07c      	b.n	8003884 <MotorController_runCalibrationSequence+0x15c>
    HAL_Delay(100);
 800378a:	2064      	movs	r0, #100	; 0x64
 800378c:	f001 fd06 	bl	800519c <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003790:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003794:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f7ff fccd 	bl	8003138 <MotorController_setFluxAngle>

    voltage_setpoint += 0.1;
 800379e:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80037a2:	f7fc fef9 	bl	8000598 <__aeabi_f2d>
 80037a6:	a362      	add	r3, pc, #392	; (adr r3, 8003930 <MotorController_runCalibrationSequence+0x208>)
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f7fc fd96 	bl	80002dc <__adddf3>
 80037b0:	4602      	mov	r2, r0
 80037b2:	460b      	mov	r3, r1
 80037b4:	4610      	mov	r0, r2
 80037b6:	4619      	mov	r1, r3
 80037b8:	f7fd fa1e 	bl	8000bf8 <__aeabi_d2f>
 80037bc:	4603      	mov	r3, r0
 80037be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80037c8:	eef0 7ae7 	vabs.f32	s15, s15
 80037cc:	ee17 0a90 	vmov	r0, s15
 80037d0:	f7fc fee2 	bl	8000598 <__aeabi_f2d>
 80037d4:	4604      	mov	r4, r0
 80037d6:	460d      	mov	r5, r1
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80037de:	eef0 7ae7 	vabs.f32	s15, s15
 80037e2:	ee17 0a90 	vmov	r0, s15
 80037e6:	f7fc fed7 	bl	8000598 <__aeabi_f2d>
 80037ea:	4602      	mov	r2, r0
 80037ec:	460b      	mov	r3, r1
 80037ee:	4620      	mov	r0, r4
 80037f0:	4629      	mov	r1, r5
 80037f2:	f7fc fd73 	bl	80002dc <__adddf3>
 80037f6:	4602      	mov	r2, r0
 80037f8:	460b      	mov	r3, r1
 80037fa:	4614      	mov	r4, r2
 80037fc:	461d      	mov	r5, r3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8003804:	eef0 7ae7 	vabs.f32	s15, s15
 8003808:	ee17 0a90 	vmov	r0, s15
 800380c:	f7fc fec4 	bl	8000598 <__aeabi_f2d>
 8003810:	4602      	mov	r2, r0
 8003812:	460b      	mov	r3, r1
 8003814:	4620      	mov	r0, r4
 8003816:	4629      	mov	r1, r5
 8003818:	f7fc fd60 	bl	80002dc <__adddf3>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	a344      	add	r3, pc, #272	; (adr r3, 8003938 <MotorController_runCalibrationSequence+0x210>)
 8003826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382a:	f7fc ff0d 	bl	8000648 <__aeabi_dmul>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	f7fd f9df 	bl	8000bf8 <__aeabi_d2f>
 800383a:	4603      	mov	r3, r0
 800383c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 8003840:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003844:	f7fc fea8 	bl	8000598 <__aeabi_f2d>
 8003848:	4604      	mov	r4, r0
 800384a:	460d      	mov	r5, r1
 800384c:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003850:	f7fc fea2 	bl	8000598 <__aeabi_f2d>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	f107 000c 	add.w	r0, r7, #12
 800385c:	e9cd 2300 	strd	r2, r3, [sp]
 8003860:	4622      	mov	r2, r4
 8003862:	462b      	mov	r3, r5
 8003864:	4939      	ldr	r1, [pc, #228]	; (800394c <MotorController_runCalibrationSequence+0x224>)
 8003866:	f00a fa7f 	bl	800dd68 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 800386a:	f107 030c 	add.w	r3, r7, #12
 800386e:	4618      	mov	r0, r3
 8003870:	f7fc fcd6 	bl	8000220 <strlen>
 8003874:	4603      	mov	r3, r0
 8003876:	b29a      	uxth	r2, r3
 8003878:	f107 010c 	add.w	r1, r7, #12
 800387c:	230a      	movs	r3, #10
 800387e:	4834      	ldr	r0, [pc, #208]	; (8003950 <MotorController_runCalibrationSequence+0x228>)
 8003880:	f008 fee9 	bl	800c656 <HAL_UART_Transmit>
  while (phase_current < MAX_CALIBRATION_CURRENT) {
 8003884:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003888:	eeb0 7a04 	vmov.f32	s14, #4	; 0x40200000  2.5
 800388c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003894:	f53f af79 	bmi.w	800378a <MotorController_runCalibrationSequence+0x62>
    }
  }


  float start_position = Encoder_getPosition(&controller->encoder);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4618      	mov	r0, r3
 800389c:	f7fe fbc7 	bl	800202e <Encoder_getPosition>
 80038a0:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 80038a4:	2300      	movs	r3, #0
 80038a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80038aa:	e02b      	b.n	8003904 <MotorController_runCalibrationSequence+0x1dc>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 80038ac:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80038b0:	ee07 3a90 	vmov	s15, r3
 80038b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038b8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003954 <MotorController_runCalibrationSequence+0x22c>
 80038bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80038c0:	ee16 0a90 	vmov	r0, s13
 80038c4:	f7fc fe68 	bl	8000598 <__aeabi_f2d>
 80038c8:	a31d      	add	r3, pc, #116	; (adr r3, 8003940 <MotorController_runCalibrationSequence+0x218>)
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f7fc febb 	bl	8000648 <__aeabi_dmul>
 80038d2:	4602      	mov	r2, r0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4610      	mov	r0, r2
 80038d8:	4619      	mov	r1, r3
 80038da:	f7fd f98d 	bl	8000bf8 <__aeabi_d2f>
 80038de:	4603      	mov	r3, r0
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80038e4:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80038e8:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fc23 	bl	8003138 <MotorController_setFluxAngle>
    HAL_Delay(2);
 80038f2:	2002      	movs	r0, #2
 80038f4:	f001 fc52 	bl	800519c <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 80038f8:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80038fc:	3301      	adds	r3, #1
 80038fe:	b29b      	uxth	r3, r3
 8003900:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003904:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8003908:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800390c:	ddce      	ble.n	80038ac <MotorController_runCalibrationSequence+0x184>
  }
  HAL_Delay(500);
 800390e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003912:	f001 fc43 	bl	800519c <HAL_Delay>

  float end_position = Encoder_getPosition(&controller->encoder);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4618      	mov	r0, r3
 800391a:	f7fe fb88 	bl	800202e <Encoder_getPosition>
 800391e:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

  for (int16_t i=500; i>=0; i-=1) {
 8003922:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003926:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 800392a:	e041      	b.n	80039b0 <MotorController_runCalibrationSequence+0x288>
 800392c:	f3af 8000 	nop.w
 8003930:	9999999a 	.word	0x9999999a
 8003934:	3fb99999 	.word	0x3fb99999
 8003938:	55555555 	.word	0x55555555
 800393c:	3fd55555 	.word	0x3fd55555
 8003940:	54442d18 	.word	0x54442d18
 8003944:	401921fb 	.word	0x401921fb
 8003948:	3e4ccccd 	.word	0x3e4ccccd
 800394c:	08011118 	.word	0x08011118
 8003950:	200006d4 	.word	0x200006d4
 8003954:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003958:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800395c:	ee07 3a90 	vmov	s15, r3
 8003960:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003964:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003954 <MotorController_runCalibrationSequence+0x22c>
 8003968:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800396c:	ee16 0a90 	vmov	r0, s13
 8003970:	f7fc fe12 	bl	8000598 <__aeabi_f2d>
 8003974:	a3a8      	add	r3, pc, #672	; (adr r3, 8003c18 <MotorController_runCalibrationSequence+0x4f0>)
 8003976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397a:	f7fc fe65 	bl	8000648 <__aeabi_dmul>
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	4610      	mov	r0, r2
 8003984:	4619      	mov	r1, r3
 8003986:	f7fd f937 	bl	8000bf8 <__aeabi_d2f>
 800398a:	4603      	mov	r3, r0
 800398c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003990:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003994:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fbcd 	bl	8003138 <MotorController_setFluxAngle>
    HAL_Delay(2);
 800399e:	2002      	movs	r0, #2
 80039a0:	f001 fbfc 	bl	800519c <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 80039a4:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 80039a8:	3b01      	subs	r3, #1
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80039b0:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	dacf      	bge.n	8003958 <MotorController_runCalibrationSequence+0x230>
  }

  flux_angle_setpoint = 0;
 80039b8:	f04f 0300 	mov.w	r3, #0
 80039bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80039c0:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80039c4:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7ff fbb5 	bl	8003138 <MotorController_setFluxAngle>
  HAL_Delay(500);
 80039ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039d2:	f001 fbe3 	bl	800519c <HAL_Delay>

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4618      	mov	r0, r3
 80039da:	f7fe fb28 	bl	800202e <Encoder_getPosition>
 80039de:	ee10 3a10 	vmov	r3, s0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7fc fdd8 	bl	8000598 <__aeabi_f2d>
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	4b8c      	ldr	r3, [pc, #560]	; (8003c20 <MotorController_runCalibrationSequence+0x4f8>)
 80039ee:	f7fc fe2b 	bl	8000648 <__aeabi_dmul>
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4614      	mov	r4, r2
 80039f8:	461d      	mov	r5, r3
 80039fa:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80039fe:	f7fc fdcb 	bl	8000598 <__aeabi_f2d>
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	4b86      	ldr	r3, [pc, #536]	; (8003c20 <MotorController_runCalibrationSequence+0x4f8>)
 8003a08:	f7fc fe1e 	bl	8000648 <__aeabi_dmul>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4620      	mov	r0, r4
 8003a12:	4629      	mov	r1, r5
 8003a14:	f7fc fc62 	bl	80002dc <__adddf3>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	4610      	mov	r0, r2
 8003a1e:	4619      	mov	r1, r3
 8003a20:	f7fd f8ea 	bl	8000bf8 <__aeabi_d2f>
 8003a24:	4603      	mov	r3, r0
 8003a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Delay(500);
 8003a2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a2e:	f001 fbb5 	bl	800519c <HAL_Delay>

  // release motor
  PowerStage_disable(&controller->powerstage);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	332c      	adds	r3, #44	; 0x2c
 8003a36:	4618      	mov	r0, r3
 8003a38:	f000 fcd8 	bl	80043ec <PowerStage_disable>

  controller->current_controller.v_alpha_target = prev_v_alpha_target;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003a42:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  controller->current_controller.v_beta_target = prev_v_beta_target;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003a4c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8

  float delta_position = end_position - start_position;
 8003a50:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003a54:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003a58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a5c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 8003a60:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003a64:	f7fc fd98 	bl	8000598 <__aeabi_f2d>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	f107 000c 	add.w	r0, r7, #12
 8003a70:	496c      	ldr	r1, [pc, #432]	; (8003c24 <MotorController_runCalibrationSequence+0x4fc>)
 8003a72:	f00a f979 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8003a76:	f107 030c 	add.w	r3, r7, #12
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fbd0 	bl	8000220 <strlen>
 8003a80:	4603      	mov	r3, r0
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	f107 010c 	add.w	r1, r7, #12
 8003a88:	230a      	movs	r3, #10
 8003a8a:	4867      	ldr	r0, [pc, #412]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003a8c:	f008 fde3 	bl	800c656 <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 8003a90:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003a94:	f7fc fd80 	bl	8000598 <__aeabi_f2d>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	460b      	mov	r3, r1
 8003a9c:	f107 000c 	add.w	r0, r7, #12
 8003aa0:	4962      	ldr	r1, [pc, #392]	; (8003c2c <MotorController_runCalibrationSequence+0x504>)
 8003aa2:	f00a f961 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8003aa6:	f107 030c 	add.w	r3, r7, #12
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fc fbb8 	bl	8000220 <strlen>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	f107 010c 	add.w	r1, r7, #12
 8003ab8:	230a      	movs	r3, #10
 8003aba:	485b      	ldr	r0, [pc, #364]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003abc:	f008 fdcb 	bl	800c656 <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 8003ac0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003ac4:	f7fc fd68 	bl	8000598 <__aeabi_f2d>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	f107 000c 	add.w	r0, r7, #12
 8003ad0:	4957      	ldr	r1, [pc, #348]	; (8003c30 <MotorController_runCalibrationSequence+0x508>)
 8003ad2:	f00a f949 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8003ad6:	f107 030c 	add.w	r3, r7, #12
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7fc fba0 	bl	8000220 <strlen>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b29a      	uxth	r2, r3
 8003ae4:	f107 010c 	add.w	r1, r7, #12
 8003ae8:	230a      	movs	r3, #10
 8003aea:	484f      	ldr	r0, [pc, #316]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003aec:	f008 fdb3 	bl	800c656 <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 8003af0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003af4:	eef0 7ae7 	vabs.f32	s15, s15
 8003af8:	ee17 0a90 	vmov	r0, s15
 8003afc:	f7fc fd4c 	bl	8000598 <__aeabi_f2d>
 8003b00:	a343      	add	r3, pc, #268	; (adr r3, 8003c10 <MotorController_runCalibrationSequence+0x4e8>)
 8003b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b06:	f7fd f811 	bl	8000b2c <__aeabi_dcmplt>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <MotorController_runCalibrationSequence+0x3f4>
    // motor did not rotate
    HAL_UART_Transmit(&huart2, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 8003b10:	230a      	movs	r3, #10
 8003b12:	221b      	movs	r2, #27
 8003b14:	4947      	ldr	r1, [pc, #284]	; (8003c34 <MotorController_runCalibrationSequence+0x50c>)
 8003b16:	4844      	ldr	r0, [pc, #272]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003b18:	f008 fd9d 	bl	800c656 <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 8003b1c:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003b20:	eeb0 7ae7 	vabs.f32	s14, s15
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	ee07 3a90 	vmov	s15, r3
 8003b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b34:	ee17 0a90 	vmov	r0, s15
 8003b38:	f7fc fd2e 	bl	8000598 <__aeabi_f2d>
 8003b3c:	a336      	add	r3, pc, #216	; (adr r3, 8003c18 <MotorController_runCalibrationSequence+0x4f0>)
 8003b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b42:	f7fc fbc9 	bl	80002d8 <__aeabi_dsub>
 8003b46:	4602      	mov	r2, r0
 8003b48:	460b      	mov	r3, r1
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	f7fd f853 	bl	8000bf8 <__aeabi_d2f>
 8003b52:	ee07 0a90 	vmov	s15, r0
 8003b56:	eef0 7ae7 	vabs.f32	s15, s15
 8003b5a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	dd05      	ble.n	8003b74 <MotorController_runCalibrationSequence+0x44c>
    HAL_UART_Transmit(&huart2, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 8003b68:	230a      	movs	r3, #10
 8003b6a:	2221      	movs	r2, #33	; 0x21
 8003b6c:	4932      	ldr	r1, [pc, #200]	; (8003c38 <MotorController_runCalibrationSequence+0x510>)
 8003b6e:	482e      	ldr	r0, [pc, #184]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003b70:	f008 fd71 	bl	800c656 <HAL_UART_Transmit>
  }


  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b78:	ee07 3a90 	vmov	s15, r3
 8003b7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b80:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b88:	eeb0 0a67 	vmov.f32	s0, s15
 8003b8c:	f7ff f8f4 	bl	8002d78 <wrapTo2Pi>
 8003b90:	eef0 7a40 	vmov.f32	s15, s0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fcfa 	bl	8000598 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	f107 000c 	add.w	r0, r7, #12
 8003bac:	4923      	ldr	r1, [pc, #140]	; (8003c3c <MotorController_runCalibrationSequence+0x514>)
 8003bae:	f00a f8db 	bl	800dd68 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8003bb2:	f107 030c 	add.w	r3, r7, #12
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fc fb32 	bl	8000220 <strlen>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	f107 010c 	add.w	r1, r7, #12
 8003bc4:	230a      	movs	r3, #10
 8003bc6:	4818      	ldr	r0, [pc, #96]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003bc8:	f008 fd45 	bl	800c656 <HAL_UART_Transmit>
  }
  {
      char str[128];
      sprintf(str, "Storing config");
 8003bcc:	f107 030c 	add.w	r3, r7, #12
 8003bd0:	491b      	ldr	r1, [pc, #108]	; (8003c40 <MotorController_runCalibrationSequence+0x518>)
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f00a f8c8 	bl	800dd68 <siprintf>
      HAL_UART_Transmit(&huart2, (uint8_t *)str, strlen(str), 10);
 8003bd8:	f107 030c 	add.w	r3, r7, #12
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fc fb1f 	bl	8000220 <strlen>
 8003be2:	4603      	mov	r3, r0
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	f107 010c 	add.w	r1, r7, #12
 8003bea:	230a      	movs	r3, #10
 8003bec:	480e      	ldr	r0, [pc, #56]	; (8003c28 <MotorController_runCalibrationSequence+0x500>)
 8003bee:	f008 fd32 	bl	800c656 <HAL_UART_Transmit>
      MotorController_storeConfig(controller);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fb68 	bl	80032c8 <MotorController_storeConfig>
    }

  HAL_Delay(1000);
 8003bf8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003bfc:	f001 face 	bl	800519c <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 8003c00:	2101      	movs	r1, #1
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff f9f2 	bl	8002fec <MotorController_setMode>
}
 8003c08:	bf00      	nop
 8003c0a:	37b0      	adds	r7, #176	; 0xb0
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c10:	9999999a 	.word	0x9999999a
 8003c14:	3fb99999 	.word	0x3fb99999
 8003c18:	54442d18 	.word	0x54442d18
 8003c1c:	401921fb 	.word	0x401921fb
 8003c20:	3fe00000 	.word	0x3fe00000
 8003c24:	08011138 	.word	0x08011138
 8003c28:	200006d4 	.word	0x200006d4
 8003c2c:	08011154 	.word	0x08011154
 8003c30:	0801116c 	.word	0x0801116c
 8003c34:	08011180 	.word	0x08011180
 8003c38:	0801119c 	.word	0x0801119c
 8003c3c:	080111c0 	.word	0x080111c0
 8003c40:	080111d4 	.word	0x080111d4

08003c44 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b089      	sub	sp, #36	; 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  uint16_t device_id = (rx_frame->id) & 0b1111;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	f003 030f 	and.w	r3, r3, #15
 8003c58:	83fb      	strh	r3, [r7, #30]
  if (device_id && device_id != controller->device_id) {
 8003c5a:	8bfb      	ldrh	r3, [r7, #30]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <MotorController_handleCANMessage+0x2c>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	8bfa      	ldrh	r2, [r7, #30]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	f040 8292 	bne.w	8004194 <MotorController_handleCANMessage+0x550>
    return;
  }

  uint16_t func_id = (rx_frame->id) >> 4;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	091b      	lsrs	r3, r3, #4
 8003c76:	83bb      	strh	r3, [r7, #28]
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	795b      	ldrb	r3, [r3, #5]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d003      	beq.n	8003c88 <MotorController_handleCANMessage+0x44>
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	88db      	ldrh	r3, [r3, #6]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <MotorController_handleCANMessage+0x48>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <MotorController_handleCANMessage+0x4a>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	76fb      	strb	r3, [r7, #27]

  CAN_Frame tx_frame;

  tx_frame.id = rx_frame->id;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60bb      	str	r3, [r7, #8]
  tx_frame.id_type = CAN_ID_STANDARD;
 8003c96:	2300      	movs	r3, #0
 8003c98:	733b      	strb	r3, [r7, #12]
  tx_frame.frame_type = CAN_FRAME_DATA;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	737b      	strb	r3, [r7, #13]
  tx_frame.size = 8;
 8003c9e:	2308      	movs	r3, #8
 8003ca0:	81fb      	strh	r3, [r7, #14]

  switch (func_id) {
 8003ca2:	8bbb      	ldrh	r3, [r7, #28]
 8003ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8003ca6:	f200 8267 	bhi.w	8004178 <MotorController_handleCANMessage+0x534>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <MotorController_handleCANMessage+0x6c>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003eb1 	.word	0x08003eb1
 8003cb4:	08003ec3 	.word	0x08003ec3
 8003cb8:	08004179 	.word	0x08004179
 8003cbc:	08004179 	.word	0x08004179
 8003cc0:	08003ee3 	.word	0x08003ee3
 8003cc4:	08004179 	.word	0x08004179
 8003cc8:	08004179 	.word	0x08004179
 8003ccc:	08004179 	.word	0x08004179
 8003cd0:	08004179 	.word	0x08004179
 8003cd4:	08004179 	.word	0x08004179
 8003cd8:	08004179 	.word	0x08004179
 8003cdc:	08004179 	.word	0x08004179
 8003ce0:	08004179 	.word	0x08004179
 8003ce4:	08004179 	.word	0x08004179
 8003ce8:	08004179 	.word	0x08004179
 8003cec:	08004179 	.word	0x08004179
 8003cf0:	08003eed 	.word	0x08003eed
 8003cf4:	08003f1b 	.word	0x08003f1b
 8003cf8:	08004179 	.word	0x08004179
 8003cfc:	08004179 	.word	0x08004179
 8003d00:	08004179 	.word	0x08004179
 8003d04:	08004179 	.word	0x08004179
 8003d08:	08004179 	.word	0x08004179
 8003d0c:	08004179 	.word	0x08004179
 8003d10:	08004179 	.word	0x08004179
 8003d14:	08004179 	.word	0x08004179
 8003d18:	08004179 	.word	0x08004179
 8003d1c:	08004179 	.word	0x08004179
 8003d20:	08004179 	.word	0x08004179
 8003d24:	08004179 	.word	0x08004179
 8003d28:	08004179 	.word	0x08004179
 8003d2c:	08004179 	.word	0x08004179
 8003d30:	08003f31 	.word	0x08003f31
 8003d34:	08003f4d 	.word	0x08003f4d
 8003d38:	08003fb9 	.word	0x08003fb9
 8003d3c:	08004179 	.word	0x08004179
 8003d40:	08003f75 	.word	0x08003f75
 8003d44:	08003f91 	.word	0x08003f91
 8003d48:	08003fd5 	.word	0x08003fd5
 8003d4c:	08003ff9 	.word	0x08003ff9
 8003d50:	0800400d 	.word	0x0800400d
 8003d54:	0800402d 	.word	0x0800402d
 8003d58:	08004179 	.word	0x08004179
 8003d5c:	08004179 	.word	0x08004179
 8003d60:	08004179 	.word	0x08004179
 8003d64:	08004179 	.word	0x08004179
 8003d68:	08004179 	.word	0x08004179
 8003d6c:	08004179 	.word	0x08004179
 8003d70:	0800404d 	.word	0x0800404d
 8003d74:	08004179 	.word	0x08004179
 8003d78:	08004179 	.word	0x08004179
 8003d7c:	08004179 	.word	0x08004179
 8003d80:	08004179 	.word	0x08004179
 8003d84:	08004179 	.word	0x08004179
 8003d88:	08004179 	.word	0x08004179
 8003d8c:	08004179 	.word	0x08004179
 8003d90:	08004179 	.word	0x08004179
 8003d94:	08004179 	.word	0x08004179
 8003d98:	08004179 	.word	0x08004179
 8003d9c:	08004179 	.word	0x08004179
 8003da0:	08004179 	.word	0x08004179
 8003da4:	08004179 	.word	0x08004179
 8003da8:	08004179 	.word	0x08004179
 8003dac:	08004179 	.word	0x08004179
 8003db0:	0800405f 	.word	0x0800405f
 8003db4:	08004179 	.word	0x08004179
 8003db8:	0800409d 	.word	0x0800409d
 8003dbc:	08004179 	.word	0x08004179
 8003dc0:	08004179 	.word	0x08004179
 8003dc4:	08004179 	.word	0x08004179
 8003dc8:	08004179 	.word	0x08004179
 8003dcc:	08004179 	.word	0x08004179
 8003dd0:	08004179 	.word	0x08004179
 8003dd4:	08004179 	.word	0x08004179
 8003dd8:	08004179 	.word	0x08004179
 8003ddc:	08004179 	.word	0x08004179
 8003de0:	08004179 	.word	0x08004179
 8003de4:	08004179 	.word	0x08004179
 8003de8:	08004179 	.word	0x08004179
 8003dec:	08004179 	.word	0x08004179
 8003df0:	080040ab 	.word	0x080040ab
 8003df4:	080040e3 	.word	0x080040e3
 8003df8:	0800411b 	.word	0x0800411b
 8003dfc:	08004143 	.word	0x08004143
 8003e00:	08004179 	.word	0x08004179
 8003e04:	08004179 	.word	0x08004179
 8003e08:	08004179 	.word	0x08004179
 8003e0c:	08004179 	.word	0x08004179
 8003e10:	08004179 	.word	0x08004179
 8003e14:	08004179 	.word	0x08004179
 8003e18:	08004179 	.word	0x08004179
 8003e1c:	08004179 	.word	0x08004179
 8003e20:	08004179 	.word	0x08004179
 8003e24:	08004179 	.word	0x08004179
 8003e28:	08004179 	.word	0x08004179
 8003e2c:	08004179 	.word	0x08004179
 8003e30:	08004179 	.word	0x08004179
 8003e34:	08004179 	.word	0x08004179
 8003e38:	08004179 	.word	0x08004179
 8003e3c:	08004179 	.word	0x08004179
 8003e40:	08004179 	.word	0x08004179
 8003e44:	08004179 	.word	0x08004179
 8003e48:	08004179 	.word	0x08004179
 8003e4c:	08004179 	.word	0x08004179
 8003e50:	08004179 	.word	0x08004179
 8003e54:	08004179 	.word	0x08004179
 8003e58:	08004179 	.word	0x08004179
 8003e5c:	08004179 	.word	0x08004179
 8003e60:	08004179 	.word	0x08004179
 8003e64:	08004179 	.word	0x08004179
 8003e68:	08004179 	.word	0x08004179
 8003e6c:	08004179 	.word	0x08004179
 8003e70:	08004179 	.word	0x08004179
 8003e74:	08004179 	.word	0x08004179
 8003e78:	08004179 	.word	0x08004179
 8003e7c:	08004179 	.word	0x08004179
 8003e80:	08004179 	.word	0x08004179
 8003e84:	08004179 	.word	0x08004179
 8003e88:	08004179 	.word	0x08004179
 8003e8c:	08004179 	.word	0x08004179
 8003e90:	08004179 	.word	0x08004179
 8003e94:	08004179 	.word	0x08004179
 8003e98:	08004179 	.word	0x08004179
 8003e9c:	08004179 	.word	0x08004179
 8003ea0:	08004179 	.word	0x08004179
 8003ea4:	08004179 	.word	0x08004179
 8003ea8:	08004179 	.word	0x08004179
 8003eac:	0800416b 	.word	0x0800416b
    case CAN_ID_ESTOP:  // 0x00
      MotorController_setMode(controller, MODE_DISABLED);
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff f89a 	bl	8002fec <MotorController_setMode>
      tx_frame.size = 1;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	81fb      	strh	r3, [r7, #14]
      *((uint8_t *)tx_frame.data) = 0xDA;
 8003ebc:	23da      	movs	r3, #218	; 0xda
 8003ebe:	743b      	strb	r3, [r7, #16]
      break;
 8003ec0:	e15a      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_ID:   // 0x01
      if (is_get_request) {
 8003ec2:	7efb      	ldrb	r3, [r7, #27]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d006      	beq.n	8003ed6 <MotorController_handleCANMessage+0x292>
        tx_frame.size = 1;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8003ed2:	743b      	strb	r3, [r7, #16]
      }
      else {
        controller->device_id = *((uint8_t *)rx_frame->data);
      }
      break;
 8003ed4:	e150      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->device_id = *((uint8_t *)rx_frame->data);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	7a1a      	ldrb	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f883 213c 	strb.w	r2, [r3, #316]	; 0x13c
      break;
 8003ee0:	e14a      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_HEARTBEAT:  // 0x04
      __HAL_TIM_SET_COUNTER(&htim2, 0);
 8003ee2:	4baa      	ldr	r3, [pc, #680]	; (800418c <MotorController_handleCANMessage+0x548>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	625a      	str	r2, [r3, #36]	; 0x24
      break;
 8003eea:	e145      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_MODE:  // 0x10
      if (is_get_request) {
 8003eec:	7efb      	ldrb	r3, [r7, #27]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <MotorController_handleCANMessage+0x2c8>
        tx_frame.size = 2;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = MotorController_getMode(controller);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff f86b 	bl	8002fd2 <MotorController_getMode>
 8003efc:	4603      	mov	r3, r0
 8003efe:	743b      	strb	r3, [r7, #16]
        *((uint8_t *)tx_frame.data + 1) = MotorController_getError(controller);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7ff f859 	bl	8002fb8 <MotorController_getError>
 8003f06:	4603      	mov	r3, r0
 8003f08:	747b      	strb	r3, [r7, #17]
      }
      else {
        MotorController_setMode(controller, *((uint8_t *)rx_frame->data));
      }
      break;
 8003f0a:	e135      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        MotorController_setMode(controller, *((uint8_t *)rx_frame->data));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	7a1b      	ldrb	r3, [r3, #8]
 8003f10:	4619      	mov	r1, r3
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff f86a 	bl	8002fec <MotorController_setMode>
      break;
 8003f18:	e12e      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_FLASH:    // 0x11
      if (*((uint8_t *)rx_frame->data)) {
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	7a1b      	ldrb	r3, [r3, #8]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <MotorController_handleCANMessage+0x2e6>
        MotorController_storeConfig(controller);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff f9d0 	bl	80032c8 <MotorController_storeConfig>
 8003f28:	e002      	b.n	8003f30 <MotorController_handleCANMessage+0x2ec>
      }
      else {
        MotorController_loadConfig(controller);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff f94c 	bl	80031c8 <MotorController_loadConfig>
      }

    case CAN_ID_TORQUE_MEASURED:  // 0x13
      tx_frame.size = 4;
 8003f30:	2304      	movs	r3, #4
 8003f32:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = MotorController_getTorque(controller);
 8003f34:	f107 0308 	add.w	r3, r7, #8
 8003f38:	f103 0408 	add.w	r4, r3, #8
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7ff fa6f 	bl	8003420 <MotorController_getTorque>
 8003f42:	eef0 7a40 	vmov.f32	s15, s0
 8003f46:	edc4 7a00 	vstr	s15, [r4]
      break;
 8003f4a:	e115      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_TORQUE_TARGET:  // 0x13
      if (is_get_request) {
 8003f4c:	7efb      	ldrb	r3, [r7, #27]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d009      	beq.n	8003f66 <MotorController_handleCANMessage+0x322>
        tx_frame.size = 4;
 8003f52:	2304      	movs	r3, #4
 8003f54:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8003f56:	f107 0308 	add.w	r3, r7, #8
 8003f5a:	3308      	adds	r3, #8
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8003f62:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->position_controller.torque_target = *((float *)rx_frame->data);
      }
      break;
 8003f64:	e108      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	3308      	adds	r3, #8
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
      break;
 8003f72:	e101      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_POSITION_MEASURED:  // 0x11
      tx_frame.size = 4;
 8003f74:	2304      	movs	r3, #4
 8003f76:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = MotorController_getPosition(controller);
 8003f78:	f107 0308 	add.w	r3, r7, #8
 8003f7c:	f103 0408 	add.w	r4, r3, #8
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7ff fa6d 	bl	8003460 <MotorController_getPosition>
 8003f86:	eef0 7a40 	vmov.f32	s15, s0
 8003f8a:	edc4 7a00 	vstr	s15, [r4]
      break;
 8003f8e:	e0f3      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_POSITION_TARGET:  // 0x11
      if (is_get_request) {
 8003f90:	7efb      	ldrb	r3, [r7, #27]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d009      	beq.n	8003faa <MotorController_handleCANMessage+0x366>
        tx_frame.size = 4;
 8003f96:	2304      	movs	r3, #4
 8003f98:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8003f9a:	f107 0308 	add.w	r3, r7, #8
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	f8d2 212c 	ldr.w	r2, [r2, #300]	; 0x12c
 8003fa6:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->position_controller.position_target = *((float *)rx_frame->data);
      }
      break;
 8003fa8:	e0e6      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->position_controller.position_target = *((float *)rx_frame->data);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
      break;
 8003fb6:	e0df      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_VELOCITY_MEASURED:  // 0x12
      tx_frame.size = 4;
 8003fb8:	2304      	movs	r3, #4
 8003fba:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = MotorController_getVelocity(controller);
 8003fbc:	f107 0308 	add.w	r3, r7, #8
 8003fc0:	f103 0408 	add.w	r4, r3, #8
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fa3b 	bl	8003440 <MotorController_getVelocity>
 8003fca:	eef0 7a40 	vmov.f32	s15, s0
 8003fce:	edc4 7a00 	vstr	s15, [r4]
      break;
 8003fd2:	e0d1      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_POSITION_KP_KI:  // 0x20
      tx_frame.size = 8;
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8003fd8:	f107 0308 	add.w	r3, r7, #8
 8003fdc:	3308      	adds	r3, #8
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8003fe4:	601a      	str	r2, [r3, #0]
      *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8003fe6:	f107 0308 	add.w	r3, r7, #8
 8003fea:	3308      	adds	r3, #8
 8003fec:	3304      	adds	r3, #4
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8003ff4:	601a      	str	r2, [r3, #0]
      break;
 8003ff6:	e0bf      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_POSITION_KD:  // 0x21
      tx_frame.size = 4;
 8003ff8:	2304      	movs	r3, #4
 8003ffa:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = controller->position_controller.position_kd;
 8003ffc:	f107 0308 	add.w	r3, r7, #8
 8004000:	3308      	adds	r3, #8
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 8004008:	601a      	str	r2, [r3, #0]
      break;
 800400a:	e0b5      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_IQ_KP_KI:  // 0x22
      tx_frame.size = 8;
 800400c:	2308      	movs	r3, #8
 800400e:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = controller->current_controller.i_q_kp;
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	3308      	adds	r3, #8
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800401a:	601a      	str	r2, [r3, #0]
      *((float *)tx_frame.data + 1) = controller->current_controller.i_q_ki;
 800401c:	f107 0308 	add.w	r3, r7, #8
 8004020:	3308      	adds	r3, #8
 8004022:	3304      	adds	r3, #4
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004028:	601a      	str	r2, [r3, #0]
      break;
 800402a:	e0a5      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_ID_KP_KI:  // 0x23
      tx_frame.size = 8;
 800402c:	2308      	movs	r3, #8
 800402e:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = controller->current_controller.i_d_kp;
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	3308      	adds	r3, #8
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800403a:	601a      	str	r2, [r3, #0]
      *((float *)tx_frame.data + 1) = controller->current_controller.i_d_ki;
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	3308      	adds	r3, #8
 8004042:	3304      	adds	r3, #4
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004048:	601a      	str	r2, [r3, #0]
      break;
 800404a:	e095      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_BUS_VOLTAGE:  // 0x30
      tx_frame.size = 4;
 800404c:	2304      	movs	r3, #4
 800404e:	81fb      	strh	r3, [r7, #14]
      *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8004050:	f107 0308 	add.w	r3, r7, #8
 8004054:	3308      	adds	r3, #8
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800405a:	601a      	str	r2, [r3, #0]
      break;
 800405c:	e08c      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_MOTOR_SPEC:  // 0x40
      if (is_get_request) {
 800405e:	7efb      	ldrb	r3, [r7, #27]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d00f      	beq.n	8004084 <MotorController_handleCANMessage+0x440>
        tx_frame.size = 8;
 8004064:	2308      	movs	r3, #8
 8004066:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8004068:	f107 0308 	add.w	r3, r7, #8
 800406c:	3308      	adds	r3, #8
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004072:	601a      	str	r2, [r3, #0]
        *((uint32_t *)tx_frame.data + 1) = controller->motor.kv_rating;
 8004074:	f107 0308 	add.w	r3, r7, #8
 8004078:	3308      	adds	r3, #8
 800407a:	3304      	adds	r3, #4
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8004080:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->motor.pole_pairs = *((uint32_t *)rx_frame->data);
        controller->motor.kv_rating = *((uint32_t *)rx_frame->data + 1);
      }
      break;
 8004082:	e079      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->motor.pole_pairs = *((uint32_t *)rx_frame->data);
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	3308      	adds	r3, #8
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	661a      	str	r2, [r3, #96]	; 0x60
        controller->motor.kv_rating = *((uint32_t *)rx_frame->data + 1);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3308      	adds	r3, #8
 8004092:	3304      	adds	r3, #4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 800409a:	e06d      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_MOTOR_FLUX_OFFSET:
      break;

    case CAN_ID_ENCODER_N_ROTATION:
      controller->encoder.n_rotations = *((uint32_t *)rx_frame->data);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	3308      	adds	r3, #8
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	619a      	str	r2, [r3, #24]

    case CAN_ID_CURRENT_DQ:  // 0x41
      break;
 80040a8:	e066      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_CURRENT_AB:  // 0x43
      break;

    case CAN_ID_CURRENTCONTROLLER_IQ:  // 0x50 [i_q_target, i_q_measured]
      if (is_get_request) {
 80040aa:	7efb      	ldrb	r3, [r7, #27]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d011      	beq.n	80040d4 <MotorController_handleCANMessage+0x490>
        tx_frame.size = 8;
 80040b0:	2308      	movs	r3, #8
 80040b2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	3308      	adds	r3, #8
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 80040c0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_measured;
 80040c2:	f107 0308 	add.w	r3, r7, #8
 80040c6:	3308      	adds	r3, #8
 80040c8:	3304      	adds	r3, #4
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 80040d0:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->current_controller.i_q_target = *((float *)rx_frame->data);
      }
      break;
 80040d2:	e051      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->current_controller.i_q_target = *((float *)rx_frame->data);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	3308      	adds	r3, #8
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      break;
 80040e0:	e04a      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_CURRENTCONTROLLER_ID:  // 0x51 [i_d_target, i_d_measured]
      if (is_get_request) {
 80040e2:	7efb      	ldrb	r3, [r7, #27]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d011      	beq.n	800410c <MotorController_handleCANMessage+0x4c8>
        tx_frame.size = 8;
 80040e8:	2308      	movs	r3, #8
 80040ea:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_target;
 80040ec:	f107 0308 	add.w	r3, r7, #8
 80040f0:	3308      	adds	r3, #8
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 80040f8:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	3308      	adds	r3, #8
 8004100:	3304      	adds	r3, #4
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8004108:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->current_controller.i_d_target = *((float *)rx_frame->data);
      }
      break;
 800410a:	e035      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->current_controller.i_d_target = *((float *)rx_frame->data);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
      break;
 8004118:	e02e      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_CURRENTCONTROLLER_VQ:  // 0x52 [v_q_target]
      if (is_get_request) {
 800411a:	7efb      	ldrb	r3, [r7, #27]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d009      	beq.n	8004134 <MotorController_handleCANMessage+0x4f0>
        tx_frame.size = 4;
 8004120:	2304      	movs	r3, #4
 8004122:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_target;
 8004124:	f107 0308 	add.w	r3, r7, #8
 8004128:	3308      	adds	r3, #8
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8004130:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->current_controller.v_q_target = *((float *)rx_frame->data);
      }
      break;
 8004132:	e021      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->current_controller.v_q_target = *((float *)rx_frame->data);
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
      break;
 8004140:	e01a      	b.n	8004178 <MotorController_handleCANMessage+0x534>
    case CAN_ID_CURRENTCONTROLLER_VD:  // 0x53 [v_d_target]
      if (is_get_request) {
 8004142:	7efb      	ldrb	r3, [r7, #27]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <MotorController_handleCANMessage+0x518>
        tx_frame.size = 4;
 8004148:	2304      	movs	r3, #4
 800414a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_d_target;
 800414c:	f107 0308 	add.w	r3, r7, #8
 8004150:	3308      	adds	r3, #8
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8004158:	601a      	str	r2, [r3, #0]
      }
      else {
        controller->current_controller.v_d_target = *((float *)rx_frame->data);
      }
      break;
 800415a:	e00d      	b.n	8004178 <MotorController_handleCANMessage+0x534>
        controller->current_controller.v_d_target = *((float *)rx_frame->data);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	3308      	adds	r3, #8
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
      break;
 8004168:	e006      	b.n	8004178 <MotorController_handleCANMessage+0x534>

    case CAN_ID_PING:  // 0x7F
      tx_frame.size = 4;
 800416a:	2304      	movs	r3, #4
 800416c:	81fb      	strh	r3, [r7, #14]
      *((uint8_t *)tx_frame.data) = controller->device_id;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
 8004174:	743b      	strb	r3, [r7, #16]
      break;
 8004176:	bf00      	nop

  }

  if (is_get_request) {
 8004178:	7efb      	ldrb	r3, [r7, #27]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00b      	beq.n	8004196 <MotorController_handleCANMessage+0x552>
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4619      	mov	r1, r3
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <MotorController_handleCANMessage+0x54c>)
 8004186:	f7fd fb73 	bl	8001870 <CAN_putTxFrame>
 800418a:	e004      	b.n	8004196 <MotorController_handleCANMessage+0x552>
 800418c:	200005f0 	.word	0x200005f0
 8004190:	20000440 	.word	0x20000440
    return;
 8004194:	bf00      	nop
  }
}
 8004196:	3724      	adds	r7, #36	; 0x24
 8004198:	46bd      	mov	sp, r7
 800419a:	bd90      	pop	{r4, r7, pc}

0800419c <clampf>:
static inline float clampf(float value, float min, float max) {
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	ed87 0a03 	vstr	s0, [r7, #12]
 80041a6:	edc7 0a02 	vstr	s1, [r7, #8]
 80041aa:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 80041ae:	ed97 7a03 	vldr	s14, [r7, #12]
 80041b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80041b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041be:	dd01      	ble.n	80041c4 <clampf+0x28>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	e00b      	b.n	80041dc <clampf+0x40>
 80041c4:	ed97 7a03 	vldr	s14, [r7, #12]
 80041c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80041cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	d501      	bpl.n	80041da <clampf+0x3e>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	e000      	b.n	80041dc <clampf+0x40>
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	ee07 3a90 	vmov	s15, r3
}
 80041e0:	eeb0 0a67 	vmov.f32	s0, s15
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
	...

080041f0 <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  controller->position_kp = 1;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80041fe:	601a      	str	r2, [r3, #0]
  controller->position_ki = 0;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	605a      	str	r2, [r3, #4]
  controller->position_kd = 0;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	609a      	str	r2, [r3, #8]

  controller->torque_limit_lower = -0.1;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a09      	ldr	r2, [pc, #36]	; (8004238 <PositionController_init+0x48>)
 8004214:	611a      	str	r2, [r3, #16]
  controller->torque_limit_upper = 0.1;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a08      	ldr	r2, [pc, #32]	; (800423c <PositionController_init+0x4c>)
 800421a:	60da      	str	r2, [r3, #12]

  controller->position_limit_lower = -1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a08      	ldr	r2, [pc, #32]	; (8004240 <PositionController_init+0x50>)
 8004220:	621a      	str	r2, [r3, #32]
  controller->position_limit_upper = 1;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004228:	61da      	str	r2, [r3, #28]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	bdcccccd 	.word	0xbdcccccd
 800423c:	3dcccccd 	.word	0x3dcccccd
 8004240:	bf800000 	.word	0xbf800000

08004244 <PositionController_update>:

void PositionController_update(PositionController *controller) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  //           kp * kp_scale * position_error +
  //           kd * kd_scale * velocity_error +
  //           command_torque

  controller->position_setpoint =
      controller->position_target - controller->position_measured;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8004258:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->position_setpoint =
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  controller->position_setpoint = clampf(
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	ed93 7a08 	vldr	s14, [r3, #32]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	edd3 6a07 	vldr	s13, [r3, #28]
 8004274:	eeb0 1a66 	vmov.f32	s2, s13
 8004278:	eef0 0a47 	vmov.f32	s1, s14
 800427c:	eeb0 0a67 	vmov.f32	s0, s15
 8004280:	f7ff ff8c 	bl	800419c <clampf>
 8004284:	eef0 7a40 	vmov.f32	s15, s0
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
      controller->position_setpoint,
      controller->position_limit_lower,
      controller->position_limit_upper);

  controller->velocity_setpoint =
      controller->velocity_target - controller->velocity_measured;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800429a:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->velocity_setpoint =
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  controller->torque_target =
      controller->position_kp * controller->position_setpoint;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	ed93 7a00 	vldr	s14, [r3]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80042b0:	ee67 7a27 	vmul.f32	s15, s14, s15
  controller->torque_target =
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

  controller->torque_setpoint =
      controller->torque_target - controller->torque_measured;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80042c6:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->torque_setpoint =
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  controller->torque_setpoint = clampf(
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	ed93 7a04 	vldr	s14, [r3, #16]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	edd3 6a03 	vldr	s13, [r3, #12]
 80042e2:	eeb0 1a66 	vmov.f32	s2, s13
 80042e6:	eef0 0a47 	vmov.f32	s1, s14
 80042ea:	eeb0 0a67 	vmov.f32	s0, s15
 80042ee:	f7ff ff55 	bl	800419c <clampf>
 80042f2:	eef0 7a40 	vmov.f32	s15, s0
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      controller->torque_setpoint,
      controller->torque_limit_lower,
      controller->torque_limit_upper);

}
 80042fc:	bf00      	nop
 80042fe:	3708      	adds	r7, #8
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004304:	b480      	push	{r7}
 8004306:	b085      	sub	sp, #20
 8004308:	af00      	add	r7, sp, #0
 800430a:	ed87 0a03 	vstr	s0, [r7, #12]
 800430e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004312:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8004316:	ed97 7a03 	vldr	s14, [r7, #12]
 800431a:	edd7 7a01 	vldr	s15, [r7, #4]
 800431e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004326:	dd01      	ble.n	800432c <clampf+0x28>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	e00b      	b.n	8004344 <clampf+0x40>
 800432c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004330:	edd7 7a02 	vldr	s15, [r7, #8]
 8004334:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	d501      	bpl.n	8004342 <clampf+0x3e>
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	e000      	b.n	8004344 <clampf+0x40>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	ee07 3a90 	vmov	s15, r3
}
 8004348:	eeb0 0a67 	vmov.f32	s0, s15
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
	...

08004358 <PowerStage_init>:
#include "powerstage.h"




void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2) {
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
 8004364:	603b      	str	r3, [r7, #0]
  powerstage->htim = htim;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	601a      	str	r2, [r3, #0]
  powerstage->hadc1 = hadc1;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	605a      	str	r2, [r3, #4]
  powerstage->hadc2 = hadc2;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	609a      	str	r2, [r3, #8]

  powerstage->enabled = 0;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2020 	strb.w	r2, [r3, #32]

  powerstage->bus_voltage_measured = 12.;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a19      	ldr	r2, [pc, #100]	; (80043e8 <PowerStage_init+0x90>)
 8004384:	625a      	str	r2, [r3, #36]	; 0x24

  PowerStage_disable(powerstage);
 8004386:	68f8      	ldr	r0, [r7, #12]
 8004388:	f000 f830 	bl	80043ec <PowerStage_disable>

  HAL_TIM_Base_Start_IT(powerstage->htim);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f006 fd05 	bl	800ada0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f006 fdcb 	bl	800af38 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2100      	movs	r1, #0
 80043a8:	4618      	mov	r0, r3
 80043aa:	f007 fec3 	bl	800c134 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2104      	movs	r1, #4
 80043b4:	4618      	mov	r0, r3
 80043b6:	f006 fdbf 	bl	800af38 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2104      	movs	r1, #4
 80043c0:	4618      	mov	r0, r3
 80043c2:	f007 feb7 	bl	800c134 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2108      	movs	r1, #8
 80043cc:	4618      	mov	r0, r3
 80043ce:	f006 fdb3 	bl	800af38 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2108      	movs	r1, #8
 80043d8:	4618      	mov	r0, r3
 80043da:	f007 feab 	bl	800c134 <HAL_TIMEx_PWMN_Start>
}
 80043de:	bf00      	nop
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	41400000 	.word	0x41400000

080043ec <PowerStage_disable>:

uint8_t PowerStage_isEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disable(PowerStage *powerstage) {
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004406:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <PowerStage_enable>:

void PowerStage_enable(PowerStage *powerstage) {
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800442e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	ed87 0a02 	vstr	s0, [r7, #8]
 8004448:	edc7 0a01 	vstr	s1, [r7, #4]
 800444c:	ed87 1a00 	vstr	s2, [r7]
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004456:	edd7 6a02 	vldr	s13, [r7, #8]
 800445a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800445e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004466:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800446a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800446e:	edc7 7a02 	vstr	s15, [r7, #8]
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8004478:	edd7 6a01 	vldr	s13, [r7, #4]
 800447c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004488:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800448c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004490:	edc7 7a01 	vstr	s15, [r7, #4]
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800449a:	edd7 6a00 	vldr	s13, [r7]
 800449e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80044ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80044b2:	edc7 7a00 	vstr	s15, [r7]

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 80044b6:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8004584 <PowerStage_setBridgeOutput+0x148>
 80044ba:	eddf 0a33 	vldr	s1, [pc, #204]	; 8004588 <PowerStage_setBridgeOutput+0x14c>
 80044be:	ed97 0a02 	vldr	s0, [r7, #8]
 80044c2:	f7ff ff1f 	bl	8004304 <clampf>
 80044c6:	ed87 0a02 	vstr	s0, [r7, #8]
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
 80044ca:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8004584 <PowerStage_setBridgeOutput+0x148>
 80044ce:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8004588 <PowerStage_setBridgeOutput+0x14c>
 80044d2:	ed97 0a01 	vldr	s0, [r7, #4]
 80044d6:	f7ff ff15 	bl	8004304 <clampf>
 80044da:	ed87 0a01 	vstr	s0, [r7, #4]
  v_c = clampf(v_c, 0.02f, 0.98f);
 80044de:	ed9f 1a29 	vldr	s2, [pc, #164]	; 8004584 <PowerStage_setBridgeOutput+0x148>
 80044e2:	eddf 0a29 	vldr	s1, [pc, #164]	; 8004588 <PowerStage_setBridgeOutput+0x14c>
 80044e6:	ed97 0a00 	vldr	s0, [r7]
 80044ea:	f7ff ff0b 	bl	8004304 <clampf>
 80044ee:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	3301      	adds	r3, #1
 80044fc:	ee07 3a90 	vmov	s15, r3
 8004500:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004504:	edd7 7a02 	vldr	s15, [r7, #8]
 8004508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800450c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004510:	ee17 3a90 	vmov	r3, s15
 8004514:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451e:	3301      	adds	r3, #1
 8004520:	ee07 3a90 	vmov	s15, r3
 8004524:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004528:	edd7 7a01 	vldr	s15, [r7, #4]
 800452c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004534:	ee17 3a90 	vmov	r3, s15
 8004538:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004542:	3301      	adds	r3, #1
 8004544:	ee07 3a90 	vmov	s15, r3
 8004548:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800454c:	edd7 7a00 	vldr	s15, [r7]
 8004550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004558:	ee17 3a90 	vmov	r3, s15
 800455c:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	8afa      	ldrh	r2, [r7, #22]
 8004566:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	8aba      	ldrh	r2, [r7, #20]
 8004570:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	8a7a      	ldrh	r2, [r7, #18]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800457c:	bf00      	nop
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	3f7ae148 	.word	0x3f7ae148
 8004588:	3ca3d70a 	.word	0x3ca3d70a

0800458c <PowerStage_calibratePhaseCurrentOffset>:

void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  powerstage->adc_reading_offset[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2109      	movs	r1, #9
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fae8 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 80045a0:	4603      	mov	r3, r0
 80045a2:	b21a      	sxth	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	825a      	strh	r2, [r3, #18]
  powerstage->adc_reading_offset[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2109      	movs	r1, #9
 80045ae:	4618      	mov	r0, r3
 80045b0:	f001 fade 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 80045b4:	4603      	mov	r3, r0
 80045b6:	b21a      	sxth	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	829a      	strh	r2, [r3, #20]
  powerstage->adc_reading_offset[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f240 110f 	movw	r1, #271	; 0x10f
 80045c4:	4618      	mov	r0, r3
 80045c6:	f001 fad3 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 80045ca:	4603      	mov	r3, r0
 80045cc:	b21a      	sxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	82da      	strh	r2, [r3, #22]

}
 80045d2:	bf00      	nop
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	0000      	movs	r0, r0
 80045dc:	0000      	movs	r0, r0
	...

080045e0 <PowerStage_getBusVoltage>:

void PowerStage_getBusVoltage(PowerStage *powerstage) {
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  powerstage->bus_voltage_measured = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f240 110f 	movw	r1, #271	; 0x10f
 80045f0:	4618      	mov	r0, r3
 80045f2:	f001 fabd 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 80045f6:	4603      	mov	r3, r0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fb ffab 	bl	8000554 <__aeabi_ui2d>
 80045fe:	a30a      	add	r3, pc, #40	; (adr r3, 8004628 <PowerStage_getBusVoltage+0x48>)
 8004600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004604:	f7fc f820 	bl	8000648 <__aeabi_dmul>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4610      	mov	r0, r2
 800460e:	4619      	mov	r1, r3
 8004610:	f7fc faf2 	bl	8000bf8 <__aeabi_d2f>
 8004614:	4602      	mov	r2, r0
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	625a      	str	r2, [r3, #36]	; 0x24
}
 800461a:	bf00      	nop
 800461c:	3708      	adds	r7, #8
 800461e:	46bd      	mov	sp, r7
 8004620:	bd80      	pop	{r7, pc}
 8004622:	bf00      	nop
 8004624:	f3af 8000 	nop.w
 8004628:	99999999 	.word	0x99999999
 800462c:	3f89d999 	.word	0x3f89d999

08004630 <PowerStage_getPhaseCurrent>:

void PowerStage_getPhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2109      	movs	r1, #9
 8004644:	4618      	mov	r0, r3
 8004646:	f001 fa93 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 800464a:	4603      	mov	r3, r0
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	819a      	strh	r2, [r3, #12]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	2109      	movs	r1, #9
 8004658:	4618      	mov	r0, r3
 800465a:	f001 fa89 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 800465e:	4603      	mov	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	81da      	strh	r2, [r3, #14]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f240 110f 	movw	r1, #271	; 0x10f
 800466e:	4618      	mov	r0, r3
 8004670:	f001 fa7e 	bl	8005b70 <HAL_ADCEx_InjectedGetValue>
 8004674:	4603      	mov	r3, r0
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	821a      	strh	r2, [r3, #16]
  powerstage->phase_current_measured[0] = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	899b      	ldrh	r3, [r3, #12]
 8004680:	461a      	mov	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	ee07 3a90 	vmov	s15, r3
 800468e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004692:	eef1 7a67 	vneg.f32	s15, s15
 8004696:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004714 <PowerStage_getPhaseCurrent+0xe4>
 800469a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  powerstage->phase_current_measured[1] = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	89db      	ldrh	r3, [r3, #14]
 80046a8:	461a      	mov	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046ba:	eef1 7a67 	vneg.f32	s15, s15
 80046be:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8004714 <PowerStage_getPhaseCurrent+0xe4>
 80046c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
  powerstage->phase_current_measured[2] = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8a1b      	ldrh	r3, [r3, #16]
 80046d0:	461a      	mov	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80046e2:	eef1 7a67 	vneg.f32	s15, s15
 80046e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8004714 <PowerStage_getPhaseCurrent+0xe4>
 80046ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = powerstage->phase_current_measured[0];
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	601a      	str	r2, [r3, #0]
  *i_b = powerstage->phase_current_measured[1];
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	601a      	str	r2, [r3, #0]
  *i_c = powerstage->phase_current_measured[2];
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	601a      	str	r2, [r3, #0]
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	3c898000 	.word	0x3c898000

08004718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800471e:	4b0f      	ldr	r3, [pc, #60]	; (800475c <HAL_MspInit+0x44>)
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	4a0e      	ldr	r2, [pc, #56]	; (800475c <HAL_MspInit+0x44>)
 8004724:	f043 0301 	orr.w	r3, r3, #1
 8004728:	6613      	str	r3, [r2, #96]	; 0x60
 800472a:	4b0c      	ldr	r3, [pc, #48]	; (800475c <HAL_MspInit+0x44>)
 800472c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	607b      	str	r3, [r7, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_MspInit+0x44>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <HAL_MspInit+0x44>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b06      	ldr	r3, [pc, #24]	; (800475c <HAL_MspInit+0x44>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40021000 	.word	0x40021000

08004760 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b09c      	sub	sp, #112	; 0x70
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004768:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]
 8004776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004778:	f107 0318 	add.w	r3, r7, #24
 800477c:	2244      	movs	r2, #68	; 0x44
 800477e:	2100      	movs	r1, #0
 8004780:	4618      	mov	r0, r3
 8004782:	f008 fe7f 	bl	800d484 <memset>
  if(hadc->Instance==ADC1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800478e:	d157      	bne.n	8004840 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004794:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004796:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800479c:	f107 0318 	add.w	r3, r7, #24
 80047a0:	4618      	mov	r0, r3
 80047a2:	f006 f853 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 80047a6:	4603      	mov	r3, r0
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80047ac:	f7fe fac6 	bl	8002d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047b0:	4b3a      	ldr	r3, [pc, #232]	; (800489c <HAL_ADC_MspInit+0x13c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a39      	ldr	r2, [pc, #228]	; (800489c <HAL_ADC_MspInit+0x13c>)
 80047b8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <HAL_ADC_MspInit+0x13c>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d10b      	bne.n	80047da <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80047c2:	4b37      	ldr	r3, [pc, #220]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c6:	4a36      	ldr	r2, [pc, #216]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047ce:	4b34      	ldr	r3, [pc, #208]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047da:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047de:	4a30      	ldr	r2, [pc, #192]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047e6:	4b2e      	ldr	r3, [pc, #184]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047f2:	4b2b      	ldr	r3, [pc, #172]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047f6:	4a2a      	ldr	r2, [pc, #168]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 80047f8:	f043 0302 	orr.w	r3, r3, #2
 80047fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047fe:	4b28      	ldr	r3, [pc, #160]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 8004800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	60fb      	str	r3, [r7, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB12     ------> ADC1_IN11
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800480a:	2301      	movs	r3, #1
 800480c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800480e:	2303      	movs	r3, #3
 8004810:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004812:	2300      	movs	r3, #0
 8004814:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004816:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800481a:	4619      	mov	r1, r3
 800481c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004820:	f003 f9ac 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_POT_Pin|GPIO_PIN_14;
 8004824:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8004828:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800482a:	2303      	movs	r3, #3
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800482e:	2300      	movs	r3, #0
 8004830:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004832:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004836:	4619      	mov	r1, r3
 8004838:	481a      	ldr	r0, [pc, #104]	; (80048a4 <HAL_ADC_MspInit+0x144>)
 800483a:	f003 f99f 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800483e:	e029      	b.n	8004894 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a18      	ldr	r2, [pc, #96]	; (80048a8 <HAL_ADC_MspInit+0x148>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d124      	bne.n	8004894 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800484a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004850:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004854:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004856:	f107 0318 	add.w	r3, r7, #24
 800485a:	4618      	mov	r0, r3
 800485c:	f005 fff6 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_ADC_MspInit+0x10a>
      Error_Handler();
 8004866:	f7fe fa69 	bl	8002d3c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_ADC_MspInit+0x13c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3301      	adds	r3, #1
 8004870:	4a0a      	ldr	r2, [pc, #40]	; (800489c <HAL_ADC_MspInit+0x13c>)
 8004872:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_ADC_MspInit+0x13c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10b      	bne.n	8004894 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 8004882:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004886:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_ADC_MspInit+0x140>)
 800488a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800488c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004890:	60bb      	str	r3, [r7, #8]
 8004892:	68bb      	ldr	r3, [r7, #8]
}
 8004894:	bf00      	nop
 8004896:	3770      	adds	r7, #112	; 0x70
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}
 800489c:	20000764 	.word	0x20000764
 80048a0:	40021000 	.word	0x40021000
 80048a4:	48000400 	.word	0x48000400
 80048a8:	50000100 	.word	0x50000100

080048ac <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b09c      	sub	sp, #112	; 0x70
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
 80048be:	609a      	str	r2, [r3, #8]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80048c4:	f107 0318 	add.w	r3, r7, #24
 80048c8:	2244      	movs	r2, #68	; 0x44
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f008 fdd9 	bl	800d484 <memset>
  if(hfdcan->Instance==FDCAN1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a37      	ldr	r2, [pc, #220]	; (80049b4 <HAL_FDCAN_MspInit+0x108>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d166      	bne.n	80049aa <HAL_FDCAN_MspInit+0xfe>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80048dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80048e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048e6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048e8:	f107 0318 	add.w	r3, r7, #24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f005 ffad 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80048f8:	f7fe fa20 	bl	8002d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80048fc:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 80048fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004900:	4a2d      	ldr	r2, [pc, #180]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 8004902:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004906:	6593      	str	r3, [r2, #88]	; 0x58
 8004908:	4b2b      	ldr	r3, [pc, #172]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004914:	4b28      	ldr	r3, [pc, #160]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 8004916:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004918:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 800491a:	f043 0301 	orr.w	r3, r3, #1
 800491e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 8004922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004924:	f003 0301 	and.w	r3, r3, #1
 8004928:	613b      	str	r3, [r7, #16]
 800492a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492c:	4b22      	ldr	r3, [pc, #136]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 800492e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004930:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 8004932:	f043 0302 	orr.w	r3, r3, #2
 8004936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004938:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <HAL_FDCAN_MspInit+0x10c>)
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004944:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004948:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494a:	2302      	movs	r3, #2
 800494c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494e:	2300      	movs	r3, #0
 8004950:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004952:	2300      	movs	r3, #0
 8004954:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004956:	2309      	movs	r3, #9
 8004958:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800495a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800495e:	4619      	mov	r1, r3
 8004960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004964:	f003 f90a 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004968:	f44f 7300 	mov.w	r3, #512	; 0x200
 800496c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800496e:	2302      	movs	r3, #2
 8004970:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004972:	2300      	movs	r3, #0
 8004974:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004976:	2300      	movs	r3, #0
 8004978:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800497a:	2309      	movs	r3, #9
 800497c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004982:	4619      	mov	r1, r3
 8004984:	480d      	ldr	r0, [pc, #52]	; (80049bc <HAL_FDCAN_MspInit+0x110>)
 8004986:	f003 f8f9 	bl	8007b7c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 800498a:	2200      	movs	r2, #0
 800498c:	2104      	movs	r1, #4
 800498e:	2015      	movs	r0, #21
 8004990:	f001 ff85 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004994:	2015      	movs	r0, #21
 8004996:	f001 ff9c 	bl	80068d2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	2104      	movs	r1, #4
 800499e:	2016      	movs	r0, #22
 80049a0:	f001 ff7d 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80049a4:	2016      	movs	r0, #22
 80049a6:	f001 ff94 	bl	80068d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80049aa:	bf00      	nop
 80049ac:	3770      	adds	r7, #112	; 0x70
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	40006400 	.word	0x40006400
 80049b8:	40021000 	.word	0x40021000
 80049bc:	48000400 	.word	0x48000400

080049c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b09a      	sub	sp, #104	; 0x68
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049d8:	f107 0310 	add.w	r3, r7, #16
 80049dc:	2244      	movs	r2, #68	; 0x44
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f008 fd4f 	bl	800d484 <memset>
  if(hi2c->Instance==I2C1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a23      	ldr	r2, [pc, #140]	; (8004a78 <HAL_I2C_MspInit+0xb8>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d13e      	bne.n	8004a6e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80049f0:	2340      	movs	r3, #64	; 0x40
 80049f2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f8:	f107 0310 	add.w	r3, r7, #16
 80049fc:	4618      	mov	r0, r3
 80049fe:	f005 ff25 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a08:	f7fe f998 	bl	8002d3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a0c:	4b1b      	ldr	r3, [pc, #108]	; (8004a7c <HAL_I2C_MspInit+0xbc>)
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	4a1a      	ldr	r2, [pc, #104]	; (8004a7c <HAL_I2C_MspInit+0xbc>)
 8004a12:	f043 0302 	orr.w	r3, r3, #2
 8004a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <HAL_I2C_MspInit+0xbc>)
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004a24:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004a28:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a2a:	2312      	movs	r3, #18
 8004a2c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a32:	2303      	movs	r3, #3
 8004a34:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a36:	2304      	movs	r3, #4
 8004a38:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a3e:	4619      	mov	r1, r3
 8004a40:	480f      	ldr	r0, [pc, #60]	; (8004a80 <HAL_I2C_MspInit+0xc0>)
 8004a42:	f003 f89b 	bl	8007b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <HAL_I2C_MspInit+0xbc>)
 8004a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <HAL_I2C_MspInit+0xbc>)
 8004a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a50:	6593      	str	r3, [r2, #88]	; 0x58
 8004a52:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <HAL_I2C_MspInit+0xbc>)
 8004a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 2, 0);
 8004a5e:	2200      	movs	r2, #0
 8004a60:	2102      	movs	r1, #2
 8004a62:	201f      	movs	r0, #31
 8004a64:	f001 ff1b 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004a68:	201f      	movs	r0, #31
 8004a6a:	f001 ff32 	bl	80068d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a6e:	bf00      	nop
 8004a70:	3768      	adds	r7, #104	; 0x68
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	40005400 	.word	0x40005400
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	48000400 	.word	0x48000400

08004a84 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08a      	sub	sp, #40	; 0x28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a8c:	f107 0314 	add.w	r3, r7, #20
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	605a      	str	r2, [r3, #4]
 8004a96:	609a      	str	r2, [r3, #8]
 8004a98:	60da      	str	r2, [r3, #12]
 8004a9a:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a2e      	ldr	r2, [pc, #184]	; (8004b5c <HAL_OPAMP_MspInit+0xd8>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d119      	bne.n	8004ada <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aa6:	4b2e      	ldr	r3, [pc, #184]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aaa:	4a2d      	ldr	r2, [pc, #180]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004aac:	f043 0301 	orr.w	r3, r3, #1
 8004ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004abe:	230a      	movs	r3, #10
 8004ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aca:	f107 0314 	add.w	r3, r7, #20
 8004ace:	4619      	mov	r1, r3
 8004ad0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ad4:	f003 f852 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004ad8:	e03b      	b.n	8004b52 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a21      	ldr	r2, [pc, #132]	; (8004b64 <HAL_OPAMP_MspInit+0xe0>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d119      	bne.n	8004b18 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ae4:	4b1e      	ldr	r3, [pc, #120]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	4a1d      	ldr	r2, [pc, #116]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004af0:	4b1b      	ldr	r3, [pc, #108]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	f003 0301 	and.w	r3, r3, #1
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004afc:	23a0      	movs	r3, #160	; 0xa0
 8004afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b00:	2303      	movs	r3, #3
 8004b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b08:	f107 0314 	add.w	r3, r7, #20
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b12:	f003 f833 	bl	8007b7c <HAL_GPIO_Init>
}
 8004b16:	e01c      	b.n	8004b52 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a12      	ldr	r2, [pc, #72]	; (8004b68 <HAL_OPAMP_MspInit+0xe4>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d117      	bne.n	8004b52 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b22:	4b0f      	ldr	r3, [pc, #60]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	4a0e      	ldr	r2, [pc, #56]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004b28:	f043 0302 	orr.w	r3, r3, #2
 8004b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b2e:	4b0c      	ldr	r3, [pc, #48]	; (8004b60 <HAL_OPAMP_MspInit+0xdc>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	60bb      	str	r3, [r7, #8]
 8004b38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004b3a:	2305      	movs	r3, #5
 8004b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b46:	f107 0314 	add.w	r3, r7, #20
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	4807      	ldr	r0, [pc, #28]	; (8004b6c <HAL_OPAMP_MspInit+0xe8>)
 8004b4e:	f003 f815 	bl	8007b7c <HAL_GPIO_Init>
}
 8004b52:	bf00      	nop
 8004b54:	3728      	adds	r7, #40	; 0x28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40010300 	.word	0x40010300
 8004b60:	40021000 	.word	0x40021000
 8004b64:	40010304 	.word	0x40010304
 8004b68:	40010308 	.word	0x40010308
 8004b6c:	48000400 	.word	0x48000400

08004b70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <HAL_TIM_Base_MspInit+0xd0>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d114      	bne.n	8004bac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004b82:	4b30      	ldr	r3, [pc, #192]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b86:	4a2f      	ldr	r2, [pc, #188]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004b88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b8c:	6613      	str	r3, [r2, #96]	; 0x60
 8004b8e:	4b2d      	ldr	r3, [pc, #180]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2101      	movs	r1, #1
 8004b9e:	2019      	movs	r0, #25
 8004ba0:	f001 fe7d 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004ba4:	2019      	movs	r0, #25
 8004ba6:	f001 fe94 	bl	80068d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004baa:	e044      	b.n	8004c36 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bb4:	d114      	bne.n	8004be0 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004bb6:	4b23      	ldr	r3, [pc, #140]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004bb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bba:	4a22      	ldr	r2, [pc, #136]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004bbc:	f043 0301 	orr.w	r3, r3, #1
 8004bc0:	6593      	str	r3, [r2, #88]	; 0x58
 8004bc2:	4b20      	ldr	r3, [pc, #128]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	201c      	movs	r0, #28
 8004bd4:	f001 fe63 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004bd8:	201c      	movs	r0, #28
 8004bda:	f001 fe7a 	bl	80068d2 <HAL_NVIC_EnableIRQ>
}
 8004bde:	e02a      	b.n	8004c36 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a18      	ldr	r2, [pc, #96]	; (8004c48 <HAL_TIM_Base_MspInit+0xd8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d114      	bne.n	8004c14 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004bea:	4b16      	ldr	r3, [pc, #88]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bee:	4a15      	ldr	r2, [pc, #84]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004bf0:	f043 0304 	orr.w	r3, r3, #4
 8004bf4:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf6:	4b13      	ldr	r3, [pc, #76]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004c02:	2200      	movs	r2, #0
 8004c04:	2102      	movs	r1, #2
 8004c06:	201e      	movs	r0, #30
 8004c08:	f001 fe49 	bl	800689e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004c0c:	201e      	movs	r0, #30
 8004c0e:	f001 fe60 	bl	80068d2 <HAL_NVIC_EnableIRQ>
}
 8004c12:	e010      	b.n	8004c36 <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a0c      	ldr	r2, [pc, #48]	; (8004c4c <HAL_TIM_Base_MspInit+0xdc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d10b      	bne.n	8004c36 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c22:	4a08      	ldr	r2, [pc, #32]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004c24:	f043 0310 	orr.w	r3, r3, #16
 8004c28:	6593      	str	r3, [r2, #88]	; 0x58
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <HAL_TIM_Base_MspInit+0xd4>)
 8004c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	60bb      	str	r3, [r7, #8]
 8004c34:	68bb      	ldr	r3, [r7, #8]
}
 8004c36:	bf00      	nop
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	40012c00 	.word	0x40012c00
 8004c44:	40021000 	.word	0x40021000
 8004c48:	40000800 	.word	0x40000800
 8004c4c:	40001000 	.word	0x40001000

08004c50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b08a      	sub	sp, #40	; 0x28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c58:	f107 0314 	add.w	r3, r7, #20
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <HAL_TIM_MspPostInit+0xdc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d157      	bne.n	8004d22 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c72:	4b2f      	ldr	r3, [pc, #188]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	4a2e      	ldr	r2, [pc, #184]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004c78:	f043 0304 	orr.w	r3, r3, #4
 8004c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	613b      	str	r3, [r7, #16]
 8004c88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8a:	4b29      	ldr	r3, [pc, #164]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c96:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ca2:	4b23      	ldr	r3, [pc, #140]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004ca8:	f043 0301 	orr.w	r3, r3, #1
 8004cac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_TIM_MspPostInit+0xe0>)
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004ccc:	2304      	movs	r3, #4
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4817      	ldr	r0, [pc, #92]	; (8004d34 <HAL_TIM_MspPostInit+0xe4>)
 8004cd8:	f002 ff50 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004cdc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004cee:	2304      	movs	r3, #4
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf2:	f107 0314 	add.w	r3, r7, #20
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	480f      	ldr	r0, [pc, #60]	; (8004d38 <HAL_TIM_MspPostInit+0xe8>)
 8004cfa:	f002 ff3f 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8004cfe:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8004d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d10:	2306      	movs	r3, #6
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d14:	f107 0314 	add.w	r3, r7, #20
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d1e:	f002 ff2d 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004d22:	bf00      	nop
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40012c00 	.word	0x40012c00
 8004d30:	40021000 	.word	0x40021000
 8004d34:	48000800 	.word	0x48000800
 8004d38:	48000400 	.word	0x48000400

08004d3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b09a      	sub	sp, #104	; 0x68
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d54:	f107 0310 	add.w	r3, r7, #16
 8004d58:	2244      	movs	r2, #68	; 0x44
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f008 fb91 	bl	800d484 <memset>
  if(huart->Instance==USART2)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a1e      	ldr	r2, [pc, #120]	; (8004de0 <HAL_UART_MspInit+0xa4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d135      	bne.n	8004dd8 <HAL_UART_MspInit+0x9c>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004d70:	2300      	movs	r3, #0
 8004d72:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d74:	f107 0310 	add.w	r3, r7, #16
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f005 fd67 	bl	800a84c <HAL_RCCEx_PeriphCLKConfig>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004d84:	f7fd ffda 	bl	8002d3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d88:	4b16      	ldr	r3, [pc, #88]	; (8004de4 <HAL_UART_MspInit+0xa8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	4a15      	ldr	r2, [pc, #84]	; (8004de4 <HAL_UART_MspInit+0xa8>)
 8004d8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
 8004d94:	4b13      	ldr	r3, [pc, #76]	; (8004de4 <HAL_UART_MspInit+0xa8>)
 8004d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d9c:	60fb      	str	r3, [r7, #12]
 8004d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da0:	4b10      	ldr	r3, [pc, #64]	; (8004de4 <HAL_UART_MspInit+0xa8>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004da4:	4a0f      	ldr	r2, [pc, #60]	; (8004de4 <HAL_UART_MspInit+0xa8>)
 8004da6:	f043 0302 	orr.w	r3, r3, #2
 8004daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004dac:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <HAL_UART_MspInit+0xa8>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004db0:	f003 0302 	and.w	r3, r3, #2
 8004db4:	60bb      	str	r3, [r7, #8]
 8004db6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004db8:	2318      	movs	r3, #24
 8004dba:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004dc8:	2307      	movs	r3, #7
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4805      	ldr	r0, [pc, #20]	; (8004de8 <HAL_UART_MspInit+0xac>)
 8004dd4:	f002 fed2 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004dd8:	bf00      	nop
 8004dda:	3768      	adds	r7, #104	; 0x68
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40004400 	.word	0x40004400
 8004de4:	40021000 	.word	0x40021000
 8004de8:	48000400 	.word	0x48000400

08004dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <NMI_Handler+0x4>

08004df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004df6:	e7fe      	b.n	8004df6 <HardFault_Handler+0x4>

08004df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dfc:	e7fe      	b.n	8004dfc <MemManage_Handler+0x4>

08004dfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e02:	e7fe      	b.n	8004e02 <BusFault_Handler+0x4>

08004e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e08:	e7fe      	b.n	8004e08 <UsageFault_Handler+0x4>

08004e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e1c:	bf00      	nop
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e38:	f000 f992 	bl	8005160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e3c:	bf00      	nop
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e44:	4802      	ldr	r0, [pc, #8]	; (8004e50 <FDCAN1_IT0_IRQHandler+0x10>)
 8004e46:	f002 f9b3 	bl	80071b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	20000440 	.word	0x20000440

08004e54 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <FDCAN1_IT1_IRQHandler+0x10>)
 8004e5a:	f002 f9a9 	bl	80071b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20000440 	.word	0x20000440

08004e68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004e6e:	f006 f963 	bl	800b138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200005a4 	.word	0x200005a4

08004e7c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <TIM2_IRQHandler+0x10>)
 8004e82:	f006 f959 	bl	800b138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200005f0 	.word	0x200005f0

08004e90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004e94:	4802      	ldr	r0, [pc, #8]	; (8004ea0 <TIM4_IRQHandler+0x10>)
 8004e96:	f006 f94f 	bl	800b138 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	2000063c 	.word	0x2000063c

08004ea4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004ea8:	4802      	ldr	r0, [pc, #8]	; (8004eb4 <I2C1_EV_IRQHandler+0x10>)
 8004eaa:	f003 f9af 	bl	800820c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200004a4 	.word	0x200004a4

08004eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	af00      	add	r7, sp, #0
	return 1;
 8004ebc:	2301      	movs	r3, #1
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <_kill>:

int _kill(int pid, int sig)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004ed2:	f008 faad 	bl	800d430 <__errno>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2216      	movs	r2, #22
 8004eda:	601a      	str	r2, [r3, #0]
	return -1;
 8004edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3708      	adds	r7, #8
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_exit>:

void _exit (int status)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f7ff ffe7 	bl	8004ec8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004efa:	e7fe      	b.n	8004efa <_exit+0x12>

08004efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]
 8004f0c:	e00a      	b.n	8004f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f0e:	f3af 8000 	nop.w
 8004f12:	4601      	mov	r1, r0
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	1c5a      	adds	r2, r3, #1
 8004f18:	60ba      	str	r2, [r7, #8]
 8004f1a:	b2ca      	uxtb	r2, r1
 8004f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	3301      	adds	r3, #1
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	dbf0      	blt.n	8004f0e <_read+0x12>
	}

return len;
 8004f2c:	687b      	ldr	r3, [r7, #4]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f36:	b580      	push	{r7, lr}
 8004f38:	b086      	sub	sp, #24
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	60f8      	str	r0, [r7, #12]
 8004f3e:	60b9      	str	r1, [r7, #8]
 8004f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	e009      	b.n	8004f5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	60ba      	str	r2, [r7, #8]
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	617b      	str	r3, [r7, #20]
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	dbf1      	blt.n	8004f48 <_write+0x12>
	}
	return len;
 8004f64:	687b      	ldr	r3, [r7, #4]
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3718      	adds	r7, #24
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <_close>:

int _close(int file)
{
 8004f6e:	b480      	push	{r7}
 8004f70:	b083      	sub	sp, #12
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
	return -1;
 8004f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f96:	605a      	str	r2, [r3, #4]
	return 0;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <_isatty>:

int _isatty(int file)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
	return 1;
 8004fae:	2301      	movs	r3, #1
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
	return 0;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fe0:	4a14      	ldr	r2, [pc, #80]	; (8005034 <_sbrk+0x5c>)
 8004fe2:	4b15      	ldr	r3, [pc, #84]	; (8005038 <_sbrk+0x60>)
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fec:	4b13      	ldr	r3, [pc, #76]	; (800503c <_sbrk+0x64>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d102      	bne.n	8004ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ff4:	4b11      	ldr	r3, [pc, #68]	; (800503c <_sbrk+0x64>)
 8004ff6:	4a12      	ldr	r2, [pc, #72]	; (8005040 <_sbrk+0x68>)
 8004ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ffa:	4b10      	ldr	r3, [pc, #64]	; (800503c <_sbrk+0x64>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	429a      	cmp	r2, r3
 8005006:	d207      	bcs.n	8005018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005008:	f008 fa12 	bl	800d430 <__errno>
 800500c:	4603      	mov	r3, r0
 800500e:	220c      	movs	r2, #12
 8005010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
 8005016:	e009      	b.n	800502c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005018:	4b08      	ldr	r3, [pc, #32]	; (800503c <_sbrk+0x64>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800501e:	4b07      	ldr	r3, [pc, #28]	; (800503c <_sbrk+0x64>)
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4413      	add	r3, r2
 8005026:	4a05      	ldr	r2, [pc, #20]	; (800503c <_sbrk+0x64>)
 8005028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800502a:	68fb      	ldr	r3, [r7, #12]
}
 800502c:	4618      	mov	r0, r3
 800502e:	3718      	adds	r7, #24
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20008000 	.word	0x20008000
 8005038:	00000400 	.word	0x00000400
 800503c:	20000768 	.word	0x20000768
 8005040:	20000780 	.word	0x20000780

08005044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005048:	4b06      	ldr	r3, [pc, #24]	; (8005064 <SystemInit+0x20>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	4a05      	ldr	r2, [pc, #20]	; (8005064 <SystemInit+0x20>)
 8005050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005058:	bf00      	nop
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	e000ed00 	.word	0xe000ed00

08005068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005068:	480d      	ldr	r0, [pc, #52]	; (80050a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800506a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800506c:	480d      	ldr	r0, [pc, #52]	; (80050a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800506e:	490e      	ldr	r1, [pc, #56]	; (80050a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005070:	4a0e      	ldr	r2, [pc, #56]	; (80050ac <LoopForever+0xe>)
  movs r3, #0
 8005072:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005074:	e002      	b.n	800507c <LoopCopyDataInit>

08005076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800507a:	3304      	adds	r3, #4

0800507c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800507c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800507e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005080:	d3f9      	bcc.n	8005076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005082:	4a0b      	ldr	r2, [pc, #44]	; (80050b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005084:	4c0b      	ldr	r4, [pc, #44]	; (80050b4 <LoopForever+0x16>)
  movs r3, #0
 8005086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005088:	e001      	b.n	800508e <LoopFillZerobss>

0800508a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800508a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800508c:	3204      	adds	r2, #4

0800508e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800508e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005090:	d3fb      	bcc.n	800508a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005092:	f7ff ffd7 	bl	8005044 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005096:	f008 f9d1 	bl	800d43c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800509a:	f7fd f933 	bl	8002304 <main>

0800509e <LoopForever>:

LoopForever:
    b LoopForever
 800509e:	e7fe      	b.n	800509e <LoopForever>
  ldr   r0, =_estack
 80050a0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80050a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050a8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 80050ac:	080119f4 	.word	0x080119f4
  ldr r2, =_sbss
 80050b0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 80050b4:	20000780 	.word	0x20000780

080050b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80050b8:	e7fe      	b.n	80050b8 <ADC1_2_IRQHandler>

080050ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b082      	sub	sp, #8
 80050be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80050c0:	2300      	movs	r3, #0
 80050c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050c4:	2003      	movs	r0, #3
 80050c6:	f001 fbdf 	bl	8006888 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80050ca:	200f      	movs	r0, #15
 80050cc:	f000 f80e 	bl	80050ec <HAL_InitTick>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	71fb      	strb	r3, [r7, #7]
 80050da:	e001      	b.n	80050e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80050dc:	f7ff fb1c 	bl	8004718 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80050e0:	79fb      	ldrb	r3, [r7, #7]

}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3708      	adds	r7, #8
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
	...

080050ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80050f8:	4b16      	ldr	r3, [pc, #88]	; (8005154 <HAL_InitTick+0x68>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d022      	beq.n	8005146 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005100:	4b15      	ldr	r3, [pc, #84]	; (8005158 <HAL_InitTick+0x6c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	4b13      	ldr	r3, [pc, #76]	; (8005154 <HAL_InitTick+0x68>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800510c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005110:	fbb2 f3f3 	udiv	r3, r2, r3
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fbea 	bl	80068ee <HAL_SYSTICK_Config>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10f      	bne.n	8005140 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b0f      	cmp	r3, #15
 8005124:	d809      	bhi.n	800513a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005126:	2200      	movs	r2, #0
 8005128:	6879      	ldr	r1, [r7, #4]
 800512a:	f04f 30ff 	mov.w	r0, #4294967295
 800512e:	f001 fbb6 	bl	800689e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005132:	4a0a      	ldr	r2, [pc, #40]	; (800515c <HAL_InitTick+0x70>)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6013      	str	r3, [r2, #0]
 8005138:	e007      	b.n	800514a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e004      	b.n	800514a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
 8005144:	e001      	b.n	800514a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800514a:	7bfb      	ldrb	r3, [r7, #15]
}
 800514c:	4618      	mov	r0, r3
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	20000008 	.word	0x20000008
 8005158:	20000000 	.word	0x20000000
 800515c:	20000004 	.word	0x20000004

08005160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <HAL_IncTick+0x1c>)
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_IncTick+0x20>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4413      	add	r3, r2
 800516e:	4a03      	ldr	r2, [pc, #12]	; (800517c <HAL_IncTick+0x1c>)
 8005170:	6013      	str	r3, [r2, #0]
}
 8005172:	bf00      	nop
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr
 800517c:	2000076c 	.word	0x2000076c
 8005180:	20000008 	.word	0x20000008

08005184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return uwTick;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_GetTick+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2000076c 	.word	0x2000076c

0800519c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051a4:	f7ff ffee 	bl	8005184 <HAL_GetTick>
 80051a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d004      	beq.n	80051c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_Delay+0x40>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4413      	add	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051c0:	bf00      	nop
 80051c2:	f7ff ffdf 	bl	8005184 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d8f7      	bhi.n	80051c2 <HAL_Delay+0x26>
  {
  }
}
 80051d2:	bf00      	nop
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	20000008 	.word	0x20000008

080051e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	431a      	orrs	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	609a      	str	r2, [r3, #8]
}
 80051fa:	bf00      	nop
 80051fc:	370c      	adds	r7, #12
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr

08005206 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005206:	b480      	push	{r7}
 8005208:	b083      	sub	sp, #12
 800520a:	af00      	add	r7, sp, #0
 800520c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005216:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	6093      	str	r3, [r2, #8]
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800522a:	b480      	push	{r7}
 800522c:	b083      	sub	sp, #12
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800523a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800523e:	d101      	bne.n	8005244 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr

08005252 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005262:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005266:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800527a:	b480      	push	{r7}
 800527c:	b083      	sub	sp, #12
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800528a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800528e:	d101      	bne.n	8005294 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005290:	2301      	movs	r3, #1
 8005292:	e000      	b.n	8005296 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b083      	sub	sp, #12
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80052b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052b6:	f043 0201 	orr.w	r2, r3, #1
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b083      	sub	sp, #12
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <LL_ADC_IsEnabled+0x18>
 80052de:	2301      	movs	r3, #1
 80052e0:	e000      	b.n	80052e4 <LL_ADC_IsEnabled+0x1a>
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b04      	cmp	r3, #4
 8005302:	d101      	bne.n	8005308 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	689b      	ldr	r3, [r3, #8]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b08      	cmp	r3, #8
 8005328:	d101      	bne.n	800532e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800532a:	2301      	movs	r3, #1
 800532c:	e000      	b.n	8005330 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800533c:	b590      	push	{r4, r7, lr}
 800533e:	b089      	sub	sp, #36	; 0x24
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005344:	2300      	movs	r3, #0
 8005346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005348:	2300      	movs	r3, #0
 800534a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e177      	b.n	8005646 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f7ff f9fb 	bl	8004760 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f7ff ff54 	bl	800522a <LL_ADC_IsDeepPowerDownEnabled>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f7ff ff3a 	bl	8005206 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff ff6f 	bl	800527a <LL_ADC_IsInternalRegulatorEnabled>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d115      	bne.n	80053ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7ff ff53 	bl	8005252 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053ac:	4b9c      	ldr	r3, [pc, #624]	; (8005620 <HAL_ADC_Init+0x2e4>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	099b      	lsrs	r3, r3, #6
 80053b2:	4a9c      	ldr	r2, [pc, #624]	; (8005624 <HAL_ADC_Init+0x2e8>)
 80053b4:	fba2 2303 	umull	r2, r3, r2, r3
 80053b8:	099b      	lsrs	r3, r3, #6
 80053ba:	3301      	adds	r3, #1
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80053c0:	e002      	b.n	80053c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	3b01      	subs	r3, #1
 80053c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f9      	bne.n	80053c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff ff51 	bl	800527a <LL_ADC_IsInternalRegulatorEnabled>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10d      	bne.n	80053fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053e2:	f043 0210 	orr.w	r2, r3, #16
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ee:	f043 0201 	orr.w	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7ff ff76 	bl	80052f0 <LL_ADC_REG_IsConversionOngoing>
 8005404:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	f003 0310 	and.w	r3, r3, #16
 800540e:	2b00      	cmp	r3, #0
 8005410:	f040 8110 	bne.w	8005634 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f040 810c 	bne.w	8005634 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005424:	f043 0202 	orr.w	r2, r3, #2
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ff4a 	bl	80052ca <LL_ADC_IsEnabled>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d111      	bne.n	8005460 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800543c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005440:	f7ff ff43 	bl	80052ca <LL_ADC_IsEnabled>
 8005444:	4604      	mov	r4, r0
 8005446:	4878      	ldr	r0, [pc, #480]	; (8005628 <HAL_ADC_Init+0x2ec>)
 8005448:	f7ff ff3f 	bl	80052ca <LL_ADC_IsEnabled>
 800544c:	4603      	mov	r3, r0
 800544e:	4323      	orrs	r3, r4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d105      	bne.n	8005460 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	4619      	mov	r1, r3
 800545a:	4874      	ldr	r0, [pc, #464]	; (800562c <HAL_ADC_Init+0x2f0>)
 800545c:	f7ff fec0 	bl	80051e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	7f5b      	ldrb	r3, [r3, #29]
 8005464:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800546a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005470:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005476:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800547e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005480:	4313      	orrs	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800548a:	2b01      	cmp	r3, #1
 800548c:	d106      	bne.n	800549c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	3b01      	subs	r3, #1
 8005494:	045b      	lsls	r3, r3, #17
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	4313      	orrs	r3, r2
 800549a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d009      	beq.n	80054b8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	4b5c      	ldr	r3, [pc, #368]	; (8005630 <HAL_ADC_Init+0x2f4>)
 80054c0:	4013      	ands	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	69b9      	ldr	r1, [r7, #24]
 80054c8:	430b      	orrs	r3, r1
 80054ca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	430a      	orrs	r2, r1
 80054e0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f7ff ff02 	bl	80052f0 <LL_ADC_REG_IsConversionOngoing>
 80054ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff0f 	bl	8005316 <LL_ADC_INJ_IsConversionOngoing>
 80054f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d16d      	bne.n	80055dc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d16a      	bne.n	80055dc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800550a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005512:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005514:	4313      	orrs	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005522:	f023 0302 	bic.w	r3, r3, #2
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6812      	ldr	r2, [r2, #0]
 800552a:	69b9      	ldr	r1, [r7, #24]
 800552c:	430b      	orrs	r3, r1
 800552e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d017      	beq.n	8005568 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	691a      	ldr	r2, [r3, #16]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005546:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005550:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005554:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005558:	687a      	ldr	r2, [r7, #4]
 800555a:	6911      	ldr	r1, [r2, #16]
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6812      	ldr	r2, [r2, #0]
 8005560:	430b      	orrs	r3, r1
 8005562:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005566:	e013      	b.n	8005590 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	691a      	ldr	r2, [r3, #16]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005576:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6812      	ldr	r2, [r2, #0]
 8005584:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800558c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005596:	2b01      	cmp	r3, #1
 8005598:	d118      	bne.n	80055cc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80055a4:	f023 0304 	bic.w	r3, r3, #4
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80055b6:	4311      	orrs	r1, r2
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80055bc:	430a      	orrs	r2, r1
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	611a      	str	r2, [r3, #16]
 80055ca:	e007      	b.n	80055dc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691a      	ldr	r2, [r3, #16]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	695b      	ldr	r3, [r3, #20]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d10c      	bne.n	80055fe <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f023 010f 	bic.w	r1, r3, #15
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	1e5a      	subs	r2, r3, #1
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	430a      	orrs	r2, r1
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30
 80055fc:	e007      	b.n	800560e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 020f 	bic.w	r2, r2, #15
 800560c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005612:	f023 0303 	bic.w	r3, r3, #3
 8005616:	f043 0201 	orr.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	65da      	str	r2, [r3, #92]	; 0x5c
 800561e:	e011      	b.n	8005644 <HAL_ADC_Init+0x308>
 8005620:	20000000 	.word	0x20000000
 8005624:	053e2d63 	.word	0x053e2d63
 8005628:	50000100 	.word	0x50000100
 800562c:	50000300 	.word	0x50000300
 8005630:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005638:	f043 0210 	orr.w	r2, r3, #16
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005644:	7ffb      	ldrb	r3, [r7, #31]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3724      	adds	r7, #36	; 0x24
 800564a:	46bd      	mov	sp, r7
 800564c:	bd90      	pop	{r4, r7, pc}
 800564e:	bf00      	nop

08005650 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fe34 	bl	80052ca <LL_ADC_IsEnabled>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d14d      	bne.n	8005704 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	4b28      	ldr	r3, [pc, #160]	; (8005710 <ADC_Enable+0xc0>)
 8005670:	4013      	ands	r3, r2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	f043 0210 	orr.w	r2, r3, #16
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005686:	f043 0201 	orr.w	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e039      	b.n	8005706 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7ff fe03 	bl	80052a2 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800569c:	f7ff fd72 	bl	8005184 <HAL_GetTick>
 80056a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056a2:	e028      	b.n	80056f6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fe0e 	bl	80052ca <LL_ADC_IsEnabled>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fdf2 	bl	80052a2 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80056be:	f7ff fd61 	bl	8005184 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d914      	bls.n	80056f6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d00d      	beq.n	80056f6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056de:	f043 0210 	orr.w	r2, r3, #16
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ea:	f043 0201 	orr.w	r2, r3, #1
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e007      	b.n	8005706 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d1cf      	bne.n	80056a4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	8000003f 	.word	0x8000003f

08005714 <LL_ADC_SetCommonPathInternalCh>:
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	609a      	str	r2, [r3, #8]
}
 800572e:	bf00      	nop
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <LL_ADC_GetCommonPathInternalCh>:
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800574a:	4618      	mov	r0, r3
 800574c:	370c      	adds	r7, #12
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
	...

08005758 <LL_ADC_SetOffset>:
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	3360      	adds	r3, #96	; 0x60
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	4413      	add	r3, r2
 8005772:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <LL_ADC_SetOffset+0x44>)
 800577a:	4013      	ands	r3, r2
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	430a      	orrs	r2, r1
 8005786:	4313      	orrs	r3, r2
 8005788:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	601a      	str	r2, [r3, #0]
}
 8005790:	bf00      	nop
 8005792:	371c      	adds	r7, #28
 8005794:	46bd      	mov	sp, r7
 8005796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579a:	4770      	bx	lr
 800579c:	03fff000 	.word	0x03fff000

080057a0 <LL_ADC_GetOffsetChannel>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3360      	adds	r3, #96	; 0x60
 80057ae:	461a      	mov	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4413      	add	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3714      	adds	r7, #20
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <LL_ADC_SetOffsetState>:
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3360      	adds	r3, #96	; 0x60
 80057dc:	461a      	mov	r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4413      	add	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	431a      	orrs	r2, r3
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	601a      	str	r2, [r3, #0]
}
 80057f6:	bf00      	nop
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <LL_ADC_SetOffsetSign>:
{
 8005802:	b480      	push	{r7}
 8005804:	b087      	sub	sp, #28
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3360      	adds	r3, #96	; 0x60
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	431a      	orrs	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	601a      	str	r2, [r3, #0]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <LL_ADC_SetOffsetSaturation>:
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	3360      	adds	r3, #96	; 0x60
 8005848:	461a      	mov	r2, r3
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	4413      	add	r3, r2
 8005850:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	431a      	orrs	r2, r3
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	601a      	str	r2, [r3, #0]
}
 8005862:	bf00      	nop
 8005864:	371c      	adds	r7, #28
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <LL_ADC_SetSamplingTimeCommonConfig>:
{
 800586e:	b480      	push	{r7}
 8005870:	b083      	sub	sp, #12
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	695b      	ldr	r3, [r3, #20]
 800587c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	615a      	str	r2, [r3, #20]
}
 8005888:	bf00      	nop
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_INJ_GetTrigAuto>:
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <LL_ADC_SetChannelSamplingTime>:
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	3314      	adds	r3, #20
 80058c0:	461a      	mov	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	0e5b      	lsrs	r3, r3, #25
 80058c6:	009b      	lsls	r3, r3, #2
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	4413      	add	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	0d1b      	lsrs	r3, r3, #20
 80058d8:	f003 031f 	and.w	r3, r3, #31
 80058dc:	2107      	movs	r1, #7
 80058de:	fa01 f303 	lsl.w	r3, r1, r3
 80058e2:	43db      	mvns	r3, r3
 80058e4:	401a      	ands	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	0d1b      	lsrs	r3, r3, #20
 80058ea:	f003 031f 	and.w	r3, r3, #31
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	fa01 f303 	lsl.w	r3, r1, r3
 80058f4:	431a      	orrs	r2, r3
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
	...

08005908 <LL_ADC_SetChannelSingleDiff>:
{
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a0f      	ldr	r2, [pc, #60]	; (8005954 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10a      	bne.n	8005932 <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005928:	431a      	orrs	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005930:	e00a      	b.n	8005948 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800593e:	43db      	mvns	r3, r3
 8005940:	401a      	ands	r2, r3
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	407f0000 	.word	0x407f0000

08005958 <LL_ADC_GetMultimode>:
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 031f 	and.w	r3, r3, #31
}
 8005968:	4618      	mov	r0, r3
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <LL_ADC_IsEnabled>:
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <LL_ADC_IsEnabled+0x18>
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <LL_ADC_IsEnabled+0x1a>
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr

0800599a <LL_ADC_REG_IsConversionOngoing>:
{
 800599a:	b480      	push	{r7}
 800599c:	b083      	sub	sp, #12
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d101      	bne.n	80059b2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e000      	b.n	80059b4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <LL_ADC_INJ_StartConversion>:
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059d4:	f043 0208 	orr.w	r2, r3, #8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	609a      	str	r2, [r3, #8]
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <LL_ADC_INJ_IsConversionOngoing>:
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f003 0308 	and.w	r3, r3, #8
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d101      	bne.n	8005a00 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059fc:	2301      	movs	r3, #1
 80059fe:	e000      	b.n	8005a02 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a18:	4853      	ldr	r0, [pc, #332]	; (8005b68 <HAL_ADCEx_InjectedStart+0x158>)
 8005a1a:	f7ff ff9d 	bl	8005958 <LL_ADC_GetMultimode>
 8005a1e:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7ff ffdf 	bl	80059e8 <LL_ADC_INJ_IsConversionOngoing>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e094      	b.n	8005b5e <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a3e:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a46:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d10a      	bne.n	8005a64 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d107      	bne.n	8005a64 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a58:	f043 0220 	orr.w	r2, r3, #32
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e07c      	b.n	8005b5e <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_ADCEx_InjectedStart+0x62>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e075      	b.n	8005b5e <HAL_ADCEx_InjectedStart+0x14e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7ff fde8 	bl	8005650 <ADC_Enable>
 8005a80:	4603      	mov	r3, r0
 8005a82:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005a84:	7bfb      	ldrb	r3, [r7, #15]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d164      	bne.n	8005b54 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d006      	beq.n	8005aa4 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a9a:	f023 0208 	bic.w	r2, r3, #8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	661a      	str	r2, [r3, #96]	; 0x60
 8005aa2:	e002      	b.n	8005aaa <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2a      	ldr	r2, [pc, #168]	; (8005b6c <HAL_ADCEx_InjectedStart+0x15c>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d002      	beq.n	8005ace <HAL_ADCEx_InjectedStart+0xbe>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	e001      	b.n	8005ad2 <HAL_ADCEx_InjectedStart+0xc2>
 8005ace:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	6812      	ldr	r2, [r2, #0]
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d002      	beq.n	8005ae0 <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d105      	bne.n	8005aec <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2260      	movs	r2, #96	; 0x60
 8005af2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1a      	ldr	r2, [pc, #104]	; (8005b6c <HAL_ADCEx_InjectedStart+0x15c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d002      	beq.n	8005b0c <HAL_ADCEx_InjectedStart+0xfc>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	e001      	b.n	8005b10 <HAL_ADCEx_InjectedStart+0x100>
 8005b0c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d008      	beq.n	8005b2a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b06      	cmp	r3, #6
 8005b22:	d002      	beq.n	8005b2a <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2b07      	cmp	r3, #7
 8005b28:	d10d      	bne.n	8005b46 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7ff feb0 	bl	8005894 <LL_ADC_INJ_GetTrigAuto>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d110      	bne.n	8005b5c <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff ff3e 	bl	80059c0 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005b44:	e00a      	b.n	8005b5c <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b52:	e003      	b.n	8005b5c <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	50000300 	.word	0x50000300
 8005b6c:	50000100 	.word	0x50000100

08005b70 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b085      	sub	sp, #20
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	f240 321b 	movw	r2, #795	; 0x31b
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00e      	beq.n	8005ba2 <HAL_ADCEx_InjectedGetValue+0x32>
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8005b8a:	d21c      	bcs.n	8005bc6 <HAL_ADCEx_InjectedGetValue+0x56>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	f240 120f 	movw	r2, #271	; 0x10f
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d011      	beq.n	8005bba <HAL_ADCEx_InjectedGetValue+0x4a>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f240 2215 	movw	r2, #533	; 0x215
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d006      	beq.n	8005bae <HAL_ADCEx_InjectedGetValue+0x3e>
 8005ba0:	e011      	b.n	8005bc6 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005baa:	60fb      	str	r3, [r7, #12]
      break;
 8005bac:	e011      	b.n	8005bd2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb6:	60fb      	str	r3, [r7, #12]
      break;
 8005bb8:	e00b      	b.n	8005bd2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc2:	60fb      	str	r3, [r7, #12]
      break;
 8005bc4:	e005      	b.n	8005bd2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bce:	60fb      	str	r3, [r7, #12]
      break;
 8005bd0:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3714      	adds	r7, #20
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b0b6      	sub	sp, #216	; 0xd8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d102      	bne.n	8005c0a <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005c04:	2302      	movs	r3, #2
 8005c06:	f000 bcb5 	b.w	8006574 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d130      	bne.n	8005c84 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d179      	bne.n	8005d1e <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d010      	beq.n	8005c54 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	0e9b      	lsrs	r3, r3, #26
 8005c38:	025b      	lsls	r3, r3, #9
 8005c3a:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005c46:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c52:	e007      	b.n	8005c64 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	0e9b      	lsrs	r3, r3, #26
 8005c5a:	025b      	lsls	r3, r3, #9
 8005c5c:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005c60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c6a:	4b84      	ldr	r3, [pc, #528]	; (8005e7c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6812      	ldr	r2, [r2, #0]
 8005c72:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005c76:	430b      	orrs	r3, r1
 8005c78:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c80:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005c82:	e04c      	b.n	8005d1e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d11d      	bne.n	8005cc8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00d      	beq.n	8005cbe <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cac:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005cb0:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cbc:	e004      	b.n	8005cc8 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6a1b      	ldr	r3, [r3, #32]
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	0e9b      	lsrs	r3, r3, #26
 8005cce:	f003 021f 	and.w	r2, r3, #31
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cec:	1e5a      	subs	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005cf6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10a      	bne.n	8005d1e <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d0e:	4b5b      	ldr	r3, [pc, #364]	; (8005e7c <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	430b      	orrs	r3, r1
 8005d1c:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff fe60 	bl	80059e8 <LL_ADC_INJ_IsConversionOngoing>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d124      	bne.n	8005d78 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d112      	bne.n	8005d5e <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d48:	055a      	lsls	r2, r3, #21
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d50:	051b      	lsls	r3, r3, #20
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	430a      	orrs	r2, r1
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	e00c      	b.n	8005d78 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005d6e:	055a      	lsls	r2, r3, #21
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	430a      	orrs	r2, r1
 8005d76:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7ff fe0c 	bl	800599a <LL_ADC_REG_IsConversionOngoing>
 8005d82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff fe2c 	bl	80059e8 <LL_ADC_INJ_IsConversionOngoing>
 8005d90:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005d94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	f040 822e 	bne.w	80061fa <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f040 8229 	bne.w	80061fa <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d003      	beq.n	8005db8 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d116      	bne.n	8005de6 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d108      	bne.n	8005dd4 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68da      	ldr	r2, [r3, #12]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005dd0:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005dd2:	e01f      	b.n	8005e14 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005de2:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005de4:	e016      	b.n	8005e14 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d109      	bne.n	8005e04 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df4:	f043 0220 	orr.w	r2, r3, #32
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005e02:	e007      	b.n	8005e14 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005e12:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d110      	bne.n	8005e40 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	430b      	orrs	r3, r1
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f042 0202 	orr.w	r2, r2, #2
 8005e3c:	611a      	str	r2, [r3, #16]
 8005e3e:	e007      	b.n	8005e50 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0202 	bic.w	r2, r2, #2
 8005e4e:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e58:	d112      	bne.n	8005e80 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6818      	ldr	r0, [r3, #0]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	4619      	mov	r1, r3
 8005e66:	f7ff fd23 	bl	80058b0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7ff fcfb 	bl	800586e <LL_ADC_SetSamplingTimeCommonConfig>
 8005e78:	e011      	b.n	8005e9e <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8005e7a:	bf00      	nop
 8005e7c:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	6819      	ldr	r1, [r3, #0]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	f7ff fd0f 	bl	80058b0 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2100      	movs	r1, #0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fce8 	bl	800586e <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	695a      	ldr	r2, [r3, #20]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	08db      	lsrs	r3, r3, #3
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	691b      	ldr	r3, [r3, #16]
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d022      	beq.n	8005f06 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	6919      	ldr	r1, [r3, #16]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ed0:	f7ff fc42 	bl	8005758 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6919      	ldr	r1, [r3, #16]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f7ff fc8e 	bl	8005802 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d102      	bne.n	8005efc <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005efa:	e000      	b.n	8005efe <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005efc:	2300      	movs	r3, #0
 8005efe:	461a      	mov	r2, r3
 8005f00:	f7ff fc9a 	bl	8005838 <LL_ADC_SetOffsetSaturation>
 8005f04:	e179      	b.n	80061fa <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fc47 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8005f12:	4603      	mov	r3, r0
 8005f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2100      	movs	r1, #0
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7ff fc3c 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	0e9b      	lsrs	r3, r3, #26
 8005f2c:	f003 021f 	and.w	r2, r3, #31
 8005f30:	e01e      	b.n	8005f70 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2100      	movs	r1, #0
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fc31 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f48:	fa93 f3a3 	rbit	r3, r3
 8005f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005f50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005f58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8005f60:	2320      	movs	r3, #32
 8005f62:	e004      	b.n	8005f6e <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8005f64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005f68:	fab3 f383 	clz	r3, r3
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d105      	bne.n	8005f88 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	0e9b      	lsrs	r3, r3, #26
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	e018      	b.n	8005fba <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f94:	fa93 f3a3 	rbit	r3, r3
 8005f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8005f9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8005fa4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8005fac:	2320      	movs	r3, #32
 8005fae:	e004      	b.n	8005fba <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8005fb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005fb4:	fab3 f383 	clz	r3, r3
 8005fb8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d106      	bne.n	8005fcc <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	2100      	movs	r1, #0
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff fc00 	bl	80057cc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2101      	movs	r1, #1
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7ff fbe4 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d10a      	bne.n	8005ff8 <HAL_ADCEx_InjectedConfigChannel+0x418>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fbd9 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	0e9b      	lsrs	r3, r3, #26
 8005ff2:	f003 021f 	and.w	r2, r3, #31
 8005ff6:	e01e      	b.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fbce 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8006004:	4603      	mov	r3, r0
 8006006:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800600a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800600e:	fa93 f3a3 	rbit	r3, r3
 8006012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8006016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800601a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800601e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8006026:	2320      	movs	r3, #32
 8006028:	e004      	b.n	8006034 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 800602a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800602e:	fab3 f383 	clz	r3, r3
 8006032:	b2db      	uxtb	r3, r3
 8006034:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603e:	2b00      	cmp	r3, #0
 8006040:	d105      	bne.n	800604e <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	0e9b      	lsrs	r3, r3, #26
 8006048:	f003 031f 	and.w	r3, r3, #31
 800604c:	e018      	b.n	8006080 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006056:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800605a:	fa93 f3a3 	rbit	r3, r3
 800605e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8006062:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006066:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800606a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8006072:	2320      	movs	r3, #32
 8006074:	e004      	b.n	8006080 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8006076:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800607a:	fab3 f383 	clz	r3, r3
 800607e:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006080:	429a      	cmp	r2, r3
 8006082:	d106      	bne.n	8006092 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2200      	movs	r2, #0
 800608a:	2101      	movs	r1, #1
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fb9d 	bl	80057cc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2102      	movs	r1, #2
 8006098:	4618      	mov	r0, r3
 800609a:	f7ff fb81 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 800609e:	4603      	mov	r3, r0
 80060a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10a      	bne.n	80060be <HAL_ADCEx_InjectedConfigChannel+0x4de>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2102      	movs	r1, #2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7ff fb76 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 80060b4:	4603      	mov	r3, r0
 80060b6:	0e9b      	lsrs	r3, r3, #26
 80060b8:	f003 021f 	and.w	r2, r3, #31
 80060bc:	e01e      	b.n	80060fc <HAL_ADCEx_InjectedConfigChannel+0x51c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2102      	movs	r1, #2
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff fb6b 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80060d4:	fa93 f3a3 	rbit	r3, r3
 80060d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80060dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80060e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80060e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 80060ec:	2320      	movs	r3, #32
 80060ee:	e004      	b.n	80060fa <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 80060f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060f4:	fab3 f383 	clz	r3, r3
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006104:	2b00      	cmp	r3, #0
 8006106:	d105      	bne.n	8006114 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0e9b      	lsrs	r3, r3, #26
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	e014      	b.n	800613e <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800611a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800611c:	fa93 f3a3 	rbit	r3, r3
 8006120:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8006122:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006124:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8006128:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8006130:	2320      	movs	r3, #32
 8006132:	e004      	b.n	800613e <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8006134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006138:	fab3 f383 	clz	r3, r3
 800613c:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800613e:	429a      	cmp	r2, r3
 8006140:	d106      	bne.n	8006150 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2200      	movs	r2, #0
 8006148:	2102      	movs	r1, #2
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff fb3e 	bl	80057cc <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2103      	movs	r1, #3
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fb22 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 800615c:	4603      	mov	r3, r0
 800615e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <HAL_ADCEx_InjectedConfigChannel+0x59c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2103      	movs	r1, #3
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fb17 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8006172:	4603      	mov	r3, r0
 8006174:	0e9b      	lsrs	r3, r3, #26
 8006176:	f003 021f 	and.w	r2, r3, #31
 800617a:	e017      	b.n	80061ac <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2103      	movs	r1, #3
 8006182:	4618      	mov	r0, r3
 8006184:	f7ff fb0c 	bl	80057a0 <LL_ADC_GetOffsetChannel>
 8006188:	4603      	mov	r3, r0
 800618a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800618e:	fa93 f3a3 	rbit	r3, r3
 8006192:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006194:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006196:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800619a:	2b00      	cmp	r3, #0
 800619c:	d101      	bne.n	80061a2 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800619e:	2320      	movs	r3, #32
 80061a0:	e003      	b.n	80061aa <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80061a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061a4:	fab3 f383 	clz	r3, r3
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d105      	bne.n	80061c4 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	0e9b      	lsrs	r3, r3, #26
 80061be:	f003 031f 	and.w	r3, r3, #31
 80061c2:	e011      	b.n	80061e8 <HAL_ADCEx_InjectedConfigChannel+0x608>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80061d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061d4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80061d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 80061dc:	2320      	movs	r3, #32
 80061de:	e003      	b.n	80061e8 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 80061e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d106      	bne.n	80061fa <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	2200      	movs	r2, #0
 80061f2:	2103      	movs	r1, #3
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7ff fae9 	bl	80057cc <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff fbb8 	bl	8005974 <LL_ADC_IsEnabled>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8140 	bne.w	800648c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6818      	ldr	r0, [r3, #0]
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	461a      	mov	r2, r3
 800621a:	f7ff fb75 	bl	8005908 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	4a8f      	ldr	r2, [pc, #572]	; (8006460 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8006224:	4293      	cmp	r3, r2
 8006226:	f040 8131 	bne.w	800648c <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	0e9b      	lsrs	r3, r3, #26
 8006240:	3301      	adds	r3, #1
 8006242:	f003 031f 	and.w	r3, r3, #31
 8006246:	2b09      	cmp	r3, #9
 8006248:	bf94      	ite	ls
 800624a:	2301      	movls	r3, #1
 800624c:	2300      	movhi	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	e019      	b.n	8006286 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006258:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800625a:	fa93 f3a3 	rbit	r3, r3
 800625e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006262:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8006264:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006266:	2b00      	cmp	r3, #0
 8006268:	d101      	bne.n	800626e <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800626a:	2320      	movs	r3, #32
 800626c:	e003      	b.n	8006276 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 800626e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006270:	fab3 f383 	clz	r3, r3
 8006274:	b2db      	uxtb	r3, r3
 8006276:	3301      	adds	r3, #1
 8006278:	f003 031f 	and.w	r3, r3, #31
 800627c:	2b09      	cmp	r3, #9
 800627e:	bf94      	ite	ls
 8006280:	2301      	movls	r3, #1
 8006282:	2300      	movhi	r3, #0
 8006284:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006286:	2b00      	cmp	r3, #0
 8006288:	d079      	beq.n	800637e <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006292:	2b00      	cmp	r3, #0
 8006294:	d107      	bne.n	80062a6 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	0e9b      	lsrs	r3, r3, #26
 800629c:	3301      	adds	r3, #1
 800629e:	069b      	lsls	r3, r3, #26
 80062a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062a4:	e015      	b.n	80062d2 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ae:	fa93 f3a3 	rbit	r3, r3
 80062b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80062b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062b6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80062b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80062be:	2320      	movs	r3, #32
 80062c0:	e003      	b.n	80062ca <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80062c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c4:	fab3 f383 	clz	r3, r3
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	3301      	adds	r3, #1
 80062cc:	069b      	lsls	r3, r3, #26
 80062ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d109      	bne.n	80062f2 <HAL_ADCEx_InjectedConfigChannel+0x712>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	0e9b      	lsrs	r3, r3, #26
 80062e4:	3301      	adds	r3, #1
 80062e6:	f003 031f 	and.w	r3, r3, #31
 80062ea:	2101      	movs	r1, #1
 80062ec:	fa01 f303 	lsl.w	r3, r1, r3
 80062f0:	e017      	b.n	8006322 <HAL_ADCEx_InjectedConfigChannel+0x742>
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062fa:	fa93 f3a3 	rbit	r3, r3
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006302:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800630a:	2320      	movs	r3, #32
 800630c:	e003      	b.n	8006316 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800630e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	b2db      	uxtb	r3, r3
 8006316:	3301      	adds	r3, #1
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2101      	movs	r1, #1
 800631e:	fa01 f303 	lsl.w	r3, r1, r3
 8006322:	ea42 0103 	orr.w	r1, r2, r3
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632e:	2b00      	cmp	r3, #0
 8006330:	d10a      	bne.n	8006348 <HAL_ADCEx_InjectedConfigChannel+0x768>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	0e9b      	lsrs	r3, r3, #26
 8006338:	3301      	adds	r3, #1
 800633a:	f003 021f 	and.w	r2, r3, #31
 800633e:	4613      	mov	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	051b      	lsls	r3, r3, #20
 8006346:	e018      	b.n	800637a <HAL_ADCEx_InjectedConfigChannel+0x79a>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	fa93 f3a3 	rbit	r3, r3
 8006354:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8006360:	2320      	movs	r3, #32
 8006362:	e003      	b.n	800636c <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8006364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006366:	fab3 f383 	clz	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	3301      	adds	r3, #1
 800636e:	f003 021f 	and.w	r2, r3, #31
 8006372:	4613      	mov	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637a:	430b      	orrs	r3, r1
 800637c:	e081      	b.n	8006482 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	0e9b      	lsrs	r3, r3, #26
 8006390:	3301      	adds	r3, #1
 8006392:	069b      	lsls	r3, r3, #26
 8006394:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006398:	e015      	b.n	80063c6 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063a2:	fa93 f3a3 	rbit	r3, r3
 80063a6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80063b2:	2320      	movs	r3, #32
 80063b4:	e003      	b.n	80063be <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80063b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b8:	fab3 f383 	clz	r3, r3
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	3301      	adds	r3, #1
 80063c0:	069b      	lsls	r3, r3, #26
 80063c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <HAL_ADCEx_InjectedConfigChannel+0x806>
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	0e9b      	lsrs	r3, r3, #26
 80063d8:	3301      	adds	r3, #1
 80063da:	f003 031f 	and.w	r3, r3, #31
 80063de:	2101      	movs	r1, #1
 80063e0:	fa01 f303 	lsl.w	r3, r1, r3
 80063e4:	e017      	b.n	8006416 <HAL_ADCEx_InjectedConfigChannel+0x836>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	fa93 f3a3 	rbit	r3, r3
 80063f2:	61bb      	str	r3, [r7, #24]
  return result;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 80063fe:	2320      	movs	r3, #32
 8006400:	e003      	b.n	800640a <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	fab3 f383 	clz	r3, r3
 8006408:	b2db      	uxtb	r3, r3
 800640a:	3301      	adds	r3, #1
 800640c:	f003 031f 	and.w	r3, r3, #31
 8006410:	2101      	movs	r1, #1
 8006412:	fa01 f303 	lsl.w	r3, r1, r3
 8006416:	ea42 0103 	orr.w	r1, r2, r3
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10d      	bne.n	8006442 <HAL_ADCEx_InjectedConfigChannel+0x862>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	0e9b      	lsrs	r3, r3, #26
 800642c:	3301      	adds	r3, #1
 800642e:	f003 021f 	and.w	r2, r3, #31
 8006432:	4613      	mov	r3, r2
 8006434:	005b      	lsls	r3, r3, #1
 8006436:	4413      	add	r3, r2
 8006438:	3b1e      	subs	r3, #30
 800643a:	051b      	lsls	r3, r3, #20
 800643c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006440:	e01e      	b.n	8006480 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	fa93 f3a3 	rbit	r3, r3
 800644e:	60fb      	str	r3, [r7, #12]
  return result;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d104      	bne.n	8006464 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800645a:	2320      	movs	r3, #32
 800645c:	e006      	b.n	800646c <HAL_ADCEx_InjectedConfigChannel+0x88c>
 800645e:	bf00      	nop
 8006460:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	fab3 f383 	clz	r3, r3
 800646a:	b2db      	uxtb	r3, r3
 800646c:	3301      	adds	r3, #1
 800646e:	f003 021f 	and.w	r2, r3, #31
 8006472:	4613      	mov	r3, r2
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	4413      	add	r3, r2
 8006478:	3b1e      	subs	r3, #30
 800647a:	051b      	lsls	r3, r3, #20
 800647c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006480:	430b      	orrs	r3, r1
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	6892      	ldr	r2, [r2, #8]
 8006486:	4619      	mov	r1, r3
 8006488:	f7ff fa12 	bl	80058b0 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	4b3a      	ldr	r3, [pc, #232]	; (800657c <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d067      	beq.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006498:	4839      	ldr	r0, [pc, #228]	; (8006580 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800649a:	f7ff f94e 	bl	800573a <LL_ADC_GetCommonPathInternalCh>
 800649e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a37      	ldr	r2, [pc, #220]	; (8006584 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a35      	ldr	r2, [pc, #212]	; (8006588 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d127      	bne.n	8006506 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80064b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d121      	bne.n	8006506 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80064ca:	d14d      	bne.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80064cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80064d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80064d4:	4619      	mov	r1, r3
 80064d6:	482a      	ldr	r0, [pc, #168]	; (8006580 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80064d8:	f7ff f91c 	bl	8005714 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80064dc:	4b2b      	ldr	r3, [pc, #172]	; (800658c <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	099b      	lsrs	r3, r3, #6
 80064e2:	4a2b      	ldr	r2, [pc, #172]	; (8006590 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 80064e4:	fba2 2303 	umull	r2, r3, r2, r3
 80064e8:	099a      	lsrs	r2, r3, #6
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	3318      	adds	r3, #24
 80064f4:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80064f6:	e002      	b.n	80064fe <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f9      	bne.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006504:	e030      	b.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a22      	ldr	r2, [pc, #136]	; (8006594 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d113      	bne.n	8006538 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006514:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10d      	bne.n	8006538 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1d      	ldr	r2, [pc, #116]	; (8006598 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d020      	beq.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800652a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800652e:	4619      	mov	r1, r3
 8006530:	4813      	ldr	r0, [pc, #76]	; (8006580 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006532:	f7ff f8ef 	bl	8005714 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006536:	e017      	b.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a17      	ldr	r2, [pc, #92]	; (800659c <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d112      	bne.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10c      	bne.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a11      	ldr	r2, [pc, #68]	; (8006598 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800655c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006560:	4619      	mov	r1, r3
 8006562:	4807      	ldr	r0, [pc, #28]	; (8006580 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006564:	f7ff f8d6 	bl	8005714 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006570:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006574:	4618      	mov	r0, r3
 8006576:	37d8      	adds	r7, #216	; 0xd8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	80080000 	.word	0x80080000
 8006580:	50000300 	.word	0x50000300
 8006584:	c3210000 	.word	0xc3210000
 8006588:	90c00010 	.word	0x90c00010
 800658c:	20000000 	.word	0x20000000
 8006590:	053e2d63 	.word	0x053e2d63
 8006594:	c7520000 	.word	0xc7520000
 8006598:	50000100 	.word	0x50000100
 800659c:	cb840000 	.word	0xcb840000

080065a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b0a1      	sub	sp, #132	; 0x84
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065aa:	2300      	movs	r3, #0
 80065ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d101      	bne.n	80065be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80065ba:	2302      	movs	r3, #2
 80065bc:	e08b      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80065c6:	2300      	movs	r3, #0
 80065c8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80065ca:	2300      	movs	r3, #0
 80065cc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065d6:	d102      	bne.n	80065de <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80065d8:	4b41      	ldr	r3, [pc, #260]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80065da:	60bb      	str	r3, [r7, #8]
 80065dc:	e001      	b.n	80065e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80065de:	2300      	movs	r3, #0
 80065e0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d10b      	bne.n	8006600 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065ec:	f043 0220 	orr.w	r2, r3, #32
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e06a      	b.n	80066d6 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff f9c9 	bl	800599a <LL_ADC_REG_IsConversionOngoing>
 8006608:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff f9c3 	bl	800599a <LL_ADC_REG_IsConversionOngoing>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d14c      	bne.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800661a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800661c:	2b00      	cmp	r3, #0
 800661e:	d149      	bne.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006620:	4b30      	ldr	r3, [pc, #192]	; (80066e4 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006622:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d028      	beq.n	800667e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800662c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	6859      	ldr	r1, [r3, #4]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800663e:	035b      	lsls	r3, r3, #13
 8006640:	430b      	orrs	r3, r1
 8006642:	431a      	orrs	r2, r3
 8006644:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006646:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006648:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800664c:	f7ff f992 	bl	8005974 <LL_ADC_IsEnabled>
 8006650:	4604      	mov	r4, r0
 8006652:	4823      	ldr	r0, [pc, #140]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006654:	f7ff f98e 	bl	8005974 <LL_ADC_IsEnabled>
 8006658:	4603      	mov	r3, r0
 800665a:	4323      	orrs	r3, r4
 800665c:	2b00      	cmp	r3, #0
 800665e:	d133      	bne.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006660:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006668:	f023 030f 	bic.w	r3, r3, #15
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	6811      	ldr	r1, [r2, #0]
 8006670:	683a      	ldr	r2, [r7, #0]
 8006672:	6892      	ldr	r2, [r2, #8]
 8006674:	430a      	orrs	r2, r1
 8006676:	431a      	orrs	r2, r3
 8006678:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800667a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800667c:	e024      	b.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800667e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006686:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006688:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800668a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800668e:	f7ff f971 	bl	8005974 <LL_ADC_IsEnabled>
 8006692:	4604      	mov	r4, r0
 8006694:	4812      	ldr	r0, [pc, #72]	; (80066e0 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006696:	f7ff f96d 	bl	8005974 <LL_ADC_IsEnabled>
 800669a:	4603      	mov	r3, r0
 800669c:	4323      	orrs	r3, r4
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d112      	bne.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80066a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80066aa:	f023 030f 	bic.w	r3, r3, #15
 80066ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80066b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066b2:	e009      	b.n	80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80066c6:	e000      	b.n	80066ca <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80066d2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3784      	adds	r7, #132	; 0x84
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd90      	pop	{r4, r7, pc}
 80066de:	bf00      	nop
 80066e0:	50000100 	.word	0x50000100
 80066e4:	50000300 	.word	0x50000300

080066e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f003 0307 	and.w	r3, r3, #7
 80066f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <__NVIC_SetPriorityGrouping+0x44>)
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006704:	4013      	ands	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006710:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800671a:	4a04      	ldr	r2, [pc, #16]	; (800672c <__NVIC_SetPriorityGrouping+0x44>)
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	60d3      	str	r3, [r2, #12]
}
 8006720:	bf00      	nop
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	e000ed00 	.word	0xe000ed00

08006730 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006734:	4b04      	ldr	r3, [pc, #16]	; (8006748 <__NVIC_GetPriorityGrouping+0x18>)
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	f003 0307 	and.w	r3, r3, #7
}
 800673e:	4618      	mov	r0, r3
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	e000ed00 	.word	0xe000ed00

0800674c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800675a:	2b00      	cmp	r3, #0
 800675c:	db0b      	blt.n	8006776 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	f003 021f 	and.w	r2, r3, #31
 8006764:	4907      	ldr	r1, [pc, #28]	; (8006784 <__NVIC_EnableIRQ+0x38>)
 8006766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	2001      	movs	r0, #1
 800676e:	fa00 f202 	lsl.w	r2, r0, r2
 8006772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	e000e100 	.word	0xe000e100

08006788 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	4603      	mov	r3, r0
 8006790:	6039      	str	r1, [r7, #0]
 8006792:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006798:	2b00      	cmp	r3, #0
 800679a:	db0a      	blt.n	80067b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	490c      	ldr	r1, [pc, #48]	; (80067d4 <__NVIC_SetPriority+0x4c>)
 80067a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067a6:	0112      	lsls	r2, r2, #4
 80067a8:	b2d2      	uxtb	r2, r2
 80067aa:	440b      	add	r3, r1
 80067ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80067b0:	e00a      	b.n	80067c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	4908      	ldr	r1, [pc, #32]	; (80067d8 <__NVIC_SetPriority+0x50>)
 80067b8:	79fb      	ldrb	r3, [r7, #7]
 80067ba:	f003 030f 	and.w	r3, r3, #15
 80067be:	3b04      	subs	r3, #4
 80067c0:	0112      	lsls	r2, r2, #4
 80067c2:	b2d2      	uxtb	r2, r2
 80067c4:	440b      	add	r3, r1
 80067c6:	761a      	strb	r2, [r3, #24]
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	e000e100 	.word	0xe000e100
 80067d8:	e000ed00 	.word	0xe000ed00

080067dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067dc:	b480      	push	{r7}
 80067de:	b089      	sub	sp, #36	; 0x24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 0307 	and.w	r3, r3, #7
 80067ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	f1c3 0307 	rsb	r3, r3, #7
 80067f6:	2b04      	cmp	r3, #4
 80067f8:	bf28      	it	cs
 80067fa:	2304      	movcs	r3, #4
 80067fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	3304      	adds	r3, #4
 8006802:	2b06      	cmp	r3, #6
 8006804:	d902      	bls.n	800680c <NVIC_EncodePriority+0x30>
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3b03      	subs	r3, #3
 800680a:	e000      	b.n	800680e <NVIC_EncodePriority+0x32>
 800680c:	2300      	movs	r3, #0
 800680e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006810:	f04f 32ff 	mov.w	r2, #4294967295
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43da      	mvns	r2, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	401a      	ands	r2, r3
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006824:	f04f 31ff 	mov.w	r1, #4294967295
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	fa01 f303 	lsl.w	r3, r1, r3
 800682e:	43d9      	mvns	r1, r3
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006834:	4313      	orrs	r3, r2
         );
}
 8006836:	4618      	mov	r0, r3
 8006838:	3724      	adds	r7, #36	; 0x24
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
	...

08006844 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3b01      	subs	r3, #1
 8006850:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006854:	d301      	bcc.n	800685a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006856:	2301      	movs	r3, #1
 8006858:	e00f      	b.n	800687a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800685a:	4a0a      	ldr	r2, [pc, #40]	; (8006884 <SysTick_Config+0x40>)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3b01      	subs	r3, #1
 8006860:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006862:	210f      	movs	r1, #15
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	f7ff ff8e 	bl	8006788 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800686c:	4b05      	ldr	r3, [pc, #20]	; (8006884 <SysTick_Config+0x40>)
 800686e:	2200      	movs	r2, #0
 8006870:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006872:	4b04      	ldr	r3, [pc, #16]	; (8006884 <SysTick_Config+0x40>)
 8006874:	2207      	movs	r2, #7
 8006876:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop
 8006884:	e000e010 	.word	0xe000e010

08006888 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f7ff ff29 	bl	80066e8 <__NVIC_SetPriorityGrouping>
}
 8006896:	bf00      	nop
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b086      	sub	sp, #24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	60b9      	str	r1, [r7, #8]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80068ac:	f7ff ff40 	bl	8006730 <__NVIC_GetPriorityGrouping>
 80068b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	68b9      	ldr	r1, [r7, #8]
 80068b6:	6978      	ldr	r0, [r7, #20]
 80068b8:	f7ff ff90 	bl	80067dc <NVIC_EncodePriority>
 80068bc:	4602      	mov	r2, r0
 80068be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80068c2:	4611      	mov	r1, r2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ff5f 	bl	8006788 <__NVIC_SetPriority>
}
 80068ca:	bf00      	nop
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	4603      	mov	r3, r0
 80068da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f7ff ff33 	bl	800674c <__NVIC_EnableIRQ>
}
 80068e6:	bf00      	nop
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b082      	sub	sp, #8
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f7ff ffa4 	bl	8006844 <SysTick_Config>
 80068fc:	4603      	mov	r3, r0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b084      	sub	sp, #16
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800690e:	2300      	movs	r3, #0
 8006910:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b02      	cmp	r3, #2
 800691c:	d00d      	beq.n	800693a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2204      	movs	r2, #4
 8006922:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	73fb      	strb	r3, [r7, #15]
 8006938:	e047      	b.n	80069ca <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 020e 	bic.w	r2, r2, #14
 8006948:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f022 0201 	bic.w	r2, r2, #1
 8006958:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006968:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696e:	f003 021f 	and.w	r2, r3, #31
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	2101      	movs	r1, #1
 8006978:	fa01 f202 	lsl.w	r2, r1, r2
 800697c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006986:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00c      	beq.n	80069aa <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800699e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80069a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	4798      	blx	r3
    }
  }
  return status;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069e2:	b2db      	uxtb	r3, r3
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ee:	4770      	bx	lr

080069f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d101      	bne.n	8006a02 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e147      	b.n	8006c92 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d106      	bne.n	8006a1c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fd ff48 	bl	80048ac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0210 	bic.w	r2, r2, #16
 8006a2a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a2c:	f7fe fbaa 	bl	8005184 <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a32:	e012      	b.n	8006a5a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a34:	f7fe fba6 	bl	8005184 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b0a      	cmp	r3, #10
 8006a40:	d90b      	bls.n	8006a5a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a46:	f043 0201 	orr.w	r2, r3, #1
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2203      	movs	r2, #3
 8006a52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e11b      	b.n	8006c92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f003 0308 	and.w	r3, r3, #8
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d0e5      	beq.n	8006a34 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	699a      	ldr	r2, [r3, #24]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f042 0201 	orr.w	r2, r2, #1
 8006a76:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a78:	f7fe fb84 	bl	8005184 <HAL_GetTick>
 8006a7c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a7e:	e012      	b.n	8006aa6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a80:	f7fe fb80 	bl	8005184 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b0a      	cmp	r3, #10
 8006a8c:	d90b      	bls.n	8006aa6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a92:	f043 0201 	orr.w	r2, r3, #1
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2203      	movs	r2, #3
 8006a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e0f5      	b.n	8006c92 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	f003 0301 	and.w	r3, r3, #1
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0e5      	beq.n	8006a80 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0202 	orr.w	r2, r2, #2
 8006ac2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a74      	ldr	r2, [pc, #464]	; (8006c9c <HAL_FDCAN_Init+0x2ac>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d103      	bne.n	8006ad6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006ace:	4a74      	ldr	r2, [pc, #464]	; (8006ca0 <HAL_FDCAN_Init+0x2b0>)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7c1b      	ldrb	r3, [r3, #16]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d108      	bne.n	8006af0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006aec:	619a      	str	r2, [r3, #24]
 8006aee:	e007      	b.n	8006b00 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006afe:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c5b      	ldrb	r3, [r3, #17]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d108      	bne.n	8006b1a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b16:	619a      	str	r2, [r3, #24]
 8006b18:	e007      	b.n	8006b2a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b28:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7c9b      	ldrb	r3, [r3, #18]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d108      	bne.n	8006b44 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	699a      	ldr	r2, [r3, #24]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b40:	619a      	str	r2, [r3, #24]
 8006b42:	e007      	b.n	8006b54 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	699a      	ldr	r2, [r3, #24]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b52:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699b      	ldr	r3, [r3, #24]
 8006b5a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	430a      	orrs	r2, r1
 8006b68:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006b78:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	691a      	ldr	r2, [r3, #16]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0210 	bic.w	r2, r2, #16
 8006b88:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d108      	bne.n	8006ba4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	699a      	ldr	r2, [r3, #24]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f042 0204 	orr.w	r2, r2, #4
 8006ba0:	619a      	str	r2, [r3, #24]
 8006ba2:	e02c      	b.n	8006bfe <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d028      	beq.n	8006bfe <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d01c      	beq.n	8006bee <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bc2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691a      	ldr	r2, [r3, #16]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0210 	orr.w	r2, r2, #16
 8006bd2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d110      	bne.n	8006bfe <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	699a      	ldr	r2, [r3, #24]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0220 	orr.w	r2, r2, #32
 8006bea:	619a      	str	r2, [r3, #24]
 8006bec:	e007      	b.n	8006bfe <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	699a      	ldr	r2, [r3, #24]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f042 0220 	orr.w	r2, r2, #32
 8006bfc:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c0e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a1b      	ldr	r3, [r3, #32]
 8006c14:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c16:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c26:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c28:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c32:	d115      	bne.n	8006c60 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c38:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3e:	3b01      	subs	r3, #1
 8006c40:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c42:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006c4c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	3b01      	subs	r3, #1
 8006c56:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006c5c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006c5e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fc3c 	bl	80074f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	40006400 	.word	0x40006400
 8006ca0:	40006500 	.word	0x40006500

08006ca4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b087      	sub	sp, #28
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006cb4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d002      	beq.n	8006cc2 <HAL_FDCAN_ConfigFilter+0x1e>
 8006cbc:	7dfb      	ldrb	r3, [r7, #23]
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d13d      	bne.n	8006d3e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d119      	bne.n	8006cfe <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006cd6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006cde:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	601a      	str	r2, [r3, #0]
 8006cfc:	e01d      	b.n	8006d3a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	075a      	lsls	r2, r3, #29
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	079a      	lsls	r2, r3, #30
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	3304      	adds	r3, #4
 8006d32:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e006      	b.n	8006d4c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d42:	f043 0202 	orr.w	r2, r3, #2
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
  }
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	371c      	adds	r7, #28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d110      	bne.n	8006d8e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	699a      	ldr	r2, [r3, #24]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0201 	bic.w	r2, r2, #1
 8006d82:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2200      	movs	r2, #0
 8006d88:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e006      	b.n	8006d9c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d92:	f043 0204 	orr.w	r2, r3, #4
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
  }
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d12c      	bne.n	8006e1a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006dc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	e023      	b.n	8006e28 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006de8:	0c1b      	lsrs	r3, r3, #16
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 fbd2 	bl	80075a0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2101      	movs	r1, #1
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	fa01 f202 	lsl.w	r2, r1, r2
 8006e08:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	409a      	lsls	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e006      	b.n	8006e28 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e1e:	f043 0208 	orr.w	r2, r3, #8
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
  }
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3718      	adds	r7, #24
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b08b      	sub	sp, #44	; 0x2c
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e44:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006e46:	7efb      	ldrb	r3, [r7, #27]
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	f040 80bc 	bne.w	8006fc6 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b40      	cmp	r3, #64	; 0x40
 8006e52:	d121      	bne.n	8006e98 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5c:	f003 030f 	and.w	r3, r3, #15
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0af      	b.n	8006fd4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	0a1b      	lsrs	r3, r3, #8
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	4613      	mov	r3, r2
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	4413      	add	r3, r2
 8006e90:	00db      	lsls	r3, r3, #3
 8006e92:	440b      	add	r3, r1
 8006e94:	627b      	str	r3, [r7, #36]	; 0x24
 8006e96:	e020      	b.n	8006eda <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ea0:	f003 030f 	and.w	r3, r3, #15
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d107      	bne.n	8006eb8 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e08d      	b.n	8006fd4 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ec0:	0a1b      	lsrs	r3, r3, #8
 8006ec2:	f003 0303 	and.w	r3, r3, #3
 8006ec6:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006ecc:	69fa      	ldr	r2, [r7, #28]
 8006ece:	4613      	mov	r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4413      	add	r3, r2
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	440b      	add	r3, r1
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d107      	bne.n	8006efe <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	0c9b      	lsrs	r3, r3, #18
 8006ef4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e005      	b.n	8006f0a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	3304      	adds	r3, #4
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	b29a      	uxth	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	0e1b      	lsrs	r3, r3, #24
 8006f5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	0fda      	lsrs	r2, r3, #31
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	3304      	adds	r3, #4
 8006f72:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	623b      	str	r3, [r7, #32]
 8006f7c:	e00a      	b.n	8006f94 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	441a      	add	r2, r3
 8006f84:	6839      	ldr	r1, [r7, #0]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	440b      	add	r3, r1
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006f8e:	6a3b      	ldr	r3, [r7, #32]
 8006f90:	3301      	adds	r3, #1
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	0c1b      	lsrs	r3, r3, #16
 8006f9a:	4a11      	ldr	r2, [pc, #68]	; (8006fe0 <HAL_FDCAN_GetRxMessage+0x1b0>)
 8006f9c:	5cd3      	ldrb	r3, [r2, r3]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d3eb      	bcc.n	8006f7e <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	d105      	bne.n	8006fb8 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	69fa      	ldr	r2, [r7, #28]
 8006fb2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006fb6:	e004      	b.n	8006fc2 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e006      	b.n	8006fd4 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fca:	f043 0208 	orr.w	r2, r3, #8
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
  }
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	372c      	adds	r7, #44	; 0x2c
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr
 8006fe0:	080111fc 	.word	0x080111fc

08006fe4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006ff6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d003      	beq.n	8007006 <HAL_FDCAN_ActivateNotification+0x22>
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	2b02      	cmp	r3, #2
 8007002:	f040 80c8 	bne.w	8007196 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800700c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f003 0307 	and.w	r3, r3, #7
 8007014:	2b00      	cmp	r3, #0
 8007016:	d004      	beq.n	8007022 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b00      	cmp	r3, #0
 8007020:	d03b      	beq.n	800709a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007028:	2b00      	cmp	r3, #0
 800702a:	d004      	beq.n	8007036 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800702c:	693b      	ldr	r3, [r7, #16]
 800702e:	f003 0302 	and.w	r3, r3, #2
 8007032:	2b00      	cmp	r3, #0
 8007034:	d031      	beq.n	800709a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f003 0304 	and.w	r3, r3, #4
 8007046:	2b00      	cmp	r3, #0
 8007048:	d027      	beq.n	800709a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007050:	2b00      	cmp	r3, #0
 8007052:	d004      	beq.n	800705e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01d      	beq.n	800709a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007064:	2b00      	cmp	r3, #0
 8007066:	d004      	beq.n	8007072 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f003 0310 	and.w	r3, r3, #16
 800706e:	2b00      	cmp	r3, #0
 8007070:	d013      	beq.n	800709a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007078:	2b00      	cmp	r3, #0
 800707a:	d004      	beq.n	8007086 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f003 0320 	and.w	r3, r3, #32
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00c      	beq.n	80070aa <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007096:	2b00      	cmp	r3, #0
 8007098:	d107      	bne.n	80070aa <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f042 0201 	orr.w	r2, r2, #1
 80070a8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d004      	beq.n	80070be <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d13b      	bne.n	8007136 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f003 0302 	and.w	r3, r3, #2
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d131      	bne.n	8007136 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d004      	beq.n	80070e6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f003 0304 	and.w	r3, r3, #4
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d127      	bne.n	8007136 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f003 0308 	and.w	r3, r3, #8
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d11d      	bne.n	8007136 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f003 0310 	and.w	r3, r3, #16
 800710a:	2b00      	cmp	r3, #0
 800710c:	d113      	bne.n	8007136 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007114:	2b00      	cmp	r3, #0
 8007116:	d004      	beq.n	8007122 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	f003 0320 	and.w	r3, r3, #32
 800711e:	2b00      	cmp	r3, #0
 8007120:	d109      	bne.n	8007136 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00c      	beq.n	8007146 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0202 	orr.w	r2, r2, #2
 8007144:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b00      	cmp	r3, #0
 800714e:	d009      	beq.n	8007164 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	430a      	orrs	r2, r1
 8007160:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800716a:	2b00      	cmp	r3, #0
 800716c:	d009      	beq.n	8007182 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	430a      	orrs	r2, r1
 800717e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68ba      	ldr	r2, [r7, #8]
 800718e:	430a      	orrs	r2, r1
 8007190:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007192:	2300      	movs	r3, #0
 8007194:	e006      	b.n	80071a4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	f043 0202 	orr.w	r2, r3, #2
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	371c      	adds	r7, #28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08a      	sub	sp, #40	; 0x28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071be:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071cc:	4013      	ands	r3, r2
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d6:	f003 0307 	and.w	r3, r3, #7
 80071da:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e2:	6a3a      	ldr	r2, [r7, #32]
 80071e4:	4013      	ands	r3, r2
 80071e6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80071f2:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	4013      	ands	r3, r2
 80071fe:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007206:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800720a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	4013      	ands	r3, r2
 8007216:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800721e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007222:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4013      	ands	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00d      	beq.n	800725a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007248:	2b00      	cmp	r3, #0
 800724a:	d006      	beq.n	800725a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2240      	movs	r2, #64	; 0x40
 8007252:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 f92e 	bl	80074b6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007264:	2b00      	cmp	r3, #0
 8007266:	d01b      	beq.n	80072a0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007272:	2b00      	cmp	r3, #0
 8007274:	d014      	beq.n	80072a0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800727e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4013      	ands	r3, r2
 800728c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007296:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007298:	6939      	ldr	r1, [r7, #16]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f8ec 	bl	8007478 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d007      	beq.n	80072b6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072ac:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80072ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f8b6 	bl	8007422 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80072b6:	6a3b      	ldr	r3, [r7, #32]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d007      	beq.n	80072cc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	6a3a      	ldr	r2, [r7, #32]
 80072c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80072c4:	6a39      	ldr	r1, [r7, #32]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f7f9 fe68 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d007      	beq.n	80072e2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80072da:	69f9      	ldr	r1, [r7, #28]
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 f8ab 	bl	8007438 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d007      	beq.n	800730e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007306:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f8a0 	bl	800744e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007326:	2b00      	cmp	r3, #0
 8007328:	d013      	beq.n	8007352 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8007332:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	4013      	ands	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2280      	movs	r2, #128	; 0x80
 8007348:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f888 	bl	8007462 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007376:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f888 	bl	800748e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00e      	beq.n	80073aa <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80073a2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f87c 	bl	80074a2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d011      	beq.n	80073dc <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80073ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80073ea:	6979      	ldr	r1, [r7, #20]
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f000 f876 	bl	80074de <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d009      	beq.n	800740c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	431a      	orrs	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007410:	2b00      	cmp	r3, #0
 8007412:	d002      	beq.n	800741a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f858 	bl	80074ca <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800741a:	bf00      	nop
 800741c:	3728      	adds	r7, #40	; 0x28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
 800742a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007438:	b480      	push	{r7}
 800743a:	b083      	sub	sp, #12
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007456:	bf00      	nop
 8007458:	370c      	adds	r7, #12
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr

08007462 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007462:	b480      	push	{r7}
 8007464:	b083      	sub	sp, #12
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800746c:	bf00      	nop
 800746e:	370c      	adds	r7, #12
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007482:	bf00      	nop
 8007484:	370c      	adds	r7, #12
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr

0800748e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800748e:	b480      	push	{r7}
 8007490:	b083      	sub	sp, #12
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007496:	bf00      	nop
 8007498:	370c      	adds	r7, #12
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr

080074a2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074a2:	b480      	push	{r7}
 80074a4:	b083      	sub	sp, #12
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80074aa:	bf00      	nop
 80074ac:	370c      	adds	r7, #12
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b083      	sub	sp, #12
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
 80074e6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80074fc:	4b27      	ldr	r3, [pc, #156]	; (800759c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80074fe:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007516:	041a      	lsls	r2, r3, #16
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	430a      	orrs	r2, r1
 800751e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007534:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	061a      	lsls	r2, r3, #24
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e005      	b.n	8007582 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	3304      	adds	r3, #4
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	429a      	cmp	r2, r3
 800758c:	d3f3      	bcc.n	8007576 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800758e:	bf00      	nop
 8007590:	bf00      	nop
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	4000a400 	.word	0x4000a400

080075a0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b089      	sub	sp, #36	; 0x24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	60f8      	str	r0, [r7, #12]
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10a      	bne.n	80075cc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80075be:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80075c6:	4313      	orrs	r3, r2
 80075c8:	61fb      	str	r3, [r7, #28]
 80075ca:	e00a      	b.n	80075e2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80075d4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80075da:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80075dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80075e0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80075ec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80075f2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80075f8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80075fe:	4313      	orrs	r3, r2
 8007600:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	4613      	mov	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	4413      	add	r3, r2
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	440b      	add	r3, r1
 8007612:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	69fa      	ldr	r2, [r7, #28]
 8007618:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	3304      	adds	r3, #4
 800761e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	3304      	adds	r3, #4
 800762a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800762c:	2300      	movs	r3, #0
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	e020      	b.n	8007674 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3303      	adds	r3, #3
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	4413      	add	r3, r2
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3302      	adds	r3, #2
 8007642:	6879      	ldr	r1, [r7, #4]
 8007644:	440b      	add	r3, r1
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800764a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	3301      	adds	r3, #1
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	440b      	add	r3, r1
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007658:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800765a:	6879      	ldr	r1, [r7, #4]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	440a      	add	r2, r1
 8007660:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007662:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007664:	69bb      	ldr	r3, [r7, #24]
 8007666:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	3304      	adds	r3, #4
 800766c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	3304      	adds	r3, #4
 8007672:	617b      	str	r3, [r7, #20]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	4a06      	ldr	r2, [pc, #24]	; (8007694 <FDCAN_CopyMessageToRAM+0xf4>)
 800767c:	5cd3      	ldrb	r3, [r2, r3]
 800767e:	461a      	mov	r2, r3
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	4293      	cmp	r3, r2
 8007684:	d3d5      	bcc.n	8007632 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	3724      	adds	r7, #36	; 0x24
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	080111fc 	.word	0x080111fc

08007698 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80076a6:	2300      	movs	r3, #0
 80076a8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80076aa:	4b24      	ldr	r3, [pc, #144]	; (800773c <HAL_FLASH_Program+0xa4>)
 80076ac:	781b      	ldrb	r3, [r3, #0]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d101      	bne.n	80076b6 <HAL_FLASH_Program+0x1e>
 80076b2:	2302      	movs	r3, #2
 80076b4:	e03e      	b.n	8007734 <HAL_FLASH_Program+0x9c>
 80076b6:	4b21      	ldr	r3, [pc, #132]	; (800773c <HAL_FLASH_Program+0xa4>)
 80076b8:	2201      	movs	r2, #1
 80076ba:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80076bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076c0:	f000 f888 	bl	80077d4 <FLASH_WaitForLastOperation>
 80076c4:	4603      	mov	r3, r0
 80076c6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80076c8:	7dfb      	ldrb	r3, [r7, #23]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d12e      	bne.n	800772c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80076ce:	4b1b      	ldr	r3, [pc, #108]	; (800773c <HAL_FLASH_Program+0xa4>)
 80076d0:	2200      	movs	r2, #0
 80076d2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d107      	bne.n	80076ea <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80076da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076de:	68b8      	ldr	r0, [r7, #8]
 80076e0:	f000 f8cc 	bl	800787c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80076e4:	2301      	movs	r3, #1
 80076e6:	613b      	str	r3, [r7, #16]
 80076e8:	e010      	b.n	800770c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d002      	beq.n	80076f6 <HAL_FLASH_Program+0x5e>
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d10a      	bne.n	800770c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	4619      	mov	r1, r3
 80076fa:	68b8      	ldr	r0, [r7, #8]
 80076fc:	f000 f8e4 	bl	80078c8 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b02      	cmp	r3, #2
 8007704:	d102      	bne.n	800770c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007706:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800770a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800770c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007710:	f000 f860 	bl	80077d4 <FLASH_WaitForLastOperation>
 8007714:	4603      	mov	r3, r0
 8007716:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d006      	beq.n	800772c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800771e:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_FLASH_Program+0xa8>)
 8007720:	695a      	ldr	r2, [r3, #20]
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	43db      	mvns	r3, r3
 8007726:	4906      	ldr	r1, [pc, #24]	; (8007740 <HAL_FLASH_Program+0xa8>)
 8007728:	4013      	ands	r3, r2
 800772a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800772c:	4b03      	ldr	r3, [pc, #12]	; (800773c <HAL_FLASH_Program+0xa4>)
 800772e:	2200      	movs	r2, #0
 8007730:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007732:	7dfb      	ldrb	r3, [r7, #23]
}
 8007734:	4618      	mov	r0, r3
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	2000000c 	.word	0x2000000c
 8007740:	40022000 	.word	0x40022000

08007744 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800774e:	4b0b      	ldr	r3, [pc, #44]	; (800777c <HAL_FLASH_Unlock+0x38>)
 8007750:	695b      	ldr	r3, [r3, #20]
 8007752:	2b00      	cmp	r3, #0
 8007754:	da0b      	bge.n	800776e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007756:	4b09      	ldr	r3, [pc, #36]	; (800777c <HAL_FLASH_Unlock+0x38>)
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <HAL_FLASH_Unlock+0x3c>)
 800775a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800775c:	4b07      	ldr	r3, [pc, #28]	; (800777c <HAL_FLASH_Unlock+0x38>)
 800775e:	4a09      	ldr	r2, [pc, #36]	; (8007784 <HAL_FLASH_Unlock+0x40>)
 8007760:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_FLASH_Unlock+0x38>)
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	da01      	bge.n	800776e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800776e:	79fb      	ldrb	r3, [r7, #7]
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	40022000 	.word	0x40022000
 8007780:	45670123 	.word	0x45670123
 8007784:	cdef89ab 	.word	0xcdef89ab

08007788 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007792:	4b09      	ldr	r3, [pc, #36]	; (80077b8 <HAL_FLASH_Lock+0x30>)
 8007794:	695b      	ldr	r3, [r3, #20]
 8007796:	4a08      	ldr	r2, [pc, #32]	; (80077b8 <HAL_FLASH_Lock+0x30>)
 8007798:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800779c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800779e:	4b06      	ldr	r3, [pc, #24]	; (80077b8 <HAL_FLASH_Lock+0x30>)
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	da01      	bge.n	80077aa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80077aa:	79fb      	ldrb	r3, [r7, #7]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr
 80077b8:	40022000 	.word	0x40022000

080077bc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80077c0:	4b03      	ldr	r3, [pc, #12]	; (80077d0 <HAL_FLASH_GetError+0x14>)
 80077c2:	685b      	ldr	r3, [r3, #4]
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	2000000c 	.word	0x2000000c

080077d4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80077dc:	f7fd fcd2 	bl	8005184 <HAL_GetTick>
 80077e0:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80077e2:	e009      	b.n	80077f8 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80077e4:	f7fd fcce 	bl	8005184 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d201      	bcs.n	80077f8 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80077f4:	2303      	movs	r3, #3
 80077f6:	e038      	b.n	800786a <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80077f8:	4b1e      	ldr	r3, [pc, #120]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 80077fa:	691b      	ldr	r3, [r3, #16]
 80077fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007804:	d0ee      	beq.n	80077e4 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007806:	4b1b      	ldr	r3, [pc, #108]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 8007808:	691a      	ldr	r2, [r3, #16]
 800780a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800780e:	4013      	ands	r3, r2
 8007810:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01e      	beq.n	8007856 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007818:	4b17      	ldr	r3, [pc, #92]	; (8007878 <FLASH_WaitForLastOperation+0xa4>)
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4313      	orrs	r3, r2
 8007820:	4a15      	ldr	r2, [pc, #84]	; (8007878 <FLASH_WaitForLastOperation+0xa4>)
 8007822:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800782a:	2b00      	cmp	r3, #0
 800782c:	d007      	beq.n	800783e <FLASH_WaitForLastOperation+0x6a>
 800782e:	4b11      	ldr	r3, [pc, #68]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007838:	490e      	ldr	r1, [pc, #56]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 800783a:	4313      	orrs	r3, r2
 800783c:	618b      	str	r3, [r1, #24]
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d004      	beq.n	8007852 <FLASH_WaitForLastOperation+0x7e>
 8007848:	4a0a      	ldr	r2, [pc, #40]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007850:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e009      	b.n	800786a <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007856:	4b07      	ldr	r3, [pc, #28]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	f003 0301 	and.w	r3, r3, #1
 800785e:	2b01      	cmp	r3, #1
 8007860:	d102      	bne.n	8007868 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007862:	4b04      	ldr	r3, [pc, #16]	; (8007874 <FLASH_WaitForLastOperation+0xa0>)
 8007864:	2201      	movs	r2, #1
 8007866:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3710      	adds	r7, #16
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40022000 	.word	0x40022000
 8007878:	2000000c 	.word	0x2000000c

0800787c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007888:	4b0e      	ldr	r3, [pc, #56]	; (80078c4 <FLASH_Program_DoubleWord+0x48>)
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	4a0d      	ldr	r2, [pc, #52]	; (80078c4 <FLASH_Program_DoubleWord+0x48>)
 800788e:	f043 0301 	orr.w	r3, r3, #1
 8007892:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800789a:	f3bf 8f6f 	isb	sy
}
 800789e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80078a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80078a4:	f04f 0200 	mov.w	r2, #0
 80078a8:	f04f 0300 	mov.w	r3, #0
 80078ac:	000a      	movs	r2, r1
 80078ae:	2300      	movs	r3, #0
 80078b0:	68f9      	ldr	r1, [r7, #12]
 80078b2:	3104      	adds	r1, #4
 80078b4:	4613      	mov	r3, r2
 80078b6:	600b      	str	r3, [r1, #0]
}
 80078b8:	bf00      	nop
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr
 80078c4:	40022000 	.word	0x40022000

080078c8 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b089      	sub	sp, #36	; 0x24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80078d2:	2340      	movs	r3, #64	; 0x40
 80078d4:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80078de:	4b14      	ldr	r3, [pc, #80]	; (8007930 <FLASH_Program_Fast+0x68>)
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	4a13      	ldr	r2, [pc, #76]	; (8007930 <FLASH_Program_Fast+0x68>)
 80078e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078ea:	f3ef 8310 	mrs	r3, PRIMASK
 80078ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80078f0:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80078f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80078f4:	b672      	cpsid	i
}
 80078f6:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007900:	69bb      	ldr	r3, [r7, #24]
 8007902:	3304      	adds	r3, #4
 8007904:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	3304      	adds	r3, #4
 800790a:	617b      	str	r3, [r7, #20]
    row_index--;
 800790c:	7ffb      	ldrb	r3, [r7, #31]
 800790e:	3b01      	subs	r3, #1
 8007910:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007912:	7ffb      	ldrb	r3, [r7, #31]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ef      	bne.n	80078f8 <FLASH_Program_Fast+0x30>
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	f383 8810 	msr	PRIMASK, r3
}
 8007922:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007924:	bf00      	nop
 8007926:	3724      	adds	r7, #36	; 0x24
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr
 8007930:	40022000 	.word	0x40022000

08007934 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800793e:	4b47      	ldr	r3, [pc, #284]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d101      	bne.n	800794a <HAL_FLASHEx_Erase+0x16>
 8007946:	2302      	movs	r3, #2
 8007948:	e083      	b.n	8007a52 <HAL_FLASHEx_Erase+0x11e>
 800794a:	4b44      	ldr	r3, [pc, #272]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 800794c:	2201      	movs	r2, #1
 800794e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007950:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007954:	f7ff ff3e 	bl	80077d4 <FLASH_WaitForLastOperation>
 8007958:	4603      	mov	r3, r0
 800795a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d173      	bne.n	8007a4a <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007962:	4b3e      	ldr	r3, [pc, #248]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 8007964:	2200      	movs	r2, #0
 8007966:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007968:	4b3d      	ldr	r3, [pc, #244]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007970:	2b00      	cmp	r3, #0
 8007972:	d013      	beq.n	800799c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007974:	4b3a      	ldr	r3, [pc, #232]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800797c:	2b00      	cmp	r3, #0
 800797e:	d009      	beq.n	8007994 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007980:	4b37      	ldr	r3, [pc, #220]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a36      	ldr	r2, [pc, #216]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 8007986:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800798a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800798c:	4b33      	ldr	r3, [pc, #204]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 800798e:	2203      	movs	r2, #3
 8007990:	771a      	strb	r2, [r3, #28]
 8007992:	e016      	b.n	80079c2 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007994:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 8007996:	2201      	movs	r2, #1
 8007998:	771a      	strb	r2, [r3, #28]
 800799a:	e012      	b.n	80079c2 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800799c:	4b30      	ldr	r3, [pc, #192]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d009      	beq.n	80079bc <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80079a8:	4b2d      	ldr	r3, [pc, #180]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a2c      	ldr	r2, [pc, #176]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 80079ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079b2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80079b4:	4b29      	ldr	r3, [pc, #164]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 80079b6:	2202      	movs	r2, #2
 80079b8:	771a      	strb	r2, [r3, #28]
 80079ba:	e002      	b.n	80079c2 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80079bc:	4b27      	ldr	r3, [pc, #156]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 80079be:	2200      	movs	r2, #0
 80079c0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d111      	bne.n	80079ee <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	4618      	mov	r0, r3
 80079d0:	f000 f848 	bl	8007a64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079d8:	f7ff fefc 	bl	80077d4 <FLASH_WaitForLastOperation>
 80079dc:	4603      	mov	r3, r0
 80079de:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80079e0:	4b1f      	ldr	r3, [pc, #124]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	4a1e      	ldr	r2, [pc, #120]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 80079e6:	f023 0304 	bic.w	r3, r3, #4
 80079ea:	6153      	str	r3, [r2, #20]
 80079ec:	e02b      	b.n	8007a46 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	f04f 32ff 	mov.w	r2, #4294967295
 80079f4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	689b      	ldr	r3, [r3, #8]
 80079fa:	60bb      	str	r3, [r7, #8]
 80079fc:	e01b      	b.n	8007a36 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	4619      	mov	r1, r3
 8007a04:	68b8      	ldr	r0, [r7, #8]
 8007a06:	f000 f84b 	bl	8007aa0 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a0e:	f7ff fee1 	bl	80077d4 <FLASH_WaitForLastOperation>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007a16:	4b12      	ldr	r3, [pc, #72]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	4a11      	ldr	r2, [pc, #68]	; (8007a60 <HAL_FLASHEx_Erase+0x12c>)
 8007a1c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007a20:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007a22:	7bfb      	ldrb	r3, [r7, #15]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	601a      	str	r2, [r3, #0]
          break;
 8007a2e:	e00a      	b.n	8007a46 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	3301      	adds	r3, #1
 8007a34:	60bb      	str	r3, [r7, #8]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	689a      	ldr	r2, [r3, #8]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	4413      	add	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d3db      	bcc.n	80079fe <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007a46:	f000 f84f 	bl	8007ae8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007a4a:	4b04      	ldr	r3, [pc, #16]	; (8007a5c <HAL_FLASHEx_Erase+0x128>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	701a      	strb	r2, [r3, #0]

  return status;
 8007a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}
 8007a5a:	bf00      	nop
 8007a5c:	2000000c 	.word	0x2000000c
 8007a60:	40022000 	.word	0x40022000

08007a64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f003 0301 	and.w	r3, r3, #1
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007a76:	4b09      	ldr	r3, [pc, #36]	; (8007a9c <FLASH_MassErase+0x38>)
 8007a78:	695b      	ldr	r3, [r3, #20]
 8007a7a:	4a08      	ldr	r2, [pc, #32]	; (8007a9c <FLASH_MassErase+0x38>)
 8007a7c:	f043 0304 	orr.w	r3, r3, #4
 8007a80:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007a82:	4b06      	ldr	r3, [pc, #24]	; (8007a9c <FLASH_MassErase+0x38>)
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	4a05      	ldr	r2, [pc, #20]	; (8007a9c <FLASH_MassErase+0x38>)
 8007a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a8c:	6153      	str	r3, [r2, #20]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40022000 	.word	0x40022000

08007aa0 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b083      	sub	sp, #12
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <FLASH_PageErase+0x44>)
 8007aac:	695b      	ldr	r3, [r3, #20]
 8007aae:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007aba:	490a      	ldr	r1, [pc, #40]	; (8007ae4 <FLASH_PageErase+0x44>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007ac0:	4b08      	ldr	r3, [pc, #32]	; (8007ae4 <FLASH_PageErase+0x44>)
 8007ac2:	695b      	ldr	r3, [r3, #20]
 8007ac4:	4a07      	ldr	r2, [pc, #28]	; (8007ae4 <FLASH_PageErase+0x44>)
 8007ac6:	f043 0302 	orr.w	r3, r3, #2
 8007aca:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007acc:	4b05      	ldr	r3, [pc, #20]	; (8007ae4 <FLASH_PageErase+0x44>)
 8007ace:	695b      	ldr	r3, [r3, #20]
 8007ad0:	4a04      	ldr	r2, [pc, #16]	; (8007ae4 <FLASH_PageErase+0x44>)
 8007ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ad6:	6153      	str	r3, [r2, #20]
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	40022000 	.word	0x40022000

08007ae8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007aee:	4b21      	ldr	r3, [pc, #132]	; (8007b74 <FLASH_FlushCaches+0x8c>)
 8007af0:	7f1b      	ldrb	r3, [r3, #28]
 8007af2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d002      	beq.n	8007b00 <FLASH_FlushCaches+0x18>
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d117      	bne.n	8007b30 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007b00:	4b1d      	ldr	r3, [pc, #116]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a1c      	ldr	r2, [pc, #112]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b0a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007b0c:	4b1a      	ldr	r3, [pc, #104]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	4b17      	ldr	r3, [pc, #92]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a16      	ldr	r2, [pc, #88]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b22:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b24:	4b14      	ldr	r3, [pc, #80]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a13      	ldr	r2, [pc, #76]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b2e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007b30:	79fb      	ldrb	r3, [r7, #7]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <FLASH_FlushCaches+0x54>
 8007b36:	79fb      	ldrb	r3, [r7, #7]
 8007b38:	2b03      	cmp	r3, #3
 8007b3a:	d111      	bne.n	8007b60 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007b3c:	4b0e      	ldr	r3, [pc, #56]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a0d      	ldr	r2, [pc, #52]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a0a      	ldr	r2, [pc, #40]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b52:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007b54:	4b08      	ldr	r3, [pc, #32]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <FLASH_FlushCaches+0x90>)
 8007b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b5e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007b60:	4b04      	ldr	r3, [pc, #16]	; (8007b74 <FLASH_FlushCaches+0x8c>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	771a      	strb	r2, [r3, #28]
}
 8007b66:	bf00      	nop
 8007b68:	370c      	adds	r7, #12
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	2000000c 	.word	0x2000000c
 8007b78:	40022000 	.word	0x40022000

08007b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b8a:	e15a      	b.n	8007e42 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	2101      	movs	r1, #1
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	fa01 f303 	lsl.w	r3, r1, r3
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 814c 	beq.w	8007e3c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f003 0303 	and.w	r3, r3, #3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d005      	beq.n	8007bbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d130      	bne.n	8007c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	091b      	lsrs	r3, r3, #4
 8007c08:	f003 0201 	and.w	r2, r3, #1
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d017      	beq.n	8007c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	2203      	movs	r2, #3
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d123      	bne.n	8007cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	08da      	lsrs	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3208      	adds	r2, #8
 8007c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	220f      	movs	r2, #15
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4013      	ands	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	08da      	lsrs	r2, r3, #3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3208      	adds	r2, #8
 8007ca8:	6939      	ldr	r1, [r7, #16]
 8007caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	2203      	movs	r2, #3
 8007cba:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbe:	43db      	mvns	r3, r3
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 0203 	and.w	r2, r3, #3
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 80a6 	beq.w	8007e3c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cf0:	4b5b      	ldr	r3, [pc, #364]	; (8007e60 <HAL_GPIO_Init+0x2e4>)
 8007cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf4:	4a5a      	ldr	r2, [pc, #360]	; (8007e60 <HAL_GPIO_Init+0x2e4>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8007cfc:	4b58      	ldr	r3, [pc, #352]	; (8007e60 <HAL_GPIO_Init+0x2e4>)
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d08:	4a56      	ldr	r2, [pc, #344]	; (8007e64 <HAL_GPIO_Init+0x2e8>)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	089b      	lsrs	r3, r3, #2
 8007d0e:	3302      	adds	r3, #2
 8007d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	220f      	movs	r2, #15
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007d32:	d01f      	beq.n	8007d74 <HAL_GPIO_Init+0x1f8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a4c      	ldr	r2, [pc, #304]	; (8007e68 <HAL_GPIO_Init+0x2ec>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d019      	beq.n	8007d70 <HAL_GPIO_Init+0x1f4>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a4b      	ldr	r2, [pc, #300]	; (8007e6c <HAL_GPIO_Init+0x2f0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <HAL_GPIO_Init+0x1f0>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a4a      	ldr	r2, [pc, #296]	; (8007e70 <HAL_GPIO_Init+0x2f4>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d00d      	beq.n	8007d68 <HAL_GPIO_Init+0x1ec>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a49      	ldr	r2, [pc, #292]	; (8007e74 <HAL_GPIO_Init+0x2f8>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d007      	beq.n	8007d64 <HAL_GPIO_Init+0x1e8>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a48      	ldr	r2, [pc, #288]	; (8007e78 <HAL_GPIO_Init+0x2fc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d101      	bne.n	8007d60 <HAL_GPIO_Init+0x1e4>
 8007d5c:	2305      	movs	r3, #5
 8007d5e:	e00a      	b.n	8007d76 <HAL_GPIO_Init+0x1fa>
 8007d60:	2306      	movs	r3, #6
 8007d62:	e008      	b.n	8007d76 <HAL_GPIO_Init+0x1fa>
 8007d64:	2304      	movs	r3, #4
 8007d66:	e006      	b.n	8007d76 <HAL_GPIO_Init+0x1fa>
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e004      	b.n	8007d76 <HAL_GPIO_Init+0x1fa>
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	e002      	b.n	8007d76 <HAL_GPIO_Init+0x1fa>
 8007d70:	2301      	movs	r3, #1
 8007d72:	e000      	b.n	8007d76 <HAL_GPIO_Init+0x1fa>
 8007d74:	2300      	movs	r3, #0
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	f002 0203 	and.w	r2, r2, #3
 8007d7c:	0092      	lsls	r2, r2, #2
 8007d7e:	4093      	lsls	r3, r2
 8007d80:	693a      	ldr	r2, [r7, #16]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007d86:	4937      	ldr	r1, [pc, #220]	; (8007e64 <HAL_GPIO_Init+0x2e8>)
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	089b      	lsrs	r3, r3, #2
 8007d8c:	3302      	adds	r3, #2
 8007d8e:	693a      	ldr	r2, [r7, #16]
 8007d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d94:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	43db      	mvns	r3, r3
 8007d9e:	693a      	ldr	r2, [r7, #16]
 8007da0:	4013      	ands	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d003      	beq.n	8007db8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007db0:	693a      	ldr	r2, [r7, #16]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007db8:	4a30      	ldr	r2, [pc, #192]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007dbe:	4b2f      	ldr	r3, [pc, #188]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	43db      	mvns	r3, r3
 8007dc8:	693a      	ldr	r2, [r7, #16]
 8007dca:	4013      	ands	r3, r2
 8007dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d003      	beq.n	8007de2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007de2:	4a26      	ldr	r2, [pc, #152]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007de8:	4b24      	ldr	r3, [pc, #144]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	43db      	mvns	r3, r3
 8007df2:	693a      	ldr	r2, [r7, #16]
 8007df4:	4013      	ands	r3, r2
 8007df6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007e04:	693a      	ldr	r2, [r7, #16]
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007e0c:	4a1b      	ldr	r2, [pc, #108]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007e0e:	693b      	ldr	r3, [r7, #16]
 8007e10:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007e12:	4b1a      	ldr	r3, [pc, #104]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	43db      	mvns	r3, r3
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d003      	beq.n	8007e36 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007e2e:	693a      	ldr	r2, [r7, #16]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	4313      	orrs	r3, r2
 8007e34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007e36:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <HAL_GPIO_Init+0x300>)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	3301      	adds	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f47f ae9d 	bne.w	8007b8c <HAL_GPIO_Init+0x10>
  }
}
 8007e52:	bf00      	nop
 8007e54:	bf00      	nop
 8007e56:	371c      	adds	r7, #28
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	40021000 	.word	0x40021000
 8007e64:	40010000 	.word	0x40010000
 8007e68:	48000400 	.word	0x48000400
 8007e6c:	48000800 	.word	0x48000800
 8007e70:	48000c00 	.word	0x48000c00
 8007e74:	48001000 	.word	0x48001000
 8007e78:	48001400 	.word	0x48001400
 8007e7c:	40010400 	.word	0x40010400

08007e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	691a      	ldr	r2, [r3, #16]
 8007e90:	887b      	ldrh	r3, [r7, #2]
 8007e92:	4013      	ands	r3, r2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d002      	beq.n	8007e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e98:	2301      	movs	r3, #1
 8007e9a:	73fb      	strb	r3, [r7, #15]
 8007e9c:	e001      	b.n	8007ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b083      	sub	sp, #12
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	807b      	strh	r3, [r7, #2]
 8007ebc:	4613      	mov	r3, r2
 8007ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ec0:	787b      	ldrb	r3, [r7, #1]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ec6:	887a      	ldrh	r2, [r7, #2]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ecc:	e002      	b.n	8007ed4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ece:	887a      	ldrh	r2, [r7, #2]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ed4:	bf00      	nop
 8007ed6:	370c      	adds	r7, #12
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ede:	4770      	bx	lr

08007ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	e081      	b.n	8007ff6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d106      	bne.n	8007f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fc fd5a 	bl	80049c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2224      	movs	r2, #36	; 0x24
 8007f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0201 	bic.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	685a      	ldr	r2, [r3, #4]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68db      	ldr	r3, [r3, #12]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d107      	bne.n	8007f5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	689a      	ldr	r2, [r3, #8]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f56:	609a      	str	r2, [r3, #8]
 8007f58:	e006      	b.n	8007f68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007f66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	2b02      	cmp	r3, #2
 8007f6e:	d104      	bne.n	8007f7a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f78:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	6812      	ldr	r2, [r2, #0]
 8007f84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f8c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f9c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	691a      	ldr	r2, [r3, #16]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	699b      	ldr	r3, [r3, #24]
 8007fae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69d9      	ldr	r1, [r3, #28]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6a1a      	ldr	r2, [r3, #32]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f042 0201 	orr.w	r2, r2, #1
 8007fd6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af02      	add	r7, sp, #8
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	461a      	mov	r2, r3
 800800c:	460b      	mov	r3, r1
 800800e:	817b      	strh	r3, [r7, #10]
 8008010:	4613      	mov	r3, r2
 8008012:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b20      	cmp	r3, #32
 800801e:	d153      	bne.n	80080c8 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	699b      	ldr	r3, [r3, #24]
 8008026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800802e:	d101      	bne.n	8008034 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8008030:	2302      	movs	r3, #2
 8008032:	e04a      	b.n	80080ca <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800803a:	2b01      	cmp	r3, #1
 800803c:	d101      	bne.n	8008042 <HAL_I2C_Master_Receive_IT+0x42>
 800803e:	2302      	movs	r3, #2
 8008040:	e043      	b.n	80080ca <HAL_I2C_Master_Receive_IT+0xca>
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2222      	movs	r2, #34	; 0x22
 800804e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2210      	movs	r2, #16
 8008056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	893a      	ldrh	r2, [r7, #8]
 800806a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	4a19      	ldr	r2, [pc, #100]	; (80080d4 <HAL_I2C_Master_Receive_IT+0xd4>)
 8008070:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4a18      	ldr	r2, [pc, #96]	; (80080d8 <HAL_I2C_Master_Receive_IT+0xd8>)
 8008076:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807c:	b29b      	uxth	r3, r3
 800807e:	2bff      	cmp	r3, #255	; 0xff
 8008080:	d906      	bls.n	8008090 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	22ff      	movs	r2, #255	; 0xff
 8008086:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008088:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800808c:	617b      	str	r3, [r7, #20]
 800808e:	e007      	b.n	80080a0 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800809a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800809e:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	8979      	ldrh	r1, [r7, #10]
 80080a8:	4b0c      	ldr	r3, [pc, #48]	; (80080dc <HAL_I2C_Master_Receive_IT+0xdc>)
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	68f8      	ldr	r0, [r7, #12]
 80080b0:	f001 fb66 	bl	8009780 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80080bc:	2102      	movs	r1, #2
 80080be:	68f8      	ldr	r0, [r7, #12]
 80080c0:	f001 fb90 	bl	80097e4 <I2C_Enable_IRQ>

    return HAL_OK;
 80080c4:	2300      	movs	r3, #0
 80080c6:	e000      	b.n	80080ca <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 80080c8:	2302      	movs	r3, #2
  }
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	ffff0000 	.word	0xffff0000
 80080d8:	080082fd 	.word	0x080082fd
 80080dc:	80002400 	.word	0x80002400

080080e0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b088      	sub	sp, #32
 80080e4:	af02      	add	r7, sp, #8
 80080e6:	60f8      	str	r0, [r7, #12]
 80080e8:	4608      	mov	r0, r1
 80080ea:	4611      	mov	r1, r2
 80080ec:	461a      	mov	r2, r3
 80080ee:	4603      	mov	r3, r0
 80080f0:	817b      	strh	r3, [r7, #10]
 80080f2:	460b      	mov	r3, r1
 80080f4:	813b      	strh	r3, [r7, #8]
 80080f6:	4613      	mov	r3, r2
 80080f8:	80fb      	strh	r3, [r7, #6]
  uint32_t xfermode;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b20      	cmp	r3, #32
 8008104:	d176      	bne.n	80081f4 <HAL_I2C_Mem_Read_IT+0x114>
  {
    if ((pData == NULL) || (Size == 0U))
 8008106:	6a3b      	ldr	r3, [r7, #32]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <HAL_I2C_Mem_Read_IT+0x32>
 800810c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800810e:	2b00      	cmp	r3, #0
 8008110:	d105      	bne.n	800811e <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008118:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e06b      	b.n	80081f6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812c:	d101      	bne.n	8008132 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 800812e:	2302      	movs	r3, #2
 8008130:	e061      	b.n	80081f6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008138:	2b01      	cmp	r3, #1
 800813a:	d101      	bne.n	8008140 <HAL_I2C_Mem_Read_IT+0x60>
 800813c:	2302      	movs	r3, #2
 800813e:	e05a      	b.n	80081f6 <HAL_I2C_Mem_Read_IT+0x116>
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2201      	movs	r2, #1
 8008144:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008148:	f7fd f81c 	bl	8005184 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2222      	movs	r2, #34	; 0x22
 8008152:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	2240      	movs	r2, #64	; 0x40
 800815a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	6a3a      	ldr	r2, [r7, #32]
 8008168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800816e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	4a23      	ldr	r2, [pc, #140]	; (8008200 <HAL_I2C_Mem_Read_IT+0x120>)
 8008174:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	4a22      	ldr	r2, [pc, #136]	; (8008204 <HAL_I2C_Mem_Read_IT+0x124>)
 800817a:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008180:	b29b      	uxth	r3, r3
 8008182:	2bff      	cmp	r3, #255	; 0xff
 8008184:	d906      	bls.n	8008194 <HAL_I2C_Mem_Read_IT+0xb4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	22ff      	movs	r2, #255	; 0xff
 800818a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800818c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008190:	617b      	str	r3, [r7, #20]
 8008192:	e007      	b.n	80081a4 <HAL_I2C_Mem_Read_IT+0xc4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800819e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80081a2:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80081a4:	88f8      	ldrh	r0, [r7, #6]
 80081a6:	893a      	ldrh	r2, [r7, #8]
 80081a8:	8979      	ldrh	r1, [r7, #10]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	2319      	movs	r3, #25
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	4603      	mov	r3, r0
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f000 fc9f 	bl	8008af8 <I2C_RequestMemoryRead>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d005      	beq.n	80081cc <HAL_I2C_Mem_Read_IT+0xec>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80081c8:	2301      	movs	r3, #1
 80081ca:	e014      	b.n	80081f6 <HAL_I2C_Mem_Read_IT+0x116>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	8979      	ldrh	r1, [r7, #10]
 80081d4:	4b0c      	ldr	r3, [pc, #48]	; (8008208 <HAL_I2C_Mem_Read_IT+0x128>)
 80081d6:	9300      	str	r3, [sp, #0]
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	68f8      	ldr	r0, [r7, #12]
 80081dc:	f001 fad0 	bl	8009780 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 80081e8:	2102      	movs	r1, #2
 80081ea:	68f8      	ldr	r0, [r7, #12]
 80081ec:	f001 fafa 	bl	80097e4 <I2C_Enable_IRQ>

    return HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	e000      	b.n	80081f6 <HAL_I2C_Mem_Read_IT+0x116>
  }
  else
  {
    return HAL_BUSY;
 80081f4:	2302      	movs	r3, #2
  }
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	ffff0000 	.word	0xffff0000
 8008204:	080082fd 	.word	0x080082fd
 8008208:	80002400 	.word	0x80002400

0800820c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008228:	2b00      	cmp	r3, #0
 800822a:	d005      	beq.n	8008238 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008230:	68ba      	ldr	r2, [r7, #8]
 8008232:	68f9      	ldr	r1, [r7, #12]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
  }
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008270:	bf00      	nop
 8008272:	370c      	adds	r7, #12
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
 8008284:	460b      	mov	r3, r1
 8008286:	70fb      	strb	r3, [r7, #3]
 8008288:	4613      	mov	r3, r2
 800828a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800828c:	bf00      	nop
 800828e:	370c      	adds	r7, #12
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af02      	add	r7, sp, #8
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <I2C_Master_ISR_IT+0x1e>
 8008316:	2302      	movs	r3, #2
 8008318:	e114      	b.n	8008544 <I2C_Master_ISR_IT+0x248>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	091b      	lsrs	r3, r3, #4
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d013      	beq.n	8008356 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	091b      	lsrs	r3, r3, #4
 8008332:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00d      	beq.n	8008356 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	2210      	movs	r2, #16
 8008340:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008346:	f043 0204 	orr.w	r2, r3, #4
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f001 f867 	bl	8009422 <I2C_Flush_TXDR>
 8008354:	e0e1      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008356:	697b      	ldr	r3, [r7, #20]
 8008358:	089b      	lsrs	r3, r3, #2
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b00      	cmp	r3, #0
 8008360:	d023      	beq.n	80083aa <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800836a:	2b00      	cmp	r3, #0
 800836c:	d01d      	beq.n	80083aa <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f023 0304 	bic.w	r3, r3, #4
 8008374:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008380:	b2d2      	uxtb	r2, r2
 8008382:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008388:	1c5a      	adds	r2, r3, #1
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008392:	3b01      	subs	r3, #1
 8008394:	b29a      	uxth	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800839e:	b29b      	uxth	r3, r3
 80083a0:	3b01      	subs	r3, #1
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083a8:	e0b7      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	085b      	lsrs	r3, r3, #1
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d01e      	beq.n	80083f4 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	085b      	lsrs	r3, r3, #1
 80083ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d018      	beq.n	80083f4 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	781a      	ldrb	r2, [r3, #0]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083d2:	1c5a      	adds	r2, r3, #1
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083dc:	3b01      	subs	r3, #1
 80083de:	b29a      	uxth	r2, r3
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	3b01      	subs	r3, #1
 80083ec:	b29a      	uxth	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80083f2:	e092      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	09db      	lsrs	r3, r3, #7
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d05d      	beq.n	80084bc <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	099b      	lsrs	r3, r3, #6
 8008404:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8008408:	2b00      	cmp	r3, #0
 800840a:	d057      	beq.n	80084bc <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008410:	b29b      	uxth	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d040      	beq.n	8008498 <I2C_Master_ISR_IT+0x19c>
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800841a:	2b00      	cmp	r3, #0
 800841c:	d13c      	bne.n	8008498 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	b29b      	uxth	r3, r3
 8008426:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800842a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008430:	b29b      	uxth	r3, r3
 8008432:	2bff      	cmp	r3, #255	; 0xff
 8008434:	d90e      	bls.n	8008454 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	22ff      	movs	r2, #255	; 0xff
 800843a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008440:	b2da      	uxtb	r2, r3
 8008442:	8a79      	ldrh	r1, [r7, #18]
 8008444:	2300      	movs	r3, #0
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f001 f997 	bl	8009780 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008452:	e032      	b.n	80084ba <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008462:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008466:	d00b      	beq.n	8008480 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800846c:	b2da      	uxtb	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008472:	8a79      	ldrh	r1, [r7, #18]
 8008474:	2000      	movs	r0, #0
 8008476:	9000      	str	r0, [sp, #0]
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f001 f981 	bl	8009780 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800847e:	e01c      	b.n	80084ba <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008484:	b2da      	uxtb	r2, r3
 8008486:	8a79      	ldrh	r1, [r7, #18]
 8008488:	2300      	movs	r3, #0
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f001 f975 	bl	8009780 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008496:	e010      	b.n	80084ba <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084a6:	d003      	beq.n	80084b0 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fbfd 	bl	8008ca8 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084ae:	e034      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80084b0:	2140      	movs	r1, #64	; 0x40
 80084b2:	68f8      	ldr	r0, [r7, #12]
 80084b4:	f000 febe 	bl	8009234 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084b8:	e02f      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
 80084ba:	e02e      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	099b      	lsrs	r3, r3, #6
 80084c0:	f003 0301 	and.w	r3, r3, #1
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d028      	beq.n	800851a <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	099b      	lsrs	r3, r3, #6
 80084cc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d022      	beq.n	800851a <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084d8:	b29b      	uxth	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d119      	bne.n	8008512 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084ec:	d015      	beq.n	800851a <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80084f6:	d108      	bne.n	800850a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008506:	605a      	str	r2, [r3, #4]
 8008508:	e007      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f000 fbcc 	bl	8008ca8 <I2C_ITMasterSeqCplt>
 8008510:	e003      	b.n	800851a <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008512:	2140      	movs	r1, #64	; 0x40
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 fe8d 	bl	8009234 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	f003 0301 	and.w	r3, r3, #1
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	095b      	lsrs	r3, r3, #5
 800852a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800852e:	2b00      	cmp	r3, #0
 8008530:	d003      	beq.n	800853a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8008532:	6979      	ldr	r1, [r7, #20]
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f000 fc53 	bl	8008de0 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008542:	2300      	movs	r3, #0
}
 8008544:	4618      	mov	r0, r3
 8008546:	3718      	adds	r7, #24
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b086      	sub	sp, #24
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800855c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008568:	2b01      	cmp	r3, #1
 800856a:	d101      	bne.n	8008570 <I2C_Slave_ISR_IT+0x24>
 800856c:	2302      	movs	r3, #2
 800856e:	e0ec      	b.n	800874a <I2C_Slave_ISR_IT+0x1fe>
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	095b      	lsrs	r3, r3, #5
 800857c:	f003 0301 	and.w	r3, r3, #1
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	095b      	lsrs	r3, r3, #5
 8008588:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800858c:	2b00      	cmp	r3, #0
 800858e:	d003      	beq.n	8008598 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008590:	6939      	ldr	r1, [r7, #16]
 8008592:	68f8      	ldr	r0, [r7, #12]
 8008594:	f000 fcee 	bl	8008f74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f003 0301 	and.w	r3, r3, #1
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d04d      	beq.n	8008640 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	091b      	lsrs	r3, r3, #4
 80085a8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d047      	beq.n	8008640 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d128      	bne.n	800860c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b28      	cmp	r3, #40	; 0x28
 80085c4:	d108      	bne.n	80085d8 <I2C_Slave_ISR_IT+0x8c>
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085cc:	d104      	bne.n	80085d8 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80085ce:	6939      	ldr	r1, [r7, #16]
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	f000 fdd9 	bl	8009188 <I2C_ITListenCplt>
 80085d6:	e032      	b.n	800863e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b29      	cmp	r3, #41	; 0x29
 80085e2:	d10e      	bne.n	8008602 <I2C_Slave_ISR_IT+0xb6>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085ea:	d00a      	beq.n	8008602 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2210      	movs	r2, #16
 80085f2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 ff14 	bl	8009422 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 fb91 	bl	8008d22 <I2C_ITSlaveSeqCplt>
 8008600:	e01d      	b.n	800863e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2210      	movs	r2, #16
 8008608:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800860a:	e096      	b.n	800873a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2210      	movs	r2, #16
 8008612:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008618:	f043 0204 	orr.w	r2, r3, #4
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d004      	beq.n	8008630 <I2C_Slave_ISR_IT+0xe4>
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800862c:	f040 8085 	bne.w	800873a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008634:	4619      	mov	r1, r3
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 fdfc 	bl	8009234 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800863c:	e07d      	b.n	800873a <I2C_Slave_ISR_IT+0x1ee>
 800863e:	e07c      	b.n	800873a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	089b      	lsrs	r3, r3, #2
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d030      	beq.n	80086ae <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8008654:	2b00      	cmp	r3, #0
 8008656:	d02a      	beq.n	80086ae <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	2b00      	cmp	r3, #0
 8008660:	d018      	beq.n	8008694 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800866c:	b2d2      	uxtb	r2, r2
 800866e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800867e:	3b01      	subs	r3, #1
 8008680:	b29a      	uxth	r2, r3
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800868a:	b29b      	uxth	r3, r3
 800868c:	3b01      	subs	r3, #1
 800868e:	b29a      	uxth	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008698:	b29b      	uxth	r3, r3
 800869a:	2b00      	cmp	r3, #0
 800869c:	d14f      	bne.n	800873e <I2C_Slave_ISR_IT+0x1f2>
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80086a4:	d04b      	beq.n	800873e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fb3b 	bl	8008d22 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80086ac:	e047      	b.n	800873e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	08db      	lsrs	r3, r3, #3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	08db      	lsrs	r3, r3, #3
 80086be:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d004      	beq.n	80086d0 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80086c6:	6939      	ldr	r1, [r7, #16]
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f000 fa69 	bl	8008ba0 <I2C_ITAddrCplt>
 80086ce:	e037      	b.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	085b      	lsrs	r3, r3, #1
 80086d4:	f003 0301 	and.w	r3, r3, #1
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d031      	beq.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	085b      	lsrs	r3, r3, #1
 80086e0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d02b      	beq.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086ec:	b29b      	uxth	r3, r3
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d018      	beq.n	8008724 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f6:	781a      	ldrb	r2, [r3, #0]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800870c:	b29b      	uxth	r3, r3
 800870e:	3b01      	subs	r3, #1
 8008710:	b29a      	uxth	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800871a:	3b01      	subs	r3, #1
 800871c:	b29a      	uxth	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	851a      	strh	r2, [r3, #40]	; 0x28
 8008722:	e00d      	b.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800872a:	d002      	beq.n	8008732 <I2C_Slave_ISR_IT+0x1e6>
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d106      	bne.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 faf5 	bl	8008d22 <I2C_ITSlaveSeqCplt>
 8008738:	e002      	b.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800873a:	bf00      	nop
 800873c:	e000      	b.n	8008740 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800873e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b088      	sub	sp, #32
 8008756:	af02      	add	r7, sp, #8
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008764:	2b01      	cmp	r3, #1
 8008766:	d101      	bne.n	800876c <I2C_Master_ISR_DMA+0x1a>
 8008768:	2302      	movs	r3, #2
 800876a:	e0e1      	b.n	8008930 <I2C_Master_ISR_DMA+0x1de>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	091b      	lsrs	r3, r3, #4
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b00      	cmp	r3, #0
 800877e:	d017      	beq.n	80087b0 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	091b      	lsrs	r3, r3, #4
 8008784:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008788:	2b00      	cmp	r3, #0
 800878a:	d011      	beq.n	80087b0 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	2210      	movs	r2, #16
 8008792:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	f043 0204 	orr.w	r2, r3, #4
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80087a0:	2120      	movs	r1, #32
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f001 f81e 	bl	80097e4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fe3a 	bl	8009422 <I2C_Flush_TXDR>
 80087ae:	e0ba      	b.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80087b0:	68bb      	ldr	r3, [r7, #8]
 80087b2:	09db      	lsrs	r3, r3, #7
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d072      	beq.n	80088a2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	099b      	lsrs	r3, r3, #6
 80087c0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d06c      	beq.n	80088a2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	681a      	ldr	r2, [r3, #0]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087d6:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087dc:	b29b      	uxth	r3, r3
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d04e      	beq.n	8008880 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	685b      	ldr	r3, [r3, #4]
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ee:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	2bff      	cmp	r3, #255	; 0xff
 80087f8:	d906      	bls.n	8008808 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	22ff      	movs	r2, #255	; 0xff
 80087fe:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	e010      	b.n	800882a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800880c:	b29a      	uxth	r2, r3
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008816:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800881a:	d003      	beq.n	8008824 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008820:	617b      	str	r3, [r7, #20]
 8008822:	e002      	b.n	800882a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008824:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008828:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800882e:	b2da      	uxtb	r2, r3
 8008830:	8a79      	ldrh	r1, [r7, #18]
 8008832:	2300      	movs	r3, #0
 8008834:	9300      	str	r3, [sp, #0]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f000 ffa1 	bl	8009780 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008842:	b29a      	uxth	r2, r3
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	b29a      	uxth	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b22      	cmp	r3, #34	; 0x22
 800885a:	d108      	bne.n	800886e <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681a      	ldr	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800886a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800886c:	e05b      	b.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800887c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800887e:	e052      	b.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800888a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800888e:	d003      	beq.n	8008898 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fa09 	bl	8008ca8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008896:	e046      	b.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008898:	2140      	movs	r1, #64	; 0x40
 800889a:	68f8      	ldr	r0, [r7, #12]
 800889c:	f000 fcca 	bl	8009234 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80088a0:	e041      	b.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	099b      	lsrs	r3, r3, #6
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d029      	beq.n	8008902 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	099b      	lsrs	r3, r3, #6
 80088b2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d023      	beq.n	8008902 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088be:	b29b      	uxth	r3, r3
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d119      	bne.n	80088f8 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d2:	d027      	beq.n	8008924 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80088dc:	d108      	bne.n	80088f0 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088ec:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80088ee:	e019      	b.n	8008924 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f9d9 	bl	8008ca8 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 80088f6:	e015      	b.n	8008924 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80088f8:	2140      	movs	r1, #64	; 0x40
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 fc9a 	bl	8009234 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008900:	e010      	b.n	8008924 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	095b      	lsrs	r3, r3, #5
 8008906:	f003 0301 	and.w	r3, r3, #1
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00b      	beq.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	095b      	lsrs	r3, r3, #5
 8008912:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008916:	2b00      	cmp	r3, #0
 8008918:	d005      	beq.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800891a:	68b9      	ldr	r1, [r7, #8]
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 fa5f 	bl	8008de0 <I2C_ITMasterCplt>
 8008922:	e000      	b.n	8008926 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008924:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b088      	sub	sp, #32
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800894a:	2300      	movs	r3, #0
 800894c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008954:	2b01      	cmp	r3, #1
 8008956:	d101      	bne.n	800895c <I2C_Slave_ISR_DMA+0x24>
 8008958:	2302      	movs	r3, #2
 800895a:	e0c9      	b.n	8008af0 <I2C_Slave_ISR_DMA+0x1b8>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	095b      	lsrs	r3, r3, #5
 8008968:	f003 0301 	and.w	r3, r3, #1
 800896c:	2b00      	cmp	r3, #0
 800896e:	d009      	beq.n	8008984 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	095b      	lsrs	r3, r3, #5
 8008974:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	68f8      	ldr	r0, [r7, #12]
 8008980:	f000 faf8 	bl	8008f74 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	f000 809a 	beq.w	8008ac6 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	091b      	lsrs	r3, r3, #4
 8008996:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 8093 	beq.w	8008ac6 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	0b9b      	lsrs	r3, r3, #14
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	0bdb      	lsrs	r3, r3, #15
 80089b0:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d07f      	beq.n	8008ab8 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00d      	beq.n	80089dc <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	0bdb      	lsrs	r3, r3, #15
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d101      	bne.n	80089dc <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 80089d8:	2301      	movs	r3, #1
 80089da:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00d      	beq.n	8008a00 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	0b9b      	lsrs	r3, r3, #14
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 80089fc:	2301      	movs	r3, #1
 80089fe:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	2b01      	cmp	r3, #1
 8008a04:	d128      	bne.n	8008a58 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	2b28      	cmp	r3, #40	; 0x28
 8008a10:	d108      	bne.n	8008a24 <I2C_Slave_ISR_DMA+0xec>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008a18:	d104      	bne.n	8008a24 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 fbb3 	bl	8009188 <I2C_ITListenCplt>
 8008a22:	e048      	b.n	8008ab6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b29      	cmp	r3, #41	; 0x29
 8008a2e:	d10e      	bne.n	8008a4e <I2C_Slave_ISR_DMA+0x116>
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a36:	d00a      	beq.n	8008a4e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2210      	movs	r2, #16
 8008a3e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f000 fcee 	bl	8009422 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f000 f96b 	bl	8008d22 <I2C_ITSlaveSeqCplt>
 8008a4c:	e033      	b.n	8008ab6 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2210      	movs	r2, #16
 8008a54:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008a56:	e034      	b.n	8008ac2 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2210      	movs	r2, #16
 8008a5e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a64:	f043 0204 	orr.w	r2, r3, #4
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008a72:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008a74:	69bb      	ldr	r3, [r7, #24]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d003      	beq.n	8008a82 <I2C_Slave_ISR_DMA+0x14a>
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a80:	d11f      	bne.n	8008ac2 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b21      	cmp	r3, #33	; 0x21
 8008a86:	d002      	beq.n	8008a8e <I2C_Slave_ISR_DMA+0x156>
 8008a88:	7dfb      	ldrb	r3, [r7, #23]
 8008a8a:	2b29      	cmp	r3, #41	; 0x29
 8008a8c:	d103      	bne.n	8008a96 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2221      	movs	r2, #33	; 0x21
 8008a92:	631a      	str	r2, [r3, #48]	; 0x30
 8008a94:	e008      	b.n	8008aa8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	2b22      	cmp	r3, #34	; 0x22
 8008a9a:	d002      	beq.n	8008aa2 <I2C_Slave_ISR_DMA+0x16a>
 8008a9c:	7dfb      	ldrb	r3, [r7, #23]
 8008a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa0:	d102      	bne.n	8008aa8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2222      	movs	r2, #34	; 0x22
 8008aa6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aac:	4619      	mov	r1, r3
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 fbc0 	bl	8009234 <I2C_ITError>
      if (treatdmanack == 1U)
 8008ab4:	e005      	b.n	8008ac2 <I2C_Slave_ISR_DMA+0x18a>
 8008ab6:	e004      	b.n	8008ac2 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2210      	movs	r2, #16
 8008abe:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008ac0:	e011      	b.n	8008ae6 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8008ac2:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008ac4:	e00f      	b.n	8008ae6 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	08db      	lsrs	r3, r3, #3
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d009      	beq.n	8008ae6 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	08db      	lsrs	r3, r3, #3
 8008ad6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008ade:	68b9      	ldr	r1, [r7, #8]
 8008ae0:	68f8      	ldr	r0, [r7, #12]
 8008ae2:	f000 f85d 	bl	8008ba0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008aee:	2300      	movs	r3, #0
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3720      	adds	r7, #32
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b086      	sub	sp, #24
 8008afc:	af02      	add	r7, sp, #8
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	4608      	mov	r0, r1
 8008b02:	4611      	mov	r1, r2
 8008b04:	461a      	mov	r2, r3
 8008b06:	4603      	mov	r3, r0
 8008b08:	817b      	strh	r3, [r7, #10]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	813b      	strh	r3, [r7, #8]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008b12:	88fb      	ldrh	r3, [r7, #6]
 8008b14:	b2da      	uxtb	r2, r3
 8008b16:	8979      	ldrh	r1, [r7, #10]
 8008b18:	4b20      	ldr	r3, [pc, #128]	; (8008b9c <I2C_RequestMemoryRead+0xa4>)
 8008b1a:	9300      	str	r3, [sp, #0]
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 fe2e 	bl	8009780 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b24:	69fa      	ldr	r2, [r7, #28]
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 fcfc 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	e02c      	b.n	8008b92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b38:	88fb      	ldrh	r3, [r7, #6]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d105      	bne.n	8008b4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b3e:	893b      	ldrh	r3, [r7, #8]
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	629a      	str	r2, [r3, #40]	; 0x28
 8008b48:	e015      	b.n	8008b76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b4a:	893b      	ldrh	r3, [r7, #8]
 8008b4c:	0a1b      	lsrs	r3, r3, #8
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b58:	69fa      	ldr	r2, [r7, #28]
 8008b5a:	69b9      	ldr	r1, [r7, #24]
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fce2 	bl	8009526 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e012      	b.n	8008b92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b6c:	893b      	ldrh	r3, [r7, #8]
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	69bb      	ldr	r3, [r7, #24]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2140      	movs	r1, #64	; 0x40
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fc90 	bl	80094a6 <I2C_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e000      	b.n	8008b92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	80002000 	.word	0x80002000

08008ba0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b084      	sub	sp, #16
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bb6:	2b28      	cmp	r3, #40	; 0x28
 8008bb8:	d16a      	bne.n	8008c90 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	699b      	ldr	r3, [r3, #24]
 8008bc0:	0c1b      	lsrs	r3, r3, #16
 8008bc2:	b2db      	uxtb	r3, r3
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	699b      	ldr	r3, [r3, #24]
 8008bd0:	0c1b      	lsrs	r3, r3, #16
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008bd8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008be6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	68db      	ldr	r3, [r3, #12]
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008bf4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	2b02      	cmp	r3, #2
 8008bfc:	d138      	bne.n	8008c70 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8008bfe:	897b      	ldrh	r3, [r7, #10]
 8008c00:	09db      	lsrs	r3, r3, #7
 8008c02:	b29a      	uxth	r2, r3
 8008c04:	89bb      	ldrh	r3, [r7, #12]
 8008c06:	4053      	eors	r3, r2
 8008c08:	b29b      	uxth	r3, r3
 8008c0a:	f003 0306 	and.w	r3, r3, #6
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d11c      	bne.n	8008c4c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008c12:	897b      	ldrh	r3, [r7, #10]
 8008c14:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d13b      	bne.n	8008ca0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2208      	movs	r2, #8
 8008c34:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c3e:	89ba      	ldrh	r2, [r7, #12]
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f7ff fb19 	bl	800827c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008c4a:	e029      	b.n	8008ca0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008c4c:	893b      	ldrh	r3, [r7, #8]
 8008c4e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fe29 	bl	80098ac <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c62:	89ba      	ldrh	r2, [r7, #12]
 8008c64:	7bfb      	ldrb	r3, [r7, #15]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7ff fb07 	bl	800827c <HAL_I2C_AddrCallback>
}
 8008c6e:	e017      	b.n	8008ca0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008c70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fe19 	bl	80098ac <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008c82:	89ba      	ldrh	r2, [r7, #12]
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	4619      	mov	r1, r3
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f7ff faf7 	bl	800827c <HAL_I2C_AddrCallback>
}
 8008c8e:	e007      	b.n	8008ca0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2208      	movs	r2, #8
 8008c96:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8008ca0:	bf00      	nop
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	2b21      	cmp	r3, #33	; 0x21
 8008cc2:	d115      	bne.n	8008cf0 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2220      	movs	r2, #32
 8008cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2211      	movs	r2, #17
 8008cd0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008cd8:	2101      	movs	r1, #1
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 fde6 	bl	80098ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f7ff faa9 	bl	8008240 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008cee:	e014      	b.n	8008d1a <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2220      	movs	r2, #32
 8008cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2212      	movs	r2, #18
 8008cfc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008d04:	2102      	movs	r1, #2
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 fdd0 	bl	80098ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f7f8 f995 	bl	8001044 <HAL_I2C_MasterRxCpltCallback>
}
 8008d1a:	bf00      	nop
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b084      	sub	sp, #16
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2200      	movs	r2, #0
 8008d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	0b9b      	lsrs	r3, r3, #14
 8008d3e:	f003 0301 	and.w	r3, r3, #1
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d008      	beq.n	8008d58 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008d54:	601a      	str	r2, [r3, #0]
 8008d56:	e00d      	b.n	8008d74 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	0bdb      	lsrs	r3, r3, #15
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d007      	beq.n	8008d74 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	681a      	ldr	r2, [r3, #0]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d72:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b29      	cmp	r3, #41	; 0x29
 8008d7e:	d112      	bne.n	8008da6 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2228      	movs	r2, #40	; 0x28
 8008d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2221      	movs	r2, #33	; 0x21
 8008d8c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008d8e:	2101      	movs	r1, #1
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fd8b 	bl	80098ac <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7ff fa58 	bl	8008254 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008da4:	e017      	b.n	8008dd6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	2b2a      	cmp	r3, #42	; 0x2a
 8008db0:	d111      	bne.n	8008dd6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2228      	movs	r2, #40	; 0x28
 8008db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2222      	movs	r2, #34	; 0x22
 8008dbe:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008dc0:	2102      	movs	r1, #2
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 fd72 	bl	80098ac <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7ff fa49 	bl	8008268 <HAL_I2C_SlaveRxCpltCallback>
}
 8008dd6:	bf00      	nop
 8008dd8:	3710      	adds	r7, #16
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	2220      	movs	r2, #32
 8008df4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b21      	cmp	r3, #33	; 0x21
 8008e00:	d107      	bne.n	8008e12 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008e02:	2101      	movs	r1, #1
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 fd51 	bl	80098ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2211      	movs	r2, #17
 8008e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8008e10:	e00c      	b.n	8008e2c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	2b22      	cmp	r3, #34	; 0x22
 8008e1c:	d106      	bne.n	8008e2c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008e1e:	2102      	movs	r1, #2
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f000 fd43 	bl	80098ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2212      	movs	r2, #18
 8008e2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6859      	ldr	r1, [r3, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4b4d      	ldr	r3, [pc, #308]	; (8008f6c <I2C_ITMasterCplt+0x18c>)
 8008e38:	400b      	ands	r3, r1
 8008e3a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a4a      	ldr	r2, [pc, #296]	; (8008f70 <I2C_ITMasterCplt+0x190>)
 8008e46:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	091b      	lsrs	r3, r3, #4
 8008e4c:	f003 0301 	and.w	r3, r3, #1
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d009      	beq.n	8008e68 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	2210      	movs	r2, #16
 8008e5a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e60:	f043 0204 	orr.w	r2, r3, #4
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	2b60      	cmp	r3, #96	; 0x60
 8008e72:	d10b      	bne.n	8008e8c <I2C_ITMasterCplt+0xac>
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	089b      	lsrs	r3, r3, #2
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d005      	beq.n	8008e8c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fac8 	bl	8009422 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e96:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b60      	cmp	r3, #96	; 0x60
 8008ea2:	d002      	beq.n	8008eaa <I2C_ITMasterCplt+0xca>
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d006      	beq.n	8008eb8 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 f9bf 	bl	8009234 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008eb6:	e054      	b.n	8008f62 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b21      	cmp	r3, #33	; 0x21
 8008ec2:	d124      	bne.n	8008f0e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b40      	cmp	r3, #64	; 0x40
 8008edc:	d10b      	bne.n	8008ef6 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7ff f9dc 	bl	80082ac <HAL_I2C_MemTxCpltCallback>
}
 8008ef4:	e035      	b.n	8008f62 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff f99a 	bl	8008240 <HAL_I2C_MasterTxCpltCallback>
}
 8008f0c:	e029      	b.n	8008f62 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	2b22      	cmp	r3, #34	; 0x22
 8008f18:	d123      	bne.n	8008f62 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b40      	cmp	r3, #64	; 0x40
 8008f32:	d10b      	bne.n	8008f4c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff f9bb 	bl	80082c0 <HAL_I2C_MemRxCpltCallback>
}
 8008f4a:	e00a      	b.n	8008f62 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7f8 f871 	bl	8001044 <HAL_I2C_MasterRxCpltCallback>
}
 8008f62:	bf00      	nop
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	fe00e800 	.word	0xfe00e800
 8008f70:	ffff0000 	.word	0xffff0000

08008f74 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b086      	sub	sp, #24
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f90:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2220      	movs	r2, #32
 8008f98:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008f9a:	7bfb      	ldrb	r3, [r7, #15]
 8008f9c:	2b21      	cmp	r3, #33	; 0x21
 8008f9e:	d002      	beq.n	8008fa6 <I2C_ITSlaveCplt+0x32>
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2b29      	cmp	r3, #41	; 0x29
 8008fa4:	d108      	bne.n	8008fb8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008fa6:	f248 0101 	movw	r1, #32769	; 0x8001
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fc7e 	bl	80098ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2221      	movs	r2, #33	; 0x21
 8008fb4:	631a      	str	r2, [r3, #48]	; 0x30
 8008fb6:	e00d      	b.n	8008fd4 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	2b22      	cmp	r3, #34	; 0x22
 8008fbc:	d002      	beq.n	8008fc4 <I2C_ITSlaveCplt+0x50>
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fc2:	d107      	bne.n	8008fd4 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008fc4:	f248 0102 	movw	r1, #32770	; 0x8002
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fc6f 	bl	80098ac <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2222      	movs	r2, #34	; 0x22
 8008fd2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008fe2:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6859      	ldr	r1, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4b64      	ldr	r3, [pc, #400]	; (8009180 <I2C_ITSlaveCplt+0x20c>)
 8008ff0:	400b      	ands	r3, r1
 8008ff2:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fa14 	bl	8009422 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	0b9b      	lsrs	r3, r3, #14
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	2b00      	cmp	r3, #0
 8009004:	d013      	beq.n	800902e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009014:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800901a:	2b00      	cmp	r3, #0
 800901c:	d020      	beq.n	8009060 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	b29a      	uxth	r2, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800902c:	e018      	b.n	8009060 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	0bdb      	lsrs	r3, r3, #15
 8009032:	f003 0301 	and.w	r3, r3, #1
 8009036:	2b00      	cmp	r3, #0
 8009038:	d012      	beq.n	8009060 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009048:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	2b00      	cmp	r3, #0
 8009050:	d006      	beq.n	8009060 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	685b      	ldr	r3, [r3, #4]
 800905a:	b29a      	uxth	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	089b      	lsrs	r3, r3, #2
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d020      	beq.n	80090ae <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	f023 0304 	bic.w	r3, r3, #4
 8009072:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00c      	beq.n	80090ae <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009098:	3b01      	subs	r3, #1
 800909a:	b29a      	uxth	r2, r3
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	3b01      	subs	r3, #1
 80090a8:	b29a      	uxth	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d005      	beq.n	80090c4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090bc:	f043 0204 	orr.w	r2, r3, #4
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d010      	beq.n	80090fc <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f8a7 	bl	8009234 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090ec:	b2db      	uxtb	r3, r3
 80090ee:	2b28      	cmp	r3, #40	; 0x28
 80090f0:	d141      	bne.n	8009176 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80090f2:	6979      	ldr	r1, [r7, #20]
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f847 	bl	8009188 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80090fa:	e03c      	b.n	8009176 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009104:	d014      	beq.n	8009130 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f7ff fe0b 	bl	8008d22 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a1d      	ldr	r2, [pc, #116]	; (8009184 <I2C_ITSlaveCplt+0x210>)
 8009110:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2220      	movs	r2, #32
 8009116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff f8b5 	bl	8008298 <HAL_I2C_ListenCpltCallback>
}
 800912e:	e022      	b.n	8009176 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b22      	cmp	r3, #34	; 0x22
 800913a:	d10e      	bne.n	800915a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2220      	movs	r2, #32
 8009140:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7ff f888 	bl	8008268 <HAL_I2C_SlaveRxCpltCallback>
}
 8009158:	e00d      	b.n	8009176 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f7ff f86f 	bl	8008254 <HAL_I2C_SlaveTxCpltCallback>
}
 8009176:	bf00      	nop
 8009178:	3718      	adds	r7, #24
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	fe00e800 	.word	0xfe00e800
 8009184:	ffff0000 	.word	0xffff0000

08009188 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b082      	sub	sp, #8
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	4a26      	ldr	r2, [pc, #152]	; (8009230 <I2C_ITListenCplt+0xa8>)
 8009196:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2220      	movs	r2, #32
 80091a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2200      	movs	r2, #0
 80091b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	089b      	lsrs	r3, r3, #2
 80091b8:	f003 0301 	and.w	r3, r3, #1
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d022      	beq.n	8009206 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ca:	b2d2      	uxtb	r2, r2
 80091cc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091d2:	1c5a      	adds	r2, r3, #1
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d012      	beq.n	8009206 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e4:	3b01      	subs	r3, #1
 80091e6:	b29a      	uxth	r2, r3
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fe:	f043 0204 	orr.w	r2, r3, #4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009206:	f248 0103 	movw	r1, #32771	; 0x8003
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fb4e 	bl	80098ac <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2210      	movs	r2, #16
 8009216:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7ff f839 	bl	8008298 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8009226:	bf00      	nop
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	ffff0000 	.word	0xffff0000

08009234 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	2200      	movs	r2, #0
 800924a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a5d      	ldr	r2, [pc, #372]	; (80093c8 <I2C_ITError+0x194>)
 8009252:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2200      	movs	r2, #0
 8009258:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	2b28      	cmp	r3, #40	; 0x28
 800926a:	d005      	beq.n	8009278 <I2C_ITError+0x44>
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b29      	cmp	r3, #41	; 0x29
 8009270:	d002      	beq.n	8009278 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2b2a      	cmp	r3, #42	; 0x2a
 8009276:	d10b      	bne.n	8009290 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009278:	2103      	movs	r1, #3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fb16 	bl	80098ac <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2228      	movs	r2, #40	; 0x28
 8009284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a50      	ldr	r2, [pc, #320]	; (80093cc <I2C_ITError+0x198>)
 800928c:	635a      	str	r2, [r3, #52]	; 0x34
 800928e:	e011      	b.n	80092b4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009290:	f248 0103 	movw	r1, #32771	; 0x8003
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fb09 	bl	80098ac <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b60      	cmp	r3, #96	; 0x60
 80092a4:	d003      	beq.n	80092ae <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2220      	movs	r2, #32
 80092aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2200      	movs	r2, #0
 80092b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d039      	beq.n	8009336 <I2C_ITError+0x102>
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	2b11      	cmp	r3, #17
 80092c6:	d002      	beq.n	80092ce <I2C_ITError+0x9a>
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	2b21      	cmp	r3, #33	; 0x21
 80092cc:	d133      	bne.n	8009336 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80092d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092dc:	d107      	bne.n	80092ee <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80092ec:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092f2:	4618      	mov	r0, r3
 80092f4:	f7fd fb6e 	bl	80069d4 <HAL_DMA_GetState>
 80092f8:	4603      	mov	r3, r0
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d017      	beq.n	800932e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009302:	4a33      	ldr	r2, [pc, #204]	; (80093d0 <I2C_ITError+0x19c>)
 8009304:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009312:	4618      	mov	r0, r3
 8009314:	f7fd faf7 	bl	8006906 <HAL_DMA_Abort_IT>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d04d      	beq.n	80093ba <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009328:	4610      	mov	r0, r2
 800932a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800932c:	e045      	b.n	80093ba <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 f850 	bl	80093d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8009334:	e041      	b.n	80093ba <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d039      	beq.n	80093b2 <I2C_ITError+0x17e>
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b12      	cmp	r3, #18
 8009342:	d002      	beq.n	800934a <I2C_ITError+0x116>
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2b22      	cmp	r3, #34	; 0x22
 8009348:	d133      	bne.n	80093b2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009358:	d107      	bne.n	800936a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009368:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936e:	4618      	mov	r0, r3
 8009370:	f7fd fb30 	bl	80069d4 <HAL_DMA_GetState>
 8009374:	4603      	mov	r3, r0
 8009376:	2b01      	cmp	r3, #1
 8009378:	d017      	beq.n	80093aa <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800937e:	4a14      	ldr	r2, [pc, #80]	; (80093d0 <I2C_ITError+0x19c>)
 8009380:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800938e:	4618      	mov	r0, r3
 8009390:	f7fd fab9 	bl	8006906 <HAL_DMA_Abort_IT>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d011      	beq.n	80093be <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80093a4:	4610      	mov	r0, r2
 80093a6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093a8:	e009      	b.n	80093be <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f000 f812 	bl	80093d4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093b0:	e005      	b.n	80093be <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f80e 	bl	80093d4 <I2C_TreatErrorCallback>
  }
}
 80093b8:	e002      	b.n	80093c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80093ba:	bf00      	nop
 80093bc:	e000      	b.n	80093c0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80093be:	bf00      	nop
}
 80093c0:	bf00      	nop
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	ffff0000 	.word	0xffff0000
 80093cc:	0800854d 	.word	0x0800854d
 80093d0:	0800946b 	.word	0x0800946b

080093d4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b082      	sub	sp, #8
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b60      	cmp	r3, #96	; 0x60
 80093e6:	d10e      	bne.n	8009406 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	2220      	movs	r2, #32
 80093ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2200      	movs	r2, #0
 80093f4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7fe ff72 	bl	80082e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009404:	e009      	b.n	800941a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe ff5d 	bl	80082d4 <HAL_I2C_ErrorCallback>
}
 800941a:	bf00      	nop
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	f003 0302 	and.w	r3, r3, #2
 8009434:	2b02      	cmp	r3, #2
 8009436:	d103      	bne.n	8009440 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2200      	movs	r2, #0
 800943e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b01      	cmp	r3, #1
 800944c:	d007      	beq.n	800945e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	699a      	ldr	r2, [r3, #24]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f042 0201 	orr.w	r2, r2, #1
 800945c:	619a      	str	r2, [r3, #24]
  }
}
 800945e:	bf00      	nop
 8009460:	370c      	adds	r7, #12
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr

0800946a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b084      	sub	sp, #16
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800947c:	2b00      	cmp	r3, #0
 800947e:	d003      	beq.n	8009488 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009484:	2200      	movs	r2, #0
 8009486:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948c:	2b00      	cmp	r3, #0
 800948e:	d003      	beq.n	8009498 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009494:	2200      	movs	r2, #0
 8009496:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7ff ff9b 	bl	80093d4 <I2C_TreatErrorCallback>
}
 800949e:	bf00      	nop
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}

080094a6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80094a6:	b580      	push	{r7, lr}
 80094a8:	b084      	sub	sp, #16
 80094aa:	af00      	add	r7, sp, #0
 80094ac:	60f8      	str	r0, [r7, #12]
 80094ae:	60b9      	str	r1, [r7, #8]
 80094b0:	603b      	str	r3, [r7, #0]
 80094b2:	4613      	mov	r3, r2
 80094b4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094b6:	e022      	b.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094be:	d01e      	beq.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094c0:	f7fb fe60 	bl	8005184 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	683a      	ldr	r2, [r7, #0]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d302      	bcc.n	80094d6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d113      	bne.n	80094fe <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80094fa:	2301      	movs	r3, #1
 80094fc:	e00f      	b.n	800951e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	699a      	ldr	r2, [r3, #24]
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	4013      	ands	r3, r2
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	429a      	cmp	r2, r3
 800950c:	bf0c      	ite	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	2300      	movne	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	461a      	mov	r2, r3
 8009516:	79fb      	ldrb	r3, [r7, #7]
 8009518:	429a      	cmp	r2, r3
 800951a:	d0cd      	beq.n	80094b8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	b084      	sub	sp, #16
 800952a:	af00      	add	r7, sp, #0
 800952c:	60f8      	str	r0, [r7, #12]
 800952e:	60b9      	str	r1, [r7, #8]
 8009530:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009532:	e02c      	b.n	800958e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f835 	bl	80095a8 <I2C_IsErrorOccurred>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d001      	beq.n	8009548 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e02a      	b.n	800959e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954e:	d01e      	beq.n	800958e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009550:	f7fb fe18 	bl	8005184 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	429a      	cmp	r2, r3
 800955e:	d302      	bcc.n	8009566 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d113      	bne.n	800958e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956a:	f043 0220 	orr.w	r2, r3, #32
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2220      	movs	r2, #32
 8009576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	2200      	movs	r2, #0
 8009586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800958a:	2301      	movs	r3, #1
 800958c:	e007      	b.n	800959e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	f003 0302 	and.w	r3, r3, #2
 8009598:	2b02      	cmp	r3, #2
 800959a:	d1cb      	bne.n	8009534 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800959c:	2300      	movs	r3, #0
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	; 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	699b      	ldr	r3, [r3, #24]
 80095c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80095c2:	2300      	movs	r3, #0
 80095c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	f003 0310 	and.w	r3, r3, #16
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d075      	beq.n	80096c0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2210      	movs	r2, #16
 80095da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095dc:	e056      	b.n	800968c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095e4:	d052      	beq.n	800968c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095e6:	f7fb fdcd 	bl	8005184 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	429a      	cmp	r2, r3
 80095f4:	d302      	bcc.n	80095fc <I2C_IsErrorOccurred+0x54>
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d147      	bne.n	800968c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009606:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800960e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800961a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800961e:	d12e      	bne.n	800967e <I2C_IsErrorOccurred+0xd6>
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009626:	d02a      	beq.n	800967e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009628:	7cfb      	ldrb	r3, [r7, #19]
 800962a:	2b20      	cmp	r3, #32
 800962c:	d027      	beq.n	800967e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800963c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800963e:	f7fb fda1 	bl	8005184 <HAL_GetTick>
 8009642:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009644:	e01b      	b.n	800967e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009646:	f7fb fd9d 	bl	8005184 <HAL_GetTick>
 800964a:	4602      	mov	r2, r0
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	1ad3      	subs	r3, r2, r3
 8009650:	2b19      	cmp	r3, #25
 8009652:	d914      	bls.n	800967e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	f043 0220 	orr.w	r2, r3, #32
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2220      	movs	r2, #32
 8009664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	699b      	ldr	r3, [r3, #24]
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b20      	cmp	r3, #32
 800968a:	d1dc      	bne.n	8009646 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	699b      	ldr	r3, [r3, #24]
 8009692:	f003 0320 	and.w	r3, r3, #32
 8009696:	2b20      	cmp	r3, #32
 8009698:	d003      	beq.n	80096a2 <I2C_IsErrorOccurred+0xfa>
 800969a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d09d      	beq.n	80095de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80096a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d103      	bne.n	80096b2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2220      	movs	r2, #32
 80096b0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80096b2:	6a3b      	ldr	r3, [r7, #32]
 80096b4:	f043 0304 	orr.w	r3, r3, #4
 80096b8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00b      	beq.n	80096ea <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80096d2:	6a3b      	ldr	r3, [r7, #32]
 80096d4:	f043 0301 	orr.w	r3, r3, #1
 80096d8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80096e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d00b      	beq.n	800970c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096f4:	6a3b      	ldr	r3, [r7, #32]
 80096f6:	f043 0308 	orr.w	r3, r3, #8
 80096fa:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009704:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009712:	2b00      	cmp	r3, #0
 8009714:	d00b      	beq.n	800972e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009716:	6a3b      	ldr	r3, [r7, #32]
 8009718:	f043 0302 	orr.w	r3, r3, #2
 800971c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009726:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800972e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009732:	2b00      	cmp	r3, #0
 8009734:	d01c      	beq.n	8009770 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f7ff fe73 	bl	8009422 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6859      	ldr	r1, [r3, #4]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4b0d      	ldr	r3, [pc, #52]	; (800977c <I2C_IsErrorOccurred+0x1d4>)
 8009748:	400b      	ands	r3, r1
 800974a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009750:	6a3b      	ldr	r3, [r7, #32]
 8009752:	431a      	orrs	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	2220      	movs	r2, #32
 800975c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2200      	movs	r2, #0
 8009764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009774:	4618      	mov	r0, r3
 8009776:	3728      	adds	r7, #40	; 0x28
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}
 800977c:	fe00e800 	.word	0xfe00e800

08009780 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009780:	b480      	push	{r7}
 8009782:	b087      	sub	sp, #28
 8009784:	af00      	add	r7, sp, #0
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	460b      	mov	r3, r1
 800978c:	817b      	strh	r3, [r7, #10]
 800978e:	4613      	mov	r3, r2
 8009790:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009792:	897b      	ldrh	r3, [r7, #10]
 8009794:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009798:	7a7b      	ldrb	r3, [r7, #9]
 800979a:	041b      	lsls	r3, r3, #16
 800979c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097a0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80097a6:	6a3b      	ldr	r3, [r7, #32]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80097ae:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	6a3b      	ldr	r3, [r7, #32]
 80097b8:	0d5b      	lsrs	r3, r3, #21
 80097ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80097be:	4b08      	ldr	r3, [pc, #32]	; (80097e0 <I2C_TransferConfig+0x60>)
 80097c0:	430b      	orrs	r3, r1
 80097c2:	43db      	mvns	r3, r3
 80097c4:	ea02 0103 	and.w	r1, r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	697a      	ldr	r2, [r7, #20]
 80097ce:	430a      	orrs	r2, r1
 80097d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	03ff63ff 	.word	0x03ff63ff

080097e4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f8:	4a2a      	ldr	r2, [pc, #168]	; (80098a4 <I2C_Enable_IRQ+0xc0>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d004      	beq.n	8009808 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009802:	4a29      	ldr	r2, [pc, #164]	; (80098a8 <I2C_Enable_IRQ+0xc4>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d11d      	bne.n	8009844 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009808:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800980c:	2b00      	cmp	r3, #0
 800980e:	da03      	bge.n	8009818 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009816:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009818:	887b      	ldrh	r3, [r7, #2]
 800981a:	2b10      	cmp	r3, #16
 800981c:	d103      	bne.n	8009826 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009824:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009826:	887b      	ldrh	r3, [r7, #2]
 8009828:	2b20      	cmp	r3, #32
 800982a:	d103      	bne.n	8009834 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009832:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009834:	887b      	ldrh	r3, [r7, #2]
 8009836:	2b40      	cmp	r3, #64	; 0x40
 8009838:	d125      	bne.n	8009886 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009840:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009842:	e020      	b.n	8009886 <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009844:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009848:	2b00      	cmp	r3, #0
 800984a:	da03      	bge.n	8009854 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009852:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009854:	887b      	ldrh	r3, [r7, #2]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d003      	beq.n	8009866 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009864:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009866:	887b      	ldrh	r3, [r7, #2]
 8009868:	f003 0302 	and.w	r3, r3, #2
 800986c:	2b00      	cmp	r3, #0
 800986e:	d003      	beq.n	8009878 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009876:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009878:	887b      	ldrh	r3, [r7, #2]
 800987a:	2b20      	cmp	r3, #32
 800987c:	d103      	bne.n	8009886 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f043 0320 	orr.w	r3, r3, #32
 8009884:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	6819      	ldr	r1, [r3, #0]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	430a      	orrs	r2, r1
 8009894:	601a      	str	r2, [r3, #0]
}
 8009896:	bf00      	nop
 8009898:	3714      	adds	r7, #20
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	08008753 	.word	0x08008753
 80098a8:	08008939 	.word	0x08008939

080098ac <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80098bc:	887b      	ldrh	r3, [r7, #2]
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d00f      	beq.n	80098e6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80098cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80098da:	2b28      	cmp	r3, #40	; 0x28
 80098dc:	d003      	beq.n	80098e6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80098e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80098e6:	887b      	ldrh	r3, [r7, #2]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00f      	beq.n	8009910 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80098f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009904:	2b28      	cmp	r3, #40	; 0x28
 8009906:	d003      	beq.n	8009910 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800990e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009910:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009914:	2b00      	cmp	r3, #0
 8009916:	da03      	bge.n	8009920 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800991e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009920:	887b      	ldrh	r3, [r7, #2]
 8009922:	2b10      	cmp	r3, #16
 8009924:	d103      	bne.n	800992e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800992c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800992e:	887b      	ldrh	r3, [r7, #2]
 8009930:	2b20      	cmp	r3, #32
 8009932:	d103      	bne.n	800993c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f043 0320 	orr.w	r3, r3, #32
 800993a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800993c:	887b      	ldrh	r3, [r7, #2]
 800993e:	2b40      	cmp	r3, #64	; 0x40
 8009940:	d103      	bne.n	800994a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009948:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	6819      	ldr	r1, [r3, #0]
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	43da      	mvns	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	400a      	ands	r2, r1
 800995a:	601a      	str	r2, [r3, #0]
}
 800995c:	bf00      	nop
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009978:	b2db      	uxtb	r3, r3
 800997a:	2b20      	cmp	r3, #32
 800997c:	d138      	bne.n	80099f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009984:	2b01      	cmp	r3, #1
 8009986:	d101      	bne.n	800998c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009988:	2302      	movs	r3, #2
 800998a:	e032      	b.n	80099f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2224      	movs	r2, #36	; 0x24
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f022 0201 	bic.w	r2, r2, #1
 80099aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80099ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	6819      	ldr	r1, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	430a      	orrs	r2, r1
 80099ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099ec:	2300      	movs	r3, #0
 80099ee:	e000      	b.n	80099f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80099f0:	2302      	movs	r3, #2
  }
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	370c      	adds	r7, #12
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80099fe:	b480      	push	{r7}
 8009a00:	b085      	sub	sp, #20
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	6078      	str	r0, [r7, #4]
 8009a06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	2b20      	cmp	r3, #32
 8009a12:	d139      	bne.n	8009a88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d101      	bne.n	8009a22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009a1e:	2302      	movs	r3, #2
 8009a20:	e033      	b.n	8009a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2201      	movs	r2, #1
 8009a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	2224      	movs	r2, #36	; 0x24
 8009a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0201 	bic.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009a50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	021b      	lsls	r3, r3, #8
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	681a      	ldr	r2, [r3, #0]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f042 0201 	orr.w	r2, r2, #1
 8009a72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2220      	movs	r2, #32
 8009a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009a84:	2300      	movs	r3, #0
 8009a86:	e000      	b.n	8009a8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009a88:	2302      	movs	r3, #2
  }
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3714      	adds	r7, #20
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
	...

08009a98 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b084      	sub	sp, #16
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d101      	bne.n	8009aae <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	e0bb      	b.n	8009c26 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	2b05      	cmp	r3, #5
 8009ab8:	d101      	bne.n	8009abe <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e0b3      	b.n	8009c26 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ac4:	b2db      	uxtb	r3, r3
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d101      	bne.n	8009ace <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8009aca:	2301      	movs	r3, #1
 8009acc:	e0ab      	b.n	8009c26 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009ace:	4b58      	ldr	r3, [pc, #352]	; (8009c30 <HAL_OPAMP_Init+0x198>)
 8009ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad2:	4a57      	ldr	r2, [pc, #348]	; (8009c30 <HAL_OPAMP_Init+0x198>)
 8009ad4:	f043 0301 	orr.w	r3, r3, #1
 8009ad8:	6613      	str	r3, [r2, #96]	; 0x60
 8009ada:	4b55      	ldr	r3, [pc, #340]	; (8009c30 <HAL_OPAMP_Init+0x198>)
 8009adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ade:	f003 0301 	and.w	r3, r3, #1
 8009ae2:	60bb      	str	r3, [r7, #8]
 8009ae4:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009aec:	b2db      	uxtb	r3, r3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d103      	bne.n	8009afa <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7fa ffc2 	bl	8004a84 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	2b40      	cmp	r3, #64	; 0x40
 8009b06:	d003      	beq.n	8009b10 <HAL_OPAMP_Init+0x78>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	2b60      	cmp	r3, #96	; 0x60
 8009b0e:	d133      	bne.n	8009b78 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	f023 0110 	bic.w	r1, r3, #16
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	681a      	ldr	r2, [r3, #0]
 8009b2c:	4b41      	ldr	r3, [pc, #260]	; (8009c34 <HAL_OPAMP_Init+0x19c>)
 8009b2e:	4013      	ands	r3, r2
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	6851      	ldr	r1, [r2, #4]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	6892      	ldr	r2, [r2, #8]
 8009b38:	4311      	orrs	r1, r2
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6912      	ldr	r2, [r2, #16]
 8009b3e:	430a      	orrs	r2, r1
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	7d09      	ldrb	r1, [r1, #20]
 8009b44:	2901      	cmp	r1, #1
 8009b46:	d102      	bne.n	8009b4e <HAL_OPAMP_Init+0xb6>
 8009b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b4c:	e000      	b.n	8009b50 <HAL_OPAMP_Init+0xb8>
 8009b4e:	2100      	movs	r1, #0
 8009b50:	4311      	orrs	r1, r2
 8009b52:	687a      	ldr	r2, [r7, #4]
 8009b54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009b56:	4311      	orrs	r1, r2
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009b5c:	4311      	orrs	r1, r2
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009b62:	04d2      	lsls	r2, r2, #19
 8009b64:	4311      	orrs	r1, r2
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009b6a:	0612      	lsls	r2, r2, #24
 8009b6c:	4311      	orrs	r1, r2
 8009b6e:	687a      	ldr	r2, [r7, #4]
 8009b70:	6812      	ldr	r2, [r2, #0]
 8009b72:	430b      	orrs	r3, r1
 8009b74:	6013      	str	r3, [r2, #0]
 8009b76:	e035      	b.n	8009be4 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f023 0110 	bic.w	r1, r3, #16
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	681a      	ldr	r2, [r3, #0]
 8009b94:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <HAL_OPAMP_Init+0x19c>)
 8009b96:	4013      	ands	r3, r2
 8009b98:	687a      	ldr	r2, [r7, #4]
 8009b9a:	6851      	ldr	r1, [r2, #4]
 8009b9c:	687a      	ldr	r2, [r7, #4]
 8009b9e:	6892      	ldr	r2, [r2, #8]
 8009ba0:	4311      	orrs	r1, r2
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	68d2      	ldr	r2, [r2, #12]
 8009ba6:	4311      	orrs	r1, r2
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	6912      	ldr	r2, [r2, #16]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	7d09      	ldrb	r1, [r1, #20]
 8009bb2:	2901      	cmp	r1, #1
 8009bb4:	d102      	bne.n	8009bbc <HAL_OPAMP_Init+0x124>
 8009bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bba:	e000      	b.n	8009bbe <HAL_OPAMP_Init+0x126>
 8009bbc:	2100      	movs	r1, #0
 8009bbe:	4311      	orrs	r1, r2
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009bc4:	4311      	orrs	r1, r2
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009bca:	4311      	orrs	r1, r2
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009bd0:	04d2      	lsls	r2, r2, #19
 8009bd2:	4311      	orrs	r1, r2
 8009bd4:	687a      	ldr	r2, [r7, #4]
 8009bd6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009bd8:	0612      	lsls	r2, r2, #24
 8009bda:	4311      	orrs	r1, r2
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	6812      	ldr	r2, [r2, #0]
 8009be0:	430b      	orrs	r3, r1
 8009be2:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	699b      	ldr	r3, [r3, #24]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	db10      	blt.n	8009c10 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	699b      	ldr	r3, [r3, #24]
 8009bf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	699a      	ldr	r2, [r3, #24]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	69db      	ldr	r3, [r3, #28]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	430a      	orrs	r2, r1
 8009c0e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d103      	bne.n	8009c24 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2201      	movs	r2, #1
 8009c20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3710      	adds	r7, #16
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	bd80      	pop	{r7, pc}
 8009c2e:	bf00      	nop
 8009c30:	40021000 	.word	0x40021000
 8009c34:	e0003e11 	.word	0xe0003e11

08009c38 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d102      	bne.n	8009c50 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	73fb      	strb	r3, [r7, #15]
 8009c4e:	e01d      	b.n	8009c8c <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c56:	b2db      	uxtb	r3, r3
 8009c58:	2b05      	cmp	r3, #5
 8009c5a:	d102      	bne.n	8009c62 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	73fb      	strb	r3, [r7, #15]
 8009c60:	e014      	b.n	8009c8c <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009c68:	b2db      	uxtb	r3, r3
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d10c      	bne.n	8009c88 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	f042 0201 	orr.w	r2, r2, #1
 8009c7c:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2204      	movs	r2, #4
 8009c82:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8009c86:	e001      	b.n	8009c8c <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8009c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
	...

08009c9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d141      	bne.n	8009d2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009caa:	4b4b      	ldr	r3, [pc, #300]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009cb6:	d131      	bne.n	8009d1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009cb8:	4b47      	ldr	r3, [pc, #284]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cbe:	4a46      	ldr	r2, [pc, #280]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009cc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009cc8:	4b43      	ldr	r3, [pc, #268]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009cd0:	4a41      	ldr	r2, [pc, #260]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009cd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009cd8:	4b40      	ldr	r3, [pc, #256]	; (8009ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	2232      	movs	r2, #50	; 0x32
 8009cde:	fb02 f303 	mul.w	r3, r2, r3
 8009ce2:	4a3f      	ldr	r2, [pc, #252]	; (8009de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce8:	0c9b      	lsrs	r3, r3, #18
 8009cea:	3301      	adds	r3, #1
 8009cec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009cee:	e002      	b.n	8009cf6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	3b01      	subs	r3, #1
 8009cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009cf6:	4b38      	ldr	r3, [pc, #224]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009cf8:	695b      	ldr	r3, [r3, #20]
 8009cfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009cfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d02:	d102      	bne.n	8009d0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d1f2      	bne.n	8009cf0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d0a:	4b33      	ldr	r3, [pc, #204]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d0c:	695b      	ldr	r3, [r3, #20]
 8009d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d16:	d158      	bne.n	8009dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e057      	b.n	8009dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009d1c:	4b2e      	ldr	r3, [pc, #184]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d22:	4a2d      	ldr	r2, [pc, #180]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009d2c:	e04d      	b.n	8009dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d34:	d141      	bne.n	8009dba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009d36:	4b28      	ldr	r3, [pc, #160]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009d3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d42:	d131      	bne.n	8009da8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009d44:	4b24      	ldr	r3, [pc, #144]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d4a:	4a23      	ldr	r2, [pc, #140]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009d54:	4b20      	ldr	r3, [pc, #128]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009d5c:	4a1e      	ldr	r2, [pc, #120]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009d62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009d64:	4b1d      	ldr	r3, [pc, #116]	; (8009ddc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2232      	movs	r2, #50	; 0x32
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	4a1c      	ldr	r2, [pc, #112]	; (8009de0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009d70:	fba2 2303 	umull	r2, r3, r2, r3
 8009d74:	0c9b      	lsrs	r3, r3, #18
 8009d76:	3301      	adds	r3, #1
 8009d78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d7a:	e002      	b.n	8009d82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009d82:	4b15      	ldr	r3, [pc, #84]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d84:	695b      	ldr	r3, [r3, #20]
 8009d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d8e:	d102      	bne.n	8009d96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d1f2      	bne.n	8009d7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009d96:	4b10      	ldr	r3, [pc, #64]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009da2:	d112      	bne.n	8009dca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009da4:	2303      	movs	r3, #3
 8009da6:	e011      	b.n	8009dcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009da8:	4b0b      	ldr	r3, [pc, #44]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dae:	4a0a      	ldr	r2, [pc, #40]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009db4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8009db8:	e007      	b.n	8009dca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009dba:	4b07      	ldr	r3, [pc, #28]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009dc2:	4a05      	ldr	r2, [pc, #20]	; (8009dd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009dc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009dc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3714      	adds	r7, #20
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr
 8009dd8:	40007000 	.word	0x40007000
 8009ddc:	20000000 	.word	0x20000000
 8009de0:	431bde83 	.word	0x431bde83

08009de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b088      	sub	sp, #32
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e306      	b.n	800a404 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d075      	beq.n	8009eee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e02:	4b97      	ldr	r3, [pc, #604]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 030c 	and.w	r3, r3, #12
 8009e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009e0c:	4b94      	ldr	r3, [pc, #592]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e0e:	68db      	ldr	r3, [r3, #12]
 8009e10:	f003 0303 	and.w	r3, r3, #3
 8009e14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b0c      	cmp	r3, #12
 8009e1a:	d102      	bne.n	8009e22 <HAL_RCC_OscConfig+0x3e>
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b03      	cmp	r3, #3
 8009e20:	d002      	beq.n	8009e28 <HAL_RCC_OscConfig+0x44>
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d10b      	bne.n	8009e40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e28:	4b8d      	ldr	r3, [pc, #564]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d05b      	beq.n	8009eec <HAL_RCC_OscConfig+0x108>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d157      	bne.n	8009eec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e2e1      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e48:	d106      	bne.n	8009e58 <HAL_RCC_OscConfig+0x74>
 8009e4a:	4b85      	ldr	r3, [pc, #532]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a84      	ldr	r2, [pc, #528]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	e01d      	b.n	8009e94 <HAL_RCC_OscConfig+0xb0>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009e60:	d10c      	bne.n	8009e7c <HAL_RCC_OscConfig+0x98>
 8009e62:	4b7f      	ldr	r3, [pc, #508]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a7e      	ldr	r2, [pc, #504]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e6c:	6013      	str	r3, [r2, #0]
 8009e6e:	4b7c      	ldr	r3, [pc, #496]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a7b      	ldr	r2, [pc, #492]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e78:	6013      	str	r3, [r2, #0]
 8009e7a:	e00b      	b.n	8009e94 <HAL_RCC_OscConfig+0xb0>
 8009e7c:	4b78      	ldr	r3, [pc, #480]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	4a77      	ldr	r2, [pc, #476]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	4b75      	ldr	r3, [pc, #468]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a74      	ldr	r2, [pc, #464]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d013      	beq.n	8009ec4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e9c:	f7fb f972 	bl	8005184 <HAL_GetTick>
 8009ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009ea2:	e008      	b.n	8009eb6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ea4:	f7fb f96e 	bl	8005184 <HAL_GetTick>
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	1ad3      	subs	r3, r2, r3
 8009eae:	2b64      	cmp	r3, #100	; 0x64
 8009eb0:	d901      	bls.n	8009eb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009eb2:	2303      	movs	r3, #3
 8009eb4:	e2a6      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009eb6:	4b6a      	ldr	r3, [pc, #424]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0f0      	beq.n	8009ea4 <HAL_RCC_OscConfig+0xc0>
 8009ec2:	e014      	b.n	8009eee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ec4:	f7fb f95e 	bl	8005184 <HAL_GetTick>
 8009ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009eca:	e008      	b.n	8009ede <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ecc:	f7fb f95a 	bl	8005184 <HAL_GetTick>
 8009ed0:	4602      	mov	r2, r0
 8009ed2:	693b      	ldr	r3, [r7, #16]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	2b64      	cmp	r3, #100	; 0x64
 8009ed8:	d901      	bls.n	8009ede <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009eda:	2303      	movs	r3, #3
 8009edc:	e292      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009ede:	4b60      	ldr	r3, [pc, #384]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d1f0      	bne.n	8009ecc <HAL_RCC_OscConfig+0xe8>
 8009eea:	e000      	b.n	8009eee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d075      	beq.n	8009fe6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009efa:	4b59      	ldr	r3, [pc, #356]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f003 030c 	and.w	r3, r3, #12
 8009f02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009f04:	4b56      	ldr	r3, [pc, #344]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	2b0c      	cmp	r3, #12
 8009f12:	d102      	bne.n	8009f1a <HAL_RCC_OscConfig+0x136>
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d002      	beq.n	8009f20 <HAL_RCC_OscConfig+0x13c>
 8009f1a:	69bb      	ldr	r3, [r7, #24]
 8009f1c:	2b04      	cmp	r3, #4
 8009f1e:	d11f      	bne.n	8009f60 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f20:	4b4f      	ldr	r3, [pc, #316]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d005      	beq.n	8009f38 <HAL_RCC_OscConfig+0x154>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d101      	bne.n	8009f38 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009f34:	2301      	movs	r3, #1
 8009f36:	e265      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f38:	4b49      	ldr	r3, [pc, #292]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	691b      	ldr	r3, [r3, #16]
 8009f44:	061b      	lsls	r3, r3, #24
 8009f46:	4946      	ldr	r1, [pc, #280]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009f4c:	4b45      	ldr	r3, [pc, #276]	; (800a064 <HAL_RCC_OscConfig+0x280>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4618      	mov	r0, r3
 8009f52:	f7fb f8cb 	bl	80050ec <HAL_InitTick>
 8009f56:	4603      	mov	r3, r0
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d043      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e251      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	68db      	ldr	r3, [r3, #12]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d023      	beq.n	8009fb0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f68:	4b3d      	ldr	r3, [pc, #244]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a3c      	ldr	r2, [pc, #240]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f74:	f7fb f906 	bl	8005184 <HAL_GetTick>
 8009f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f7a:	e008      	b.n	8009f8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f7c:	f7fb f902 	bl	8005184 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d901      	bls.n	8009f8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e23a      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f8e:	4b34      	ldr	r3, [pc, #208]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0f0      	beq.n	8009f7c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f9a:	4b31      	ldr	r3, [pc, #196]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	061b      	lsls	r3, r3, #24
 8009fa8:	492d      	ldr	r1, [pc, #180]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009faa:	4313      	orrs	r3, r2
 8009fac:	604b      	str	r3, [r1, #4]
 8009fae:	e01a      	b.n	8009fe6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a2a      	ldr	r2, [pc, #168]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fbc:	f7fb f8e2 	bl	8005184 <HAL_GetTick>
 8009fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fc2:	e008      	b.n	8009fd6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fc4:	f7fb f8de 	bl	8005184 <HAL_GetTick>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	693b      	ldr	r3, [r7, #16]
 8009fcc:	1ad3      	subs	r3, r2, r3
 8009fce:	2b02      	cmp	r3, #2
 8009fd0:	d901      	bls.n	8009fd6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009fd2:	2303      	movs	r3, #3
 8009fd4:	e216      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009fd6:	4b22      	ldr	r3, [pc, #136]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1f0      	bne.n	8009fc4 <HAL_RCC_OscConfig+0x1e0>
 8009fe2:	e000      	b.n	8009fe6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009fe4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f003 0308 	and.w	r3, r3, #8
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d041      	beq.n	800a076 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d01c      	beq.n	800a034 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ffa:	4b19      	ldr	r3, [pc, #100]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 8009ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a000:	4a17      	ldr	r2, [pc, #92]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 800a002:	f043 0301 	orr.w	r3, r3, #1
 800a006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a00a:	f7fb f8bb 	bl	8005184 <HAL_GetTick>
 800a00e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a010:	e008      	b.n	800a024 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a012:	f7fb f8b7 	bl	8005184 <HAL_GetTick>
 800a016:	4602      	mov	r2, r0
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d901      	bls.n	800a024 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a020:	2303      	movs	r3, #3
 800a022:	e1ef      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a024:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 800a026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a02a:	f003 0302 	and.w	r3, r3, #2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0ef      	beq.n	800a012 <HAL_RCC_OscConfig+0x22e>
 800a032:	e020      	b.n	800a076 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a034:	4b0a      	ldr	r3, [pc, #40]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 800a036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a03a:	4a09      	ldr	r2, [pc, #36]	; (800a060 <HAL_RCC_OscConfig+0x27c>)
 800a03c:	f023 0301 	bic.w	r3, r3, #1
 800a040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a044:	f7fb f89e 	bl	8005184 <HAL_GetTick>
 800a048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a04a:	e00d      	b.n	800a068 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a04c:	f7fb f89a 	bl	8005184 <HAL_GetTick>
 800a050:	4602      	mov	r2, r0
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	2b02      	cmp	r3, #2
 800a058:	d906      	bls.n	800a068 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e1d2      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
 800a05e:	bf00      	nop
 800a060:	40021000 	.word	0x40021000
 800a064:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a068:	4b8c      	ldr	r3, [pc, #560]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a06a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a06e:	f003 0302 	and.w	r3, r3, #2
 800a072:	2b00      	cmp	r3, #0
 800a074:	d1ea      	bne.n	800a04c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0304 	and.w	r3, r3, #4
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f000 80a6 	beq.w	800a1d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a084:	2300      	movs	r3, #0
 800a086:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a088:	4b84      	ldr	r3, [pc, #528]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a08a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a08c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <HAL_RCC_OscConfig+0x2b4>
 800a094:	2301      	movs	r3, #1
 800a096:	e000      	b.n	800a09a <HAL_RCC_OscConfig+0x2b6>
 800a098:	2300      	movs	r3, #0
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d00d      	beq.n	800a0ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a09e:	4b7f      	ldr	r3, [pc, #508]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0a2:	4a7e      	ldr	r2, [pc, #504]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a0a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a8:	6593      	str	r3, [r2, #88]	; 0x58
 800a0aa:	4b7c      	ldr	r3, [pc, #496]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0b2:	60fb      	str	r3, [r7, #12]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0ba:	4b79      	ldr	r3, [pc, #484]	; (800a2a0 <HAL_RCC_OscConfig+0x4bc>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d118      	bne.n	800a0f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a0c6:	4b76      	ldr	r3, [pc, #472]	; (800a2a0 <HAL_RCC_OscConfig+0x4bc>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a75      	ldr	r2, [pc, #468]	; (800a2a0 <HAL_RCC_OscConfig+0x4bc>)
 800a0cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a0d2:	f7fb f857 	bl	8005184 <HAL_GetTick>
 800a0d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0d8:	e008      	b.n	800a0ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a0da:	f7fb f853 	bl	8005184 <HAL_GetTick>
 800a0de:	4602      	mov	r2, r0
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	1ad3      	subs	r3, r2, r3
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d901      	bls.n	800a0ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a0e8:	2303      	movs	r3, #3
 800a0ea:	e18b      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a0ec:	4b6c      	ldr	r3, [pc, #432]	; (800a2a0 <HAL_RCC_OscConfig+0x4bc>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d0f0      	beq.n	800a0da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d108      	bne.n	800a112 <HAL_RCC_OscConfig+0x32e>
 800a100:	4b66      	ldr	r3, [pc, #408]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a106:	4a65      	ldr	r2, [pc, #404]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a108:	f043 0301 	orr.w	r3, r3, #1
 800a10c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a110:	e024      	b.n	800a15c <HAL_RCC_OscConfig+0x378>
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	689b      	ldr	r3, [r3, #8]
 800a116:	2b05      	cmp	r3, #5
 800a118:	d110      	bne.n	800a13c <HAL_RCC_OscConfig+0x358>
 800a11a:	4b60      	ldr	r3, [pc, #384]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a120:	4a5e      	ldr	r2, [pc, #376]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a122:	f043 0304 	orr.w	r3, r3, #4
 800a126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a12a:	4b5c      	ldr	r3, [pc, #368]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a130:	4a5a      	ldr	r2, [pc, #360]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a13a:	e00f      	b.n	800a15c <HAL_RCC_OscConfig+0x378>
 800a13c:	4b57      	ldr	r3, [pc, #348]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a13e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a142:	4a56      	ldr	r2, [pc, #344]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a144:	f023 0301 	bic.w	r3, r3, #1
 800a148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a14c:	4b53      	ldr	r3, [pc, #332]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a14e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a152:	4a52      	ldr	r2, [pc, #328]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a154:	f023 0304 	bic.w	r3, r3, #4
 800a158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d016      	beq.n	800a192 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a164:	f7fb f80e 	bl	8005184 <HAL_GetTick>
 800a168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a16a:	e00a      	b.n	800a182 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a16c:	f7fb f80a 	bl	8005184 <HAL_GetTick>
 800a170:	4602      	mov	r2, r0
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	1ad3      	subs	r3, r2, r3
 800a176:	f241 3288 	movw	r2, #5000	; 0x1388
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d901      	bls.n	800a182 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a17e:	2303      	movs	r3, #3
 800a180:	e140      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a182:	4b46      	ldr	r3, [pc, #280]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a188:	f003 0302 	and.w	r3, r3, #2
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d0ed      	beq.n	800a16c <HAL_RCC_OscConfig+0x388>
 800a190:	e015      	b.n	800a1be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a192:	f7fa fff7 	bl	8005184 <HAL_GetTick>
 800a196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a198:	e00a      	b.n	800a1b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a19a:	f7fa fff3 	bl	8005184 <HAL_GetTick>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	693b      	ldr	r3, [r7, #16]
 800a1a2:	1ad3      	subs	r3, r2, r3
 800a1a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d901      	bls.n	800a1b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e129      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a1b0:	4b3a      	ldr	r3, [pc, #232]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a1b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1b6:	f003 0302 	and.w	r3, r3, #2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d1ed      	bne.n	800a19a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a1be:	7ffb      	ldrb	r3, [r7, #31]
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	d105      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a1c4:	4b35      	ldr	r3, [pc, #212]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1c8:	4a34      	ldr	r2, [pc, #208]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a1ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a1ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f003 0320 	and.w	r3, r3, #32
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d03c      	beq.n	800a256 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d01c      	beq.n	800a21e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1e4:	4b2d      	ldr	r3, [pc, #180]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a1e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a1ea:	4a2c      	ldr	r2, [pc, #176]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a1ec:	f043 0301 	orr.w	r3, r3, #1
 800a1f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1f4:	f7fa ffc6 	bl	8005184 <HAL_GetTick>
 800a1f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a1fa:	e008      	b.n	800a20e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1fc:	f7fa ffc2 	bl	8005184 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	2b02      	cmp	r3, #2
 800a208:	d901      	bls.n	800a20e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e0fa      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a20e:	4b23      	ldr	r3, [pc, #140]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a214:	f003 0302 	and.w	r3, r3, #2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0ef      	beq.n	800a1fc <HAL_RCC_OscConfig+0x418>
 800a21c:	e01b      	b.n	800a256 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a21e:	4b1f      	ldr	r3, [pc, #124]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a220:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a224:	4a1d      	ldr	r2, [pc, #116]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a226:	f023 0301 	bic.w	r3, r3, #1
 800a22a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a22e:	f7fa ffa9 	bl	8005184 <HAL_GetTick>
 800a232:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a234:	e008      	b.n	800a248 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a236:	f7fa ffa5 	bl	8005184 <HAL_GetTick>
 800a23a:	4602      	mov	r2, r0
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	2b02      	cmp	r3, #2
 800a242:	d901      	bls.n	800a248 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a244:	2303      	movs	r3, #3
 800a246:	e0dd      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a248:	4b14      	ldr	r3, [pc, #80]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a24a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a24e:	f003 0302 	and.w	r3, r3, #2
 800a252:	2b00      	cmp	r3, #0
 800a254:	d1ef      	bne.n	800a236 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f000 80d1 	beq.w	800a402 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a260:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f003 030c 	and.w	r3, r3, #12
 800a268:	2b0c      	cmp	r3, #12
 800a26a:	f000 808b 	beq.w	800a384 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	2b02      	cmp	r3, #2
 800a274:	d15e      	bne.n	800a334 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a276:	4b09      	ldr	r3, [pc, #36]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	4a08      	ldr	r2, [pc, #32]	; (800a29c <HAL_RCC_OscConfig+0x4b8>)
 800a27c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a280:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a282:	f7fa ff7f 	bl	8005184 <HAL_GetTick>
 800a286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a288:	e00c      	b.n	800a2a4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a28a:	f7fa ff7b 	bl	8005184 <HAL_GetTick>
 800a28e:	4602      	mov	r2, r0
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	2b02      	cmp	r3, #2
 800a296:	d905      	bls.n	800a2a4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e0b3      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
 800a29c:	40021000 	.word	0x40021000
 800a2a0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a2a4:	4b59      	ldr	r3, [pc, #356]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1ec      	bne.n	800a28a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2b0:	4b56      	ldr	r3, [pc, #344]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a2b2:	68da      	ldr	r2, [r3, #12]
 800a2b4:	4b56      	ldr	r3, [pc, #344]	; (800a410 <HAL_RCC_OscConfig+0x62c>)
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6a11      	ldr	r1, [r2, #32]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a2c0:	3a01      	subs	r2, #1
 800a2c2:	0112      	lsls	r2, r2, #4
 800a2c4:	4311      	orrs	r1, r2
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a2ca:	0212      	lsls	r2, r2, #8
 800a2cc:	4311      	orrs	r1, r2
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a2d2:	0852      	lsrs	r2, r2, #1
 800a2d4:	3a01      	subs	r2, #1
 800a2d6:	0552      	lsls	r2, r2, #21
 800a2d8:	4311      	orrs	r1, r2
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a2de:	0852      	lsrs	r2, r2, #1
 800a2e0:	3a01      	subs	r2, #1
 800a2e2:	0652      	lsls	r2, r2, #25
 800a2e4:	4311      	orrs	r1, r2
 800a2e6:	687a      	ldr	r2, [r7, #4]
 800a2e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a2ea:	06d2      	lsls	r2, r2, #27
 800a2ec:	430a      	orrs	r2, r1
 800a2ee:	4947      	ldr	r1, [pc, #284]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a2f4:	4b45      	ldr	r3, [pc, #276]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a44      	ldr	r2, [pc, #272]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a2fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2fe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a300:	4b42      	ldr	r3, [pc, #264]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	4a41      	ldr	r2, [pc, #260]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a30a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a30c:	f7fa ff3a 	bl	8005184 <HAL_GetTick>
 800a310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a312:	e008      	b.n	800a326 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a314:	f7fa ff36 	bl	8005184 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d901      	bls.n	800a326 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e06e      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a326:	4b39      	ldr	r3, [pc, #228]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f0      	beq.n	800a314 <HAL_RCC_OscConfig+0x530>
 800a332:	e066      	b.n	800a402 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a334:	4b35      	ldr	r3, [pc, #212]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a34      	ldr	r2, [pc, #208]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a33a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a33e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a340:	4b32      	ldr	r3, [pc, #200]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	4a31      	ldr	r2, [pc, #196]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a346:	f023 0303 	bic.w	r3, r3, #3
 800a34a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a34c:	4b2f      	ldr	r3, [pc, #188]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	4a2e      	ldr	r2, [pc, #184]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a352:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a35a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a35c:	f7fa ff12 	bl	8005184 <HAL_GetTick>
 800a360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a362:	e008      	b.n	800a376 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a364:	f7fa ff0e 	bl	8005184 <HAL_GetTick>
 800a368:	4602      	mov	r2, r0
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	1ad3      	subs	r3, r2, r3
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d901      	bls.n	800a376 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a372:	2303      	movs	r3, #3
 800a374:	e046      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a376:	4b25      	ldr	r3, [pc, #148]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1f0      	bne.n	800a364 <HAL_RCC_OscConfig+0x580>
 800a382:	e03e      	b.n	800a402 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	69db      	ldr	r3, [r3, #28]
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d101      	bne.n	800a390 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e039      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a390:	4b1e      	ldr	r3, [pc, #120]	; (800a40c <HAL_RCC_OscConfig+0x628>)
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	f003 0203 	and.w	r2, r3, #3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a1b      	ldr	r3, [r3, #32]
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d12c      	bne.n	800a3fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ae:	3b01      	subs	r3, #1
 800a3b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d123      	bne.n	800a3fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d11b      	bne.n	800a3fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d113      	bne.n	800a3fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3d6:	697b      	ldr	r3, [r7, #20]
 800a3d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e0:	085b      	lsrs	r3, r3, #1
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d109      	bne.n	800a3fe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3f4:	085b      	lsrs	r3, r3, #1
 800a3f6:	3b01      	subs	r3, #1
 800a3f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d001      	beq.n	800a402 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a3fe:	2301      	movs	r3, #1
 800a400:	e000      	b.n	800a404 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	3720      	adds	r7, #32
 800a408:	46bd      	mov	sp, r7
 800a40a:	bd80      	pop	{r7, pc}
 800a40c:	40021000 	.word	0x40021000
 800a410:	019f800c 	.word	0x019f800c

0800a414 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b086      	sub	sp, #24
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
 800a41c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a41e:	2300      	movs	r3, #0
 800a420:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a428:	2301      	movs	r3, #1
 800a42a:	e11e      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a42c:	4b91      	ldr	r3, [pc, #580]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f003 030f 	and.w	r3, r3, #15
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d910      	bls.n	800a45c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a43a:	4b8e      	ldr	r3, [pc, #568]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f023 020f 	bic.w	r2, r3, #15
 800a442:	498c      	ldr	r1, [pc, #560]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	4313      	orrs	r3, r2
 800a448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a44a:	4b8a      	ldr	r3, [pc, #552]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	429a      	cmp	r2, r3
 800a456:	d001      	beq.n	800a45c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e106      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b00      	cmp	r3, #0
 800a466:	d073      	beq.n	800a550 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685b      	ldr	r3, [r3, #4]
 800a46c:	2b03      	cmp	r3, #3
 800a46e:	d129      	bne.n	800a4c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a470:	4b81      	ldr	r3, [pc, #516]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e0f4      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a480:	f000 f99e 	bl	800a7c0 <RCC_GetSysClockFreqFromPLLSource>
 800a484:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	4a7c      	ldr	r2, [pc, #496]	; (800a67c <HAL_RCC_ClockConfig+0x268>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d93f      	bls.n	800a50e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a48e:	4b7a      	ldr	r3, [pc, #488]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d009      	beq.n	800a4ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d033      	beq.n	800a50e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d12f      	bne.n	800a50e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a4ae:	4b72      	ldr	r3, [pc, #456]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4b6:	4a70      	ldr	r2, [pc, #448]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a4b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a4be:	2380      	movs	r3, #128	; 0x80
 800a4c0:	617b      	str	r3, [r7, #20]
 800a4c2:	e024      	b.n	800a50e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d107      	bne.n	800a4dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4cc:	4b6a      	ldr	r3, [pc, #424]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d109      	bne.n	800a4ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	e0c6      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a4dc:	4b66      	ldr	r3, [pc, #408]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0be      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a4ec:	f000 f8ce 	bl	800a68c <HAL_RCC_GetSysClockFreq>
 800a4f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	4a61      	ldr	r2, [pc, #388]	; (800a67c <HAL_RCC_ClockConfig+0x268>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d909      	bls.n	800a50e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a4fa:	4b5f      	ldr	r3, [pc, #380]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a502:	4a5d      	ldr	r2, [pc, #372]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a508:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a50a:	2380      	movs	r3, #128	; 0x80
 800a50c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a50e:	4b5a      	ldr	r3, [pc, #360]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a510:	689b      	ldr	r3, [r3, #8]
 800a512:	f023 0203 	bic.w	r2, r3, #3
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	4957      	ldr	r1, [pc, #348]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a51c:	4313      	orrs	r3, r2
 800a51e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a520:	f7fa fe30 	bl	8005184 <HAL_GetTick>
 800a524:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a526:	e00a      	b.n	800a53e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a528:	f7fa fe2c 	bl	8005184 <HAL_GetTick>
 800a52c:	4602      	mov	r2, r0
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	1ad3      	subs	r3, r2, r3
 800a532:	f241 3288 	movw	r2, #5000	; 0x1388
 800a536:	4293      	cmp	r3, r2
 800a538:	d901      	bls.n	800a53e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a53a:	2303      	movs	r3, #3
 800a53c:	e095      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a53e:	4b4e      	ldr	r3, [pc, #312]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 020c 	and.w	r2, r3, #12
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d1eb      	bne.n	800a528 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f003 0302 	and.w	r3, r3, #2
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d023      	beq.n	800a5a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f003 0304 	and.w	r3, r3, #4
 800a564:	2b00      	cmp	r3, #0
 800a566:	d005      	beq.n	800a574 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a568:	4b43      	ldr	r3, [pc, #268]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a56a:	689b      	ldr	r3, [r3, #8]
 800a56c:	4a42      	ldr	r2, [pc, #264]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a56e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a572:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0308 	and.w	r3, r3, #8
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d007      	beq.n	800a590 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a580:	4b3d      	ldr	r3, [pc, #244]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a588:	4a3b      	ldr	r2, [pc, #236]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a58a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a58e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a590:	4b39      	ldr	r3, [pc, #228]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	4936      	ldr	r1, [pc, #216]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a59e:	4313      	orrs	r3, r2
 800a5a0:	608b      	str	r3, [r1, #8]
 800a5a2:	e008      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	2b80      	cmp	r3, #128	; 0x80
 800a5a8:	d105      	bne.n	800a5b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a5aa:	4b33      	ldr	r3, [pc, #204]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a5ac:	689b      	ldr	r3, [r3, #8]
 800a5ae:	4a32      	ldr	r2, [pc, #200]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a5b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a5b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5b6:	4b2f      	ldr	r3, [pc, #188]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 030f 	and.w	r3, r3, #15
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d21d      	bcs.n	800a600 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5c4:	4b2b      	ldr	r3, [pc, #172]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f023 020f 	bic.w	r2, r3, #15
 800a5cc:	4929      	ldr	r1, [pc, #164]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a5d4:	f7fa fdd6 	bl	8005184 <HAL_GetTick>
 800a5d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5da:	e00a      	b.n	800a5f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5dc:	f7fa fdd2 	bl	8005184 <HAL_GetTick>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e03b      	b.n	800a66a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5f2:	4b20      	ldr	r3, [pc, #128]	; (800a674 <HAL_RCC_ClockConfig+0x260>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 030f 	and.w	r3, r3, #15
 800a5fa:	683a      	ldr	r2, [r7, #0]
 800a5fc:	429a      	cmp	r2, r3
 800a5fe:	d1ed      	bne.n	800a5dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d008      	beq.n	800a61e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a60c:	4b1a      	ldr	r3, [pc, #104]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	4917      	ldr	r1, [pc, #92]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a61a:	4313      	orrs	r3, r2
 800a61c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0308 	and.w	r3, r3, #8
 800a626:	2b00      	cmp	r3, #0
 800a628:	d009      	beq.n	800a63e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a62a:	4b13      	ldr	r3, [pc, #76]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	691b      	ldr	r3, [r3, #16]
 800a636:	00db      	lsls	r3, r3, #3
 800a638:	490f      	ldr	r1, [pc, #60]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a63a:	4313      	orrs	r3, r2
 800a63c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a63e:	f000 f825 	bl	800a68c <HAL_RCC_GetSysClockFreq>
 800a642:	4602      	mov	r2, r0
 800a644:	4b0c      	ldr	r3, [pc, #48]	; (800a678 <HAL_RCC_ClockConfig+0x264>)
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	091b      	lsrs	r3, r3, #4
 800a64a:	f003 030f 	and.w	r3, r3, #15
 800a64e:	490c      	ldr	r1, [pc, #48]	; (800a680 <HAL_RCC_ClockConfig+0x26c>)
 800a650:	5ccb      	ldrb	r3, [r1, r3]
 800a652:	f003 031f 	and.w	r3, r3, #31
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	4a0a      	ldr	r2, [pc, #40]	; (800a684 <HAL_RCC_ClockConfig+0x270>)
 800a65c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a65e:	4b0a      	ldr	r3, [pc, #40]	; (800a688 <HAL_RCC_ClockConfig+0x274>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4618      	mov	r0, r3
 800a664:	f7fa fd42 	bl	80050ec <HAL_InitTick>
 800a668:	4603      	mov	r3, r0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}
 800a672:	bf00      	nop
 800a674:	40022000 	.word	0x40022000
 800a678:	40021000 	.word	0x40021000
 800a67c:	04c4b400 	.word	0x04c4b400
 800a680:	080111e4 	.word	0x080111e4
 800a684:	20000000 	.word	0x20000000
 800a688:	20000004 	.word	0x20000004

0800a68c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a692:	4b2c      	ldr	r3, [pc, #176]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 030c 	and.w	r3, r3, #12
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d102      	bne.n	800a6a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a69e:	4b2a      	ldr	r3, [pc, #168]	; (800a748 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	e047      	b.n	800a734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a6a4:	4b27      	ldr	r3, [pc, #156]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f003 030c 	and.w	r3, r3, #12
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d102      	bne.n	800a6b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a6b0:	4b26      	ldr	r3, [pc, #152]	; (800a74c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a6b2:	613b      	str	r3, [r7, #16]
 800a6b4:	e03e      	b.n	800a734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a6b6:	4b23      	ldr	r3, [pc, #140]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f003 030c 	and.w	r3, r3, #12
 800a6be:	2b0c      	cmp	r3, #12
 800a6c0:	d136      	bne.n	800a730 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a6c2:	4b20      	ldr	r3, [pc, #128]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6c4:	68db      	ldr	r3, [r3, #12]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a6cc:	4b1d      	ldr	r3, [pc, #116]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6ce:	68db      	ldr	r3, [r3, #12]
 800a6d0:	091b      	lsrs	r3, r3, #4
 800a6d2:	f003 030f 	and.w	r3, r3, #15
 800a6d6:	3301      	adds	r3, #1
 800a6d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b03      	cmp	r3, #3
 800a6de:	d10c      	bne.n	800a6fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6e0:	4a1a      	ldr	r2, [pc, #104]	; (800a74c <HAL_RCC_GetSysClockFreq+0xc0>)
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e8:	4a16      	ldr	r2, [pc, #88]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a6ea:	68d2      	ldr	r2, [r2, #12]
 800a6ec:	0a12      	lsrs	r2, r2, #8
 800a6ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
 800a6f6:	617b      	str	r3, [r7, #20]
      break;
 800a6f8:	e00c      	b.n	800a714 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a6fa:	4a13      	ldr	r2, [pc, #76]	; (800a748 <HAL_RCC_GetSysClockFreq+0xbc>)
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a702:	4a10      	ldr	r2, [pc, #64]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a704:	68d2      	ldr	r2, [r2, #12]
 800a706:	0a12      	lsrs	r2, r2, #8
 800a708:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a70c:	fb02 f303 	mul.w	r3, r2, r3
 800a710:	617b      	str	r3, [r7, #20]
      break;
 800a712:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a714:	4b0b      	ldr	r3, [pc, #44]	; (800a744 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	0e5b      	lsrs	r3, r3, #25
 800a71a:	f003 0303 	and.w	r3, r3, #3
 800a71e:	3301      	adds	r3, #1
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a724:	697a      	ldr	r2, [r7, #20]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	fbb2 f3f3 	udiv	r3, r2, r3
 800a72c:	613b      	str	r3, [r7, #16]
 800a72e:	e001      	b.n	800a734 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a730:	2300      	movs	r3, #0
 800a732:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a734:	693b      	ldr	r3, [r7, #16]
}
 800a736:	4618      	mov	r0, r3
 800a738:	371c      	adds	r7, #28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	40021000 	.word	0x40021000
 800a748:	00f42400 	.word	0x00f42400
 800a74c:	007a1200 	.word	0x007a1200

0800a750 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a750:	b480      	push	{r7}
 800a752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a754:	4b03      	ldr	r3, [pc, #12]	; (800a764 <HAL_RCC_GetHCLKFreq+0x14>)
 800a756:	681b      	ldr	r3, [r3, #0]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr
 800a762:	bf00      	nop
 800a764:	20000000 	.word	0x20000000

0800a768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a76c:	f7ff fff0 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a770:	4602      	mov	r2, r0
 800a772:	4b06      	ldr	r3, [pc, #24]	; (800a78c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	0a1b      	lsrs	r3, r3, #8
 800a778:	f003 0307 	and.w	r3, r3, #7
 800a77c:	4904      	ldr	r1, [pc, #16]	; (800a790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a77e:	5ccb      	ldrb	r3, [r1, r3]
 800a780:	f003 031f 	and.w	r3, r3, #31
 800a784:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a788:	4618      	mov	r0, r3
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	40021000 	.word	0x40021000
 800a790:	080111f4 	.word	0x080111f4

0800a794 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a798:	f7ff ffda 	bl	800a750 <HAL_RCC_GetHCLKFreq>
 800a79c:	4602      	mov	r2, r0
 800a79e:	4b06      	ldr	r3, [pc, #24]	; (800a7b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	0adb      	lsrs	r3, r3, #11
 800a7a4:	f003 0307 	and.w	r3, r3, #7
 800a7a8:	4904      	ldr	r1, [pc, #16]	; (800a7bc <HAL_RCC_GetPCLK2Freq+0x28>)
 800a7aa:	5ccb      	ldrb	r3, [r1, r3]
 800a7ac:	f003 031f 	and.w	r3, r3, #31
 800a7b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	bd80      	pop	{r7, pc}
 800a7b8:	40021000 	.word	0x40021000
 800a7bc:	080111f4 	.word	0x080111f4

0800a7c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b087      	sub	sp, #28
 800a7c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a7c6:	4b1e      	ldr	r3, [pc, #120]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7c8:	68db      	ldr	r3, [r3, #12]
 800a7ca:	f003 0303 	and.w	r3, r3, #3
 800a7ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a7d0:	4b1b      	ldr	r3, [pc, #108]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	091b      	lsrs	r3, r3, #4
 800a7d6:	f003 030f 	and.w	r3, r3, #15
 800a7da:	3301      	adds	r3, #1
 800a7dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2b03      	cmp	r3, #3
 800a7e2:	d10c      	bne.n	800a7fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7e4:	4a17      	ldr	r2, [pc, #92]	; (800a844 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ec:	4a14      	ldr	r2, [pc, #80]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a7ee:	68d2      	ldr	r2, [r2, #12]
 800a7f0:	0a12      	lsrs	r2, r2, #8
 800a7f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a7f6:	fb02 f303 	mul.w	r3, r2, r3
 800a7fa:	617b      	str	r3, [r7, #20]
    break;
 800a7fc:	e00c      	b.n	800a818 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a7fe:	4a12      	ldr	r2, [pc, #72]	; (800a848 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	fbb2 f3f3 	udiv	r3, r2, r3
 800a806:	4a0e      	ldr	r2, [pc, #56]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a808:	68d2      	ldr	r2, [r2, #12]
 800a80a:	0a12      	lsrs	r2, r2, #8
 800a80c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a810:	fb02 f303 	mul.w	r3, r2, r3
 800a814:	617b      	str	r3, [r7, #20]
    break;
 800a816:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a818:	4b09      	ldr	r3, [pc, #36]	; (800a840 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	0e5b      	lsrs	r3, r3, #25
 800a81e:	f003 0303 	and.w	r3, r3, #3
 800a822:	3301      	adds	r3, #1
 800a824:	005b      	lsls	r3, r3, #1
 800a826:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a830:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a832:	687b      	ldr	r3, [r7, #4]
}
 800a834:	4618      	mov	r0, r3
 800a836:	371c      	adds	r7, #28
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	40021000 	.word	0x40021000
 800a844:	007a1200 	.word	0x007a1200
 800a848:	00f42400 	.word	0x00f42400

0800a84c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a854:	2300      	movs	r3, #0
 800a856:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a858:	2300      	movs	r3, #0
 800a85a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a864:	2b00      	cmp	r3, #0
 800a866:	f000 8098 	beq.w	800a99a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a86a:	2300      	movs	r3, #0
 800a86c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a86e:	4b43      	ldr	r3, [pc, #268]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a876:	2b00      	cmp	r3, #0
 800a878:	d10d      	bne.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a87a:	4b40      	ldr	r3, [pc, #256]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a87e:	4a3f      	ldr	r2, [pc, #252]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a884:	6593      	str	r3, [r2, #88]	; 0x58
 800a886:	4b3d      	ldr	r3, [pc, #244]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a88a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a88e:	60bb      	str	r3, [r7, #8]
 800a890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a892:	2301      	movs	r3, #1
 800a894:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a896:	4b3a      	ldr	r3, [pc, #232]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a39      	ldr	r2, [pc, #228]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a89c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a8a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a8a2:	f7fa fc6f 	bl	8005184 <HAL_GetTick>
 800a8a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8a8:	e009      	b.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a8aa:	f7fa fc6b 	bl	8005184 <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d902      	bls.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	74fb      	strb	r3, [r7, #19]
        break;
 800a8bc:	e005      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a8be:	4b30      	ldr	r3, [pc, #192]	; (800a980 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0ef      	beq.n	800a8aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a8ca:	7cfb      	ldrb	r3, [r7, #19]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d159      	bne.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a8d0:	4b2a      	ldr	r3, [pc, #168]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d01e      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8e6:	697a      	ldr	r2, [r7, #20]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d019      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a8ec:	4b23      	ldr	r3, [pc, #140]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a8f8:	4b20      	ldr	r3, [pc, #128]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a8fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a908:	4b1c      	ldr	r3, [pc, #112]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a90a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a90e:	4a1b      	ldr	r2, [pc, #108]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a910:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a918:	4a18      	ldr	r2, [pc, #96]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f003 0301 	and.w	r3, r3, #1
 800a926:	2b00      	cmp	r3, #0
 800a928:	d016      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a92a:	f7fa fc2b 	bl	8005184 <HAL_GetTick>
 800a92e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a930:	e00b      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a932:	f7fa fc27 	bl	8005184 <HAL_GetTick>
 800a936:	4602      	mov	r2, r0
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	1ad3      	subs	r3, r2, r3
 800a93c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a940:	4293      	cmp	r3, r2
 800a942:	d902      	bls.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	74fb      	strb	r3, [r7, #19]
            break;
 800a948:	e006      	b.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a94a:	4b0c      	ldr	r3, [pc, #48]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a94c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b00      	cmp	r3, #0
 800a956:	d0ec      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a958:	7cfb      	ldrb	r3, [r7, #19]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d10b      	bne.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a95e:	4b07      	ldr	r3, [pc, #28]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a964:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a96c:	4903      	ldr	r1, [pc, #12]	; (800a97c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a96e:	4313      	orrs	r3, r2
 800a970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a974:	e008      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a976:	7cfb      	ldrb	r3, [r7, #19]
 800a978:	74bb      	strb	r3, [r7, #18]
 800a97a:	e005      	b.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a97c:	40021000 	.word	0x40021000
 800a980:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a984:	7cfb      	ldrb	r3, [r7, #19]
 800a986:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a988:	7c7b      	ldrb	r3, [r7, #17]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d105      	bne.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a98e:	4ba6      	ldr	r3, [pc, #664]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a992:	4aa5      	ldr	r2, [pc, #660]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a994:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a998:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00a      	beq.n	800a9bc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a9a6:	4ba0      	ldr	r3, [pc, #640]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ac:	f023 0203 	bic.w	r2, r3, #3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	499c      	ldr	r1, [pc, #624]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9b6:	4313      	orrs	r3, r2
 800a9b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f003 0302 	and.w	r3, r3, #2
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00a      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a9c8:	4b97      	ldr	r3, [pc, #604]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ce:	f023 020c 	bic.w	r2, r3, #12
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	4994      	ldr	r1, [pc, #592]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0304 	and.w	r3, r3, #4
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00a      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a9ea:	4b8f      	ldr	r3, [pc, #572]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68db      	ldr	r3, [r3, #12]
 800a9f8:	498b      	ldr	r1, [pc, #556]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f003 0308 	and.w	r3, r3, #8
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d00a      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aa0c:	4b86      	ldr	r3, [pc, #536]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	4983      	ldr	r1, [pc, #524]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 0320 	and.w	r3, r3, #32
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800aa2e:	4b7e      	ldr	r3, [pc, #504]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa34:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	695b      	ldr	r3, [r3, #20]
 800aa3c:	497a      	ldr	r1, [pc, #488]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa3e:	4313      	orrs	r3, r2
 800aa40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d00a      	beq.n	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aa50:	4b75      	ldr	r3, [pc, #468]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	4972      	ldr	r1, [pc, #456]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa60:	4313      	orrs	r3, r2
 800aa62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00a      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800aa72:	4b6d      	ldr	r3, [pc, #436]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	69db      	ldr	r3, [r3, #28]
 800aa80:	4969      	ldr	r1, [pc, #420]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa82:	4313      	orrs	r3, r2
 800aa84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d00a      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800aa94:	4b64      	ldr	r3, [pc, #400]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aa96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a1b      	ldr	r3, [r3, #32]
 800aaa2:	4961      	ldr	r1, [pc, #388]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00a      	beq.n	800aacc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aab6:	4b5c      	ldr	r3, [pc, #368]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aabc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac4:	4958      	ldr	r1, [pc, #352]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aac6:	4313      	orrs	r3, r2
 800aac8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d015      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aad8:	4b53      	ldr	r3, [pc, #332]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aade:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae6:	4950      	ldr	r1, [pc, #320]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaf6:	d105      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aaf8:	4b4b      	ldr	r3, [pc, #300]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aafa:	68db      	ldr	r3, [r3, #12]
 800aafc:	4a4a      	ldr	r2, [pc, #296]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aafe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d015      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ab10:	4b45      	ldr	r3, [pc, #276]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab1e:	4942      	ldr	r1, [pc, #264]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ab2e:	d105      	bne.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab30:	4b3d      	ldr	r3, [pc, #244]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	4a3c      	ldr	r2, [pc, #240]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d015      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ab48:	4b37      	ldr	r3, [pc, #220]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab56:	4934      	ldr	r1, [pc, #208]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ab66:	d105      	bne.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ab68:	4b2f      	ldr	r3, [pc, #188]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	4a2e      	ldr	r2, [pc, #184]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d015      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ab80:	4b29      	ldr	r3, [pc, #164]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab8e:	4926      	ldr	r1, [pc, #152]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ab90:	4313      	orrs	r3, r2
 800ab92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ab9e:	d105      	bne.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aba0:	4b21      	ldr	r3, [pc, #132]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	4a20      	ldr	r2, [pc, #128]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aba6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d015      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800abb8:	4b1b      	ldr	r3, [pc, #108]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abc6:	4918      	ldr	r1, [pc, #96]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abc8:	4313      	orrs	r3, r2
 800abca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800abd6:	d105      	bne.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800abd8:	4b13      	ldr	r3, [pc, #76]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abda:	68db      	ldr	r3, [r3, #12]
 800abdc:	4a12      	ldr	r2, [pc, #72]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800abe2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d015      	beq.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800abf0:	4b0d      	ldr	r3, [pc, #52]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800abf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abf6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abfe:	490a      	ldr	r1, [pc, #40]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac00:	4313      	orrs	r3, r2
 800ac02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac0e:	d105      	bne.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ac10:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	4a04      	ldr	r2, [pc, #16]	; (800ac28 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ac16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac1a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800ac1c:	7cbb      	ldrb	r3, [r7, #18]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3718      	adds	r7, #24
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}
 800ac26:	bf00      	nop
 800ac28:	40021000 	.word	0x40021000

0800ac2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d101      	bne.n	800ac3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	e049      	b.n	800acd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d106      	bne.n	800ac58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f7f9 ff8c 	bl	8004b70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2202      	movs	r2, #2
 800ac5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	3304      	adds	r3, #4
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4610      	mov	r0, r2
 800ac6c:	f000 fe1a 	bl	800b8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2201      	movs	r2, #1
 800ac74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2201      	movs	r2, #1
 800ac7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2201      	movs	r2, #1
 800ac84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2201      	movs	r2, #1
 800ac8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2201      	movs	r2, #1
 800acb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2201      	movs	r2, #1
 800acbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2201      	movs	r2, #1
 800accc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3708      	adds	r7, #8
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}
	...

0800acdc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800acdc:	b480      	push	{r7}
 800acde:	b085      	sub	sp, #20
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b01      	cmp	r3, #1
 800acee:	d001      	beq.n	800acf4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800acf0:	2301      	movs	r3, #1
 800acf2:	e042      	b.n	800ad7a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	4a21      	ldr	r2, [pc, #132]	; (800ad88 <HAL_TIM_Base_Start+0xac>)
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d018      	beq.n	800ad38 <HAL_TIM_Base_Start+0x5c>
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad0e:	d013      	beq.n	800ad38 <HAL_TIM_Base_Start+0x5c>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	4a1d      	ldr	r2, [pc, #116]	; (800ad8c <HAL_TIM_Base_Start+0xb0>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d00e      	beq.n	800ad38 <HAL_TIM_Base_Start+0x5c>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4a1c      	ldr	r2, [pc, #112]	; (800ad90 <HAL_TIM_Base_Start+0xb4>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d009      	beq.n	800ad38 <HAL_TIM_Base_Start+0x5c>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	4a1a      	ldr	r2, [pc, #104]	; (800ad94 <HAL_TIM_Base_Start+0xb8>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d004      	beq.n	800ad38 <HAL_TIM_Base_Start+0x5c>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	4a19      	ldr	r2, [pc, #100]	; (800ad98 <HAL_TIM_Base_Start+0xbc>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d115      	bne.n	800ad64 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	4b17      	ldr	r3, [pc, #92]	; (800ad9c <HAL_TIM_Base_Start+0xc0>)
 800ad40:	4013      	ands	r3, r2
 800ad42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	2b06      	cmp	r3, #6
 800ad48:	d015      	beq.n	800ad76 <HAL_TIM_Base_Start+0x9a>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad50:	d011      	beq.n	800ad76 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	681a      	ldr	r2, [r3, #0]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f042 0201 	orr.w	r2, r2, #1
 800ad60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad62:	e008      	b.n	800ad76 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	f042 0201 	orr.w	r2, r2, #1
 800ad72:	601a      	str	r2, [r3, #0]
 800ad74:	e000      	b.n	800ad78 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ad78:	2300      	movs	r3, #0
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	40012c00 	.word	0x40012c00
 800ad8c:	40000400 	.word	0x40000400
 800ad90:	40000800 	.word	0x40000800
 800ad94:	40013400 	.word	0x40013400
 800ad98:	40014000 	.word	0x40014000
 800ad9c:	00010007 	.word	0x00010007

0800ada0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ada0:	b480      	push	{r7}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d001      	beq.n	800adb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800adb4:	2301      	movs	r3, #1
 800adb6:	e04a      	b.n	800ae4e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2202      	movs	r2, #2
 800adbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68da      	ldr	r2, [r3, #12]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f042 0201 	orr.w	r2, r2, #1
 800adce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a21      	ldr	r2, [pc, #132]	; (800ae5c <HAL_TIM_Base_Start_IT+0xbc>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d018      	beq.n	800ae0c <HAL_TIM_Base_Start_IT+0x6c>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ade2:	d013      	beq.n	800ae0c <HAL_TIM_Base_Start_IT+0x6c>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a1d      	ldr	r2, [pc, #116]	; (800ae60 <HAL_TIM_Base_Start_IT+0xc0>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d00e      	beq.n	800ae0c <HAL_TIM_Base_Start_IT+0x6c>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a1c      	ldr	r2, [pc, #112]	; (800ae64 <HAL_TIM_Base_Start_IT+0xc4>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d009      	beq.n	800ae0c <HAL_TIM_Base_Start_IT+0x6c>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a1a      	ldr	r2, [pc, #104]	; (800ae68 <HAL_TIM_Base_Start_IT+0xc8>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d004      	beq.n	800ae0c <HAL_TIM_Base_Start_IT+0x6c>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a19      	ldr	r2, [pc, #100]	; (800ae6c <HAL_TIM_Base_Start_IT+0xcc>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d115      	bne.n	800ae38 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	689a      	ldr	r2, [r3, #8]
 800ae12:	4b17      	ldr	r3, [pc, #92]	; (800ae70 <HAL_TIM_Base_Start_IT+0xd0>)
 800ae14:	4013      	ands	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2b06      	cmp	r3, #6
 800ae1c:	d015      	beq.n	800ae4a <HAL_TIM_Base_Start_IT+0xaa>
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae24:	d011      	beq.n	800ae4a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	681a      	ldr	r2, [r3, #0]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	f042 0201 	orr.w	r2, r2, #1
 800ae34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae36:	e008      	b.n	800ae4a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f042 0201 	orr.w	r2, r2, #1
 800ae46:	601a      	str	r2, [r3, #0]
 800ae48:	e000      	b.n	800ae4c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ae4c:	2300      	movs	r3, #0
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3714      	adds	r7, #20
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	40012c00 	.word	0x40012c00
 800ae60:	40000400 	.word	0x40000400
 800ae64:	40000800 	.word	0x40000800
 800ae68:	40013400 	.word	0x40013400
 800ae6c:	40014000 	.word	0x40014000
 800ae70:	00010007 	.word	0x00010007

0800ae74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d101      	bne.n	800ae86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e049      	b.n	800af1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d106      	bne.n	800aea0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 f841 	bl	800af22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3304      	adds	r3, #4
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	4610      	mov	r0, r2
 800aeb4:	f000 fcf6 	bl	800b8a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2201      	movs	r2, #1
 800af04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2201      	movs	r2, #1
 800af0c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2201      	movs	r2, #1
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800af18:	2300      	movs	r3, #0
}
 800af1a:	4618      	mov	r0, r3
 800af1c:	3708      	adds	r7, #8
 800af1e:	46bd      	mov	sp, r7
 800af20:	bd80      	pop	{r7, pc}

0800af22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800af22:	b480      	push	{r7}
 800af24:	b083      	sub	sp, #12
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800af2a:	bf00      	nop
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
	...

0800af38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b084      	sub	sp, #16
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
 800af40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d109      	bne.n	800af5c <HAL_TIM_PWM_Start+0x24>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b01      	cmp	r3, #1
 800af52:	bf14      	ite	ne
 800af54:	2301      	movne	r3, #1
 800af56:	2300      	moveq	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	e03c      	b.n	800afd6 <HAL_TIM_PWM_Start+0x9e>
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	2b04      	cmp	r3, #4
 800af60:	d109      	bne.n	800af76 <HAL_TIM_PWM_Start+0x3e>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	bf14      	ite	ne
 800af6e:	2301      	movne	r3, #1
 800af70:	2300      	moveq	r3, #0
 800af72:	b2db      	uxtb	r3, r3
 800af74:	e02f      	b.n	800afd6 <HAL_TIM_PWM_Start+0x9e>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b08      	cmp	r3, #8
 800af7a:	d109      	bne.n	800af90 <HAL_TIM_PWM_Start+0x58>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af82:	b2db      	uxtb	r3, r3
 800af84:	2b01      	cmp	r3, #1
 800af86:	bf14      	ite	ne
 800af88:	2301      	movne	r3, #1
 800af8a:	2300      	moveq	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	e022      	b.n	800afd6 <HAL_TIM_PWM_Start+0x9e>
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	2b0c      	cmp	r3, #12
 800af94:	d109      	bne.n	800afaa <HAL_TIM_PWM_Start+0x72>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	e015      	b.n	800afd6 <HAL_TIM_PWM_Start+0x9e>
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b10      	cmp	r3, #16
 800afae:	d109      	bne.n	800afc4 <HAL_TIM_PWM_Start+0x8c>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	2b01      	cmp	r3, #1
 800afba:	bf14      	ite	ne
 800afbc:	2301      	movne	r3, #1
 800afbe:	2300      	moveq	r3, #0
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	e008      	b.n	800afd6 <HAL_TIM_PWM_Start+0x9e>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b01      	cmp	r3, #1
 800afce:	bf14      	ite	ne
 800afd0:	2301      	movne	r3, #1
 800afd2:	2300      	moveq	r3, #0
 800afd4:	b2db      	uxtb	r3, r3
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800afda:	2301      	movs	r3, #1
 800afdc:	e097      	b.n	800b10e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d104      	bne.n	800afee <HAL_TIM_PWM_Start+0xb6>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2202      	movs	r2, #2
 800afe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800afec:	e023      	b.n	800b036 <HAL_TIM_PWM_Start+0xfe>
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	2b04      	cmp	r3, #4
 800aff2:	d104      	bne.n	800affe <HAL_TIM_PWM_Start+0xc6>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2202      	movs	r2, #2
 800aff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800affc:	e01b      	b.n	800b036 <HAL_TIM_PWM_Start+0xfe>
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	2b08      	cmp	r3, #8
 800b002:	d104      	bne.n	800b00e <HAL_TIM_PWM_Start+0xd6>
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2202      	movs	r2, #2
 800b008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b00c:	e013      	b.n	800b036 <HAL_TIM_PWM_Start+0xfe>
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	2b0c      	cmp	r3, #12
 800b012:	d104      	bne.n	800b01e <HAL_TIM_PWM_Start+0xe6>
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2202      	movs	r2, #2
 800b018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b01c:	e00b      	b.n	800b036 <HAL_TIM_PWM_Start+0xfe>
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	2b10      	cmp	r3, #16
 800b022:	d104      	bne.n	800b02e <HAL_TIM_PWM_Start+0xf6>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2202      	movs	r2, #2
 800b028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b02c:	e003      	b.n	800b036 <HAL_TIM_PWM_Start+0xfe>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2202      	movs	r2, #2
 800b032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2201      	movs	r2, #1
 800b03c:	6839      	ldr	r1, [r7, #0]
 800b03e:	4618      	mov	r0, r3
 800b040:	f001 f852 	bl	800c0e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	4a33      	ldr	r2, [pc, #204]	; (800b118 <HAL_TIM_PWM_Start+0x1e0>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d013      	beq.n	800b076 <HAL_TIM_PWM_Start+0x13e>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	4a32      	ldr	r2, [pc, #200]	; (800b11c <HAL_TIM_PWM_Start+0x1e4>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d00e      	beq.n	800b076 <HAL_TIM_PWM_Start+0x13e>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a30      	ldr	r2, [pc, #192]	; (800b120 <HAL_TIM_PWM_Start+0x1e8>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d009      	beq.n	800b076 <HAL_TIM_PWM_Start+0x13e>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a2f      	ldr	r2, [pc, #188]	; (800b124 <HAL_TIM_PWM_Start+0x1ec>)
 800b068:	4293      	cmp	r3, r2
 800b06a:	d004      	beq.n	800b076 <HAL_TIM_PWM_Start+0x13e>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a2d      	ldr	r2, [pc, #180]	; (800b128 <HAL_TIM_PWM_Start+0x1f0>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d101      	bne.n	800b07a <HAL_TIM_PWM_Start+0x142>
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <HAL_TIM_PWM_Start+0x144>
 800b07a:	2300      	movs	r3, #0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d007      	beq.n	800b090 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b08e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a20      	ldr	r2, [pc, #128]	; (800b118 <HAL_TIM_PWM_Start+0x1e0>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d018      	beq.n	800b0cc <HAL_TIM_PWM_Start+0x194>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0a2:	d013      	beq.n	800b0cc <HAL_TIM_PWM_Start+0x194>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a20      	ldr	r2, [pc, #128]	; (800b12c <HAL_TIM_PWM_Start+0x1f4>)
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d00e      	beq.n	800b0cc <HAL_TIM_PWM_Start+0x194>
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	; (800b130 <HAL_TIM_PWM_Start+0x1f8>)
 800b0b4:	4293      	cmp	r3, r2
 800b0b6:	d009      	beq.n	800b0cc <HAL_TIM_PWM_Start+0x194>
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	4a17      	ldr	r2, [pc, #92]	; (800b11c <HAL_TIM_PWM_Start+0x1e4>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d004      	beq.n	800b0cc <HAL_TIM_PWM_Start+0x194>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a16      	ldr	r2, [pc, #88]	; (800b120 <HAL_TIM_PWM_Start+0x1e8>)
 800b0c8:	4293      	cmp	r3, r2
 800b0ca:	d115      	bne.n	800b0f8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689a      	ldr	r2, [r3, #8]
 800b0d2:	4b18      	ldr	r3, [pc, #96]	; (800b134 <HAL_TIM_PWM_Start+0x1fc>)
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	2b06      	cmp	r3, #6
 800b0dc:	d015      	beq.n	800b10a <HAL_TIM_PWM_Start+0x1d2>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b0e4:	d011      	beq.n	800b10a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f042 0201 	orr.w	r2, r2, #1
 800b0f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b0f6:	e008      	b.n	800b10a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f042 0201 	orr.w	r2, r2, #1
 800b106:	601a      	str	r2, [r3, #0]
 800b108:	e000      	b.n	800b10c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b10a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b10c:	2300      	movs	r3, #0
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3710      	adds	r7, #16
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40012c00 	.word	0x40012c00
 800b11c:	40013400 	.word	0x40013400
 800b120:	40014000 	.word	0x40014000
 800b124:	40014400 	.word	0x40014400
 800b128:	40014800 	.word	0x40014800
 800b12c:	40000400 	.word	0x40000400
 800b130:	40000800 	.word	0x40000800
 800b134:	00010007 	.word	0x00010007

0800b138 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b082      	sub	sp, #8
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b02      	cmp	r3, #2
 800b14c:	d122      	bne.n	800b194 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68db      	ldr	r3, [r3, #12]
 800b154:	f003 0302 	and.w	r3, r3, #2
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d11b      	bne.n	800b194 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f06f 0202 	mvn.w	r2, #2
 800b164:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2201      	movs	r2, #1
 800b16a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699b      	ldr	r3, [r3, #24]
 800b172:	f003 0303 	and.w	r3, r3, #3
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 fb74 	bl	800b868 <HAL_TIM_IC_CaptureCallback>
 800b180:	e005      	b.n	800b18e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fb66 	bl	800b854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fb77 	bl	800b87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f003 0304 	and.w	r3, r3, #4
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d122      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b04      	cmp	r3, #4
 800b1ae:	d11b      	bne.n	800b1e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f06f 0204 	mvn.w	r2, #4
 800b1b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2202      	movs	r2, #2
 800b1be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	699b      	ldr	r3, [r3, #24]
 800b1c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d003      	beq.n	800b1d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fb4a 	bl	800b868 <HAL_TIM_IC_CaptureCallback>
 800b1d4:	e005      	b.n	800b1e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fb3c 	bl	800b854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b1dc:	6878      	ldr	r0, [r7, #4]
 800b1de:	f000 fb4d 	bl	800b87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	691b      	ldr	r3, [r3, #16]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d122      	bne.n	800b23c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	f003 0308 	and.w	r3, r3, #8
 800b200:	2b08      	cmp	r3, #8
 800b202:	d11b      	bne.n	800b23c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f06f 0208 	mvn.w	r2, #8
 800b20c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2204      	movs	r2, #4
 800b212:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	69db      	ldr	r3, [r3, #28]
 800b21a:	f003 0303 	and.w	r3, r3, #3
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d003      	beq.n	800b22a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 fb20 	bl	800b868 <HAL_TIM_IC_CaptureCallback>
 800b228:	e005      	b.n	800b236 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 fb12 	bl	800b854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fb23 	bl	800b87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	f003 0310 	and.w	r3, r3, #16
 800b246:	2b10      	cmp	r3, #16
 800b248:	d122      	bne.n	800b290 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	f003 0310 	and.w	r3, r3, #16
 800b254:	2b10      	cmp	r3, #16
 800b256:	d11b      	bne.n	800b290 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f06f 0210 	mvn.w	r2, #16
 800b260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	2208      	movs	r2, #8
 800b266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	69db      	ldr	r3, [r3, #28]
 800b26e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b272:	2b00      	cmp	r3, #0
 800b274:	d003      	beq.n	800b27e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f000 faf6 	bl	800b868 <HAL_TIM_IC_CaptureCallback>
 800b27c:	e005      	b.n	800b28a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f000 fae8 	bl	800b854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f000 faf9 	bl	800b87c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	2200      	movs	r2, #0
 800b28e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f003 0301 	and.w	r3, r3, #1
 800b29a:	2b01      	cmp	r3, #1
 800b29c:	d10e      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68db      	ldr	r3, [r3, #12]
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d107      	bne.n	800b2bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f06f 0201 	mvn.w	r2, #1
 800b2b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f7f5 fe8a 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c6:	2b80      	cmp	r3, #128	; 0x80
 800b2c8:	d10e      	bne.n	800b2e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68db      	ldr	r3, [r3, #12]
 800b2d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d4:	2b80      	cmp	r3, #128	; 0x80
 800b2d6:	d107      	bne.n	800b2e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b2e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 f906 	bl	800c4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	691b      	ldr	r3, [r3, #16]
 800b2ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2f6:	d10e      	bne.n	800b316 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b302:	2b80      	cmp	r3, #128	; 0x80
 800b304:	d107      	bne.n	800b316 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b30e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f001 f8f9 	bl	800c508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	691b      	ldr	r3, [r3, #16]
 800b31c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b320:	2b40      	cmp	r3, #64	; 0x40
 800b322:	d10e      	bne.n	800b342 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b32e:	2b40      	cmp	r3, #64	; 0x40
 800b330:	d107      	bne.n	800b342 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b33a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f000 faa7 	bl	800b890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	f003 0320 	and.w	r3, r3, #32
 800b34c:	2b20      	cmp	r3, #32
 800b34e:	d10e      	bne.n	800b36e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f003 0320 	and.w	r3, r3, #32
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	d107      	bne.n	800b36e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f06f 0220 	mvn.w	r2, #32
 800b366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f001 f8b9 	bl	800c4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b378:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b37c:	d10f      	bne.n	800b39e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b388:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b38c:	d107      	bne.n	800b39e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f001 f8bf 	bl	800c51c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3ac:	d10f      	bne.n	800b3ce <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	68db      	ldr	r3, [r3, #12]
 800b3b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3bc:	d107      	bne.n	800b3ce <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b3c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f001 f8b1 	bl	800c530 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3dc:	d10f      	bne.n	800b3fe <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3ec:	d107      	bne.n	800b3fe <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b3f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f001 f8a3 	bl	800c544 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b408:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b40c:	d10f      	bne.n	800b42e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	68db      	ldr	r3, [r3, #12]
 800b414:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b418:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b41c:	d107      	bne.n	800b42e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f001 f895 	bl	800c558 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b42e:	bf00      	nop
 800b430:	3708      	adds	r7, #8
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
	...

0800b438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b086      	sub	sp, #24
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b444:	2300      	movs	r3, #0
 800b446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d101      	bne.n	800b456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b452:	2302      	movs	r3, #2
 800b454:	e0ff      	b.n	800b656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b14      	cmp	r3, #20
 800b462:	f200 80f0 	bhi.w	800b646 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b466:	a201      	add	r2, pc, #4	; (adr r2, 800b46c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b46c:	0800b4c1 	.word	0x0800b4c1
 800b470:	0800b647 	.word	0x0800b647
 800b474:	0800b647 	.word	0x0800b647
 800b478:	0800b647 	.word	0x0800b647
 800b47c:	0800b501 	.word	0x0800b501
 800b480:	0800b647 	.word	0x0800b647
 800b484:	0800b647 	.word	0x0800b647
 800b488:	0800b647 	.word	0x0800b647
 800b48c:	0800b543 	.word	0x0800b543
 800b490:	0800b647 	.word	0x0800b647
 800b494:	0800b647 	.word	0x0800b647
 800b498:	0800b647 	.word	0x0800b647
 800b49c:	0800b583 	.word	0x0800b583
 800b4a0:	0800b647 	.word	0x0800b647
 800b4a4:	0800b647 	.word	0x0800b647
 800b4a8:	0800b647 	.word	0x0800b647
 800b4ac:	0800b5c5 	.word	0x0800b5c5
 800b4b0:	0800b647 	.word	0x0800b647
 800b4b4:	0800b647 	.word	0x0800b647
 800b4b8:	0800b647 	.word	0x0800b647
 800b4bc:	0800b605 	.word	0x0800b605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	68b9      	ldr	r1, [r7, #8]
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f000 fa7c 	bl	800b9c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f042 0208 	orr.w	r2, r2, #8
 800b4da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	699a      	ldr	r2, [r3, #24]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f022 0204 	bic.w	r2, r2, #4
 800b4ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	6999      	ldr	r1, [r3, #24]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	691a      	ldr	r2, [r3, #16]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	430a      	orrs	r2, r1
 800b4fc:	619a      	str	r2, [r3, #24]
      break;
 800b4fe:	e0a5      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68b9      	ldr	r1, [r7, #8]
 800b506:	4618      	mov	r0, r3
 800b508:	f000 faec 	bl	800bae4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	699a      	ldr	r2, [r3, #24]
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b51a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	699a      	ldr	r2, [r3, #24]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b52a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	6999      	ldr	r1, [r3, #24]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	021a      	lsls	r2, r3, #8
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	430a      	orrs	r2, r1
 800b53e:	619a      	str	r2, [r3, #24]
      break;
 800b540:	e084      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fb55 	bl	800bbf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	69da      	ldr	r2, [r3, #28]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	f042 0208 	orr.w	r2, r2, #8
 800b55c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	69da      	ldr	r2, [r3, #28]
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f022 0204 	bic.w	r2, r2, #4
 800b56c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	69d9      	ldr	r1, [r3, #28]
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	691a      	ldr	r2, [r3, #16]
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	430a      	orrs	r2, r1
 800b57e:	61da      	str	r2, [r3, #28]
      break;
 800b580:	e064      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68b9      	ldr	r1, [r7, #8]
 800b588:	4618      	mov	r0, r3
 800b58a:	f000 fbbd 	bl	800bd08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	69da      	ldr	r2, [r3, #28]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b59c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	69da      	ldr	r2, [r3, #28]
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b5ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	69d9      	ldr	r1, [r3, #28]
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	691b      	ldr	r3, [r3, #16]
 800b5b8:	021a      	lsls	r2, r3, #8
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	430a      	orrs	r2, r1
 800b5c0:	61da      	str	r2, [r3, #28]
      break;
 800b5c2:	e043      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	68b9      	ldr	r1, [r7, #8]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f000 fc26 	bl	800be1c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f042 0208 	orr.w	r2, r2, #8
 800b5de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0204 	bic.w	r2, r2, #4
 800b5ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	691a      	ldr	r2, [r3, #16]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b602:	e023      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68b9      	ldr	r1, [r7, #8]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f000 fc6a 	bl	800bee4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b61e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b62e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	021a      	lsls	r2, r3, #8
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	430a      	orrs	r2, r1
 800b642:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b644:	e002      	b.n	800b64c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b646:	2301      	movs	r3, #1
 800b648:	75fb      	strb	r3, [r7, #23]
      break;
 800b64a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	2200      	movs	r2, #0
 800b650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b654:	7dfb      	ldrb	r3, [r7, #23]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop

0800b660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b66a:	2300      	movs	r3, #0
 800b66c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b674:	2b01      	cmp	r3, #1
 800b676:	d101      	bne.n	800b67c <HAL_TIM_ConfigClockSource+0x1c>
 800b678:	2302      	movs	r3, #2
 800b67a:	e0de      	b.n	800b83a <HAL_TIM_ConfigClockSource+0x1da>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	2201      	movs	r2, #1
 800b680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	689b      	ldr	r3, [r3, #8]
 800b692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b69a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b69e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b6a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	4a63      	ldr	r2, [pc, #396]	; (800b844 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	f000 80a9 	beq.w	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b6bc:	4a61      	ldr	r2, [pc, #388]	; (800b844 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	f200 80ae 	bhi.w	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b6c4:	4a60      	ldr	r2, [pc, #384]	; (800b848 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	f000 80a1 	beq.w	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b6cc:	4a5e      	ldr	r2, [pc, #376]	; (800b848 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	f200 80a6 	bhi.w	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b6d4:	4a5d      	ldr	r2, [pc, #372]	; (800b84c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	f000 8099 	beq.w	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b6dc:	4a5b      	ldr	r2, [pc, #364]	; (800b84c <HAL_TIM_ConfigClockSource+0x1ec>)
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	f200 809e 	bhi.w	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b6e4:	4a5a      	ldr	r2, [pc, #360]	; (800b850 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	f000 8091 	beq.w	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b6ec:	4a58      	ldr	r2, [pc, #352]	; (800b850 <HAL_TIM_ConfigClockSource+0x1f0>)
 800b6ee:	4293      	cmp	r3, r2
 800b6f0:	f200 8096 	bhi.w	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b6f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b6f8:	f000 8089 	beq.w	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b6fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b700:	f200 808e 	bhi.w	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b708:	d03e      	beq.n	800b788 <HAL_TIM_ConfigClockSource+0x128>
 800b70a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b70e:	f200 8087 	bhi.w	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b716:	f000 8086 	beq.w	800b826 <HAL_TIM_ConfigClockSource+0x1c6>
 800b71a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b71e:	d87f      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b720:	2b70      	cmp	r3, #112	; 0x70
 800b722:	d01a      	beq.n	800b75a <HAL_TIM_ConfigClockSource+0xfa>
 800b724:	2b70      	cmp	r3, #112	; 0x70
 800b726:	d87b      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b728:	2b60      	cmp	r3, #96	; 0x60
 800b72a:	d050      	beq.n	800b7ce <HAL_TIM_ConfigClockSource+0x16e>
 800b72c:	2b60      	cmp	r3, #96	; 0x60
 800b72e:	d877      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b730:	2b50      	cmp	r3, #80	; 0x50
 800b732:	d03c      	beq.n	800b7ae <HAL_TIM_ConfigClockSource+0x14e>
 800b734:	2b50      	cmp	r3, #80	; 0x50
 800b736:	d873      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b738:	2b40      	cmp	r3, #64	; 0x40
 800b73a:	d058      	beq.n	800b7ee <HAL_TIM_ConfigClockSource+0x18e>
 800b73c:	2b40      	cmp	r3, #64	; 0x40
 800b73e:	d86f      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b740:	2b30      	cmp	r3, #48	; 0x30
 800b742:	d064      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b744:	2b30      	cmp	r3, #48	; 0x30
 800b746:	d86b      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b748:	2b20      	cmp	r3, #32
 800b74a:	d060      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d867      	bhi.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
 800b750:	2b00      	cmp	r3, #0
 800b752:	d05c      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b754:	2b10      	cmp	r3, #16
 800b756:	d05a      	beq.n	800b80e <HAL_TIM_ConfigClockSource+0x1ae>
 800b758:	e062      	b.n	800b820 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6818      	ldr	r0, [r3, #0]
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	6899      	ldr	r1, [r3, #8]
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685a      	ldr	r2, [r3, #4]
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	f000 fc9d 	bl	800c0a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b77c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	68ba      	ldr	r2, [r7, #8]
 800b784:	609a      	str	r2, [r3, #8]
      break;
 800b786:	e04f      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	6818      	ldr	r0, [r3, #0]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	6899      	ldr	r1, [r3, #8]
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f000 fc86 	bl	800c0a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	689a      	ldr	r2, [r3, #8]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b7aa:	609a      	str	r2, [r3, #8]
      break;
 800b7ac:	e03c      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6818      	ldr	r0, [r3, #0]
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	6859      	ldr	r1, [r3, #4]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	f000 fbf8 	bl	800bfb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	2150      	movs	r1, #80	; 0x50
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f000 fc51 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b7cc:	e02c      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	6859      	ldr	r1, [r3, #4]
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	461a      	mov	r2, r3
 800b7dc:	f000 fc17 	bl	800c00e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	2160      	movs	r1, #96	; 0x60
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f000 fc41 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b7ec:	e01c      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6818      	ldr	r0, [r3, #0]
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	6859      	ldr	r1, [r3, #4]
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	f000 fbd8 	bl	800bfb0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	2140      	movs	r1, #64	; 0x40
 800b806:	4618      	mov	r0, r3
 800b808:	f000 fc31 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b80c:	e00c      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f000 fc28 	bl	800c06e <TIM_ITRx_SetConfig>
      break;
 800b81e:	e003      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	73fb      	strb	r3, [r7, #15]
      break;
 800b824:	e000      	b.n	800b828 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800b826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2200      	movs	r2, #0
 800b834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b838:	7bfb      	ldrb	r3, [r7, #15]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	00100070 	.word	0x00100070
 800b848:	00100040 	.word	0x00100040
 800b84c:	00100030 	.word	0x00100030
 800b850:	00100020 	.word	0x00100020

0800b854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b884:	bf00      	nop
 800b886:	370c      	adds	r7, #12
 800b888:	46bd      	mov	sp, r7
 800b88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88e:	4770      	bx	lr

0800b890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b890:	b480      	push	{r7}
 800b892:	b083      	sub	sp, #12
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b898:	bf00      	nop
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr

0800b8a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8a4:	b480      	push	{r7}
 800b8a6:	b085      	sub	sp, #20
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	4a3c      	ldr	r2, [pc, #240]	; (800b9a8 <TIM_Base_SetConfig+0x104>)
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d00f      	beq.n	800b8dc <TIM_Base_SetConfig+0x38>
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8c2:	d00b      	beq.n	800b8dc <TIM_Base_SetConfig+0x38>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	4a39      	ldr	r2, [pc, #228]	; (800b9ac <TIM_Base_SetConfig+0x108>)
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d007      	beq.n	800b8dc <TIM_Base_SetConfig+0x38>
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4a38      	ldr	r2, [pc, #224]	; (800b9b0 <TIM_Base_SetConfig+0x10c>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d003      	beq.n	800b8dc <TIM_Base_SetConfig+0x38>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	4a37      	ldr	r2, [pc, #220]	; (800b9b4 <TIM_Base_SetConfig+0x110>)
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d108      	bne.n	800b8ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685b      	ldr	r3, [r3, #4]
 800b8e8:	68fa      	ldr	r2, [r7, #12]
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	4a2d      	ldr	r2, [pc, #180]	; (800b9a8 <TIM_Base_SetConfig+0x104>)
 800b8f2:	4293      	cmp	r3, r2
 800b8f4:	d01b      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8fc:	d017      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	4a2a      	ldr	r2, [pc, #168]	; (800b9ac <TIM_Base_SetConfig+0x108>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d013      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	4a29      	ldr	r2, [pc, #164]	; (800b9b0 <TIM_Base_SetConfig+0x10c>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d00f      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	4a28      	ldr	r2, [pc, #160]	; (800b9b4 <TIM_Base_SetConfig+0x110>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d00b      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4a27      	ldr	r2, [pc, #156]	; (800b9b8 <TIM_Base_SetConfig+0x114>)
 800b91a:	4293      	cmp	r3, r2
 800b91c:	d007      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4a26      	ldr	r2, [pc, #152]	; (800b9bc <TIM_Base_SetConfig+0x118>)
 800b922:	4293      	cmp	r3, r2
 800b924:	d003      	beq.n	800b92e <TIM_Base_SetConfig+0x8a>
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	4a25      	ldr	r2, [pc, #148]	; (800b9c0 <TIM_Base_SetConfig+0x11c>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d108      	bne.n	800b940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	68fa      	ldr	r2, [r7, #12]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	68fa      	ldr	r2, [r7, #12]
 800b952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	689a      	ldr	r2, [r3, #8]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	681a      	ldr	r2, [r3, #0]
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	4a10      	ldr	r2, [pc, #64]	; (800b9a8 <TIM_Base_SetConfig+0x104>)
 800b968:	4293      	cmp	r3, r2
 800b96a:	d00f      	beq.n	800b98c <TIM_Base_SetConfig+0xe8>
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a11      	ldr	r2, [pc, #68]	; (800b9b4 <TIM_Base_SetConfig+0x110>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d00b      	beq.n	800b98c <TIM_Base_SetConfig+0xe8>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	4a10      	ldr	r2, [pc, #64]	; (800b9b8 <TIM_Base_SetConfig+0x114>)
 800b978:	4293      	cmp	r3, r2
 800b97a:	d007      	beq.n	800b98c <TIM_Base_SetConfig+0xe8>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a0f      	ldr	r2, [pc, #60]	; (800b9bc <TIM_Base_SetConfig+0x118>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d003      	beq.n	800b98c <TIM_Base_SetConfig+0xe8>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a0e      	ldr	r2, [pc, #56]	; (800b9c0 <TIM_Base_SetConfig+0x11c>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d103      	bne.n	800b994 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	691a      	ldr	r2, [r3, #16]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	615a      	str	r2, [r3, #20]
}
 800b99a:	bf00      	nop
 800b99c:	3714      	adds	r7, #20
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	40012c00 	.word	0x40012c00
 800b9ac:	40000400 	.word	0x40000400
 800b9b0:	40000800 	.word	0x40000800
 800b9b4:	40013400 	.word	0x40013400
 800b9b8:	40014000 	.word	0x40014000
 800b9bc:	40014400 	.word	0x40014400
 800b9c0:	40014800 	.word	0x40014800

0800b9c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b087      	sub	sp, #28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6a1b      	ldr	r3, [r3, #32]
 800b9d2:	f023 0201 	bic.w	r2, r3, #1
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a1b      	ldr	r3, [r3, #32]
 800b9de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f023 0303 	bic.w	r3, r3, #3
 800b9fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68fa      	ldr	r2, [r7, #12]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	f023 0302 	bic.w	r3, r3, #2
 800ba10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba12:	683b      	ldr	r3, [r7, #0]
 800ba14:	689b      	ldr	r3, [r3, #8]
 800ba16:	697a      	ldr	r2, [r7, #20]
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	4a2c      	ldr	r2, [pc, #176]	; (800bad0 <TIM_OC1_SetConfig+0x10c>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d00f      	beq.n	800ba44 <TIM_OC1_SetConfig+0x80>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4a2b      	ldr	r2, [pc, #172]	; (800bad4 <TIM_OC1_SetConfig+0x110>)
 800ba28:	4293      	cmp	r3, r2
 800ba2a:	d00b      	beq.n	800ba44 <TIM_OC1_SetConfig+0x80>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	4a2a      	ldr	r2, [pc, #168]	; (800bad8 <TIM_OC1_SetConfig+0x114>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d007      	beq.n	800ba44 <TIM_OC1_SetConfig+0x80>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	4a29      	ldr	r2, [pc, #164]	; (800badc <TIM_OC1_SetConfig+0x118>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d003      	beq.n	800ba44 <TIM_OC1_SetConfig+0x80>
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	4a28      	ldr	r2, [pc, #160]	; (800bae0 <TIM_OC1_SetConfig+0x11c>)
 800ba40:	4293      	cmp	r3, r2
 800ba42:	d10c      	bne.n	800ba5e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	f023 0308 	bic.w	r3, r3, #8
 800ba4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	697a      	ldr	r2, [r7, #20]
 800ba52:	4313      	orrs	r3, r2
 800ba54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f023 0304 	bic.w	r3, r3, #4
 800ba5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4a1b      	ldr	r2, [pc, #108]	; (800bad0 <TIM_OC1_SetConfig+0x10c>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d00f      	beq.n	800ba86 <TIM_OC1_SetConfig+0xc2>
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a1a      	ldr	r2, [pc, #104]	; (800bad4 <TIM_OC1_SetConfig+0x110>)
 800ba6a:	4293      	cmp	r3, r2
 800ba6c:	d00b      	beq.n	800ba86 <TIM_OC1_SetConfig+0xc2>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4a19      	ldr	r2, [pc, #100]	; (800bad8 <TIM_OC1_SetConfig+0x114>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d007      	beq.n	800ba86 <TIM_OC1_SetConfig+0xc2>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	4a18      	ldr	r2, [pc, #96]	; (800badc <TIM_OC1_SetConfig+0x118>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d003      	beq.n	800ba86 <TIM_OC1_SetConfig+0xc2>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	4a17      	ldr	r2, [pc, #92]	; (800bae0 <TIM_OC1_SetConfig+0x11c>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d111      	bne.n	800baaa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ba94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	695b      	ldr	r3, [r3, #20]
 800ba9a:	693a      	ldr	r2, [r7, #16]
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	699b      	ldr	r3, [r3, #24]
 800baa4:	693a      	ldr	r2, [r7, #16]
 800baa6:	4313      	orrs	r3, r2
 800baa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	68fa      	ldr	r2, [r7, #12]
 800bab4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	685a      	ldr	r2, [r3, #4]
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	697a      	ldr	r2, [r7, #20]
 800bac2:	621a      	str	r2, [r3, #32]
}
 800bac4:	bf00      	nop
 800bac6:	371c      	adds	r7, #28
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr
 800bad0:	40012c00 	.word	0x40012c00
 800bad4:	40013400 	.word	0x40013400
 800bad8:	40014000 	.word	0x40014000
 800badc:	40014400 	.word	0x40014400
 800bae0:	40014800 	.word	0x40014800

0800bae4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b087      	sub	sp, #28
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	f023 0210 	bic.w	r2, r3, #16
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	6a1b      	ldr	r3, [r3, #32]
 800bafe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	685b      	ldr	r3, [r3, #4]
 800bb04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bb12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	021b      	lsls	r3, r3, #8
 800bb26:	68fa      	ldr	r2, [r7, #12]
 800bb28:	4313      	orrs	r3, r2
 800bb2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	f023 0320 	bic.w	r3, r3, #32
 800bb32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	011b      	lsls	r3, r3, #4
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	4a28      	ldr	r2, [pc, #160]	; (800bbe4 <TIM_OC2_SetConfig+0x100>)
 800bb44:	4293      	cmp	r3, r2
 800bb46:	d003      	beq.n	800bb50 <TIM_OC2_SetConfig+0x6c>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	4a27      	ldr	r2, [pc, #156]	; (800bbe8 <TIM_OC2_SetConfig+0x104>)
 800bb4c:	4293      	cmp	r3, r2
 800bb4e:	d10d      	bne.n	800bb6c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb50:	697b      	ldr	r3, [r7, #20]
 800bb52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	011b      	lsls	r3, r3, #4
 800bb5e:	697a      	ldr	r2, [r7, #20]
 800bb60:	4313      	orrs	r3, r2
 800bb62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a1d      	ldr	r2, [pc, #116]	; (800bbe4 <TIM_OC2_SetConfig+0x100>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d00f      	beq.n	800bb94 <TIM_OC2_SetConfig+0xb0>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a1c      	ldr	r2, [pc, #112]	; (800bbe8 <TIM_OC2_SetConfig+0x104>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d00b      	beq.n	800bb94 <TIM_OC2_SetConfig+0xb0>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a1b      	ldr	r2, [pc, #108]	; (800bbec <TIM_OC2_SetConfig+0x108>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d007      	beq.n	800bb94 <TIM_OC2_SetConfig+0xb0>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	4a1a      	ldr	r2, [pc, #104]	; (800bbf0 <TIM_OC2_SetConfig+0x10c>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d003      	beq.n	800bb94 <TIM_OC2_SetConfig+0xb0>
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	4a19      	ldr	r2, [pc, #100]	; (800bbf4 <TIM_OC2_SetConfig+0x110>)
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d113      	bne.n	800bbbc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bba2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	695b      	ldr	r3, [r3, #20]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	693a      	ldr	r2, [r7, #16]
 800bbac:	4313      	orrs	r3, r2
 800bbae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	693a      	ldr	r2, [r7, #16]
 800bbb8:	4313      	orrs	r3, r2
 800bbba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	693a      	ldr	r2, [r7, #16]
 800bbc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	697a      	ldr	r2, [r7, #20]
 800bbd4:	621a      	str	r2, [r3, #32]
}
 800bbd6:	bf00      	nop
 800bbd8:	371c      	adds	r7, #28
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe0:	4770      	bx	lr
 800bbe2:	bf00      	nop
 800bbe4:	40012c00 	.word	0x40012c00
 800bbe8:	40013400 	.word	0x40013400
 800bbec:	40014000 	.word	0x40014000
 800bbf0:	40014400 	.word	0x40014400
 800bbf4:	40014800 	.word	0x40014800

0800bbf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6a1b      	ldr	r3, [r3, #32]
 800bc06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a1b      	ldr	r3, [r3, #32]
 800bc12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	69db      	ldr	r3, [r3, #28]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bc26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f023 0303 	bic.w	r3, r3, #3
 800bc32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	68fa      	ldr	r2, [r7, #12]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	689b      	ldr	r3, [r3, #8]
 800bc4a:	021b      	lsls	r3, r3, #8
 800bc4c:	697a      	ldr	r2, [r7, #20]
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	4a27      	ldr	r2, [pc, #156]	; (800bcf4 <TIM_OC3_SetConfig+0xfc>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d003      	beq.n	800bc62 <TIM_OC3_SetConfig+0x6a>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	4a26      	ldr	r2, [pc, #152]	; (800bcf8 <TIM_OC3_SetConfig+0x100>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d10d      	bne.n	800bc7e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc62:	697b      	ldr	r3, [r7, #20]
 800bc64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc68:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	68db      	ldr	r3, [r3, #12]
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	697a      	ldr	r2, [r7, #20]
 800bc72:	4313      	orrs	r3, r2
 800bc74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a1c      	ldr	r2, [pc, #112]	; (800bcf4 <TIM_OC3_SetConfig+0xfc>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d00f      	beq.n	800bca6 <TIM_OC3_SetConfig+0xae>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a1b      	ldr	r2, [pc, #108]	; (800bcf8 <TIM_OC3_SetConfig+0x100>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d00b      	beq.n	800bca6 <TIM_OC3_SetConfig+0xae>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a1a      	ldr	r2, [pc, #104]	; (800bcfc <TIM_OC3_SetConfig+0x104>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d007      	beq.n	800bca6 <TIM_OC3_SetConfig+0xae>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a19      	ldr	r2, [pc, #100]	; (800bd00 <TIM_OC3_SetConfig+0x108>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d003      	beq.n	800bca6 <TIM_OC3_SetConfig+0xae>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a18      	ldr	r2, [pc, #96]	; (800bd04 <TIM_OC3_SetConfig+0x10c>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d113      	bne.n	800bcce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bcae:	693b      	ldr	r3, [r7, #16]
 800bcb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bcb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	695b      	ldr	r3, [r3, #20]
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	699b      	ldr	r3, [r3, #24]
 800bcc6:	011b      	lsls	r3, r3, #4
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	4313      	orrs	r3, r2
 800bccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	693a      	ldr	r2, [r7, #16]
 800bcd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	68fa      	ldr	r2, [r7, #12]
 800bcd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	685a      	ldr	r2, [r3, #4]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	697a      	ldr	r2, [r7, #20]
 800bce6:	621a      	str	r2, [r3, #32]
}
 800bce8:	bf00      	nop
 800bcea:	371c      	adds	r7, #28
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr
 800bcf4:	40012c00 	.word	0x40012c00
 800bcf8:	40013400 	.word	0x40013400
 800bcfc:	40014000 	.word	0x40014000
 800bd00:	40014400 	.word	0x40014400
 800bd04:	40014800 	.word	0x40014800

0800bd08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b087      	sub	sp, #28
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
 800bd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	6a1b      	ldr	r3, [r3, #32]
 800bd16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6a1b      	ldr	r3, [r3, #32]
 800bd22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	69db      	ldr	r3, [r3, #28]
 800bd2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	021b      	lsls	r3, r3, #8
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	689b      	ldr	r3, [r3, #8]
 800bd5c:	031b      	lsls	r3, r3, #12
 800bd5e:	697a      	ldr	r2, [r7, #20]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	4a28      	ldr	r2, [pc, #160]	; (800be08 <TIM_OC4_SetConfig+0x100>)
 800bd68:	4293      	cmp	r3, r2
 800bd6a:	d003      	beq.n	800bd74 <TIM_OC4_SetConfig+0x6c>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	4a27      	ldr	r2, [pc, #156]	; (800be0c <TIM_OC4_SetConfig+0x104>)
 800bd70:	4293      	cmp	r3, r2
 800bd72:	d10d      	bne.n	800bd90 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bd7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	68db      	ldr	r3, [r3, #12]
 800bd80:	031b      	lsls	r3, r3, #12
 800bd82:	697a      	ldr	r2, [r7, #20]
 800bd84:	4313      	orrs	r3, r2
 800bd86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800bd88:	697b      	ldr	r3, [r7, #20]
 800bd8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a1d      	ldr	r2, [pc, #116]	; (800be08 <TIM_OC4_SetConfig+0x100>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d00f      	beq.n	800bdb8 <TIM_OC4_SetConfig+0xb0>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	4a1c      	ldr	r2, [pc, #112]	; (800be0c <TIM_OC4_SetConfig+0x104>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	d00b      	beq.n	800bdb8 <TIM_OC4_SetConfig+0xb0>
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	4a1b      	ldr	r2, [pc, #108]	; (800be10 <TIM_OC4_SetConfig+0x108>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d007      	beq.n	800bdb8 <TIM_OC4_SetConfig+0xb0>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	4a1a      	ldr	r2, [pc, #104]	; (800be14 <TIM_OC4_SetConfig+0x10c>)
 800bdac:	4293      	cmp	r3, r2
 800bdae:	d003      	beq.n	800bdb8 <TIM_OC4_SetConfig+0xb0>
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4a19      	ldr	r2, [pc, #100]	; (800be18 <TIM_OC4_SetConfig+0x110>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d113      	bne.n	800bde0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bdb8:	693b      	ldr	r3, [r7, #16]
 800bdba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdbe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bdc6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	695b      	ldr	r3, [r3, #20]
 800bdcc:	019b      	lsls	r3, r3, #6
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	699b      	ldr	r3, [r3, #24]
 800bdd8:	019b      	lsls	r3, r3, #6
 800bdda:	693a      	ldr	r2, [r7, #16]
 800bddc:	4313      	orrs	r3, r2
 800bdde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	68fa      	ldr	r2, [r7, #12]
 800bdea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	685a      	ldr	r2, [r3, #4]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	697a      	ldr	r2, [r7, #20]
 800bdf8:	621a      	str	r2, [r3, #32]
}
 800bdfa:	bf00      	nop
 800bdfc:	371c      	adds	r7, #28
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40012c00 	.word	0x40012c00
 800be0c:	40013400 	.word	0x40013400
 800be10:	40014000 	.word	0x40014000
 800be14:	40014400 	.word	0x40014400
 800be18:	40014800 	.word	0x40014800

0800be1c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800be1c:	b480      	push	{r7}
 800be1e:	b087      	sub	sp, #28
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
 800be24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6a1b      	ldr	r3, [r3, #32]
 800be36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	4313      	orrs	r3, r2
 800be58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800be60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	041b      	lsls	r3, r3, #16
 800be68:	693a      	ldr	r2, [r7, #16]
 800be6a:	4313      	orrs	r3, r2
 800be6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	4a17      	ldr	r2, [pc, #92]	; (800bed0 <TIM_OC5_SetConfig+0xb4>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d00f      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	4a16      	ldr	r2, [pc, #88]	; (800bed4 <TIM_OC5_SetConfig+0xb8>)
 800be7a:	4293      	cmp	r3, r2
 800be7c:	d00b      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a15      	ldr	r2, [pc, #84]	; (800bed8 <TIM_OC5_SetConfig+0xbc>)
 800be82:	4293      	cmp	r3, r2
 800be84:	d007      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	4a14      	ldr	r2, [pc, #80]	; (800bedc <TIM_OC5_SetConfig+0xc0>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d003      	beq.n	800be96 <TIM_OC5_SetConfig+0x7a>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	4a13      	ldr	r2, [pc, #76]	; (800bee0 <TIM_OC5_SetConfig+0xc4>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d109      	bne.n	800beaa <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	695b      	ldr	r3, [r3, #20]
 800bea2:	021b      	lsls	r3, r3, #8
 800bea4:	697a      	ldr	r2, [r7, #20]
 800bea6:	4313      	orrs	r3, r2
 800bea8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	697a      	ldr	r2, [r7, #20]
 800beae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800beb6:	683b      	ldr	r3, [r7, #0]
 800beb8:	685a      	ldr	r2, [r3, #4]
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	621a      	str	r2, [r3, #32]
}
 800bec4:	bf00      	nop
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	40012c00 	.word	0x40012c00
 800bed4:	40013400 	.word	0x40013400
 800bed8:	40014000 	.word	0x40014000
 800bedc:	40014400 	.word	0x40014400
 800bee0:	40014800 	.word	0x40014800

0800bee4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b087      	sub	sp, #28
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	6a1b      	ldr	r3, [r3, #32]
 800bef2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6a1b      	ldr	r3, [r3, #32]
 800befe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bf12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	021b      	lsls	r3, r3, #8
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	051b      	lsls	r3, r3, #20
 800bf32:	693a      	ldr	r2, [r7, #16]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4a18      	ldr	r2, [pc, #96]	; (800bf9c <TIM_OC6_SetConfig+0xb8>)
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d00f      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a17      	ldr	r2, [pc, #92]	; (800bfa0 <TIM_OC6_SetConfig+0xbc>)
 800bf44:	4293      	cmp	r3, r2
 800bf46:	d00b      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	4a16      	ldr	r2, [pc, #88]	; (800bfa4 <TIM_OC6_SetConfig+0xc0>)
 800bf4c:	4293      	cmp	r3, r2
 800bf4e:	d007      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	4a15      	ldr	r2, [pc, #84]	; (800bfa8 <TIM_OC6_SetConfig+0xc4>)
 800bf54:	4293      	cmp	r3, r2
 800bf56:	d003      	beq.n	800bf60 <TIM_OC6_SetConfig+0x7c>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a14      	ldr	r2, [pc, #80]	; (800bfac <TIM_OC6_SetConfig+0xc8>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d109      	bne.n	800bf74 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bf66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	695b      	ldr	r3, [r3, #20]
 800bf6c:	029b      	lsls	r3, r3, #10
 800bf6e:	697a      	ldr	r2, [r7, #20]
 800bf70:	4313      	orrs	r3, r2
 800bf72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	697a      	ldr	r2, [r7, #20]
 800bf78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	68fa      	ldr	r2, [r7, #12]
 800bf7e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685a      	ldr	r2, [r3, #4]
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	693a      	ldr	r2, [r7, #16]
 800bf8c:	621a      	str	r2, [r3, #32]
}
 800bf8e:	bf00      	nop
 800bf90:	371c      	adds	r7, #28
 800bf92:	46bd      	mov	sp, r7
 800bf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf98:	4770      	bx	lr
 800bf9a:	bf00      	nop
 800bf9c:	40012c00 	.word	0x40012c00
 800bfa0:	40013400 	.word	0x40013400
 800bfa4:	40014000 	.word	0x40014000
 800bfa8:	40014400 	.word	0x40014400
 800bfac:	40014800 	.word	0x40014800

0800bfb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b087      	sub	sp, #28
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	6a1b      	ldr	r3, [r3, #32]
 800bfc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a1b      	ldr	r3, [r3, #32]
 800bfc6:	f023 0201 	bic.w	r2, r3, #1
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	f023 030a 	bic.w	r3, r3, #10
 800bfec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfee:	697a      	ldr	r2, [r7, #20]
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	4313      	orrs	r3, r2
 800bff4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	693a      	ldr	r2, [r7, #16]
 800bffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	697a      	ldr	r2, [r7, #20]
 800c000:	621a      	str	r2, [r3, #32]
}
 800c002:	bf00      	nop
 800c004:	371c      	adds	r7, #28
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c00e:	b480      	push	{r7}
 800c010:	b087      	sub	sp, #28
 800c012:	af00      	add	r7, sp, #0
 800c014:	60f8      	str	r0, [r7, #12]
 800c016:	60b9      	str	r1, [r7, #8]
 800c018:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	6a1b      	ldr	r3, [r3, #32]
 800c01e:	f023 0210 	bic.w	r2, r3, #16
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	699b      	ldr	r3, [r3, #24]
 800c02a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	6a1b      	ldr	r3, [r3, #32]
 800c030:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	031b      	lsls	r3, r3, #12
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	4313      	orrs	r3, r2
 800c042:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c04a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c04c:	68bb      	ldr	r3, [r7, #8]
 800c04e:	011b      	lsls	r3, r3, #4
 800c050:	693a      	ldr	r2, [r7, #16]
 800c052:	4313      	orrs	r3, r2
 800c054:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	697a      	ldr	r2, [r7, #20]
 800c05a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	693a      	ldr	r2, [r7, #16]
 800c060:	621a      	str	r2, [r3, #32]
}
 800c062:	bf00      	nop
 800c064:	371c      	adds	r7, #28
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c06e:	b480      	push	{r7}
 800c070:	b085      	sub	sp, #20
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	689b      	ldr	r3, [r3, #8]
 800c07c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	4313      	orrs	r3, r2
 800c090:	f043 0307 	orr.w	r3, r3, #7
 800c094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	68fa      	ldr	r2, [r7, #12]
 800c09a:	609a      	str	r2, [r3, #8]
}
 800c09c:	bf00      	nop
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b087      	sub	sp, #28
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
 800c0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0bc:	697b      	ldr	r3, [r7, #20]
 800c0be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	021a      	lsls	r2, r3, #8
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	431a      	orrs	r2, r3
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	697a      	ldr	r2, [r7, #20]
 800c0da:	609a      	str	r2, [r3, #8]
}
 800c0dc:	bf00      	nop
 800c0de:	371c      	adds	r7, #28
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b087      	sub	sp, #28
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	60f8      	str	r0, [r7, #12]
 800c0f0:	60b9      	str	r1, [r7, #8]
 800c0f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	f003 031f 	and.w	r3, r3, #31
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6a1a      	ldr	r2, [r3, #32]
 800c106:	697b      	ldr	r3, [r7, #20]
 800c108:	43db      	mvns	r3, r3
 800c10a:	401a      	ands	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6a1a      	ldr	r2, [r3, #32]
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	f003 031f 	and.w	r3, r3, #31
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	fa01 f303 	lsl.w	r3, r1, r3
 800c120:	431a      	orrs	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	621a      	str	r2, [r3, #32]
}
 800c126:	bf00      	nop
 800c128:	371c      	adds	r7, #28
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
	...

0800c134 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d109      	bne.n	800c158 <HAL_TIMEx_PWMN_Start+0x24>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c14a:	b2db      	uxtb	r3, r3
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	bf14      	ite	ne
 800c150:	2301      	movne	r3, #1
 800c152:	2300      	moveq	r3, #0
 800c154:	b2db      	uxtb	r3, r3
 800c156:	e022      	b.n	800c19e <HAL_TIMEx_PWMN_Start+0x6a>
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d109      	bne.n	800c172 <HAL_TIMEx_PWMN_Start+0x3e>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c164:	b2db      	uxtb	r3, r3
 800c166:	2b01      	cmp	r3, #1
 800c168:	bf14      	ite	ne
 800c16a:	2301      	movne	r3, #1
 800c16c:	2300      	moveq	r3, #0
 800c16e:	b2db      	uxtb	r3, r3
 800c170:	e015      	b.n	800c19e <HAL_TIMEx_PWMN_Start+0x6a>
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	2b08      	cmp	r3, #8
 800c176:	d109      	bne.n	800c18c <HAL_TIMEx_PWMN_Start+0x58>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b01      	cmp	r3, #1
 800c182:	bf14      	ite	ne
 800c184:	2301      	movne	r3, #1
 800c186:	2300      	moveq	r3, #0
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	e008      	b.n	800c19e <HAL_TIMEx_PWMN_Start+0x6a>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c192:	b2db      	uxtb	r3, r3
 800c194:	2b01      	cmp	r3, #1
 800c196:	bf14      	ite	ne
 800c198:	2301      	movne	r3, #1
 800c19a:	2300      	moveq	r3, #0
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d001      	beq.n	800c1a6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e069      	b.n	800c27a <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d104      	bne.n	800c1b6 <HAL_TIMEx_PWMN_Start+0x82>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2202      	movs	r2, #2
 800c1b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1b4:	e013      	b.n	800c1de <HAL_TIMEx_PWMN_Start+0xaa>
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d104      	bne.n	800c1c6 <HAL_TIMEx_PWMN_Start+0x92>
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2202      	movs	r2, #2
 800c1c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c1c4:	e00b      	b.n	800c1de <HAL_TIMEx_PWMN_Start+0xaa>
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	2b08      	cmp	r3, #8
 800c1ca:	d104      	bne.n	800c1d6 <HAL_TIMEx_PWMN_Start+0xa2>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2202      	movs	r2, #2
 800c1d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c1d4:	e003      	b.n	800c1de <HAL_TIMEx_PWMN_Start+0xaa>
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2202      	movs	r2, #2
 800c1da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2204      	movs	r2, #4
 800c1e4:	6839      	ldr	r1, [r7, #0]
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	f000 f9c0 	bl	800c56c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c1fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	4a20      	ldr	r2, [pc, #128]	; (800c284 <HAL_TIMEx_PWMN_Start+0x150>)
 800c202:	4293      	cmp	r3, r2
 800c204:	d018      	beq.n	800c238 <HAL_TIMEx_PWMN_Start+0x104>
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c20e:	d013      	beq.n	800c238 <HAL_TIMEx_PWMN_Start+0x104>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	4a1c      	ldr	r2, [pc, #112]	; (800c288 <HAL_TIMEx_PWMN_Start+0x154>)
 800c216:	4293      	cmp	r3, r2
 800c218:	d00e      	beq.n	800c238 <HAL_TIMEx_PWMN_Start+0x104>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a1b      	ldr	r2, [pc, #108]	; (800c28c <HAL_TIMEx_PWMN_Start+0x158>)
 800c220:	4293      	cmp	r3, r2
 800c222:	d009      	beq.n	800c238 <HAL_TIMEx_PWMN_Start+0x104>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a19      	ldr	r2, [pc, #100]	; (800c290 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c22a:	4293      	cmp	r3, r2
 800c22c:	d004      	beq.n	800c238 <HAL_TIMEx_PWMN_Start+0x104>
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	4a18      	ldr	r2, [pc, #96]	; (800c294 <HAL_TIMEx_PWMN_Start+0x160>)
 800c234:	4293      	cmp	r3, r2
 800c236:	d115      	bne.n	800c264 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689a      	ldr	r2, [r3, #8]
 800c23e:	4b16      	ldr	r3, [pc, #88]	; (800c298 <HAL_TIMEx_PWMN_Start+0x164>)
 800c240:	4013      	ands	r3, r2
 800c242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	2b06      	cmp	r3, #6
 800c248:	d015      	beq.n	800c276 <HAL_TIMEx_PWMN_Start+0x142>
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c250:	d011      	beq.n	800c276 <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	681a      	ldr	r2, [r3, #0]
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f042 0201 	orr.w	r2, r2, #1
 800c260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c262:	e008      	b.n	800c276 <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	681a      	ldr	r2, [r3, #0]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f042 0201 	orr.w	r2, r2, #1
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	e000      	b.n	800c278 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
 800c282:	bf00      	nop
 800c284:	40012c00 	.word	0x40012c00
 800c288:	40000400 	.word	0x40000400
 800c28c:	40000800 	.word	0x40000800
 800c290:	40013400 	.word	0x40013400
 800c294:	40014000 	.word	0x40014000
 800c298:	00010007 	.word	0x00010007

0800c29c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d101      	bne.n	800c2b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2b0:	2302      	movs	r3, #2
 800c2b2:	e065      	b.n	800c380 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2202      	movs	r2, #2
 800c2c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a2c      	ldr	r2, [pc, #176]	; (800c38c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d004      	beq.n	800c2e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a2b      	ldr	r2, [pc, #172]	; (800c390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d108      	bne.n	800c2fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c2ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	685b      	ldr	r3, [r3, #4]
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c300:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c304:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	68fa      	ldr	r2, [r7, #12]
 800c30c:	4313      	orrs	r3, r2
 800c30e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	4a1b      	ldr	r2, [pc, #108]	; (800c38c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d018      	beq.n	800c354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c32a:	d013      	beq.n	800c354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4a18      	ldr	r2, [pc, #96]	; (800c394 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c332:	4293      	cmp	r3, r2
 800c334:	d00e      	beq.n	800c354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	4a17      	ldr	r2, [pc, #92]	; (800c398 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c33c:	4293      	cmp	r3, r2
 800c33e:	d009      	beq.n	800c354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a12      	ldr	r2, [pc, #72]	; (800c390 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d004      	beq.n	800c354 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	4a13      	ldr	r2, [pc, #76]	; (800c39c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c350:	4293      	cmp	r3, r2
 800c352:	d10c      	bne.n	800c36e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c35a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c35c:	683b      	ldr	r3, [r7, #0]
 800c35e:	689b      	ldr	r3, [r3, #8]
 800c360:	68ba      	ldr	r2, [r7, #8]
 800c362:	4313      	orrs	r3, r2
 800c364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2201      	movs	r2, #1
 800c372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2200      	movs	r2, #0
 800c37a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c37e:	2300      	movs	r3, #0
}
 800c380:	4618      	mov	r0, r3
 800c382:	3714      	adds	r7, #20
 800c384:	46bd      	mov	sp, r7
 800c386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c38a:	4770      	bx	lr
 800c38c:	40012c00 	.word	0x40012c00
 800c390:	40013400 	.word	0x40013400
 800c394:	40000400 	.word	0x40000400
 800c398:	40000800 	.word	0x40000800
 800c39c:	40014000 	.word	0x40014000

0800c3a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c3b4:	2b01      	cmp	r3, #1
 800c3b6:	d101      	bne.n	800c3bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	e087      	b.n	800c4cc <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c3ca:	683b      	ldr	r3, [r7, #0]
 800c3cc:	68db      	ldr	r3, [r3, #12]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	689b      	ldr	r3, [r3, #8]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	685b      	ldr	r3, [r3, #4]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c3f4:	683b      	ldr	r3, [r7, #0]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	4313      	orrs	r3, r2
 800c3fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	691b      	ldr	r3, [r3, #16]
 800c406:	4313      	orrs	r3, r2
 800c408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	4313      	orrs	r3, r2
 800c416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c422:	4313      	orrs	r3, r2
 800c424:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	4313      	orrs	r3, r2
 800c434:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	4a27      	ldr	r2, [pc, #156]	; (800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c43c:	4293      	cmp	r3, r2
 800c43e:	d004      	beq.n	800c44a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a25      	ldr	r2, [pc, #148]	; (800c4dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d106      	bne.n	800c458 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	4313      	orrs	r3, r2
 800c456:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a1e      	ldr	r2, [pc, #120]	; (800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d004      	beq.n	800c46c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	4a1d      	ldr	r2, [pc, #116]	; (800c4dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c468:	4293      	cmp	r3, r2
 800c46a:	d126      	bne.n	800c4ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c476:	051b      	lsls	r3, r3, #20
 800c478:	4313      	orrs	r3, r2
 800c47a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	6a1b      	ldr	r3, [r3, #32]
 800c486:	4313      	orrs	r3, r2
 800c488:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c494:	4313      	orrs	r3, r2
 800c496:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a0e      	ldr	r2, [pc, #56]	; (800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d004      	beq.n	800c4ac <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a0d      	ldr	r2, [pc, #52]	; (800c4dc <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d106      	bne.n	800c4ba <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	40012c00 	.word	0x40012c00
 800c4dc:	40013400 	.word	0x40013400

0800c4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c524:	bf00      	nop
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr

0800c530 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c538:	bf00      	nop
 800c53a:	370c      	adds	r7, #12
 800c53c:	46bd      	mov	sp, r7
 800c53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c542:	4770      	bx	lr

0800c544 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c544:	b480      	push	{r7}
 800c546:	b083      	sub	sp, #12
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c54c:	bf00      	nop
 800c54e:	370c      	adds	r7, #12
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr

0800c558 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c558:	b480      	push	{r7}
 800c55a:	b083      	sub	sp, #12
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr

0800c56c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b087      	sub	sp, #28
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	f003 031f 	and.w	r3, r3, #31
 800c57e:	2204      	movs	r2, #4
 800c580:	fa02 f303 	lsl.w	r3, r2, r3
 800c584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6a1a      	ldr	r2, [r3, #32]
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	43db      	mvns	r3, r3
 800c58e:	401a      	ands	r2, r3
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6a1a      	ldr	r2, [r3, #32]
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	f003 031f 	and.w	r3, r3, #31
 800c59e:	6879      	ldr	r1, [r7, #4]
 800c5a0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5a4:	431a      	orrs	r2, r3
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	621a      	str	r2, [r3, #32]
}
 800c5aa:	bf00      	nop
 800c5ac:	371c      	adds	r7, #28
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b4:	4770      	bx	lr

0800c5b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b082      	sub	sp, #8
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	e042      	b.n	800c64e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d106      	bne.n	800c5e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7f8 fbae 	bl	8004d3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2224      	movs	r2, #36	; 0x24
 800c5e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f022 0201 	bic.w	r2, r2, #1
 800c5f6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f000 f995 	bl	800c928 <UART_SetConfig>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b01      	cmp	r3, #1
 800c602:	d101      	bne.n	800c608 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c604:	2301      	movs	r3, #1
 800c606:	e022      	b.n	800c64e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d002      	beq.n	800c616 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 fc55 	bl	800cec0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	685a      	ldr	r2, [r3, #4]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c624:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	689a      	ldr	r2, [r3, #8]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c634:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f042 0201 	orr.w	r2, r2, #1
 800c644:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 fcdc 	bl	800d004 <UART_CheckIdleState>
 800c64c:	4603      	mov	r3, r0
}
 800c64e:	4618      	mov	r0, r3
 800c650:	3708      	adds	r7, #8
 800c652:	46bd      	mov	sp, r7
 800c654:	bd80      	pop	{r7, pc}

0800c656 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c656:	b580      	push	{r7, lr}
 800c658:	b08a      	sub	sp, #40	; 0x28
 800c65a:	af02      	add	r7, sp, #8
 800c65c:	60f8      	str	r0, [r7, #12]
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	603b      	str	r3, [r7, #0]
 800c662:	4613      	mov	r3, r2
 800c664:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c66c:	2b20      	cmp	r3, #32
 800c66e:	f040 8083 	bne.w	800c778 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d002      	beq.n	800c67e <HAL_UART_Transmit+0x28>
 800c678:	88fb      	ldrh	r3, [r7, #6]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d101      	bne.n	800c682 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	e07b      	b.n	800c77a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d101      	bne.n	800c690 <HAL_UART_Transmit+0x3a>
 800c68c:	2302      	movs	r3, #2
 800c68e:	e074      	b.n	800c77a <HAL_UART_Transmit+0x124>
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2221      	movs	r2, #33	; 0x21
 800c6a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c6a8:	f7f8 fd6c 	bl	8005184 <HAL_GetTick>
 800c6ac:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	88fa      	ldrh	r2, [r7, #6]
 800c6b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	88fa      	ldrh	r2, [r7, #6]
 800c6ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	689b      	ldr	r3, [r3, #8]
 800c6c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6c6:	d108      	bne.n	800c6da <HAL_UART_Transmit+0x84>
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d104      	bne.n	800c6da <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	61bb      	str	r3, [r7, #24]
 800c6d8:	e003      	b.n	800c6e2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c6de:	2300      	movs	r3, #0
 800c6e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800c6ea:	e02c      	b.n	800c746 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c6ec:	683b      	ldr	r3, [r7, #0]
 800c6ee:	9300      	str	r3, [sp, #0]
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	2180      	movs	r1, #128	; 0x80
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f000 fccf 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d001      	beq.n	800c706 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800c702:	2303      	movs	r3, #3
 800c704:	e039      	b.n	800c77a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800c706:	69fb      	ldr	r3, [r7, #28]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10b      	bne.n	800c724 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c70c:	69bb      	ldr	r3, [r7, #24]
 800c70e:	881b      	ldrh	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c71a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	3302      	adds	r3, #2
 800c720:	61bb      	str	r3, [r7, #24]
 800c722:	e007      	b.n	800c734 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c724:	69fb      	ldr	r3, [r7, #28]
 800c726:	781a      	ldrb	r2, [r3, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c72e:	69fb      	ldr	r3, [r7, #28]
 800c730:	3301      	adds	r3, #1
 800c732:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c73a:	b29b      	uxth	r3, r3
 800c73c:	3b01      	subs	r3, #1
 800c73e:	b29a      	uxth	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c74c:	b29b      	uxth	r3, r3
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d1cc      	bne.n	800c6ec <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	697b      	ldr	r3, [r7, #20]
 800c758:	2200      	movs	r2, #0
 800c75a:	2140      	movs	r1, #64	; 0x40
 800c75c:	68f8      	ldr	r0, [r7, #12]
 800c75e:	f000 fc9c 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800c762:	4603      	mov	r3, r0
 800c764:	2b00      	cmp	r3, #0
 800c766:	d001      	beq.n	800c76c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800c768:	2303      	movs	r3, #3
 800c76a:	e006      	b.n	800c77a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2220      	movs	r2, #32
 800c770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c774:	2300      	movs	r3, #0
 800c776:	e000      	b.n	800c77a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800c778:	2302      	movs	r3, #2
  }
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3720      	adds	r7, #32
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b08a      	sub	sp, #40	; 0x28
 800c786:	af02      	add	r7, sp, #8
 800c788:	60f8      	str	r0, [r7, #12]
 800c78a:	60b9      	str	r1, [r7, #8]
 800c78c:	603b      	str	r3, [r7, #0]
 800c78e:	4613      	mov	r3, r2
 800c790:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c798:	2b20      	cmp	r3, #32
 800c79a:	f040 80c0 	bne.w	800c91e <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c79e:	68bb      	ldr	r3, [r7, #8]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d002      	beq.n	800c7aa <HAL_UART_Receive+0x28>
 800c7a4:	88fb      	ldrh	r3, [r7, #6]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800c7aa:	2301      	movs	r3, #1
 800c7ac:	e0b8      	b.n	800c920 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d101      	bne.n	800c7bc <HAL_UART_Receive+0x3a>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	e0b1      	b.n	800c920 <HAL_UART_Receive+0x19e>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	2222      	movs	r2, #34	; 0x22
 800c7d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c7da:	f7f8 fcd3 	bl	8005184 <HAL_GetTick>
 800c7de:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	88fa      	ldrh	r2, [r7, #6]
 800c7e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	88fa      	ldrh	r2, [r7, #6]
 800c7ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	689b      	ldr	r3, [r3, #8]
 800c7f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c7f8:	d10e      	bne.n	800c818 <HAL_UART_Receive+0x96>
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	691b      	ldr	r3, [r3, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d105      	bne.n	800c80e <HAL_UART_Receive+0x8c>
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c80c:	e02d      	b.n	800c86a <HAL_UART_Receive+0xe8>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	22ff      	movs	r2, #255	; 0xff
 800c812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c816:	e028      	b.n	800c86a <HAL_UART_Receive+0xe8>
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d10d      	bne.n	800c83c <HAL_UART_Receive+0xba>
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d104      	bne.n	800c832 <HAL_UART_Receive+0xb0>
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	22ff      	movs	r2, #255	; 0xff
 800c82c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c830:	e01b      	b.n	800c86a <HAL_UART_Receive+0xe8>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	227f      	movs	r2, #127	; 0x7f
 800c836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c83a:	e016      	b.n	800c86a <HAL_UART_Receive+0xe8>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	689b      	ldr	r3, [r3, #8]
 800c840:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c844:	d10d      	bne.n	800c862 <HAL_UART_Receive+0xe0>
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	691b      	ldr	r3, [r3, #16]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d104      	bne.n	800c858 <HAL_UART_Receive+0xd6>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	227f      	movs	r2, #127	; 0x7f
 800c852:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c856:	e008      	b.n	800c86a <HAL_UART_Receive+0xe8>
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	223f      	movs	r2, #63	; 0x3f
 800c85c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c860:	e003      	b.n	800c86a <HAL_UART_Receive+0xe8>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c870:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	689b      	ldr	r3, [r3, #8]
 800c876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c87a:	d108      	bne.n	800c88e <HAL_UART_Receive+0x10c>
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	691b      	ldr	r3, [r3, #16]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d104      	bne.n	800c88e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800c884:	2300      	movs	r3, #0
 800c886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	61bb      	str	r3, [r7, #24]
 800c88c:	e003      	b.n	800c896 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c892:	2300      	movs	r3, #0
 800c894:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800c89e:	e032      	b.n	800c906 <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	2120      	movs	r1, #32
 800c8aa:	68f8      	ldr	r0, [r7, #12]
 800c8ac:	f000 fbf5 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800c8b0:	4603      	mov	r3, r0
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d001      	beq.n	800c8ba <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800c8b6:	2303      	movs	r3, #3
 800c8b8:	e032      	b.n	800c920 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d10c      	bne.n	800c8da <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	8a7b      	ldrh	r3, [r7, #18]
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	b29a      	uxth	r2, r3
 800c8ce:	69bb      	ldr	r3, [r7, #24]
 800c8d0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	3302      	adds	r3, #2
 800c8d6:	61bb      	str	r3, [r7, #24]
 800c8d8:	e00c      	b.n	800c8f4 <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	8a7b      	ldrh	r3, [r7, #18]
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	4013      	ands	r3, r2
 800c8e8:	b2da      	uxtb	r2, r3
 800c8ea:	69fb      	ldr	r3, [r7, #28]
 800c8ec:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800c8ee:	69fb      	ldr	r3, [r7, #28]
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	3b01      	subs	r3, #1
 800c8fe:	b29a      	uxth	r2, r3
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c90c:	b29b      	uxth	r3, r3
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d1c6      	bne.n	800c8a0 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	2220      	movs	r2, #32
 800c916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	e000      	b.n	800c920 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800c91e:	2302      	movs	r3, #2
  }
}
 800c920:	4618      	mov	r0, r3
 800c922:	3720      	adds	r7, #32
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c928:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c92c:	b08c      	sub	sp, #48	; 0x30
 800c92e:	af00      	add	r7, sp, #0
 800c930:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	689a      	ldr	r2, [r3, #8]
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	431a      	orrs	r2, r3
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	431a      	orrs	r2, r3
 800c948:	697b      	ldr	r3, [r7, #20]
 800c94a:	69db      	ldr	r3, [r3, #28]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c950:	697b      	ldr	r3, [r7, #20]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	4bab      	ldr	r3, [pc, #684]	; (800cc04 <UART_SetConfig+0x2dc>)
 800c958:	4013      	ands	r3, r2
 800c95a:	697a      	ldr	r2, [r7, #20]
 800c95c:	6812      	ldr	r2, [r2, #0]
 800c95e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c960:	430b      	orrs	r3, r1
 800c962:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c964:	697b      	ldr	r3, [r7, #20]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	430a      	orrs	r2, r1
 800c978:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	699b      	ldr	r3, [r3, #24]
 800c97e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4aa0      	ldr	r2, [pc, #640]	; (800cc08 <UART_SetConfig+0x2e0>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d004      	beq.n	800c994 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c98a:	697b      	ldr	r3, [r7, #20]
 800c98c:	6a1b      	ldr	r3, [r3, #32]
 800c98e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c990:	4313      	orrs	r3, r2
 800c992:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	689b      	ldr	r3, [r3, #8]
 800c99a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800c99e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800c9a2:	697a      	ldr	r2, [r7, #20]
 800c9a4:	6812      	ldr	r2, [r2, #0]
 800c9a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9a8:	430b      	orrs	r3, r1
 800c9aa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9b2:	f023 010f 	bic.w	r1, r3, #15
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	430a      	orrs	r2, r1
 800c9c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4a91      	ldr	r2, [pc, #580]	; (800cc0c <UART_SetConfig+0x2e4>)
 800c9c8:	4293      	cmp	r3, r2
 800c9ca:	d125      	bne.n	800ca18 <UART_SetConfig+0xf0>
 800c9cc:	4b90      	ldr	r3, [pc, #576]	; (800cc10 <UART_SetConfig+0x2e8>)
 800c9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9d2:	f003 0303 	and.w	r3, r3, #3
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d81a      	bhi.n	800ca10 <UART_SetConfig+0xe8>
 800c9da:	a201      	add	r2, pc, #4	; (adr r2, 800c9e0 <UART_SetConfig+0xb8>)
 800c9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e0:	0800c9f1 	.word	0x0800c9f1
 800c9e4:	0800ca01 	.word	0x0800ca01
 800c9e8:	0800c9f9 	.word	0x0800c9f9
 800c9ec:	0800ca09 	.word	0x0800ca09
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9f6:	e0d6      	b.n	800cba6 <UART_SetConfig+0x27e>
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800c9fe:	e0d2      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca00:	2304      	movs	r3, #4
 800ca02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca06:	e0ce      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca08:	2308      	movs	r3, #8
 800ca0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca0e:	e0ca      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca10:	2310      	movs	r3, #16
 800ca12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca16:	e0c6      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	4a7d      	ldr	r2, [pc, #500]	; (800cc14 <UART_SetConfig+0x2ec>)
 800ca1e:	4293      	cmp	r3, r2
 800ca20:	d138      	bne.n	800ca94 <UART_SetConfig+0x16c>
 800ca22:	4b7b      	ldr	r3, [pc, #492]	; (800cc10 <UART_SetConfig+0x2e8>)
 800ca24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca28:	f003 030c 	and.w	r3, r3, #12
 800ca2c:	2b0c      	cmp	r3, #12
 800ca2e:	d82d      	bhi.n	800ca8c <UART_SetConfig+0x164>
 800ca30:	a201      	add	r2, pc, #4	; (adr r2, 800ca38 <UART_SetConfig+0x110>)
 800ca32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca36:	bf00      	nop
 800ca38:	0800ca6d 	.word	0x0800ca6d
 800ca3c:	0800ca8d 	.word	0x0800ca8d
 800ca40:	0800ca8d 	.word	0x0800ca8d
 800ca44:	0800ca8d 	.word	0x0800ca8d
 800ca48:	0800ca7d 	.word	0x0800ca7d
 800ca4c:	0800ca8d 	.word	0x0800ca8d
 800ca50:	0800ca8d 	.word	0x0800ca8d
 800ca54:	0800ca8d 	.word	0x0800ca8d
 800ca58:	0800ca75 	.word	0x0800ca75
 800ca5c:	0800ca8d 	.word	0x0800ca8d
 800ca60:	0800ca8d 	.word	0x0800ca8d
 800ca64:	0800ca8d 	.word	0x0800ca8d
 800ca68:	0800ca85 	.word	0x0800ca85
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca72:	e098      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca74:	2302      	movs	r3, #2
 800ca76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca7a:	e094      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca7c:	2304      	movs	r3, #4
 800ca7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca82:	e090      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca84:	2308      	movs	r3, #8
 800ca86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca8a:	e08c      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca8c:	2310      	movs	r3, #16
 800ca8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ca92:	e088      	b.n	800cba6 <UART_SetConfig+0x27e>
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	4a5f      	ldr	r2, [pc, #380]	; (800cc18 <UART_SetConfig+0x2f0>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d125      	bne.n	800caea <UART_SetConfig+0x1c2>
 800ca9e:	4b5c      	ldr	r3, [pc, #368]	; (800cc10 <UART_SetConfig+0x2e8>)
 800caa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800caa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800caa8:	2b30      	cmp	r3, #48	; 0x30
 800caaa:	d016      	beq.n	800cada <UART_SetConfig+0x1b2>
 800caac:	2b30      	cmp	r3, #48	; 0x30
 800caae:	d818      	bhi.n	800cae2 <UART_SetConfig+0x1ba>
 800cab0:	2b20      	cmp	r3, #32
 800cab2:	d00a      	beq.n	800caca <UART_SetConfig+0x1a2>
 800cab4:	2b20      	cmp	r3, #32
 800cab6:	d814      	bhi.n	800cae2 <UART_SetConfig+0x1ba>
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <UART_SetConfig+0x19a>
 800cabc:	2b10      	cmp	r3, #16
 800cabe:	d008      	beq.n	800cad2 <UART_SetConfig+0x1aa>
 800cac0:	e00f      	b.n	800cae2 <UART_SetConfig+0x1ba>
 800cac2:	2300      	movs	r3, #0
 800cac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cac8:	e06d      	b.n	800cba6 <UART_SetConfig+0x27e>
 800caca:	2302      	movs	r3, #2
 800cacc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cad0:	e069      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cad2:	2304      	movs	r3, #4
 800cad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cad8:	e065      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cada:	2308      	movs	r3, #8
 800cadc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cae0:	e061      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cae2:	2310      	movs	r3, #16
 800cae4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cae8:	e05d      	b.n	800cba6 <UART_SetConfig+0x27e>
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	4a4b      	ldr	r2, [pc, #300]	; (800cc1c <UART_SetConfig+0x2f4>)
 800caf0:	4293      	cmp	r3, r2
 800caf2:	d125      	bne.n	800cb40 <UART_SetConfig+0x218>
 800caf4:	4b46      	ldr	r3, [pc, #280]	; (800cc10 <UART_SetConfig+0x2e8>)
 800caf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cafa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800cafe:	2bc0      	cmp	r3, #192	; 0xc0
 800cb00:	d016      	beq.n	800cb30 <UART_SetConfig+0x208>
 800cb02:	2bc0      	cmp	r3, #192	; 0xc0
 800cb04:	d818      	bhi.n	800cb38 <UART_SetConfig+0x210>
 800cb06:	2b80      	cmp	r3, #128	; 0x80
 800cb08:	d00a      	beq.n	800cb20 <UART_SetConfig+0x1f8>
 800cb0a:	2b80      	cmp	r3, #128	; 0x80
 800cb0c:	d814      	bhi.n	800cb38 <UART_SetConfig+0x210>
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d002      	beq.n	800cb18 <UART_SetConfig+0x1f0>
 800cb12:	2b40      	cmp	r3, #64	; 0x40
 800cb14:	d008      	beq.n	800cb28 <UART_SetConfig+0x200>
 800cb16:	e00f      	b.n	800cb38 <UART_SetConfig+0x210>
 800cb18:	2300      	movs	r3, #0
 800cb1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb1e:	e042      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb20:	2302      	movs	r3, #2
 800cb22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb26:	e03e      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb28:	2304      	movs	r3, #4
 800cb2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb2e:	e03a      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb30:	2308      	movs	r3, #8
 800cb32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb36:	e036      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb38:	2310      	movs	r3, #16
 800cb3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb3e:	e032      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4a30      	ldr	r2, [pc, #192]	; (800cc08 <UART_SetConfig+0x2e0>)
 800cb46:	4293      	cmp	r3, r2
 800cb48:	d12a      	bne.n	800cba0 <UART_SetConfig+0x278>
 800cb4a:	4b31      	ldr	r3, [pc, #196]	; (800cc10 <UART_SetConfig+0x2e8>)
 800cb4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cb54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb58:	d01a      	beq.n	800cb90 <UART_SetConfig+0x268>
 800cb5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cb5e:	d81b      	bhi.n	800cb98 <UART_SetConfig+0x270>
 800cb60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb64:	d00c      	beq.n	800cb80 <UART_SetConfig+0x258>
 800cb66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cb6a:	d815      	bhi.n	800cb98 <UART_SetConfig+0x270>
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d003      	beq.n	800cb78 <UART_SetConfig+0x250>
 800cb70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb74:	d008      	beq.n	800cb88 <UART_SetConfig+0x260>
 800cb76:	e00f      	b.n	800cb98 <UART_SetConfig+0x270>
 800cb78:	2300      	movs	r3, #0
 800cb7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb7e:	e012      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb80:	2302      	movs	r3, #2
 800cb82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb86:	e00e      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb88:	2304      	movs	r3, #4
 800cb8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb8e:	e00a      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb90:	2308      	movs	r3, #8
 800cb92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb96:	e006      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cb98:	2310      	movs	r3, #16
 800cb9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800cb9e:	e002      	b.n	800cba6 <UART_SetConfig+0x27e>
 800cba0:	2310      	movs	r3, #16
 800cba2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a17      	ldr	r2, [pc, #92]	; (800cc08 <UART_SetConfig+0x2e0>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	f040 80a8 	bne.w	800cd02 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cbb2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cbb6:	2b08      	cmp	r3, #8
 800cbb8:	d834      	bhi.n	800cc24 <UART_SetConfig+0x2fc>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <UART_SetConfig+0x298>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cbe5 	.word	0x0800cbe5
 800cbc4:	0800cc25 	.word	0x0800cc25
 800cbc8:	0800cbed 	.word	0x0800cbed
 800cbcc:	0800cc25 	.word	0x0800cc25
 800cbd0:	0800cbf3 	.word	0x0800cbf3
 800cbd4:	0800cc25 	.word	0x0800cc25
 800cbd8:	0800cc25 	.word	0x0800cc25
 800cbdc:	0800cc25 	.word	0x0800cc25
 800cbe0:	0800cbfb 	.word	0x0800cbfb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbe4:	f7fd fdc0 	bl	800a768 <HAL_RCC_GetPCLK1Freq>
 800cbe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbea:	e021      	b.n	800cc30 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cbec:	4b0c      	ldr	r3, [pc, #48]	; (800cc20 <UART_SetConfig+0x2f8>)
 800cbee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cbf0:	e01e      	b.n	800cc30 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cbf2:	f7fd fd4b 	bl	800a68c <HAL_RCC_GetSysClockFreq>
 800cbf6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cbf8:	e01a      	b.n	800cc30 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cbfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cbfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cc00:	e016      	b.n	800cc30 <UART_SetConfig+0x308>
 800cc02:	bf00      	nop
 800cc04:	cfff69f3 	.word	0xcfff69f3
 800cc08:	40008000 	.word	0x40008000
 800cc0c:	40013800 	.word	0x40013800
 800cc10:	40021000 	.word	0x40021000
 800cc14:	40004400 	.word	0x40004400
 800cc18:	40004800 	.word	0x40004800
 800cc1c:	40004c00 	.word	0x40004c00
 800cc20:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800cc24:	2300      	movs	r3, #0
 800cc26:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cc2e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	f000 812a 	beq.w	800ce8c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc3c:	4a9e      	ldr	r2, [pc, #632]	; (800ceb8 <UART_SetConfig+0x590>)
 800cc3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc42:	461a      	mov	r2, r3
 800cc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc46:	fbb3 f3f2 	udiv	r3, r3, r2
 800cc4a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	685a      	ldr	r2, [r3, #4]
 800cc50:	4613      	mov	r3, r2
 800cc52:	005b      	lsls	r3, r3, #1
 800cc54:	4413      	add	r3, r2
 800cc56:	69ba      	ldr	r2, [r7, #24]
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d305      	bcc.n	800cc68 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d903      	bls.n	800cc70 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800cc68:	2301      	movs	r3, #1
 800cc6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cc6e:	e10d      	b.n	800ce8c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc72:	2200      	movs	r2, #0
 800cc74:	60bb      	str	r3, [r7, #8]
 800cc76:	60fa      	str	r2, [r7, #12]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc7c:	4a8e      	ldr	r2, [pc, #568]	; (800ceb8 <UART_SetConfig+0x590>)
 800cc7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cc82:	b29b      	uxth	r3, r3
 800cc84:	2200      	movs	r2, #0
 800cc86:	603b      	str	r3, [r7, #0]
 800cc88:	607a      	str	r2, [r7, #4]
 800cc8a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cc92:	f7f4 f801 	bl	8000c98 <__aeabi_uldivmod>
 800cc96:	4602      	mov	r2, r0
 800cc98:	460b      	mov	r3, r1
 800cc9a:	4610      	mov	r0, r2
 800cc9c:	4619      	mov	r1, r3
 800cc9e:	f04f 0200 	mov.w	r2, #0
 800cca2:	f04f 0300 	mov.w	r3, #0
 800cca6:	020b      	lsls	r3, r1, #8
 800cca8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ccac:	0202      	lsls	r2, r0, #8
 800ccae:	6979      	ldr	r1, [r7, #20]
 800ccb0:	6849      	ldr	r1, [r1, #4]
 800ccb2:	0849      	lsrs	r1, r1, #1
 800ccb4:	2000      	movs	r0, #0
 800ccb6:	460c      	mov	r4, r1
 800ccb8:	4605      	mov	r5, r0
 800ccba:	eb12 0804 	adds.w	r8, r2, r4
 800ccbe:	eb43 0905 	adc.w	r9, r3, r5
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	469a      	mov	sl, r3
 800ccca:	4693      	mov	fp, r2
 800cccc:	4652      	mov	r2, sl
 800ccce:	465b      	mov	r3, fp
 800ccd0:	4640      	mov	r0, r8
 800ccd2:	4649      	mov	r1, r9
 800ccd4:	f7f3 ffe0 	bl	8000c98 <__aeabi_uldivmod>
 800ccd8:	4602      	mov	r2, r0
 800ccda:	460b      	mov	r3, r1
 800ccdc:	4613      	mov	r3, r2
 800ccde:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cce0:	6a3b      	ldr	r3, [r7, #32]
 800cce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cce6:	d308      	bcc.n	800ccfa <UART_SetConfig+0x3d2>
 800cce8:	6a3b      	ldr	r3, [r7, #32]
 800ccea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ccee:	d204      	bcs.n	800ccfa <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800ccf0:	697b      	ldr	r3, [r7, #20]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	6a3a      	ldr	r2, [r7, #32]
 800ccf6:	60da      	str	r2, [r3, #12]
 800ccf8:	e0c8      	b.n	800ce8c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cd00:	e0c4      	b.n	800ce8c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cd0a:	d167      	bne.n	800cddc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800cd0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd10:	2b08      	cmp	r3, #8
 800cd12:	d828      	bhi.n	800cd66 <UART_SetConfig+0x43e>
 800cd14:	a201      	add	r2, pc, #4	; (adr r2, 800cd1c <UART_SetConfig+0x3f4>)
 800cd16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd1a:	bf00      	nop
 800cd1c:	0800cd41 	.word	0x0800cd41
 800cd20:	0800cd49 	.word	0x0800cd49
 800cd24:	0800cd51 	.word	0x0800cd51
 800cd28:	0800cd67 	.word	0x0800cd67
 800cd2c:	0800cd57 	.word	0x0800cd57
 800cd30:	0800cd67 	.word	0x0800cd67
 800cd34:	0800cd67 	.word	0x0800cd67
 800cd38:	0800cd67 	.word	0x0800cd67
 800cd3c:	0800cd5f 	.word	0x0800cd5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cd40:	f7fd fd12 	bl	800a768 <HAL_RCC_GetPCLK1Freq>
 800cd44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd46:	e014      	b.n	800cd72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cd48:	f7fd fd24 	bl	800a794 <HAL_RCC_GetPCLK2Freq>
 800cd4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd4e:	e010      	b.n	800cd72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cd50:	4b5a      	ldr	r3, [pc, #360]	; (800cebc <UART_SetConfig+0x594>)
 800cd52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd54:	e00d      	b.n	800cd72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cd56:	f7fd fc99 	bl	800a68c <HAL_RCC_GetSysClockFreq>
 800cd5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800cd5c:	e009      	b.n	800cd72 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cd5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800cd64:	e005      	b.n	800cd72 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800cd66:	2300      	movs	r3, #0
 800cd68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800cd70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	f000 8089 	beq.w	800ce8c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd7e:	4a4e      	ldr	r2, [pc, #312]	; (800ceb8 <UART_SetConfig+0x590>)
 800cd80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cd84:	461a      	mov	r2, r3
 800cd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd88:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd8c:	005a      	lsls	r2, r3, #1
 800cd8e:	697b      	ldr	r3, [r7, #20]
 800cd90:	685b      	ldr	r3, [r3, #4]
 800cd92:	085b      	lsrs	r3, r3, #1
 800cd94:	441a      	add	r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cda0:	6a3b      	ldr	r3, [r7, #32]
 800cda2:	2b0f      	cmp	r3, #15
 800cda4:	d916      	bls.n	800cdd4 <UART_SetConfig+0x4ac>
 800cda6:	6a3b      	ldr	r3, [r7, #32]
 800cda8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cdac:	d212      	bcs.n	800cdd4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cdae:	6a3b      	ldr	r3, [r7, #32]
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f023 030f 	bic.w	r3, r3, #15
 800cdb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cdb8:	6a3b      	ldr	r3, [r7, #32]
 800cdba:	085b      	lsrs	r3, r3, #1
 800cdbc:	b29b      	uxth	r3, r3
 800cdbe:	f003 0307 	and.w	r3, r3, #7
 800cdc2:	b29a      	uxth	r2, r3
 800cdc4:	8bfb      	ldrh	r3, [r7, #30]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	8bfa      	ldrh	r2, [r7, #30]
 800cdd0:	60da      	str	r2, [r3, #12]
 800cdd2:	e05b      	b.n	800ce8c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800cdda:	e057      	b.n	800ce8c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cddc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cde0:	2b08      	cmp	r3, #8
 800cde2:	d828      	bhi.n	800ce36 <UART_SetConfig+0x50e>
 800cde4:	a201      	add	r2, pc, #4	; (adr r2, 800cdec <UART_SetConfig+0x4c4>)
 800cde6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdea:	bf00      	nop
 800cdec:	0800ce11 	.word	0x0800ce11
 800cdf0:	0800ce19 	.word	0x0800ce19
 800cdf4:	0800ce21 	.word	0x0800ce21
 800cdf8:	0800ce37 	.word	0x0800ce37
 800cdfc:	0800ce27 	.word	0x0800ce27
 800ce00:	0800ce37 	.word	0x0800ce37
 800ce04:	0800ce37 	.word	0x0800ce37
 800ce08:	0800ce37 	.word	0x0800ce37
 800ce0c:	0800ce2f 	.word	0x0800ce2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce10:	f7fd fcaa 	bl	800a768 <HAL_RCC_GetPCLK1Freq>
 800ce14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce16:	e014      	b.n	800ce42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ce18:	f7fd fcbc 	bl	800a794 <HAL_RCC_GetPCLK2Freq>
 800ce1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce1e:	e010      	b.n	800ce42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce20:	4b26      	ldr	r3, [pc, #152]	; (800cebc <UART_SetConfig+0x594>)
 800ce22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce24:	e00d      	b.n	800ce42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce26:	f7fd fc31 	bl	800a68c <HAL_RCC_GetSysClockFreq>
 800ce2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ce2c:	e009      	b.n	800ce42 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ce32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ce34:	e005      	b.n	800ce42 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800ce36:	2300      	movs	r3, #0
 800ce38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ce3a:	2301      	movs	r3, #1
 800ce3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ce40:	bf00      	nop
    }

    if (pclk != 0U)
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d021      	beq.n	800ce8c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce4c:	4a1a      	ldr	r2, [pc, #104]	; (800ceb8 <UART_SetConfig+0x590>)
 800ce4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce52:	461a      	mov	r2, r3
 800ce54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce56:	fbb3 f2f2 	udiv	r2, r3, r2
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	085b      	lsrs	r3, r3, #1
 800ce60:	441a      	add	r2, r3
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	fbb2 f3f3 	udiv	r3, r2, r3
 800ce6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ce6c:	6a3b      	ldr	r3, [r7, #32]
 800ce6e:	2b0f      	cmp	r3, #15
 800ce70:	d909      	bls.n	800ce86 <UART_SetConfig+0x55e>
 800ce72:	6a3b      	ldr	r3, [r7, #32]
 800ce74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce78:	d205      	bcs.n	800ce86 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ce7a:	6a3b      	ldr	r3, [r7, #32]
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	60da      	str	r2, [r3, #12]
 800ce84:	e002      	b.n	800ce8c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800ce86:	2301      	movs	r3, #1
 800ce88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	2201      	movs	r2, #1
 800ce90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	2200      	movs	r2, #0
 800cea0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2200      	movs	r2, #0
 800cea6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800cea8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800ceac:	4618      	mov	r0, r3
 800ceae:	3730      	adds	r7, #48	; 0x30
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ceb6:	bf00      	nop
 800ceb8:	0801120c 	.word	0x0801120c
 800cebc:	00f42400 	.word	0x00f42400

0800cec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d00a      	beq.n	800ceea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	685b      	ldr	r3, [r3, #4]
 800ceda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	430a      	orrs	r2, r1
 800cee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00a      	beq.n	800cf0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	430a      	orrs	r2, r1
 800cf0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf10:	f003 0304 	and.w	r3, r3, #4
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d00a      	beq.n	800cf2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf32:	f003 0308 	and.w	r3, r3, #8
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d00a      	beq.n	800cf50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	430a      	orrs	r2, r1
 800cf4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf54:	f003 0310 	and.w	r3, r3, #16
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d00a      	beq.n	800cf72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	430a      	orrs	r2, r1
 800cf70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	f003 0320 	and.w	r3, r3, #32
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00a      	beq.n	800cf94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	430a      	orrs	r2, r1
 800cf92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d01a      	beq.n	800cfd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfbe:	d10a      	bne.n	800cfd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	685b      	ldr	r3, [r3, #4]
 800cfc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	430a      	orrs	r2, r1
 800cfd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00a      	beq.n	800cff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	430a      	orrs	r2, r1
 800cff6:	605a      	str	r2, [r3, #4]
  }
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b086      	sub	sp, #24
 800d008:	af02      	add	r7, sp, #8
 800d00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2200      	movs	r2, #0
 800d010:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d014:	f7f8 f8b6 	bl	8005184 <HAL_GetTick>
 800d018:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f003 0308 	and.w	r3, r3, #8
 800d024:	2b08      	cmp	r3, #8
 800d026:	d10e      	bne.n	800d046 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d028:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d02c:	9300      	str	r3, [sp, #0]
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2200      	movs	r2, #0
 800d032:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d036:	6878      	ldr	r0, [r7, #4]
 800d038:	f000 f82f 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800d03c:	4603      	mov	r3, r0
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d001      	beq.n	800d046 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	e025      	b.n	800d092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f003 0304 	and.w	r3, r3, #4
 800d050:	2b04      	cmp	r3, #4
 800d052:	d10e      	bne.n	800d072 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d058:	9300      	str	r3, [sp, #0]
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 f819 	bl	800d09a <UART_WaitOnFlagUntilTimeout>
 800d068:	4603      	mov	r3, r0
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d001      	beq.n	800d072 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d06e:	2303      	movs	r3, #3
 800d070:	e00f      	b.n	800d092 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2220      	movs	r2, #32
 800d076:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2220      	movs	r2, #32
 800d07e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	2200      	movs	r2, #0
 800d086:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2200      	movs	r2, #0
 800d08c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d090:	2300      	movs	r3, #0
}
 800d092:	4618      	mov	r0, r3
 800d094:	3710      	adds	r7, #16
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}

0800d09a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d09a:	b580      	push	{r7, lr}
 800d09c:	b09c      	sub	sp, #112	; 0x70
 800d09e:	af00      	add	r7, sp, #0
 800d0a0:	60f8      	str	r0, [r7, #12]
 800d0a2:	60b9      	str	r1, [r7, #8]
 800d0a4:	603b      	str	r3, [r7, #0]
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d0aa:	e0a9      	b.n	800d200 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d0ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0b2:	f000 80a5 	beq.w	800d200 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0b6:	f7f8 f865 	bl	8005184 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d302      	bcc.n	800d0cc <UART_WaitOnFlagUntilTimeout+0x32>
 800d0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d140      	bne.n	800d14e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0d4:	e853 3f00 	ldrex	r3, [r3]
 800d0d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d0da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d0e0:	667b      	str	r3, [r7, #100]	; 0x64
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d0ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d0ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d0f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d0f2:	e841 2300 	strex	r3, r2, [r1]
 800d0f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d0f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1e6      	bne.n	800d0cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	3308      	adds	r3, #8
 800d104:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d108:	e853 3f00 	ldrex	r3, [r3]
 800d10c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d110:	f023 0301 	bic.w	r3, r3, #1
 800d114:	663b      	str	r3, [r7, #96]	; 0x60
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	3308      	adds	r3, #8
 800d11c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d11e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d120:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d124:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e5      	bne.n	800d0fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2220      	movs	r2, #32
 800d136:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	2220      	movs	r2, #32
 800d13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d14a:	2303      	movs	r3, #3
 800d14c:	e069      	b.n	800d222 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 0304 	and.w	r3, r3, #4
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d051      	beq.n	800d200 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	69db      	ldr	r3, [r3, #28]
 800d162:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d166:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d16a:	d149      	bne.n	800d200 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d174:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d17e:	e853 3f00 	ldrex	r3, [r3]
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d18a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	461a      	mov	r2, r3
 800d192:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d194:	637b      	str	r3, [r7, #52]	; 0x34
 800d196:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d19c:	e841 2300 	strex	r3, r2, [r1]
 800d1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1e6      	bne.n	800d176 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	3308      	adds	r3, #8
 800d1ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	e853 3f00 	ldrex	r3, [r3]
 800d1b6:	613b      	str	r3, [r7, #16]
   return(result);
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	f023 0301 	bic.w	r3, r3, #1
 800d1be:	66bb      	str	r3, [r7, #104]	; 0x68
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d1c8:	623a      	str	r2, [r7, #32]
 800d1ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1cc:	69f9      	ldr	r1, [r7, #28]
 800d1ce:	6a3a      	ldr	r2, [r7, #32]
 800d1d0:	e841 2300 	strex	r3, r2, [r1]
 800d1d4:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d1e5      	bne.n	800d1a8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2220      	movs	r2, #32
 800d1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	2220      	movs	r2, #32
 800d1e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	2220      	movs	r2, #32
 800d1f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d1fc:	2303      	movs	r3, #3
 800d1fe:	e010      	b.n	800d222 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	681b      	ldr	r3, [r3, #0]
 800d204:	69da      	ldr	r2, [r3, #28]
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	4013      	ands	r3, r2
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	429a      	cmp	r2, r3
 800d20e:	bf0c      	ite	eq
 800d210:	2301      	moveq	r3, #1
 800d212:	2300      	movne	r3, #0
 800d214:	b2db      	uxtb	r3, r3
 800d216:	461a      	mov	r2, r3
 800d218:	79fb      	ldrb	r3, [r7, #7]
 800d21a:	429a      	cmp	r2, r3
 800d21c:	f43f af46 	beq.w	800d0ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3770      	adds	r7, #112	; 0x70
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}

0800d22a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d22a:	b480      	push	{r7}
 800d22c:	b085      	sub	sp, #20
 800d22e:	af00      	add	r7, sp, #0
 800d230:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d238:	2b01      	cmp	r3, #1
 800d23a:	d101      	bne.n	800d240 <HAL_UARTEx_DisableFifoMode+0x16>
 800d23c:	2302      	movs	r3, #2
 800d23e:	e027      	b.n	800d290 <HAL_UARTEx_DisableFifoMode+0x66>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2201      	movs	r2, #1
 800d244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2224      	movs	r2, #36	; 0x24
 800d24c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	681a      	ldr	r2, [r3, #0]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f022 0201 	bic.w	r2, r2, #1
 800d266:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d26e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2200      	movs	r2, #0
 800d274:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	68fa      	ldr	r2, [r7, #12]
 800d27c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2220      	movs	r2, #32
 800d282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2200      	movs	r2, #0
 800d28a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr

0800d29c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
 800d2a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d2ac:	2b01      	cmp	r3, #1
 800d2ae:	d101      	bne.n	800d2b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	e02d      	b.n	800d310 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2201      	movs	r2, #1
 800d2b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2224      	movs	r2, #36	; 0x24
 800d2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f022 0201 	bic.w	r2, r2, #1
 800d2da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	683a      	ldr	r2, [r7, #0]
 800d2ec:	430a      	orrs	r2, r1
 800d2ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 f84f 	bl	800d394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	68fa      	ldr	r2, [r7, #12]
 800d2fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2220      	movs	r2, #32
 800d302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	2200      	movs	r2, #0
 800d30a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d101      	bne.n	800d330 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d32c:	2302      	movs	r3, #2
 800d32e:	e02d      	b.n	800d38c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2201      	movs	r2, #1
 800d334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2224      	movs	r2, #36	; 0x24
 800d33c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681a      	ldr	r2, [r3, #0]
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	f022 0201 	bic.w	r2, r2, #1
 800d356:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	683a      	ldr	r2, [r7, #0]
 800d368:	430a      	orrs	r2, r1
 800d36a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f811 	bl	800d394 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68fa      	ldr	r2, [r7, #12]
 800d378:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d38a:	2300      	movs	r3, #0
}
 800d38c:	4618      	mov	r0, r3
 800d38e:	3710      	adds	r7, #16
 800d390:	46bd      	mov	sp, r7
 800d392:	bd80      	pop	{r7, pc}

0800d394 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d394:	b480      	push	{r7}
 800d396:	b085      	sub	sp, #20
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d108      	bne.n	800d3b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d3b4:	e031      	b.n	800d41a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d3b6:	2308      	movs	r3, #8
 800d3b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d3ba:	2308      	movs	r3, #8
 800d3bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	0e5b      	lsrs	r3, r3, #25
 800d3c6:	b2db      	uxtb	r3, r3
 800d3c8:	f003 0307 	and.w	r3, r3, #7
 800d3cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	689b      	ldr	r3, [r3, #8]
 800d3d4:	0f5b      	lsrs	r3, r3, #29
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	f003 0307 	and.w	r3, r3, #7
 800d3dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3de:	7bbb      	ldrb	r3, [r7, #14]
 800d3e0:	7b3a      	ldrb	r2, [r7, #12]
 800d3e2:	4911      	ldr	r1, [pc, #68]	; (800d428 <UARTEx_SetNbDataToProcess+0x94>)
 800d3e4:	5c8a      	ldrb	r2, [r1, r2]
 800d3e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d3ea:	7b3a      	ldrb	r2, [r7, #12]
 800d3ec:	490f      	ldr	r1, [pc, #60]	; (800d42c <UARTEx_SetNbDataToProcess+0x98>)
 800d3ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d3f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d3f4:	b29a      	uxth	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d3fc:	7bfb      	ldrb	r3, [r7, #15]
 800d3fe:	7b7a      	ldrb	r2, [r7, #13]
 800d400:	4909      	ldr	r1, [pc, #36]	; (800d428 <UARTEx_SetNbDataToProcess+0x94>)
 800d402:	5c8a      	ldrb	r2, [r1, r2]
 800d404:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d408:	7b7a      	ldrb	r2, [r7, #13]
 800d40a:	4908      	ldr	r1, [pc, #32]	; (800d42c <UARTEx_SetNbDataToProcess+0x98>)
 800d40c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d40e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d412:	b29a      	uxth	r2, r3
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d41a:	bf00      	nop
 800d41c:	3714      	adds	r7, #20
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr
 800d426:	bf00      	nop
 800d428:	08011224 	.word	0x08011224
 800d42c:	0801122c 	.word	0x0801122c

0800d430 <__errno>:
 800d430:	4b01      	ldr	r3, [pc, #4]	; (800d438 <__errno+0x8>)
 800d432:	6818      	ldr	r0, [r3, #0]
 800d434:	4770      	bx	lr
 800d436:	bf00      	nop
 800d438:	2000002c 	.word	0x2000002c

0800d43c <__libc_init_array>:
 800d43c:	b570      	push	{r4, r5, r6, lr}
 800d43e:	4d0d      	ldr	r5, [pc, #52]	; (800d474 <__libc_init_array+0x38>)
 800d440:	4c0d      	ldr	r4, [pc, #52]	; (800d478 <__libc_init_array+0x3c>)
 800d442:	1b64      	subs	r4, r4, r5
 800d444:	10a4      	asrs	r4, r4, #2
 800d446:	2600      	movs	r6, #0
 800d448:	42a6      	cmp	r6, r4
 800d44a:	d109      	bne.n	800d460 <__libc_init_array+0x24>
 800d44c:	4d0b      	ldr	r5, [pc, #44]	; (800d47c <__libc_init_array+0x40>)
 800d44e:	4c0c      	ldr	r4, [pc, #48]	; (800d480 <__libc_init_array+0x44>)
 800d450:	f003 fdb8 	bl	8010fc4 <_init>
 800d454:	1b64      	subs	r4, r4, r5
 800d456:	10a4      	asrs	r4, r4, #2
 800d458:	2600      	movs	r6, #0
 800d45a:	42a6      	cmp	r6, r4
 800d45c:	d105      	bne.n	800d46a <__libc_init_array+0x2e>
 800d45e:	bd70      	pop	{r4, r5, r6, pc}
 800d460:	f855 3b04 	ldr.w	r3, [r5], #4
 800d464:	4798      	blx	r3
 800d466:	3601      	adds	r6, #1
 800d468:	e7ee      	b.n	800d448 <__libc_init_array+0xc>
 800d46a:	f855 3b04 	ldr.w	r3, [r5], #4
 800d46e:	4798      	blx	r3
 800d470:	3601      	adds	r6, #1
 800d472:	e7f2      	b.n	800d45a <__libc_init_array+0x1e>
 800d474:	080119ec 	.word	0x080119ec
 800d478:	080119ec 	.word	0x080119ec
 800d47c:	080119ec 	.word	0x080119ec
 800d480:	080119f0 	.word	0x080119f0

0800d484 <memset>:
 800d484:	4402      	add	r2, r0
 800d486:	4603      	mov	r3, r0
 800d488:	4293      	cmp	r3, r2
 800d48a:	d100      	bne.n	800d48e <memset+0xa>
 800d48c:	4770      	bx	lr
 800d48e:	f803 1b01 	strb.w	r1, [r3], #1
 800d492:	e7f9      	b.n	800d488 <memset+0x4>

0800d494 <__cvt>:
 800d494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d498:	ec55 4b10 	vmov	r4, r5, d0
 800d49c:	2d00      	cmp	r5, #0
 800d49e:	460e      	mov	r6, r1
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	462b      	mov	r3, r5
 800d4a4:	bfbb      	ittet	lt
 800d4a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d4aa:	461d      	movlt	r5, r3
 800d4ac:	2300      	movge	r3, #0
 800d4ae:	232d      	movlt	r3, #45	; 0x2d
 800d4b0:	700b      	strb	r3, [r1, #0]
 800d4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d4b8:	4691      	mov	r9, r2
 800d4ba:	f023 0820 	bic.w	r8, r3, #32
 800d4be:	bfbc      	itt	lt
 800d4c0:	4622      	movlt	r2, r4
 800d4c2:	4614      	movlt	r4, r2
 800d4c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4c8:	d005      	beq.n	800d4d6 <__cvt+0x42>
 800d4ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800d4ce:	d100      	bne.n	800d4d2 <__cvt+0x3e>
 800d4d0:	3601      	adds	r6, #1
 800d4d2:	2102      	movs	r1, #2
 800d4d4:	e000      	b.n	800d4d8 <__cvt+0x44>
 800d4d6:	2103      	movs	r1, #3
 800d4d8:	ab03      	add	r3, sp, #12
 800d4da:	9301      	str	r3, [sp, #4]
 800d4dc:	ab02      	add	r3, sp, #8
 800d4de:	9300      	str	r3, [sp, #0]
 800d4e0:	ec45 4b10 	vmov	d0, r4, r5
 800d4e4:	4653      	mov	r3, sl
 800d4e6:	4632      	mov	r2, r6
 800d4e8:	f000 fcea 	bl	800dec0 <_dtoa_r>
 800d4ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800d4f0:	4607      	mov	r7, r0
 800d4f2:	d102      	bne.n	800d4fa <__cvt+0x66>
 800d4f4:	f019 0f01 	tst.w	r9, #1
 800d4f8:	d022      	beq.n	800d540 <__cvt+0xac>
 800d4fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800d4fe:	eb07 0906 	add.w	r9, r7, r6
 800d502:	d110      	bne.n	800d526 <__cvt+0x92>
 800d504:	783b      	ldrb	r3, [r7, #0]
 800d506:	2b30      	cmp	r3, #48	; 0x30
 800d508:	d10a      	bne.n	800d520 <__cvt+0x8c>
 800d50a:	2200      	movs	r2, #0
 800d50c:	2300      	movs	r3, #0
 800d50e:	4620      	mov	r0, r4
 800d510:	4629      	mov	r1, r5
 800d512:	f7f3 fb01 	bl	8000b18 <__aeabi_dcmpeq>
 800d516:	b918      	cbnz	r0, 800d520 <__cvt+0x8c>
 800d518:	f1c6 0601 	rsb	r6, r6, #1
 800d51c:	f8ca 6000 	str.w	r6, [sl]
 800d520:	f8da 3000 	ldr.w	r3, [sl]
 800d524:	4499      	add	r9, r3
 800d526:	2200      	movs	r2, #0
 800d528:	2300      	movs	r3, #0
 800d52a:	4620      	mov	r0, r4
 800d52c:	4629      	mov	r1, r5
 800d52e:	f7f3 faf3 	bl	8000b18 <__aeabi_dcmpeq>
 800d532:	b108      	cbz	r0, 800d538 <__cvt+0xa4>
 800d534:	f8cd 900c 	str.w	r9, [sp, #12]
 800d538:	2230      	movs	r2, #48	; 0x30
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	454b      	cmp	r3, r9
 800d53e:	d307      	bcc.n	800d550 <__cvt+0xbc>
 800d540:	9b03      	ldr	r3, [sp, #12]
 800d542:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d544:	1bdb      	subs	r3, r3, r7
 800d546:	4638      	mov	r0, r7
 800d548:	6013      	str	r3, [r2, #0]
 800d54a:	b004      	add	sp, #16
 800d54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d550:	1c59      	adds	r1, r3, #1
 800d552:	9103      	str	r1, [sp, #12]
 800d554:	701a      	strb	r2, [r3, #0]
 800d556:	e7f0      	b.n	800d53a <__cvt+0xa6>

0800d558 <__exponent>:
 800d558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d55a:	4603      	mov	r3, r0
 800d55c:	2900      	cmp	r1, #0
 800d55e:	bfb8      	it	lt
 800d560:	4249      	neglt	r1, r1
 800d562:	f803 2b02 	strb.w	r2, [r3], #2
 800d566:	bfb4      	ite	lt
 800d568:	222d      	movlt	r2, #45	; 0x2d
 800d56a:	222b      	movge	r2, #43	; 0x2b
 800d56c:	2909      	cmp	r1, #9
 800d56e:	7042      	strb	r2, [r0, #1]
 800d570:	dd2a      	ble.n	800d5c8 <__exponent+0x70>
 800d572:	f10d 0407 	add.w	r4, sp, #7
 800d576:	46a4      	mov	ip, r4
 800d578:	270a      	movs	r7, #10
 800d57a:	46a6      	mov	lr, r4
 800d57c:	460a      	mov	r2, r1
 800d57e:	fb91 f6f7 	sdiv	r6, r1, r7
 800d582:	fb07 1516 	mls	r5, r7, r6, r1
 800d586:	3530      	adds	r5, #48	; 0x30
 800d588:	2a63      	cmp	r2, #99	; 0x63
 800d58a:	f104 34ff 	add.w	r4, r4, #4294967295
 800d58e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d592:	4631      	mov	r1, r6
 800d594:	dcf1      	bgt.n	800d57a <__exponent+0x22>
 800d596:	3130      	adds	r1, #48	; 0x30
 800d598:	f1ae 0502 	sub.w	r5, lr, #2
 800d59c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5a0:	1c44      	adds	r4, r0, #1
 800d5a2:	4629      	mov	r1, r5
 800d5a4:	4561      	cmp	r1, ip
 800d5a6:	d30a      	bcc.n	800d5be <__exponent+0x66>
 800d5a8:	f10d 0209 	add.w	r2, sp, #9
 800d5ac:	eba2 020e 	sub.w	r2, r2, lr
 800d5b0:	4565      	cmp	r5, ip
 800d5b2:	bf88      	it	hi
 800d5b4:	2200      	movhi	r2, #0
 800d5b6:	4413      	add	r3, r2
 800d5b8:	1a18      	subs	r0, r3, r0
 800d5ba:	b003      	add	sp, #12
 800d5bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5c6:	e7ed      	b.n	800d5a4 <__exponent+0x4c>
 800d5c8:	2330      	movs	r3, #48	; 0x30
 800d5ca:	3130      	adds	r1, #48	; 0x30
 800d5cc:	7083      	strb	r3, [r0, #2]
 800d5ce:	70c1      	strb	r1, [r0, #3]
 800d5d0:	1d03      	adds	r3, r0, #4
 800d5d2:	e7f1      	b.n	800d5b8 <__exponent+0x60>

0800d5d4 <_printf_float>:
 800d5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5d8:	ed2d 8b02 	vpush	{d8}
 800d5dc:	b08d      	sub	sp, #52	; 0x34
 800d5de:	460c      	mov	r4, r1
 800d5e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800d5e4:	4616      	mov	r6, r2
 800d5e6:	461f      	mov	r7, r3
 800d5e8:	4605      	mov	r5, r0
 800d5ea:	f001 fa57 	bl	800ea9c <_localeconv_r>
 800d5ee:	f8d0 a000 	ldr.w	sl, [r0]
 800d5f2:	4650      	mov	r0, sl
 800d5f4:	f7f2 fe14 	bl	8000220 <strlen>
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d5fc:	6823      	ldr	r3, [r4, #0]
 800d5fe:	9305      	str	r3, [sp, #20]
 800d600:	f8d8 3000 	ldr.w	r3, [r8]
 800d604:	f894 b018 	ldrb.w	fp, [r4, #24]
 800d608:	3307      	adds	r3, #7
 800d60a:	f023 0307 	bic.w	r3, r3, #7
 800d60e:	f103 0208 	add.w	r2, r3, #8
 800d612:	f8c8 2000 	str.w	r2, [r8]
 800d616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d61e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d622:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d626:	9307      	str	r3, [sp, #28]
 800d628:	f8cd 8018 	str.w	r8, [sp, #24]
 800d62c:	ee08 0a10 	vmov	s16, r0
 800d630:	4b9f      	ldr	r3, [pc, #636]	; (800d8b0 <_printf_float+0x2dc>)
 800d632:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d636:	f04f 32ff 	mov.w	r2, #4294967295
 800d63a:	f7f3 fa9f 	bl	8000b7c <__aeabi_dcmpun>
 800d63e:	bb88      	cbnz	r0, 800d6a4 <_printf_float+0xd0>
 800d640:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d644:	4b9a      	ldr	r3, [pc, #616]	; (800d8b0 <_printf_float+0x2dc>)
 800d646:	f04f 32ff 	mov.w	r2, #4294967295
 800d64a:	f7f3 fa79 	bl	8000b40 <__aeabi_dcmple>
 800d64e:	bb48      	cbnz	r0, 800d6a4 <_printf_float+0xd0>
 800d650:	2200      	movs	r2, #0
 800d652:	2300      	movs	r3, #0
 800d654:	4640      	mov	r0, r8
 800d656:	4649      	mov	r1, r9
 800d658:	f7f3 fa68 	bl	8000b2c <__aeabi_dcmplt>
 800d65c:	b110      	cbz	r0, 800d664 <_printf_float+0x90>
 800d65e:	232d      	movs	r3, #45	; 0x2d
 800d660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d664:	4b93      	ldr	r3, [pc, #588]	; (800d8b4 <_printf_float+0x2e0>)
 800d666:	4894      	ldr	r0, [pc, #592]	; (800d8b8 <_printf_float+0x2e4>)
 800d668:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800d66c:	bf94      	ite	ls
 800d66e:	4698      	movls	r8, r3
 800d670:	4680      	movhi	r8, r0
 800d672:	2303      	movs	r3, #3
 800d674:	6123      	str	r3, [r4, #16]
 800d676:	9b05      	ldr	r3, [sp, #20]
 800d678:	f023 0204 	bic.w	r2, r3, #4
 800d67c:	6022      	str	r2, [r4, #0]
 800d67e:	f04f 0900 	mov.w	r9, #0
 800d682:	9700      	str	r7, [sp, #0]
 800d684:	4633      	mov	r3, r6
 800d686:	aa0b      	add	r2, sp, #44	; 0x2c
 800d688:	4621      	mov	r1, r4
 800d68a:	4628      	mov	r0, r5
 800d68c:	f000 f9d8 	bl	800da40 <_printf_common>
 800d690:	3001      	adds	r0, #1
 800d692:	f040 8090 	bne.w	800d7b6 <_printf_float+0x1e2>
 800d696:	f04f 30ff 	mov.w	r0, #4294967295
 800d69a:	b00d      	add	sp, #52	; 0x34
 800d69c:	ecbd 8b02 	vpop	{d8}
 800d6a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a4:	4642      	mov	r2, r8
 800d6a6:	464b      	mov	r3, r9
 800d6a8:	4640      	mov	r0, r8
 800d6aa:	4649      	mov	r1, r9
 800d6ac:	f7f3 fa66 	bl	8000b7c <__aeabi_dcmpun>
 800d6b0:	b140      	cbz	r0, 800d6c4 <_printf_float+0xf0>
 800d6b2:	464b      	mov	r3, r9
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	bfbc      	itt	lt
 800d6b8:	232d      	movlt	r3, #45	; 0x2d
 800d6ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6be:	487f      	ldr	r0, [pc, #508]	; (800d8bc <_printf_float+0x2e8>)
 800d6c0:	4b7f      	ldr	r3, [pc, #508]	; (800d8c0 <_printf_float+0x2ec>)
 800d6c2:	e7d1      	b.n	800d668 <_printf_float+0x94>
 800d6c4:	6863      	ldr	r3, [r4, #4]
 800d6c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d6ca:	9206      	str	r2, [sp, #24]
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	d13f      	bne.n	800d750 <_printf_float+0x17c>
 800d6d0:	2306      	movs	r3, #6
 800d6d2:	6063      	str	r3, [r4, #4]
 800d6d4:	9b05      	ldr	r3, [sp, #20]
 800d6d6:	6861      	ldr	r1, [r4, #4]
 800d6d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d6dc:	2300      	movs	r3, #0
 800d6de:	9303      	str	r3, [sp, #12]
 800d6e0:	ab0a      	add	r3, sp, #40	; 0x28
 800d6e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d6e6:	ab09      	add	r3, sp, #36	; 0x24
 800d6e8:	ec49 8b10 	vmov	d0, r8, r9
 800d6ec:	9300      	str	r3, [sp, #0]
 800d6ee:	6022      	str	r2, [r4, #0]
 800d6f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d6f4:	4628      	mov	r0, r5
 800d6f6:	f7ff fecd 	bl	800d494 <__cvt>
 800d6fa:	9b06      	ldr	r3, [sp, #24]
 800d6fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d6fe:	2b47      	cmp	r3, #71	; 0x47
 800d700:	4680      	mov	r8, r0
 800d702:	d108      	bne.n	800d716 <_printf_float+0x142>
 800d704:	1cc8      	adds	r0, r1, #3
 800d706:	db02      	blt.n	800d70e <_printf_float+0x13a>
 800d708:	6863      	ldr	r3, [r4, #4]
 800d70a:	4299      	cmp	r1, r3
 800d70c:	dd41      	ble.n	800d792 <_printf_float+0x1be>
 800d70e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d712:	fa5f fb8b 	uxtb.w	fp, fp
 800d716:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d71a:	d820      	bhi.n	800d75e <_printf_float+0x18a>
 800d71c:	3901      	subs	r1, #1
 800d71e:	465a      	mov	r2, fp
 800d720:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d724:	9109      	str	r1, [sp, #36]	; 0x24
 800d726:	f7ff ff17 	bl	800d558 <__exponent>
 800d72a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d72c:	1813      	adds	r3, r2, r0
 800d72e:	2a01      	cmp	r2, #1
 800d730:	4681      	mov	r9, r0
 800d732:	6123      	str	r3, [r4, #16]
 800d734:	dc02      	bgt.n	800d73c <_printf_float+0x168>
 800d736:	6822      	ldr	r2, [r4, #0]
 800d738:	07d2      	lsls	r2, r2, #31
 800d73a:	d501      	bpl.n	800d740 <_printf_float+0x16c>
 800d73c:	3301      	adds	r3, #1
 800d73e:	6123      	str	r3, [r4, #16]
 800d740:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d744:	2b00      	cmp	r3, #0
 800d746:	d09c      	beq.n	800d682 <_printf_float+0xae>
 800d748:	232d      	movs	r3, #45	; 0x2d
 800d74a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d74e:	e798      	b.n	800d682 <_printf_float+0xae>
 800d750:	9a06      	ldr	r2, [sp, #24]
 800d752:	2a47      	cmp	r2, #71	; 0x47
 800d754:	d1be      	bne.n	800d6d4 <_printf_float+0x100>
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1bc      	bne.n	800d6d4 <_printf_float+0x100>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e7b9      	b.n	800d6d2 <_printf_float+0xfe>
 800d75e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d762:	d118      	bne.n	800d796 <_printf_float+0x1c2>
 800d764:	2900      	cmp	r1, #0
 800d766:	6863      	ldr	r3, [r4, #4]
 800d768:	dd0b      	ble.n	800d782 <_printf_float+0x1ae>
 800d76a:	6121      	str	r1, [r4, #16]
 800d76c:	b913      	cbnz	r3, 800d774 <_printf_float+0x1a0>
 800d76e:	6822      	ldr	r2, [r4, #0]
 800d770:	07d0      	lsls	r0, r2, #31
 800d772:	d502      	bpl.n	800d77a <_printf_float+0x1a6>
 800d774:	3301      	adds	r3, #1
 800d776:	440b      	add	r3, r1
 800d778:	6123      	str	r3, [r4, #16]
 800d77a:	65a1      	str	r1, [r4, #88]	; 0x58
 800d77c:	f04f 0900 	mov.w	r9, #0
 800d780:	e7de      	b.n	800d740 <_printf_float+0x16c>
 800d782:	b913      	cbnz	r3, 800d78a <_printf_float+0x1b6>
 800d784:	6822      	ldr	r2, [r4, #0]
 800d786:	07d2      	lsls	r2, r2, #31
 800d788:	d501      	bpl.n	800d78e <_printf_float+0x1ba>
 800d78a:	3302      	adds	r3, #2
 800d78c:	e7f4      	b.n	800d778 <_printf_float+0x1a4>
 800d78e:	2301      	movs	r3, #1
 800d790:	e7f2      	b.n	800d778 <_printf_float+0x1a4>
 800d792:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d798:	4299      	cmp	r1, r3
 800d79a:	db05      	blt.n	800d7a8 <_printf_float+0x1d4>
 800d79c:	6823      	ldr	r3, [r4, #0]
 800d79e:	6121      	str	r1, [r4, #16]
 800d7a0:	07d8      	lsls	r0, r3, #31
 800d7a2:	d5ea      	bpl.n	800d77a <_printf_float+0x1a6>
 800d7a4:	1c4b      	adds	r3, r1, #1
 800d7a6:	e7e7      	b.n	800d778 <_printf_float+0x1a4>
 800d7a8:	2900      	cmp	r1, #0
 800d7aa:	bfd4      	ite	le
 800d7ac:	f1c1 0202 	rsble	r2, r1, #2
 800d7b0:	2201      	movgt	r2, #1
 800d7b2:	4413      	add	r3, r2
 800d7b4:	e7e0      	b.n	800d778 <_printf_float+0x1a4>
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	055a      	lsls	r2, r3, #21
 800d7ba:	d407      	bmi.n	800d7cc <_printf_float+0x1f8>
 800d7bc:	6923      	ldr	r3, [r4, #16]
 800d7be:	4642      	mov	r2, r8
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4628      	mov	r0, r5
 800d7c4:	47b8      	blx	r7
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	d12c      	bne.n	800d824 <_printf_float+0x250>
 800d7ca:	e764      	b.n	800d696 <_printf_float+0xc2>
 800d7cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d7d0:	f240 80e0 	bls.w	800d994 <_printf_float+0x3c0>
 800d7d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d7d8:	2200      	movs	r2, #0
 800d7da:	2300      	movs	r3, #0
 800d7dc:	f7f3 f99c 	bl	8000b18 <__aeabi_dcmpeq>
 800d7e0:	2800      	cmp	r0, #0
 800d7e2:	d034      	beq.n	800d84e <_printf_float+0x27a>
 800d7e4:	4a37      	ldr	r2, [pc, #220]	; (800d8c4 <_printf_float+0x2f0>)
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	4631      	mov	r1, r6
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	47b8      	blx	r7
 800d7ee:	3001      	adds	r0, #1
 800d7f0:	f43f af51 	beq.w	800d696 <_printf_float+0xc2>
 800d7f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	db02      	blt.n	800d802 <_printf_float+0x22e>
 800d7fc:	6823      	ldr	r3, [r4, #0]
 800d7fe:	07d8      	lsls	r0, r3, #31
 800d800:	d510      	bpl.n	800d824 <_printf_float+0x250>
 800d802:	ee18 3a10 	vmov	r3, s16
 800d806:	4652      	mov	r2, sl
 800d808:	4631      	mov	r1, r6
 800d80a:	4628      	mov	r0, r5
 800d80c:	47b8      	blx	r7
 800d80e:	3001      	adds	r0, #1
 800d810:	f43f af41 	beq.w	800d696 <_printf_float+0xc2>
 800d814:	f04f 0800 	mov.w	r8, #0
 800d818:	f104 091a 	add.w	r9, r4, #26
 800d81c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d81e:	3b01      	subs	r3, #1
 800d820:	4543      	cmp	r3, r8
 800d822:	dc09      	bgt.n	800d838 <_printf_float+0x264>
 800d824:	6823      	ldr	r3, [r4, #0]
 800d826:	079b      	lsls	r3, r3, #30
 800d828:	f100 8105 	bmi.w	800da36 <_printf_float+0x462>
 800d82c:	68e0      	ldr	r0, [r4, #12]
 800d82e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d830:	4298      	cmp	r0, r3
 800d832:	bfb8      	it	lt
 800d834:	4618      	movlt	r0, r3
 800d836:	e730      	b.n	800d69a <_printf_float+0xc6>
 800d838:	2301      	movs	r3, #1
 800d83a:	464a      	mov	r2, r9
 800d83c:	4631      	mov	r1, r6
 800d83e:	4628      	mov	r0, r5
 800d840:	47b8      	blx	r7
 800d842:	3001      	adds	r0, #1
 800d844:	f43f af27 	beq.w	800d696 <_printf_float+0xc2>
 800d848:	f108 0801 	add.w	r8, r8, #1
 800d84c:	e7e6      	b.n	800d81c <_printf_float+0x248>
 800d84e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d850:	2b00      	cmp	r3, #0
 800d852:	dc39      	bgt.n	800d8c8 <_printf_float+0x2f4>
 800d854:	4a1b      	ldr	r2, [pc, #108]	; (800d8c4 <_printf_float+0x2f0>)
 800d856:	2301      	movs	r3, #1
 800d858:	4631      	mov	r1, r6
 800d85a:	4628      	mov	r0, r5
 800d85c:	47b8      	blx	r7
 800d85e:	3001      	adds	r0, #1
 800d860:	f43f af19 	beq.w	800d696 <_printf_float+0xc2>
 800d864:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d868:	4313      	orrs	r3, r2
 800d86a:	d102      	bne.n	800d872 <_printf_float+0x29e>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	07d9      	lsls	r1, r3, #31
 800d870:	d5d8      	bpl.n	800d824 <_printf_float+0x250>
 800d872:	ee18 3a10 	vmov	r3, s16
 800d876:	4652      	mov	r2, sl
 800d878:	4631      	mov	r1, r6
 800d87a:	4628      	mov	r0, r5
 800d87c:	47b8      	blx	r7
 800d87e:	3001      	adds	r0, #1
 800d880:	f43f af09 	beq.w	800d696 <_printf_float+0xc2>
 800d884:	f04f 0900 	mov.w	r9, #0
 800d888:	f104 0a1a 	add.w	sl, r4, #26
 800d88c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d88e:	425b      	negs	r3, r3
 800d890:	454b      	cmp	r3, r9
 800d892:	dc01      	bgt.n	800d898 <_printf_float+0x2c4>
 800d894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d896:	e792      	b.n	800d7be <_printf_float+0x1ea>
 800d898:	2301      	movs	r3, #1
 800d89a:	4652      	mov	r2, sl
 800d89c:	4631      	mov	r1, r6
 800d89e:	4628      	mov	r0, r5
 800d8a0:	47b8      	blx	r7
 800d8a2:	3001      	adds	r0, #1
 800d8a4:	f43f aef7 	beq.w	800d696 <_printf_float+0xc2>
 800d8a8:	f109 0901 	add.w	r9, r9, #1
 800d8ac:	e7ee      	b.n	800d88c <_printf_float+0x2b8>
 800d8ae:	bf00      	nop
 800d8b0:	7fefffff 	.word	0x7fefffff
 800d8b4:	08011238 	.word	0x08011238
 800d8b8:	0801123c 	.word	0x0801123c
 800d8bc:	08011244 	.word	0x08011244
 800d8c0:	08011240 	.word	0x08011240
 800d8c4:	08011248 	.word	0x08011248
 800d8c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8cc:	429a      	cmp	r2, r3
 800d8ce:	bfa8      	it	ge
 800d8d0:	461a      	movge	r2, r3
 800d8d2:	2a00      	cmp	r2, #0
 800d8d4:	4691      	mov	r9, r2
 800d8d6:	dc37      	bgt.n	800d948 <_printf_float+0x374>
 800d8d8:	f04f 0b00 	mov.w	fp, #0
 800d8dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8e0:	f104 021a 	add.w	r2, r4, #26
 800d8e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	eba3 0309 	sub.w	r3, r3, r9
 800d8ec:	455b      	cmp	r3, fp
 800d8ee:	dc33      	bgt.n	800d958 <_printf_float+0x384>
 800d8f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d8f4:	429a      	cmp	r2, r3
 800d8f6:	db3b      	blt.n	800d970 <_printf_float+0x39c>
 800d8f8:	6823      	ldr	r3, [r4, #0]
 800d8fa:	07da      	lsls	r2, r3, #31
 800d8fc:	d438      	bmi.n	800d970 <_printf_float+0x39c>
 800d8fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d900:	9a05      	ldr	r2, [sp, #20]
 800d902:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d904:	1a9a      	subs	r2, r3, r2
 800d906:	eba3 0901 	sub.w	r9, r3, r1
 800d90a:	4591      	cmp	r9, r2
 800d90c:	bfa8      	it	ge
 800d90e:	4691      	movge	r9, r2
 800d910:	f1b9 0f00 	cmp.w	r9, #0
 800d914:	dc35      	bgt.n	800d982 <_printf_float+0x3ae>
 800d916:	f04f 0800 	mov.w	r8, #0
 800d91a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d91e:	f104 0a1a 	add.w	sl, r4, #26
 800d922:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d926:	1a9b      	subs	r3, r3, r2
 800d928:	eba3 0309 	sub.w	r3, r3, r9
 800d92c:	4543      	cmp	r3, r8
 800d92e:	f77f af79 	ble.w	800d824 <_printf_float+0x250>
 800d932:	2301      	movs	r3, #1
 800d934:	4652      	mov	r2, sl
 800d936:	4631      	mov	r1, r6
 800d938:	4628      	mov	r0, r5
 800d93a:	47b8      	blx	r7
 800d93c:	3001      	adds	r0, #1
 800d93e:	f43f aeaa 	beq.w	800d696 <_printf_float+0xc2>
 800d942:	f108 0801 	add.w	r8, r8, #1
 800d946:	e7ec      	b.n	800d922 <_printf_float+0x34e>
 800d948:	4613      	mov	r3, r2
 800d94a:	4631      	mov	r1, r6
 800d94c:	4642      	mov	r2, r8
 800d94e:	4628      	mov	r0, r5
 800d950:	47b8      	blx	r7
 800d952:	3001      	adds	r0, #1
 800d954:	d1c0      	bne.n	800d8d8 <_printf_float+0x304>
 800d956:	e69e      	b.n	800d696 <_printf_float+0xc2>
 800d958:	2301      	movs	r3, #1
 800d95a:	4631      	mov	r1, r6
 800d95c:	4628      	mov	r0, r5
 800d95e:	9205      	str	r2, [sp, #20]
 800d960:	47b8      	blx	r7
 800d962:	3001      	adds	r0, #1
 800d964:	f43f ae97 	beq.w	800d696 <_printf_float+0xc2>
 800d968:	9a05      	ldr	r2, [sp, #20]
 800d96a:	f10b 0b01 	add.w	fp, fp, #1
 800d96e:	e7b9      	b.n	800d8e4 <_printf_float+0x310>
 800d970:	ee18 3a10 	vmov	r3, s16
 800d974:	4652      	mov	r2, sl
 800d976:	4631      	mov	r1, r6
 800d978:	4628      	mov	r0, r5
 800d97a:	47b8      	blx	r7
 800d97c:	3001      	adds	r0, #1
 800d97e:	d1be      	bne.n	800d8fe <_printf_float+0x32a>
 800d980:	e689      	b.n	800d696 <_printf_float+0xc2>
 800d982:	9a05      	ldr	r2, [sp, #20]
 800d984:	464b      	mov	r3, r9
 800d986:	4442      	add	r2, r8
 800d988:	4631      	mov	r1, r6
 800d98a:	4628      	mov	r0, r5
 800d98c:	47b8      	blx	r7
 800d98e:	3001      	adds	r0, #1
 800d990:	d1c1      	bne.n	800d916 <_printf_float+0x342>
 800d992:	e680      	b.n	800d696 <_printf_float+0xc2>
 800d994:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d996:	2a01      	cmp	r2, #1
 800d998:	dc01      	bgt.n	800d99e <_printf_float+0x3ca>
 800d99a:	07db      	lsls	r3, r3, #31
 800d99c:	d538      	bpl.n	800da10 <_printf_float+0x43c>
 800d99e:	2301      	movs	r3, #1
 800d9a0:	4642      	mov	r2, r8
 800d9a2:	4631      	mov	r1, r6
 800d9a4:	4628      	mov	r0, r5
 800d9a6:	47b8      	blx	r7
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	f43f ae74 	beq.w	800d696 <_printf_float+0xc2>
 800d9ae:	ee18 3a10 	vmov	r3, s16
 800d9b2:	4652      	mov	r2, sl
 800d9b4:	4631      	mov	r1, r6
 800d9b6:	4628      	mov	r0, r5
 800d9b8:	47b8      	blx	r7
 800d9ba:	3001      	adds	r0, #1
 800d9bc:	f43f ae6b 	beq.w	800d696 <_printf_float+0xc2>
 800d9c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	f7f3 f8a6 	bl	8000b18 <__aeabi_dcmpeq>
 800d9cc:	b9d8      	cbnz	r0, 800da06 <_printf_float+0x432>
 800d9ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9d0:	f108 0201 	add.w	r2, r8, #1
 800d9d4:	3b01      	subs	r3, #1
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4628      	mov	r0, r5
 800d9da:	47b8      	blx	r7
 800d9dc:	3001      	adds	r0, #1
 800d9de:	d10e      	bne.n	800d9fe <_printf_float+0x42a>
 800d9e0:	e659      	b.n	800d696 <_printf_float+0xc2>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4652      	mov	r2, sl
 800d9e6:	4631      	mov	r1, r6
 800d9e8:	4628      	mov	r0, r5
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	f43f ae52 	beq.w	800d696 <_printf_float+0xc2>
 800d9f2:	f108 0801 	add.w	r8, r8, #1
 800d9f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	4543      	cmp	r3, r8
 800d9fc:	dcf1      	bgt.n	800d9e2 <_printf_float+0x40e>
 800d9fe:	464b      	mov	r3, r9
 800da00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da04:	e6dc      	b.n	800d7c0 <_printf_float+0x1ec>
 800da06:	f04f 0800 	mov.w	r8, #0
 800da0a:	f104 0a1a 	add.w	sl, r4, #26
 800da0e:	e7f2      	b.n	800d9f6 <_printf_float+0x422>
 800da10:	2301      	movs	r3, #1
 800da12:	4642      	mov	r2, r8
 800da14:	e7df      	b.n	800d9d6 <_printf_float+0x402>
 800da16:	2301      	movs	r3, #1
 800da18:	464a      	mov	r2, r9
 800da1a:	4631      	mov	r1, r6
 800da1c:	4628      	mov	r0, r5
 800da1e:	47b8      	blx	r7
 800da20:	3001      	adds	r0, #1
 800da22:	f43f ae38 	beq.w	800d696 <_printf_float+0xc2>
 800da26:	f108 0801 	add.w	r8, r8, #1
 800da2a:	68e3      	ldr	r3, [r4, #12]
 800da2c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800da2e:	1a5b      	subs	r3, r3, r1
 800da30:	4543      	cmp	r3, r8
 800da32:	dcf0      	bgt.n	800da16 <_printf_float+0x442>
 800da34:	e6fa      	b.n	800d82c <_printf_float+0x258>
 800da36:	f04f 0800 	mov.w	r8, #0
 800da3a:	f104 0919 	add.w	r9, r4, #25
 800da3e:	e7f4      	b.n	800da2a <_printf_float+0x456>

0800da40 <_printf_common>:
 800da40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da44:	4616      	mov	r6, r2
 800da46:	4699      	mov	r9, r3
 800da48:	688a      	ldr	r2, [r1, #8]
 800da4a:	690b      	ldr	r3, [r1, #16]
 800da4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da50:	4293      	cmp	r3, r2
 800da52:	bfb8      	it	lt
 800da54:	4613      	movlt	r3, r2
 800da56:	6033      	str	r3, [r6, #0]
 800da58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da5c:	4607      	mov	r7, r0
 800da5e:	460c      	mov	r4, r1
 800da60:	b10a      	cbz	r2, 800da66 <_printf_common+0x26>
 800da62:	3301      	adds	r3, #1
 800da64:	6033      	str	r3, [r6, #0]
 800da66:	6823      	ldr	r3, [r4, #0]
 800da68:	0699      	lsls	r1, r3, #26
 800da6a:	bf42      	ittt	mi
 800da6c:	6833      	ldrmi	r3, [r6, #0]
 800da6e:	3302      	addmi	r3, #2
 800da70:	6033      	strmi	r3, [r6, #0]
 800da72:	6825      	ldr	r5, [r4, #0]
 800da74:	f015 0506 	ands.w	r5, r5, #6
 800da78:	d106      	bne.n	800da88 <_printf_common+0x48>
 800da7a:	f104 0a19 	add.w	sl, r4, #25
 800da7e:	68e3      	ldr	r3, [r4, #12]
 800da80:	6832      	ldr	r2, [r6, #0]
 800da82:	1a9b      	subs	r3, r3, r2
 800da84:	42ab      	cmp	r3, r5
 800da86:	dc26      	bgt.n	800dad6 <_printf_common+0x96>
 800da88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da8c:	1e13      	subs	r3, r2, #0
 800da8e:	6822      	ldr	r2, [r4, #0]
 800da90:	bf18      	it	ne
 800da92:	2301      	movne	r3, #1
 800da94:	0692      	lsls	r2, r2, #26
 800da96:	d42b      	bmi.n	800daf0 <_printf_common+0xb0>
 800da98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800da9c:	4649      	mov	r1, r9
 800da9e:	4638      	mov	r0, r7
 800daa0:	47c0      	blx	r8
 800daa2:	3001      	adds	r0, #1
 800daa4:	d01e      	beq.n	800dae4 <_printf_common+0xa4>
 800daa6:	6823      	ldr	r3, [r4, #0]
 800daa8:	68e5      	ldr	r5, [r4, #12]
 800daaa:	6832      	ldr	r2, [r6, #0]
 800daac:	f003 0306 	and.w	r3, r3, #6
 800dab0:	2b04      	cmp	r3, #4
 800dab2:	bf08      	it	eq
 800dab4:	1aad      	subeq	r5, r5, r2
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	6922      	ldr	r2, [r4, #16]
 800daba:	bf0c      	ite	eq
 800dabc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dac0:	2500      	movne	r5, #0
 800dac2:	4293      	cmp	r3, r2
 800dac4:	bfc4      	itt	gt
 800dac6:	1a9b      	subgt	r3, r3, r2
 800dac8:	18ed      	addgt	r5, r5, r3
 800daca:	2600      	movs	r6, #0
 800dacc:	341a      	adds	r4, #26
 800dace:	42b5      	cmp	r5, r6
 800dad0:	d11a      	bne.n	800db08 <_printf_common+0xc8>
 800dad2:	2000      	movs	r0, #0
 800dad4:	e008      	b.n	800dae8 <_printf_common+0xa8>
 800dad6:	2301      	movs	r3, #1
 800dad8:	4652      	mov	r2, sl
 800dada:	4649      	mov	r1, r9
 800dadc:	4638      	mov	r0, r7
 800dade:	47c0      	blx	r8
 800dae0:	3001      	adds	r0, #1
 800dae2:	d103      	bne.n	800daec <_printf_common+0xac>
 800dae4:	f04f 30ff 	mov.w	r0, #4294967295
 800dae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daec:	3501      	adds	r5, #1
 800daee:	e7c6      	b.n	800da7e <_printf_common+0x3e>
 800daf0:	18e1      	adds	r1, r4, r3
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	2030      	movs	r0, #48	; 0x30
 800daf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dafa:	4422      	add	r2, r4
 800dafc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db04:	3302      	adds	r3, #2
 800db06:	e7c7      	b.n	800da98 <_printf_common+0x58>
 800db08:	2301      	movs	r3, #1
 800db0a:	4622      	mov	r2, r4
 800db0c:	4649      	mov	r1, r9
 800db0e:	4638      	mov	r0, r7
 800db10:	47c0      	blx	r8
 800db12:	3001      	adds	r0, #1
 800db14:	d0e6      	beq.n	800dae4 <_printf_common+0xa4>
 800db16:	3601      	adds	r6, #1
 800db18:	e7d9      	b.n	800dace <_printf_common+0x8e>
	...

0800db1c <_printf_i>:
 800db1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	7e0f      	ldrb	r7, [r1, #24]
 800db22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db24:	2f78      	cmp	r7, #120	; 0x78
 800db26:	4691      	mov	r9, r2
 800db28:	4680      	mov	r8, r0
 800db2a:	460c      	mov	r4, r1
 800db2c:	469a      	mov	sl, r3
 800db2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db32:	d807      	bhi.n	800db44 <_printf_i+0x28>
 800db34:	2f62      	cmp	r7, #98	; 0x62
 800db36:	d80a      	bhi.n	800db4e <_printf_i+0x32>
 800db38:	2f00      	cmp	r7, #0
 800db3a:	f000 80d8 	beq.w	800dcee <_printf_i+0x1d2>
 800db3e:	2f58      	cmp	r7, #88	; 0x58
 800db40:	f000 80a3 	beq.w	800dc8a <_printf_i+0x16e>
 800db44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db4c:	e03a      	b.n	800dbc4 <_printf_i+0xa8>
 800db4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db52:	2b15      	cmp	r3, #21
 800db54:	d8f6      	bhi.n	800db44 <_printf_i+0x28>
 800db56:	a101      	add	r1, pc, #4	; (adr r1, 800db5c <_printf_i+0x40>)
 800db58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db5c:	0800dbb5 	.word	0x0800dbb5
 800db60:	0800dbc9 	.word	0x0800dbc9
 800db64:	0800db45 	.word	0x0800db45
 800db68:	0800db45 	.word	0x0800db45
 800db6c:	0800db45 	.word	0x0800db45
 800db70:	0800db45 	.word	0x0800db45
 800db74:	0800dbc9 	.word	0x0800dbc9
 800db78:	0800db45 	.word	0x0800db45
 800db7c:	0800db45 	.word	0x0800db45
 800db80:	0800db45 	.word	0x0800db45
 800db84:	0800db45 	.word	0x0800db45
 800db88:	0800dcd5 	.word	0x0800dcd5
 800db8c:	0800dbf9 	.word	0x0800dbf9
 800db90:	0800dcb7 	.word	0x0800dcb7
 800db94:	0800db45 	.word	0x0800db45
 800db98:	0800db45 	.word	0x0800db45
 800db9c:	0800dcf7 	.word	0x0800dcf7
 800dba0:	0800db45 	.word	0x0800db45
 800dba4:	0800dbf9 	.word	0x0800dbf9
 800dba8:	0800db45 	.word	0x0800db45
 800dbac:	0800db45 	.word	0x0800db45
 800dbb0:	0800dcbf 	.word	0x0800dcbf
 800dbb4:	682b      	ldr	r3, [r5, #0]
 800dbb6:	1d1a      	adds	r2, r3, #4
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	602a      	str	r2, [r5, #0]
 800dbbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbc4:	2301      	movs	r3, #1
 800dbc6:	e0a3      	b.n	800dd10 <_printf_i+0x1f4>
 800dbc8:	6820      	ldr	r0, [r4, #0]
 800dbca:	6829      	ldr	r1, [r5, #0]
 800dbcc:	0606      	lsls	r6, r0, #24
 800dbce:	f101 0304 	add.w	r3, r1, #4
 800dbd2:	d50a      	bpl.n	800dbea <_printf_i+0xce>
 800dbd4:	680e      	ldr	r6, [r1, #0]
 800dbd6:	602b      	str	r3, [r5, #0]
 800dbd8:	2e00      	cmp	r6, #0
 800dbda:	da03      	bge.n	800dbe4 <_printf_i+0xc8>
 800dbdc:	232d      	movs	r3, #45	; 0x2d
 800dbde:	4276      	negs	r6, r6
 800dbe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbe4:	485e      	ldr	r0, [pc, #376]	; (800dd60 <_printf_i+0x244>)
 800dbe6:	230a      	movs	r3, #10
 800dbe8:	e019      	b.n	800dc1e <_printf_i+0x102>
 800dbea:	680e      	ldr	r6, [r1, #0]
 800dbec:	602b      	str	r3, [r5, #0]
 800dbee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbf2:	bf18      	it	ne
 800dbf4:	b236      	sxthne	r6, r6
 800dbf6:	e7ef      	b.n	800dbd8 <_printf_i+0xbc>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	6820      	ldr	r0, [r4, #0]
 800dbfc:	1d19      	adds	r1, r3, #4
 800dbfe:	6029      	str	r1, [r5, #0]
 800dc00:	0601      	lsls	r1, r0, #24
 800dc02:	d501      	bpl.n	800dc08 <_printf_i+0xec>
 800dc04:	681e      	ldr	r6, [r3, #0]
 800dc06:	e002      	b.n	800dc0e <_printf_i+0xf2>
 800dc08:	0646      	lsls	r6, r0, #25
 800dc0a:	d5fb      	bpl.n	800dc04 <_printf_i+0xe8>
 800dc0c:	881e      	ldrh	r6, [r3, #0]
 800dc0e:	4854      	ldr	r0, [pc, #336]	; (800dd60 <_printf_i+0x244>)
 800dc10:	2f6f      	cmp	r7, #111	; 0x6f
 800dc12:	bf0c      	ite	eq
 800dc14:	2308      	moveq	r3, #8
 800dc16:	230a      	movne	r3, #10
 800dc18:	2100      	movs	r1, #0
 800dc1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc1e:	6865      	ldr	r5, [r4, #4]
 800dc20:	60a5      	str	r5, [r4, #8]
 800dc22:	2d00      	cmp	r5, #0
 800dc24:	bfa2      	ittt	ge
 800dc26:	6821      	ldrge	r1, [r4, #0]
 800dc28:	f021 0104 	bicge.w	r1, r1, #4
 800dc2c:	6021      	strge	r1, [r4, #0]
 800dc2e:	b90e      	cbnz	r6, 800dc34 <_printf_i+0x118>
 800dc30:	2d00      	cmp	r5, #0
 800dc32:	d04d      	beq.n	800dcd0 <_printf_i+0x1b4>
 800dc34:	4615      	mov	r5, r2
 800dc36:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc3a:	fb03 6711 	mls	r7, r3, r1, r6
 800dc3e:	5dc7      	ldrb	r7, [r0, r7]
 800dc40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc44:	4637      	mov	r7, r6
 800dc46:	42bb      	cmp	r3, r7
 800dc48:	460e      	mov	r6, r1
 800dc4a:	d9f4      	bls.n	800dc36 <_printf_i+0x11a>
 800dc4c:	2b08      	cmp	r3, #8
 800dc4e:	d10b      	bne.n	800dc68 <_printf_i+0x14c>
 800dc50:	6823      	ldr	r3, [r4, #0]
 800dc52:	07de      	lsls	r6, r3, #31
 800dc54:	d508      	bpl.n	800dc68 <_printf_i+0x14c>
 800dc56:	6923      	ldr	r3, [r4, #16]
 800dc58:	6861      	ldr	r1, [r4, #4]
 800dc5a:	4299      	cmp	r1, r3
 800dc5c:	bfde      	ittt	le
 800dc5e:	2330      	movle	r3, #48	; 0x30
 800dc60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc68:	1b52      	subs	r2, r2, r5
 800dc6a:	6122      	str	r2, [r4, #16]
 800dc6c:	f8cd a000 	str.w	sl, [sp]
 800dc70:	464b      	mov	r3, r9
 800dc72:	aa03      	add	r2, sp, #12
 800dc74:	4621      	mov	r1, r4
 800dc76:	4640      	mov	r0, r8
 800dc78:	f7ff fee2 	bl	800da40 <_printf_common>
 800dc7c:	3001      	adds	r0, #1
 800dc7e:	d14c      	bne.n	800dd1a <_printf_i+0x1fe>
 800dc80:	f04f 30ff 	mov.w	r0, #4294967295
 800dc84:	b004      	add	sp, #16
 800dc86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc8a:	4835      	ldr	r0, [pc, #212]	; (800dd60 <_printf_i+0x244>)
 800dc8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc90:	6829      	ldr	r1, [r5, #0]
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	f851 6b04 	ldr.w	r6, [r1], #4
 800dc98:	6029      	str	r1, [r5, #0]
 800dc9a:	061d      	lsls	r5, r3, #24
 800dc9c:	d514      	bpl.n	800dcc8 <_printf_i+0x1ac>
 800dc9e:	07df      	lsls	r7, r3, #31
 800dca0:	bf44      	itt	mi
 800dca2:	f043 0320 	orrmi.w	r3, r3, #32
 800dca6:	6023      	strmi	r3, [r4, #0]
 800dca8:	b91e      	cbnz	r6, 800dcb2 <_printf_i+0x196>
 800dcaa:	6823      	ldr	r3, [r4, #0]
 800dcac:	f023 0320 	bic.w	r3, r3, #32
 800dcb0:	6023      	str	r3, [r4, #0]
 800dcb2:	2310      	movs	r3, #16
 800dcb4:	e7b0      	b.n	800dc18 <_printf_i+0xfc>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f043 0320 	orr.w	r3, r3, #32
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	2378      	movs	r3, #120	; 0x78
 800dcc0:	4828      	ldr	r0, [pc, #160]	; (800dd64 <_printf_i+0x248>)
 800dcc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcc6:	e7e3      	b.n	800dc90 <_printf_i+0x174>
 800dcc8:	0659      	lsls	r1, r3, #25
 800dcca:	bf48      	it	mi
 800dccc:	b2b6      	uxthmi	r6, r6
 800dcce:	e7e6      	b.n	800dc9e <_printf_i+0x182>
 800dcd0:	4615      	mov	r5, r2
 800dcd2:	e7bb      	b.n	800dc4c <_printf_i+0x130>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	6826      	ldr	r6, [r4, #0]
 800dcd8:	6961      	ldr	r1, [r4, #20]
 800dcda:	1d18      	adds	r0, r3, #4
 800dcdc:	6028      	str	r0, [r5, #0]
 800dcde:	0635      	lsls	r5, r6, #24
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	d501      	bpl.n	800dce8 <_printf_i+0x1cc>
 800dce4:	6019      	str	r1, [r3, #0]
 800dce6:	e002      	b.n	800dcee <_printf_i+0x1d2>
 800dce8:	0670      	lsls	r0, r6, #25
 800dcea:	d5fb      	bpl.n	800dce4 <_printf_i+0x1c8>
 800dcec:	8019      	strh	r1, [r3, #0]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	6123      	str	r3, [r4, #16]
 800dcf2:	4615      	mov	r5, r2
 800dcf4:	e7ba      	b.n	800dc6c <_printf_i+0x150>
 800dcf6:	682b      	ldr	r3, [r5, #0]
 800dcf8:	1d1a      	adds	r2, r3, #4
 800dcfa:	602a      	str	r2, [r5, #0]
 800dcfc:	681d      	ldr	r5, [r3, #0]
 800dcfe:	6862      	ldr	r2, [r4, #4]
 800dd00:	2100      	movs	r1, #0
 800dd02:	4628      	mov	r0, r5
 800dd04:	f7f2 fa94 	bl	8000230 <memchr>
 800dd08:	b108      	cbz	r0, 800dd0e <_printf_i+0x1f2>
 800dd0a:	1b40      	subs	r0, r0, r5
 800dd0c:	6060      	str	r0, [r4, #4]
 800dd0e:	6863      	ldr	r3, [r4, #4]
 800dd10:	6123      	str	r3, [r4, #16]
 800dd12:	2300      	movs	r3, #0
 800dd14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd18:	e7a8      	b.n	800dc6c <_printf_i+0x150>
 800dd1a:	6923      	ldr	r3, [r4, #16]
 800dd1c:	462a      	mov	r2, r5
 800dd1e:	4649      	mov	r1, r9
 800dd20:	4640      	mov	r0, r8
 800dd22:	47d0      	blx	sl
 800dd24:	3001      	adds	r0, #1
 800dd26:	d0ab      	beq.n	800dc80 <_printf_i+0x164>
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	079b      	lsls	r3, r3, #30
 800dd2c:	d413      	bmi.n	800dd56 <_printf_i+0x23a>
 800dd2e:	68e0      	ldr	r0, [r4, #12]
 800dd30:	9b03      	ldr	r3, [sp, #12]
 800dd32:	4298      	cmp	r0, r3
 800dd34:	bfb8      	it	lt
 800dd36:	4618      	movlt	r0, r3
 800dd38:	e7a4      	b.n	800dc84 <_printf_i+0x168>
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	4649      	mov	r1, r9
 800dd40:	4640      	mov	r0, r8
 800dd42:	47d0      	blx	sl
 800dd44:	3001      	adds	r0, #1
 800dd46:	d09b      	beq.n	800dc80 <_printf_i+0x164>
 800dd48:	3501      	adds	r5, #1
 800dd4a:	68e3      	ldr	r3, [r4, #12]
 800dd4c:	9903      	ldr	r1, [sp, #12]
 800dd4e:	1a5b      	subs	r3, r3, r1
 800dd50:	42ab      	cmp	r3, r5
 800dd52:	dcf2      	bgt.n	800dd3a <_printf_i+0x21e>
 800dd54:	e7eb      	b.n	800dd2e <_printf_i+0x212>
 800dd56:	2500      	movs	r5, #0
 800dd58:	f104 0619 	add.w	r6, r4, #25
 800dd5c:	e7f5      	b.n	800dd4a <_printf_i+0x22e>
 800dd5e:	bf00      	nop
 800dd60:	0801124a 	.word	0x0801124a
 800dd64:	0801125b 	.word	0x0801125b

0800dd68 <siprintf>:
 800dd68:	b40e      	push	{r1, r2, r3}
 800dd6a:	b500      	push	{lr}
 800dd6c:	b09c      	sub	sp, #112	; 0x70
 800dd6e:	ab1d      	add	r3, sp, #116	; 0x74
 800dd70:	9002      	str	r0, [sp, #8]
 800dd72:	9006      	str	r0, [sp, #24]
 800dd74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd78:	4809      	ldr	r0, [pc, #36]	; (800dda0 <siprintf+0x38>)
 800dd7a:	9107      	str	r1, [sp, #28]
 800dd7c:	9104      	str	r1, [sp, #16]
 800dd7e:	4909      	ldr	r1, [pc, #36]	; (800dda4 <siprintf+0x3c>)
 800dd80:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd84:	9105      	str	r1, [sp, #20]
 800dd86:	6800      	ldr	r0, [r0, #0]
 800dd88:	9301      	str	r3, [sp, #4]
 800dd8a:	a902      	add	r1, sp, #8
 800dd8c:	f001 fb76 	bl	800f47c <_svfiprintf_r>
 800dd90:	9b02      	ldr	r3, [sp, #8]
 800dd92:	2200      	movs	r2, #0
 800dd94:	701a      	strb	r2, [r3, #0]
 800dd96:	b01c      	add	sp, #112	; 0x70
 800dd98:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd9c:	b003      	add	sp, #12
 800dd9e:	4770      	bx	lr
 800dda0:	2000002c 	.word	0x2000002c
 800dda4:	ffff0208 	.word	0xffff0208

0800dda8 <quorem>:
 800dda8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddac:	6903      	ldr	r3, [r0, #16]
 800ddae:	690c      	ldr	r4, [r1, #16]
 800ddb0:	42a3      	cmp	r3, r4
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	f2c0 8081 	blt.w	800deba <quorem+0x112>
 800ddb8:	3c01      	subs	r4, #1
 800ddba:	f101 0814 	add.w	r8, r1, #20
 800ddbe:	f100 0514 	add.w	r5, r0, #20
 800ddc2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ddc6:	9301      	str	r3, [sp, #4]
 800ddc8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ddcc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ddd8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dddc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dde0:	d331      	bcc.n	800de46 <quorem+0x9e>
 800dde2:	f04f 0e00 	mov.w	lr, #0
 800dde6:	4640      	mov	r0, r8
 800dde8:	46ac      	mov	ip, r5
 800ddea:	46f2      	mov	sl, lr
 800ddec:	f850 2b04 	ldr.w	r2, [r0], #4
 800ddf0:	b293      	uxth	r3, r2
 800ddf2:	fb06 e303 	mla	r3, r6, r3, lr
 800ddf6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ddfa:	b29b      	uxth	r3, r3
 800ddfc:	ebaa 0303 	sub.w	r3, sl, r3
 800de00:	f8dc a000 	ldr.w	sl, [ip]
 800de04:	0c12      	lsrs	r2, r2, #16
 800de06:	fa13 f38a 	uxtah	r3, r3, sl
 800de0a:	fb06 e202 	mla	r2, r6, r2, lr
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	9b00      	ldr	r3, [sp, #0]
 800de12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800de16:	b292      	uxth	r2, r2
 800de18:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800de1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de20:	f8bd 3000 	ldrh.w	r3, [sp]
 800de24:	4581      	cmp	r9, r0
 800de26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de2a:	f84c 3b04 	str.w	r3, [ip], #4
 800de2e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800de32:	d2db      	bcs.n	800ddec <quorem+0x44>
 800de34:	f855 300b 	ldr.w	r3, [r5, fp]
 800de38:	b92b      	cbnz	r3, 800de46 <quorem+0x9e>
 800de3a:	9b01      	ldr	r3, [sp, #4]
 800de3c:	3b04      	subs	r3, #4
 800de3e:	429d      	cmp	r5, r3
 800de40:	461a      	mov	r2, r3
 800de42:	d32e      	bcc.n	800dea2 <quorem+0xfa>
 800de44:	613c      	str	r4, [r7, #16]
 800de46:	4638      	mov	r0, r7
 800de48:	f001 f8c4 	bl	800efd4 <__mcmp>
 800de4c:	2800      	cmp	r0, #0
 800de4e:	db24      	blt.n	800de9a <quorem+0xf2>
 800de50:	3601      	adds	r6, #1
 800de52:	4628      	mov	r0, r5
 800de54:	f04f 0c00 	mov.w	ip, #0
 800de58:	f858 2b04 	ldr.w	r2, [r8], #4
 800de5c:	f8d0 e000 	ldr.w	lr, [r0]
 800de60:	b293      	uxth	r3, r2
 800de62:	ebac 0303 	sub.w	r3, ip, r3
 800de66:	0c12      	lsrs	r2, r2, #16
 800de68:	fa13 f38e 	uxtah	r3, r3, lr
 800de6c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800de70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800de74:	b29b      	uxth	r3, r3
 800de76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de7a:	45c1      	cmp	r9, r8
 800de7c:	f840 3b04 	str.w	r3, [r0], #4
 800de80:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800de84:	d2e8      	bcs.n	800de58 <quorem+0xb0>
 800de86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800de8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800de8e:	b922      	cbnz	r2, 800de9a <quorem+0xf2>
 800de90:	3b04      	subs	r3, #4
 800de92:	429d      	cmp	r5, r3
 800de94:	461a      	mov	r2, r3
 800de96:	d30a      	bcc.n	800deae <quorem+0x106>
 800de98:	613c      	str	r4, [r7, #16]
 800de9a:	4630      	mov	r0, r6
 800de9c:	b003      	add	sp, #12
 800de9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dea2:	6812      	ldr	r2, [r2, #0]
 800dea4:	3b04      	subs	r3, #4
 800dea6:	2a00      	cmp	r2, #0
 800dea8:	d1cc      	bne.n	800de44 <quorem+0x9c>
 800deaa:	3c01      	subs	r4, #1
 800deac:	e7c7      	b.n	800de3e <quorem+0x96>
 800deae:	6812      	ldr	r2, [r2, #0]
 800deb0:	3b04      	subs	r3, #4
 800deb2:	2a00      	cmp	r2, #0
 800deb4:	d1f0      	bne.n	800de98 <quorem+0xf0>
 800deb6:	3c01      	subs	r4, #1
 800deb8:	e7eb      	b.n	800de92 <quorem+0xea>
 800deba:	2000      	movs	r0, #0
 800debc:	e7ee      	b.n	800de9c <quorem+0xf4>
	...

0800dec0 <_dtoa_r>:
 800dec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec4:	ed2d 8b04 	vpush	{d8-d9}
 800dec8:	ec57 6b10 	vmov	r6, r7, d0
 800decc:	b093      	sub	sp, #76	; 0x4c
 800dece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ded0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ded4:	9106      	str	r1, [sp, #24]
 800ded6:	ee10 aa10 	vmov	sl, s0
 800deda:	4604      	mov	r4, r0
 800dedc:	9209      	str	r2, [sp, #36]	; 0x24
 800dede:	930c      	str	r3, [sp, #48]	; 0x30
 800dee0:	46bb      	mov	fp, r7
 800dee2:	b975      	cbnz	r5, 800df02 <_dtoa_r+0x42>
 800dee4:	2010      	movs	r0, #16
 800dee6:	f000 fddd 	bl	800eaa4 <malloc>
 800deea:	4602      	mov	r2, r0
 800deec:	6260      	str	r0, [r4, #36]	; 0x24
 800deee:	b920      	cbnz	r0, 800defa <_dtoa_r+0x3a>
 800def0:	4ba7      	ldr	r3, [pc, #668]	; (800e190 <_dtoa_r+0x2d0>)
 800def2:	21ea      	movs	r1, #234	; 0xea
 800def4:	48a7      	ldr	r0, [pc, #668]	; (800e194 <_dtoa_r+0x2d4>)
 800def6:	f001 fbd1 	bl	800f69c <__assert_func>
 800defa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800defe:	6005      	str	r5, [r0, #0]
 800df00:	60c5      	str	r5, [r0, #12]
 800df02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df04:	6819      	ldr	r1, [r3, #0]
 800df06:	b151      	cbz	r1, 800df1e <_dtoa_r+0x5e>
 800df08:	685a      	ldr	r2, [r3, #4]
 800df0a:	604a      	str	r2, [r1, #4]
 800df0c:	2301      	movs	r3, #1
 800df0e:	4093      	lsls	r3, r2
 800df10:	608b      	str	r3, [r1, #8]
 800df12:	4620      	mov	r0, r4
 800df14:	f000 fe1c 	bl	800eb50 <_Bfree>
 800df18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df1a:	2200      	movs	r2, #0
 800df1c:	601a      	str	r2, [r3, #0]
 800df1e:	1e3b      	subs	r3, r7, #0
 800df20:	bfaa      	itet	ge
 800df22:	2300      	movge	r3, #0
 800df24:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800df28:	f8c8 3000 	strge.w	r3, [r8]
 800df2c:	4b9a      	ldr	r3, [pc, #616]	; (800e198 <_dtoa_r+0x2d8>)
 800df2e:	bfbc      	itt	lt
 800df30:	2201      	movlt	r2, #1
 800df32:	f8c8 2000 	strlt.w	r2, [r8]
 800df36:	ea33 030b 	bics.w	r3, r3, fp
 800df3a:	d11b      	bne.n	800df74 <_dtoa_r+0xb4>
 800df3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df3e:	f242 730f 	movw	r3, #9999	; 0x270f
 800df42:	6013      	str	r3, [r2, #0]
 800df44:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df48:	4333      	orrs	r3, r6
 800df4a:	f000 8592 	beq.w	800ea72 <_dtoa_r+0xbb2>
 800df4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df50:	b963      	cbnz	r3, 800df6c <_dtoa_r+0xac>
 800df52:	4b92      	ldr	r3, [pc, #584]	; (800e19c <_dtoa_r+0x2dc>)
 800df54:	e022      	b.n	800df9c <_dtoa_r+0xdc>
 800df56:	4b92      	ldr	r3, [pc, #584]	; (800e1a0 <_dtoa_r+0x2e0>)
 800df58:	9301      	str	r3, [sp, #4]
 800df5a:	3308      	adds	r3, #8
 800df5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800df5e:	6013      	str	r3, [r2, #0]
 800df60:	9801      	ldr	r0, [sp, #4]
 800df62:	b013      	add	sp, #76	; 0x4c
 800df64:	ecbd 8b04 	vpop	{d8-d9}
 800df68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df6c:	4b8b      	ldr	r3, [pc, #556]	; (800e19c <_dtoa_r+0x2dc>)
 800df6e:	9301      	str	r3, [sp, #4]
 800df70:	3303      	adds	r3, #3
 800df72:	e7f3      	b.n	800df5c <_dtoa_r+0x9c>
 800df74:	2200      	movs	r2, #0
 800df76:	2300      	movs	r3, #0
 800df78:	4650      	mov	r0, sl
 800df7a:	4659      	mov	r1, fp
 800df7c:	f7f2 fdcc 	bl	8000b18 <__aeabi_dcmpeq>
 800df80:	ec4b ab19 	vmov	d9, sl, fp
 800df84:	4680      	mov	r8, r0
 800df86:	b158      	cbz	r0, 800dfa0 <_dtoa_r+0xe0>
 800df88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800df8a:	2301      	movs	r3, #1
 800df8c:	6013      	str	r3, [r2, #0]
 800df8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df90:	2b00      	cmp	r3, #0
 800df92:	f000 856b 	beq.w	800ea6c <_dtoa_r+0xbac>
 800df96:	4883      	ldr	r0, [pc, #524]	; (800e1a4 <_dtoa_r+0x2e4>)
 800df98:	6018      	str	r0, [r3, #0]
 800df9a:	1e43      	subs	r3, r0, #1
 800df9c:	9301      	str	r3, [sp, #4]
 800df9e:	e7df      	b.n	800df60 <_dtoa_r+0xa0>
 800dfa0:	ec4b ab10 	vmov	d0, sl, fp
 800dfa4:	aa10      	add	r2, sp, #64	; 0x40
 800dfa6:	a911      	add	r1, sp, #68	; 0x44
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	f001 f8b9 	bl	800f120 <__d2b>
 800dfae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dfb2:	ee08 0a10 	vmov	s16, r0
 800dfb6:	2d00      	cmp	r5, #0
 800dfb8:	f000 8084 	beq.w	800e0c4 <_dtoa_r+0x204>
 800dfbc:	ee19 3a90 	vmov	r3, s19
 800dfc0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfc4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800dfc8:	4656      	mov	r6, sl
 800dfca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800dfce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dfd2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dfd6:	4b74      	ldr	r3, [pc, #464]	; (800e1a8 <_dtoa_r+0x2e8>)
 800dfd8:	2200      	movs	r2, #0
 800dfda:	4630      	mov	r0, r6
 800dfdc:	4639      	mov	r1, r7
 800dfde:	f7f2 f97b 	bl	80002d8 <__aeabi_dsub>
 800dfe2:	a365      	add	r3, pc, #404	; (adr r3, 800e178 <_dtoa_r+0x2b8>)
 800dfe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfe8:	f7f2 fb2e 	bl	8000648 <__aeabi_dmul>
 800dfec:	a364      	add	r3, pc, #400	; (adr r3, 800e180 <_dtoa_r+0x2c0>)
 800dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dff2:	f7f2 f973 	bl	80002dc <__adddf3>
 800dff6:	4606      	mov	r6, r0
 800dff8:	4628      	mov	r0, r5
 800dffa:	460f      	mov	r7, r1
 800dffc:	f7f2 faba 	bl	8000574 <__aeabi_i2d>
 800e000:	a361      	add	r3, pc, #388	; (adr r3, 800e188 <_dtoa_r+0x2c8>)
 800e002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e006:	f7f2 fb1f 	bl	8000648 <__aeabi_dmul>
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4630      	mov	r0, r6
 800e010:	4639      	mov	r1, r7
 800e012:	f7f2 f963 	bl	80002dc <__adddf3>
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	f7f2 fdc5 	bl	8000ba8 <__aeabi_d2iz>
 800e01e:	2200      	movs	r2, #0
 800e020:	9000      	str	r0, [sp, #0]
 800e022:	2300      	movs	r3, #0
 800e024:	4630      	mov	r0, r6
 800e026:	4639      	mov	r1, r7
 800e028:	f7f2 fd80 	bl	8000b2c <__aeabi_dcmplt>
 800e02c:	b150      	cbz	r0, 800e044 <_dtoa_r+0x184>
 800e02e:	9800      	ldr	r0, [sp, #0]
 800e030:	f7f2 faa0 	bl	8000574 <__aeabi_i2d>
 800e034:	4632      	mov	r2, r6
 800e036:	463b      	mov	r3, r7
 800e038:	f7f2 fd6e 	bl	8000b18 <__aeabi_dcmpeq>
 800e03c:	b910      	cbnz	r0, 800e044 <_dtoa_r+0x184>
 800e03e:	9b00      	ldr	r3, [sp, #0]
 800e040:	3b01      	subs	r3, #1
 800e042:	9300      	str	r3, [sp, #0]
 800e044:	9b00      	ldr	r3, [sp, #0]
 800e046:	2b16      	cmp	r3, #22
 800e048:	d85a      	bhi.n	800e100 <_dtoa_r+0x240>
 800e04a:	9a00      	ldr	r2, [sp, #0]
 800e04c:	4b57      	ldr	r3, [pc, #348]	; (800e1ac <_dtoa_r+0x2ec>)
 800e04e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e056:	ec51 0b19 	vmov	r0, r1, d9
 800e05a:	f7f2 fd67 	bl	8000b2c <__aeabi_dcmplt>
 800e05e:	2800      	cmp	r0, #0
 800e060:	d050      	beq.n	800e104 <_dtoa_r+0x244>
 800e062:	9b00      	ldr	r3, [sp, #0]
 800e064:	3b01      	subs	r3, #1
 800e066:	9300      	str	r3, [sp, #0]
 800e068:	2300      	movs	r3, #0
 800e06a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e06c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e06e:	1b5d      	subs	r5, r3, r5
 800e070:	1e6b      	subs	r3, r5, #1
 800e072:	9305      	str	r3, [sp, #20]
 800e074:	bf45      	ittet	mi
 800e076:	f1c5 0301 	rsbmi	r3, r5, #1
 800e07a:	9304      	strmi	r3, [sp, #16]
 800e07c:	2300      	movpl	r3, #0
 800e07e:	2300      	movmi	r3, #0
 800e080:	bf4c      	ite	mi
 800e082:	9305      	strmi	r3, [sp, #20]
 800e084:	9304      	strpl	r3, [sp, #16]
 800e086:	9b00      	ldr	r3, [sp, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	db3d      	blt.n	800e108 <_dtoa_r+0x248>
 800e08c:	9b05      	ldr	r3, [sp, #20]
 800e08e:	9a00      	ldr	r2, [sp, #0]
 800e090:	920a      	str	r2, [sp, #40]	; 0x28
 800e092:	4413      	add	r3, r2
 800e094:	9305      	str	r3, [sp, #20]
 800e096:	2300      	movs	r3, #0
 800e098:	9307      	str	r3, [sp, #28]
 800e09a:	9b06      	ldr	r3, [sp, #24]
 800e09c:	2b09      	cmp	r3, #9
 800e09e:	f200 8089 	bhi.w	800e1b4 <_dtoa_r+0x2f4>
 800e0a2:	2b05      	cmp	r3, #5
 800e0a4:	bfc4      	itt	gt
 800e0a6:	3b04      	subgt	r3, #4
 800e0a8:	9306      	strgt	r3, [sp, #24]
 800e0aa:	9b06      	ldr	r3, [sp, #24]
 800e0ac:	f1a3 0302 	sub.w	r3, r3, #2
 800e0b0:	bfcc      	ite	gt
 800e0b2:	2500      	movgt	r5, #0
 800e0b4:	2501      	movle	r5, #1
 800e0b6:	2b03      	cmp	r3, #3
 800e0b8:	f200 8087 	bhi.w	800e1ca <_dtoa_r+0x30a>
 800e0bc:	e8df f003 	tbb	[pc, r3]
 800e0c0:	59383a2d 	.word	0x59383a2d
 800e0c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e0c8:	441d      	add	r5, r3
 800e0ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e0ce:	2b20      	cmp	r3, #32
 800e0d0:	bfc1      	itttt	gt
 800e0d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e0d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e0da:	fa0b f303 	lslgt.w	r3, fp, r3
 800e0de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e0e2:	bfda      	itte	le
 800e0e4:	f1c3 0320 	rsble	r3, r3, #32
 800e0e8:	fa06 f003 	lslle.w	r0, r6, r3
 800e0ec:	4318      	orrgt	r0, r3
 800e0ee:	f7f2 fa31 	bl	8000554 <__aeabi_ui2d>
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	4606      	mov	r6, r0
 800e0f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e0fa:	3d01      	subs	r5, #1
 800e0fc:	930e      	str	r3, [sp, #56]	; 0x38
 800e0fe:	e76a      	b.n	800dfd6 <_dtoa_r+0x116>
 800e100:	2301      	movs	r3, #1
 800e102:	e7b2      	b.n	800e06a <_dtoa_r+0x1aa>
 800e104:	900b      	str	r0, [sp, #44]	; 0x2c
 800e106:	e7b1      	b.n	800e06c <_dtoa_r+0x1ac>
 800e108:	9b04      	ldr	r3, [sp, #16]
 800e10a:	9a00      	ldr	r2, [sp, #0]
 800e10c:	1a9b      	subs	r3, r3, r2
 800e10e:	9304      	str	r3, [sp, #16]
 800e110:	4253      	negs	r3, r2
 800e112:	9307      	str	r3, [sp, #28]
 800e114:	2300      	movs	r3, #0
 800e116:	930a      	str	r3, [sp, #40]	; 0x28
 800e118:	e7bf      	b.n	800e09a <_dtoa_r+0x1da>
 800e11a:	2300      	movs	r3, #0
 800e11c:	9308      	str	r3, [sp, #32]
 800e11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e120:	2b00      	cmp	r3, #0
 800e122:	dc55      	bgt.n	800e1d0 <_dtoa_r+0x310>
 800e124:	2301      	movs	r3, #1
 800e126:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e12a:	461a      	mov	r2, r3
 800e12c:	9209      	str	r2, [sp, #36]	; 0x24
 800e12e:	e00c      	b.n	800e14a <_dtoa_r+0x28a>
 800e130:	2301      	movs	r3, #1
 800e132:	e7f3      	b.n	800e11c <_dtoa_r+0x25c>
 800e134:	2300      	movs	r3, #0
 800e136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e138:	9308      	str	r3, [sp, #32]
 800e13a:	9b00      	ldr	r3, [sp, #0]
 800e13c:	4413      	add	r3, r2
 800e13e:	9302      	str	r3, [sp, #8]
 800e140:	3301      	adds	r3, #1
 800e142:	2b01      	cmp	r3, #1
 800e144:	9303      	str	r3, [sp, #12]
 800e146:	bfb8      	it	lt
 800e148:	2301      	movlt	r3, #1
 800e14a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e14c:	2200      	movs	r2, #0
 800e14e:	6042      	str	r2, [r0, #4]
 800e150:	2204      	movs	r2, #4
 800e152:	f102 0614 	add.w	r6, r2, #20
 800e156:	429e      	cmp	r6, r3
 800e158:	6841      	ldr	r1, [r0, #4]
 800e15a:	d93d      	bls.n	800e1d8 <_dtoa_r+0x318>
 800e15c:	4620      	mov	r0, r4
 800e15e:	f000 fcb7 	bl	800ead0 <_Balloc>
 800e162:	9001      	str	r0, [sp, #4]
 800e164:	2800      	cmp	r0, #0
 800e166:	d13b      	bne.n	800e1e0 <_dtoa_r+0x320>
 800e168:	4b11      	ldr	r3, [pc, #68]	; (800e1b0 <_dtoa_r+0x2f0>)
 800e16a:	4602      	mov	r2, r0
 800e16c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e170:	e6c0      	b.n	800def4 <_dtoa_r+0x34>
 800e172:	2301      	movs	r3, #1
 800e174:	e7df      	b.n	800e136 <_dtoa_r+0x276>
 800e176:	bf00      	nop
 800e178:	636f4361 	.word	0x636f4361
 800e17c:	3fd287a7 	.word	0x3fd287a7
 800e180:	8b60c8b3 	.word	0x8b60c8b3
 800e184:	3fc68a28 	.word	0x3fc68a28
 800e188:	509f79fb 	.word	0x509f79fb
 800e18c:	3fd34413 	.word	0x3fd34413
 800e190:	08011279 	.word	0x08011279
 800e194:	08011290 	.word	0x08011290
 800e198:	7ff00000 	.word	0x7ff00000
 800e19c:	08011275 	.word	0x08011275
 800e1a0:	0801126c 	.word	0x0801126c
 800e1a4:	08011249 	.word	0x08011249
 800e1a8:	3ff80000 	.word	0x3ff80000
 800e1ac:	08011380 	.word	0x08011380
 800e1b0:	080112eb 	.word	0x080112eb
 800e1b4:	2501      	movs	r5, #1
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	9306      	str	r3, [sp, #24]
 800e1ba:	9508      	str	r5, [sp, #32]
 800e1bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e1c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	2312      	movs	r3, #18
 800e1c8:	e7b0      	b.n	800e12c <_dtoa_r+0x26c>
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	9308      	str	r3, [sp, #32]
 800e1ce:	e7f5      	b.n	800e1bc <_dtoa_r+0x2fc>
 800e1d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e1d6:	e7b8      	b.n	800e14a <_dtoa_r+0x28a>
 800e1d8:	3101      	adds	r1, #1
 800e1da:	6041      	str	r1, [r0, #4]
 800e1dc:	0052      	lsls	r2, r2, #1
 800e1de:	e7b8      	b.n	800e152 <_dtoa_r+0x292>
 800e1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1e2:	9a01      	ldr	r2, [sp, #4]
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	9b03      	ldr	r3, [sp, #12]
 800e1e8:	2b0e      	cmp	r3, #14
 800e1ea:	f200 809d 	bhi.w	800e328 <_dtoa_r+0x468>
 800e1ee:	2d00      	cmp	r5, #0
 800e1f0:	f000 809a 	beq.w	800e328 <_dtoa_r+0x468>
 800e1f4:	9b00      	ldr	r3, [sp, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	dd32      	ble.n	800e260 <_dtoa_r+0x3a0>
 800e1fa:	4ab7      	ldr	r2, [pc, #732]	; (800e4d8 <_dtoa_r+0x618>)
 800e1fc:	f003 030f 	and.w	r3, r3, #15
 800e200:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e204:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e208:	9b00      	ldr	r3, [sp, #0]
 800e20a:	05d8      	lsls	r0, r3, #23
 800e20c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e210:	d516      	bpl.n	800e240 <_dtoa_r+0x380>
 800e212:	4bb2      	ldr	r3, [pc, #712]	; (800e4dc <_dtoa_r+0x61c>)
 800e214:	ec51 0b19 	vmov	r0, r1, d9
 800e218:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e21c:	f7f2 fb3e 	bl	800089c <__aeabi_ddiv>
 800e220:	f007 070f 	and.w	r7, r7, #15
 800e224:	4682      	mov	sl, r0
 800e226:	468b      	mov	fp, r1
 800e228:	2503      	movs	r5, #3
 800e22a:	4eac      	ldr	r6, [pc, #688]	; (800e4dc <_dtoa_r+0x61c>)
 800e22c:	b957      	cbnz	r7, 800e244 <_dtoa_r+0x384>
 800e22e:	4642      	mov	r2, r8
 800e230:	464b      	mov	r3, r9
 800e232:	4650      	mov	r0, sl
 800e234:	4659      	mov	r1, fp
 800e236:	f7f2 fb31 	bl	800089c <__aeabi_ddiv>
 800e23a:	4682      	mov	sl, r0
 800e23c:	468b      	mov	fp, r1
 800e23e:	e028      	b.n	800e292 <_dtoa_r+0x3d2>
 800e240:	2502      	movs	r5, #2
 800e242:	e7f2      	b.n	800e22a <_dtoa_r+0x36a>
 800e244:	07f9      	lsls	r1, r7, #31
 800e246:	d508      	bpl.n	800e25a <_dtoa_r+0x39a>
 800e248:	4640      	mov	r0, r8
 800e24a:	4649      	mov	r1, r9
 800e24c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e250:	f7f2 f9fa 	bl	8000648 <__aeabi_dmul>
 800e254:	3501      	adds	r5, #1
 800e256:	4680      	mov	r8, r0
 800e258:	4689      	mov	r9, r1
 800e25a:	107f      	asrs	r7, r7, #1
 800e25c:	3608      	adds	r6, #8
 800e25e:	e7e5      	b.n	800e22c <_dtoa_r+0x36c>
 800e260:	f000 809b 	beq.w	800e39a <_dtoa_r+0x4da>
 800e264:	9b00      	ldr	r3, [sp, #0]
 800e266:	4f9d      	ldr	r7, [pc, #628]	; (800e4dc <_dtoa_r+0x61c>)
 800e268:	425e      	negs	r6, r3
 800e26a:	4b9b      	ldr	r3, [pc, #620]	; (800e4d8 <_dtoa_r+0x618>)
 800e26c:	f006 020f 	and.w	r2, r6, #15
 800e270:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e278:	ec51 0b19 	vmov	r0, r1, d9
 800e27c:	f7f2 f9e4 	bl	8000648 <__aeabi_dmul>
 800e280:	1136      	asrs	r6, r6, #4
 800e282:	4682      	mov	sl, r0
 800e284:	468b      	mov	fp, r1
 800e286:	2300      	movs	r3, #0
 800e288:	2502      	movs	r5, #2
 800e28a:	2e00      	cmp	r6, #0
 800e28c:	d17a      	bne.n	800e384 <_dtoa_r+0x4c4>
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d1d3      	bne.n	800e23a <_dtoa_r+0x37a>
 800e292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e294:	2b00      	cmp	r3, #0
 800e296:	f000 8082 	beq.w	800e39e <_dtoa_r+0x4de>
 800e29a:	4b91      	ldr	r3, [pc, #580]	; (800e4e0 <_dtoa_r+0x620>)
 800e29c:	2200      	movs	r2, #0
 800e29e:	4650      	mov	r0, sl
 800e2a0:	4659      	mov	r1, fp
 800e2a2:	f7f2 fc43 	bl	8000b2c <__aeabi_dcmplt>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	d079      	beq.n	800e39e <_dtoa_r+0x4de>
 800e2aa:	9b03      	ldr	r3, [sp, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d076      	beq.n	800e39e <_dtoa_r+0x4de>
 800e2b0:	9b02      	ldr	r3, [sp, #8]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	dd36      	ble.n	800e324 <_dtoa_r+0x464>
 800e2b6:	9b00      	ldr	r3, [sp, #0]
 800e2b8:	4650      	mov	r0, sl
 800e2ba:	4659      	mov	r1, fp
 800e2bc:	1e5f      	subs	r7, r3, #1
 800e2be:	2200      	movs	r2, #0
 800e2c0:	4b88      	ldr	r3, [pc, #544]	; (800e4e4 <_dtoa_r+0x624>)
 800e2c2:	f7f2 f9c1 	bl	8000648 <__aeabi_dmul>
 800e2c6:	9e02      	ldr	r6, [sp, #8]
 800e2c8:	4682      	mov	sl, r0
 800e2ca:	468b      	mov	fp, r1
 800e2cc:	3501      	adds	r5, #1
 800e2ce:	4628      	mov	r0, r5
 800e2d0:	f7f2 f950 	bl	8000574 <__aeabi_i2d>
 800e2d4:	4652      	mov	r2, sl
 800e2d6:	465b      	mov	r3, fp
 800e2d8:	f7f2 f9b6 	bl	8000648 <__aeabi_dmul>
 800e2dc:	4b82      	ldr	r3, [pc, #520]	; (800e4e8 <_dtoa_r+0x628>)
 800e2de:	2200      	movs	r2, #0
 800e2e0:	f7f1 fffc 	bl	80002dc <__adddf3>
 800e2e4:	46d0      	mov	r8, sl
 800e2e6:	46d9      	mov	r9, fp
 800e2e8:	4682      	mov	sl, r0
 800e2ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e2ee:	2e00      	cmp	r6, #0
 800e2f0:	d158      	bne.n	800e3a4 <_dtoa_r+0x4e4>
 800e2f2:	4b7e      	ldr	r3, [pc, #504]	; (800e4ec <_dtoa_r+0x62c>)
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	4640      	mov	r0, r8
 800e2f8:	4649      	mov	r1, r9
 800e2fa:	f7f1 ffed 	bl	80002d8 <__aeabi_dsub>
 800e2fe:	4652      	mov	r2, sl
 800e300:	465b      	mov	r3, fp
 800e302:	4680      	mov	r8, r0
 800e304:	4689      	mov	r9, r1
 800e306:	f7f2 fc2f 	bl	8000b68 <__aeabi_dcmpgt>
 800e30a:	2800      	cmp	r0, #0
 800e30c:	f040 8295 	bne.w	800e83a <_dtoa_r+0x97a>
 800e310:	4652      	mov	r2, sl
 800e312:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e316:	4640      	mov	r0, r8
 800e318:	4649      	mov	r1, r9
 800e31a:	f7f2 fc07 	bl	8000b2c <__aeabi_dcmplt>
 800e31e:	2800      	cmp	r0, #0
 800e320:	f040 8289 	bne.w	800e836 <_dtoa_r+0x976>
 800e324:	ec5b ab19 	vmov	sl, fp, d9
 800e328:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f2c0 8148 	blt.w	800e5c0 <_dtoa_r+0x700>
 800e330:	9a00      	ldr	r2, [sp, #0]
 800e332:	2a0e      	cmp	r2, #14
 800e334:	f300 8144 	bgt.w	800e5c0 <_dtoa_r+0x700>
 800e338:	4b67      	ldr	r3, [pc, #412]	; (800e4d8 <_dtoa_r+0x618>)
 800e33a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e33e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e344:	2b00      	cmp	r3, #0
 800e346:	f280 80d5 	bge.w	800e4f4 <_dtoa_r+0x634>
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	f300 80d1 	bgt.w	800e4f4 <_dtoa_r+0x634>
 800e352:	f040 826f 	bne.w	800e834 <_dtoa_r+0x974>
 800e356:	4b65      	ldr	r3, [pc, #404]	; (800e4ec <_dtoa_r+0x62c>)
 800e358:	2200      	movs	r2, #0
 800e35a:	4640      	mov	r0, r8
 800e35c:	4649      	mov	r1, r9
 800e35e:	f7f2 f973 	bl	8000648 <__aeabi_dmul>
 800e362:	4652      	mov	r2, sl
 800e364:	465b      	mov	r3, fp
 800e366:	f7f2 fbf5 	bl	8000b54 <__aeabi_dcmpge>
 800e36a:	9e03      	ldr	r6, [sp, #12]
 800e36c:	4637      	mov	r7, r6
 800e36e:	2800      	cmp	r0, #0
 800e370:	f040 8245 	bne.w	800e7fe <_dtoa_r+0x93e>
 800e374:	9d01      	ldr	r5, [sp, #4]
 800e376:	2331      	movs	r3, #49	; 0x31
 800e378:	f805 3b01 	strb.w	r3, [r5], #1
 800e37c:	9b00      	ldr	r3, [sp, #0]
 800e37e:	3301      	adds	r3, #1
 800e380:	9300      	str	r3, [sp, #0]
 800e382:	e240      	b.n	800e806 <_dtoa_r+0x946>
 800e384:	07f2      	lsls	r2, r6, #31
 800e386:	d505      	bpl.n	800e394 <_dtoa_r+0x4d4>
 800e388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e38c:	f7f2 f95c 	bl	8000648 <__aeabi_dmul>
 800e390:	3501      	adds	r5, #1
 800e392:	2301      	movs	r3, #1
 800e394:	1076      	asrs	r6, r6, #1
 800e396:	3708      	adds	r7, #8
 800e398:	e777      	b.n	800e28a <_dtoa_r+0x3ca>
 800e39a:	2502      	movs	r5, #2
 800e39c:	e779      	b.n	800e292 <_dtoa_r+0x3d2>
 800e39e:	9f00      	ldr	r7, [sp, #0]
 800e3a0:	9e03      	ldr	r6, [sp, #12]
 800e3a2:	e794      	b.n	800e2ce <_dtoa_r+0x40e>
 800e3a4:	9901      	ldr	r1, [sp, #4]
 800e3a6:	4b4c      	ldr	r3, [pc, #304]	; (800e4d8 <_dtoa_r+0x618>)
 800e3a8:	4431      	add	r1, r6
 800e3aa:	910d      	str	r1, [sp, #52]	; 0x34
 800e3ac:	9908      	ldr	r1, [sp, #32]
 800e3ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e3b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e3b6:	2900      	cmp	r1, #0
 800e3b8:	d043      	beq.n	800e442 <_dtoa_r+0x582>
 800e3ba:	494d      	ldr	r1, [pc, #308]	; (800e4f0 <_dtoa_r+0x630>)
 800e3bc:	2000      	movs	r0, #0
 800e3be:	f7f2 fa6d 	bl	800089c <__aeabi_ddiv>
 800e3c2:	4652      	mov	r2, sl
 800e3c4:	465b      	mov	r3, fp
 800e3c6:	f7f1 ff87 	bl	80002d8 <__aeabi_dsub>
 800e3ca:	9d01      	ldr	r5, [sp, #4]
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	468b      	mov	fp, r1
 800e3d0:	4649      	mov	r1, r9
 800e3d2:	4640      	mov	r0, r8
 800e3d4:	f7f2 fbe8 	bl	8000ba8 <__aeabi_d2iz>
 800e3d8:	4606      	mov	r6, r0
 800e3da:	f7f2 f8cb 	bl	8000574 <__aeabi_i2d>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	4640      	mov	r0, r8
 800e3e4:	4649      	mov	r1, r9
 800e3e6:	f7f1 ff77 	bl	80002d8 <__aeabi_dsub>
 800e3ea:	3630      	adds	r6, #48	; 0x30
 800e3ec:	f805 6b01 	strb.w	r6, [r5], #1
 800e3f0:	4652      	mov	r2, sl
 800e3f2:	465b      	mov	r3, fp
 800e3f4:	4680      	mov	r8, r0
 800e3f6:	4689      	mov	r9, r1
 800e3f8:	f7f2 fb98 	bl	8000b2c <__aeabi_dcmplt>
 800e3fc:	2800      	cmp	r0, #0
 800e3fe:	d163      	bne.n	800e4c8 <_dtoa_r+0x608>
 800e400:	4642      	mov	r2, r8
 800e402:	464b      	mov	r3, r9
 800e404:	4936      	ldr	r1, [pc, #216]	; (800e4e0 <_dtoa_r+0x620>)
 800e406:	2000      	movs	r0, #0
 800e408:	f7f1 ff66 	bl	80002d8 <__aeabi_dsub>
 800e40c:	4652      	mov	r2, sl
 800e40e:	465b      	mov	r3, fp
 800e410:	f7f2 fb8c 	bl	8000b2c <__aeabi_dcmplt>
 800e414:	2800      	cmp	r0, #0
 800e416:	f040 80b5 	bne.w	800e584 <_dtoa_r+0x6c4>
 800e41a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e41c:	429d      	cmp	r5, r3
 800e41e:	d081      	beq.n	800e324 <_dtoa_r+0x464>
 800e420:	4b30      	ldr	r3, [pc, #192]	; (800e4e4 <_dtoa_r+0x624>)
 800e422:	2200      	movs	r2, #0
 800e424:	4650      	mov	r0, sl
 800e426:	4659      	mov	r1, fp
 800e428:	f7f2 f90e 	bl	8000648 <__aeabi_dmul>
 800e42c:	4b2d      	ldr	r3, [pc, #180]	; (800e4e4 <_dtoa_r+0x624>)
 800e42e:	4682      	mov	sl, r0
 800e430:	468b      	mov	fp, r1
 800e432:	4640      	mov	r0, r8
 800e434:	4649      	mov	r1, r9
 800e436:	2200      	movs	r2, #0
 800e438:	f7f2 f906 	bl	8000648 <__aeabi_dmul>
 800e43c:	4680      	mov	r8, r0
 800e43e:	4689      	mov	r9, r1
 800e440:	e7c6      	b.n	800e3d0 <_dtoa_r+0x510>
 800e442:	4650      	mov	r0, sl
 800e444:	4659      	mov	r1, fp
 800e446:	f7f2 f8ff 	bl	8000648 <__aeabi_dmul>
 800e44a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e44c:	9d01      	ldr	r5, [sp, #4]
 800e44e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e450:	4682      	mov	sl, r0
 800e452:	468b      	mov	fp, r1
 800e454:	4649      	mov	r1, r9
 800e456:	4640      	mov	r0, r8
 800e458:	f7f2 fba6 	bl	8000ba8 <__aeabi_d2iz>
 800e45c:	4606      	mov	r6, r0
 800e45e:	f7f2 f889 	bl	8000574 <__aeabi_i2d>
 800e462:	3630      	adds	r6, #48	; 0x30
 800e464:	4602      	mov	r2, r0
 800e466:	460b      	mov	r3, r1
 800e468:	4640      	mov	r0, r8
 800e46a:	4649      	mov	r1, r9
 800e46c:	f7f1 ff34 	bl	80002d8 <__aeabi_dsub>
 800e470:	f805 6b01 	strb.w	r6, [r5], #1
 800e474:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e476:	429d      	cmp	r5, r3
 800e478:	4680      	mov	r8, r0
 800e47a:	4689      	mov	r9, r1
 800e47c:	f04f 0200 	mov.w	r2, #0
 800e480:	d124      	bne.n	800e4cc <_dtoa_r+0x60c>
 800e482:	4b1b      	ldr	r3, [pc, #108]	; (800e4f0 <_dtoa_r+0x630>)
 800e484:	4650      	mov	r0, sl
 800e486:	4659      	mov	r1, fp
 800e488:	f7f1 ff28 	bl	80002dc <__adddf3>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4640      	mov	r0, r8
 800e492:	4649      	mov	r1, r9
 800e494:	f7f2 fb68 	bl	8000b68 <__aeabi_dcmpgt>
 800e498:	2800      	cmp	r0, #0
 800e49a:	d173      	bne.n	800e584 <_dtoa_r+0x6c4>
 800e49c:	4652      	mov	r2, sl
 800e49e:	465b      	mov	r3, fp
 800e4a0:	4913      	ldr	r1, [pc, #76]	; (800e4f0 <_dtoa_r+0x630>)
 800e4a2:	2000      	movs	r0, #0
 800e4a4:	f7f1 ff18 	bl	80002d8 <__aeabi_dsub>
 800e4a8:	4602      	mov	r2, r0
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	4640      	mov	r0, r8
 800e4ae:	4649      	mov	r1, r9
 800e4b0:	f7f2 fb3c 	bl	8000b2c <__aeabi_dcmplt>
 800e4b4:	2800      	cmp	r0, #0
 800e4b6:	f43f af35 	beq.w	800e324 <_dtoa_r+0x464>
 800e4ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e4bc:	1e6b      	subs	r3, r5, #1
 800e4be:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e4c4:	2b30      	cmp	r3, #48	; 0x30
 800e4c6:	d0f8      	beq.n	800e4ba <_dtoa_r+0x5fa>
 800e4c8:	9700      	str	r7, [sp, #0]
 800e4ca:	e049      	b.n	800e560 <_dtoa_r+0x6a0>
 800e4cc:	4b05      	ldr	r3, [pc, #20]	; (800e4e4 <_dtoa_r+0x624>)
 800e4ce:	f7f2 f8bb 	bl	8000648 <__aeabi_dmul>
 800e4d2:	4680      	mov	r8, r0
 800e4d4:	4689      	mov	r9, r1
 800e4d6:	e7bd      	b.n	800e454 <_dtoa_r+0x594>
 800e4d8:	08011380 	.word	0x08011380
 800e4dc:	08011358 	.word	0x08011358
 800e4e0:	3ff00000 	.word	0x3ff00000
 800e4e4:	40240000 	.word	0x40240000
 800e4e8:	401c0000 	.word	0x401c0000
 800e4ec:	40140000 	.word	0x40140000
 800e4f0:	3fe00000 	.word	0x3fe00000
 800e4f4:	9d01      	ldr	r5, [sp, #4]
 800e4f6:	4656      	mov	r6, sl
 800e4f8:	465f      	mov	r7, fp
 800e4fa:	4642      	mov	r2, r8
 800e4fc:	464b      	mov	r3, r9
 800e4fe:	4630      	mov	r0, r6
 800e500:	4639      	mov	r1, r7
 800e502:	f7f2 f9cb 	bl	800089c <__aeabi_ddiv>
 800e506:	f7f2 fb4f 	bl	8000ba8 <__aeabi_d2iz>
 800e50a:	4682      	mov	sl, r0
 800e50c:	f7f2 f832 	bl	8000574 <__aeabi_i2d>
 800e510:	4642      	mov	r2, r8
 800e512:	464b      	mov	r3, r9
 800e514:	f7f2 f898 	bl	8000648 <__aeabi_dmul>
 800e518:	4602      	mov	r2, r0
 800e51a:	460b      	mov	r3, r1
 800e51c:	4630      	mov	r0, r6
 800e51e:	4639      	mov	r1, r7
 800e520:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e524:	f7f1 fed8 	bl	80002d8 <__aeabi_dsub>
 800e528:	f805 6b01 	strb.w	r6, [r5], #1
 800e52c:	9e01      	ldr	r6, [sp, #4]
 800e52e:	9f03      	ldr	r7, [sp, #12]
 800e530:	1bae      	subs	r6, r5, r6
 800e532:	42b7      	cmp	r7, r6
 800e534:	4602      	mov	r2, r0
 800e536:	460b      	mov	r3, r1
 800e538:	d135      	bne.n	800e5a6 <_dtoa_r+0x6e6>
 800e53a:	f7f1 fecf 	bl	80002dc <__adddf3>
 800e53e:	4642      	mov	r2, r8
 800e540:	464b      	mov	r3, r9
 800e542:	4606      	mov	r6, r0
 800e544:	460f      	mov	r7, r1
 800e546:	f7f2 fb0f 	bl	8000b68 <__aeabi_dcmpgt>
 800e54a:	b9d0      	cbnz	r0, 800e582 <_dtoa_r+0x6c2>
 800e54c:	4642      	mov	r2, r8
 800e54e:	464b      	mov	r3, r9
 800e550:	4630      	mov	r0, r6
 800e552:	4639      	mov	r1, r7
 800e554:	f7f2 fae0 	bl	8000b18 <__aeabi_dcmpeq>
 800e558:	b110      	cbz	r0, 800e560 <_dtoa_r+0x6a0>
 800e55a:	f01a 0f01 	tst.w	sl, #1
 800e55e:	d110      	bne.n	800e582 <_dtoa_r+0x6c2>
 800e560:	4620      	mov	r0, r4
 800e562:	ee18 1a10 	vmov	r1, s16
 800e566:	f000 faf3 	bl	800eb50 <_Bfree>
 800e56a:	2300      	movs	r3, #0
 800e56c:	9800      	ldr	r0, [sp, #0]
 800e56e:	702b      	strb	r3, [r5, #0]
 800e570:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e572:	3001      	adds	r0, #1
 800e574:	6018      	str	r0, [r3, #0]
 800e576:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e578:	2b00      	cmp	r3, #0
 800e57a:	f43f acf1 	beq.w	800df60 <_dtoa_r+0xa0>
 800e57e:	601d      	str	r5, [r3, #0]
 800e580:	e4ee      	b.n	800df60 <_dtoa_r+0xa0>
 800e582:	9f00      	ldr	r7, [sp, #0]
 800e584:	462b      	mov	r3, r5
 800e586:	461d      	mov	r5, r3
 800e588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e58c:	2a39      	cmp	r2, #57	; 0x39
 800e58e:	d106      	bne.n	800e59e <_dtoa_r+0x6de>
 800e590:	9a01      	ldr	r2, [sp, #4]
 800e592:	429a      	cmp	r2, r3
 800e594:	d1f7      	bne.n	800e586 <_dtoa_r+0x6c6>
 800e596:	9901      	ldr	r1, [sp, #4]
 800e598:	2230      	movs	r2, #48	; 0x30
 800e59a:	3701      	adds	r7, #1
 800e59c:	700a      	strb	r2, [r1, #0]
 800e59e:	781a      	ldrb	r2, [r3, #0]
 800e5a0:	3201      	adds	r2, #1
 800e5a2:	701a      	strb	r2, [r3, #0]
 800e5a4:	e790      	b.n	800e4c8 <_dtoa_r+0x608>
 800e5a6:	4ba6      	ldr	r3, [pc, #664]	; (800e840 <_dtoa_r+0x980>)
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	f7f2 f84d 	bl	8000648 <__aeabi_dmul>
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	460f      	mov	r7, r1
 800e5b6:	f7f2 faaf 	bl	8000b18 <__aeabi_dcmpeq>
 800e5ba:	2800      	cmp	r0, #0
 800e5bc:	d09d      	beq.n	800e4fa <_dtoa_r+0x63a>
 800e5be:	e7cf      	b.n	800e560 <_dtoa_r+0x6a0>
 800e5c0:	9a08      	ldr	r2, [sp, #32]
 800e5c2:	2a00      	cmp	r2, #0
 800e5c4:	f000 80d7 	beq.w	800e776 <_dtoa_r+0x8b6>
 800e5c8:	9a06      	ldr	r2, [sp, #24]
 800e5ca:	2a01      	cmp	r2, #1
 800e5cc:	f300 80ba 	bgt.w	800e744 <_dtoa_r+0x884>
 800e5d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e5d2:	2a00      	cmp	r2, #0
 800e5d4:	f000 80b2 	beq.w	800e73c <_dtoa_r+0x87c>
 800e5d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e5dc:	9e07      	ldr	r6, [sp, #28]
 800e5de:	9d04      	ldr	r5, [sp, #16]
 800e5e0:	9a04      	ldr	r2, [sp, #16]
 800e5e2:	441a      	add	r2, r3
 800e5e4:	9204      	str	r2, [sp, #16]
 800e5e6:	9a05      	ldr	r2, [sp, #20]
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	441a      	add	r2, r3
 800e5ec:	4620      	mov	r0, r4
 800e5ee:	9205      	str	r2, [sp, #20]
 800e5f0:	f000 fb66 	bl	800ecc0 <__i2b>
 800e5f4:	4607      	mov	r7, r0
 800e5f6:	2d00      	cmp	r5, #0
 800e5f8:	dd0c      	ble.n	800e614 <_dtoa_r+0x754>
 800e5fa:	9b05      	ldr	r3, [sp, #20]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	dd09      	ble.n	800e614 <_dtoa_r+0x754>
 800e600:	42ab      	cmp	r3, r5
 800e602:	9a04      	ldr	r2, [sp, #16]
 800e604:	bfa8      	it	ge
 800e606:	462b      	movge	r3, r5
 800e608:	1ad2      	subs	r2, r2, r3
 800e60a:	9204      	str	r2, [sp, #16]
 800e60c:	9a05      	ldr	r2, [sp, #20]
 800e60e:	1aed      	subs	r5, r5, r3
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	9305      	str	r3, [sp, #20]
 800e614:	9b07      	ldr	r3, [sp, #28]
 800e616:	b31b      	cbz	r3, 800e660 <_dtoa_r+0x7a0>
 800e618:	9b08      	ldr	r3, [sp, #32]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f000 80af 	beq.w	800e77e <_dtoa_r+0x8be>
 800e620:	2e00      	cmp	r6, #0
 800e622:	dd13      	ble.n	800e64c <_dtoa_r+0x78c>
 800e624:	4639      	mov	r1, r7
 800e626:	4632      	mov	r2, r6
 800e628:	4620      	mov	r0, r4
 800e62a:	f000 fc09 	bl	800ee40 <__pow5mult>
 800e62e:	ee18 2a10 	vmov	r2, s16
 800e632:	4601      	mov	r1, r0
 800e634:	4607      	mov	r7, r0
 800e636:	4620      	mov	r0, r4
 800e638:	f000 fb58 	bl	800ecec <__multiply>
 800e63c:	ee18 1a10 	vmov	r1, s16
 800e640:	4680      	mov	r8, r0
 800e642:	4620      	mov	r0, r4
 800e644:	f000 fa84 	bl	800eb50 <_Bfree>
 800e648:	ee08 8a10 	vmov	s16, r8
 800e64c:	9b07      	ldr	r3, [sp, #28]
 800e64e:	1b9a      	subs	r2, r3, r6
 800e650:	d006      	beq.n	800e660 <_dtoa_r+0x7a0>
 800e652:	ee18 1a10 	vmov	r1, s16
 800e656:	4620      	mov	r0, r4
 800e658:	f000 fbf2 	bl	800ee40 <__pow5mult>
 800e65c:	ee08 0a10 	vmov	s16, r0
 800e660:	2101      	movs	r1, #1
 800e662:	4620      	mov	r0, r4
 800e664:	f000 fb2c 	bl	800ecc0 <__i2b>
 800e668:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	4606      	mov	r6, r0
 800e66e:	f340 8088 	ble.w	800e782 <_dtoa_r+0x8c2>
 800e672:	461a      	mov	r2, r3
 800e674:	4601      	mov	r1, r0
 800e676:	4620      	mov	r0, r4
 800e678:	f000 fbe2 	bl	800ee40 <__pow5mult>
 800e67c:	9b06      	ldr	r3, [sp, #24]
 800e67e:	2b01      	cmp	r3, #1
 800e680:	4606      	mov	r6, r0
 800e682:	f340 8081 	ble.w	800e788 <_dtoa_r+0x8c8>
 800e686:	f04f 0800 	mov.w	r8, #0
 800e68a:	6933      	ldr	r3, [r6, #16]
 800e68c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e690:	6918      	ldr	r0, [r3, #16]
 800e692:	f000 fac5 	bl	800ec20 <__hi0bits>
 800e696:	f1c0 0020 	rsb	r0, r0, #32
 800e69a:	9b05      	ldr	r3, [sp, #20]
 800e69c:	4418      	add	r0, r3
 800e69e:	f010 001f 	ands.w	r0, r0, #31
 800e6a2:	f000 8092 	beq.w	800e7ca <_dtoa_r+0x90a>
 800e6a6:	f1c0 0320 	rsb	r3, r0, #32
 800e6aa:	2b04      	cmp	r3, #4
 800e6ac:	f340 808a 	ble.w	800e7c4 <_dtoa_r+0x904>
 800e6b0:	f1c0 001c 	rsb	r0, r0, #28
 800e6b4:	9b04      	ldr	r3, [sp, #16]
 800e6b6:	4403      	add	r3, r0
 800e6b8:	9304      	str	r3, [sp, #16]
 800e6ba:	9b05      	ldr	r3, [sp, #20]
 800e6bc:	4403      	add	r3, r0
 800e6be:	4405      	add	r5, r0
 800e6c0:	9305      	str	r3, [sp, #20]
 800e6c2:	9b04      	ldr	r3, [sp, #16]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	dd07      	ble.n	800e6d8 <_dtoa_r+0x818>
 800e6c8:	ee18 1a10 	vmov	r1, s16
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4620      	mov	r0, r4
 800e6d0:	f000 fc10 	bl	800eef4 <__lshift>
 800e6d4:	ee08 0a10 	vmov	s16, r0
 800e6d8:	9b05      	ldr	r3, [sp, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	dd05      	ble.n	800e6ea <_dtoa_r+0x82a>
 800e6de:	4631      	mov	r1, r6
 800e6e0:	461a      	mov	r2, r3
 800e6e2:	4620      	mov	r0, r4
 800e6e4:	f000 fc06 	bl	800eef4 <__lshift>
 800e6e8:	4606      	mov	r6, r0
 800e6ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d06e      	beq.n	800e7ce <_dtoa_r+0x90e>
 800e6f0:	ee18 0a10 	vmov	r0, s16
 800e6f4:	4631      	mov	r1, r6
 800e6f6:	f000 fc6d 	bl	800efd4 <__mcmp>
 800e6fa:	2800      	cmp	r0, #0
 800e6fc:	da67      	bge.n	800e7ce <_dtoa_r+0x90e>
 800e6fe:	9b00      	ldr	r3, [sp, #0]
 800e700:	3b01      	subs	r3, #1
 800e702:	ee18 1a10 	vmov	r1, s16
 800e706:	9300      	str	r3, [sp, #0]
 800e708:	220a      	movs	r2, #10
 800e70a:	2300      	movs	r3, #0
 800e70c:	4620      	mov	r0, r4
 800e70e:	f000 fa41 	bl	800eb94 <__multadd>
 800e712:	9b08      	ldr	r3, [sp, #32]
 800e714:	ee08 0a10 	vmov	s16, r0
 800e718:	2b00      	cmp	r3, #0
 800e71a:	f000 81b1 	beq.w	800ea80 <_dtoa_r+0xbc0>
 800e71e:	2300      	movs	r3, #0
 800e720:	4639      	mov	r1, r7
 800e722:	220a      	movs	r2, #10
 800e724:	4620      	mov	r0, r4
 800e726:	f000 fa35 	bl	800eb94 <__multadd>
 800e72a:	9b02      	ldr	r3, [sp, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	4607      	mov	r7, r0
 800e730:	f300 808e 	bgt.w	800e850 <_dtoa_r+0x990>
 800e734:	9b06      	ldr	r3, [sp, #24]
 800e736:	2b02      	cmp	r3, #2
 800e738:	dc51      	bgt.n	800e7de <_dtoa_r+0x91e>
 800e73a:	e089      	b.n	800e850 <_dtoa_r+0x990>
 800e73c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e73e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e742:	e74b      	b.n	800e5dc <_dtoa_r+0x71c>
 800e744:	9b03      	ldr	r3, [sp, #12]
 800e746:	1e5e      	subs	r6, r3, #1
 800e748:	9b07      	ldr	r3, [sp, #28]
 800e74a:	42b3      	cmp	r3, r6
 800e74c:	bfbf      	itttt	lt
 800e74e:	9b07      	ldrlt	r3, [sp, #28]
 800e750:	9607      	strlt	r6, [sp, #28]
 800e752:	1af2      	sublt	r2, r6, r3
 800e754:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e756:	bfb6      	itet	lt
 800e758:	189b      	addlt	r3, r3, r2
 800e75a:	1b9e      	subge	r6, r3, r6
 800e75c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e75e:	9b03      	ldr	r3, [sp, #12]
 800e760:	bfb8      	it	lt
 800e762:	2600      	movlt	r6, #0
 800e764:	2b00      	cmp	r3, #0
 800e766:	bfb7      	itett	lt
 800e768:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e76c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e770:	1a9d      	sublt	r5, r3, r2
 800e772:	2300      	movlt	r3, #0
 800e774:	e734      	b.n	800e5e0 <_dtoa_r+0x720>
 800e776:	9e07      	ldr	r6, [sp, #28]
 800e778:	9d04      	ldr	r5, [sp, #16]
 800e77a:	9f08      	ldr	r7, [sp, #32]
 800e77c:	e73b      	b.n	800e5f6 <_dtoa_r+0x736>
 800e77e:	9a07      	ldr	r2, [sp, #28]
 800e780:	e767      	b.n	800e652 <_dtoa_r+0x792>
 800e782:	9b06      	ldr	r3, [sp, #24]
 800e784:	2b01      	cmp	r3, #1
 800e786:	dc18      	bgt.n	800e7ba <_dtoa_r+0x8fa>
 800e788:	f1ba 0f00 	cmp.w	sl, #0
 800e78c:	d115      	bne.n	800e7ba <_dtoa_r+0x8fa>
 800e78e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e792:	b993      	cbnz	r3, 800e7ba <_dtoa_r+0x8fa>
 800e794:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e798:	0d1b      	lsrs	r3, r3, #20
 800e79a:	051b      	lsls	r3, r3, #20
 800e79c:	b183      	cbz	r3, 800e7c0 <_dtoa_r+0x900>
 800e79e:	9b04      	ldr	r3, [sp, #16]
 800e7a0:	3301      	adds	r3, #1
 800e7a2:	9304      	str	r3, [sp, #16]
 800e7a4:	9b05      	ldr	r3, [sp, #20]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	9305      	str	r3, [sp, #20]
 800e7aa:	f04f 0801 	mov.w	r8, #1
 800e7ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	f47f af6a 	bne.w	800e68a <_dtoa_r+0x7ca>
 800e7b6:	2001      	movs	r0, #1
 800e7b8:	e76f      	b.n	800e69a <_dtoa_r+0x7da>
 800e7ba:	f04f 0800 	mov.w	r8, #0
 800e7be:	e7f6      	b.n	800e7ae <_dtoa_r+0x8ee>
 800e7c0:	4698      	mov	r8, r3
 800e7c2:	e7f4      	b.n	800e7ae <_dtoa_r+0x8ee>
 800e7c4:	f43f af7d 	beq.w	800e6c2 <_dtoa_r+0x802>
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	301c      	adds	r0, #28
 800e7cc:	e772      	b.n	800e6b4 <_dtoa_r+0x7f4>
 800e7ce:	9b03      	ldr	r3, [sp, #12]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	dc37      	bgt.n	800e844 <_dtoa_r+0x984>
 800e7d4:	9b06      	ldr	r3, [sp, #24]
 800e7d6:	2b02      	cmp	r3, #2
 800e7d8:	dd34      	ble.n	800e844 <_dtoa_r+0x984>
 800e7da:	9b03      	ldr	r3, [sp, #12]
 800e7dc:	9302      	str	r3, [sp, #8]
 800e7de:	9b02      	ldr	r3, [sp, #8]
 800e7e0:	b96b      	cbnz	r3, 800e7fe <_dtoa_r+0x93e>
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	2205      	movs	r2, #5
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f000 f9d4 	bl	800eb94 <__multadd>
 800e7ec:	4601      	mov	r1, r0
 800e7ee:	4606      	mov	r6, r0
 800e7f0:	ee18 0a10 	vmov	r0, s16
 800e7f4:	f000 fbee 	bl	800efd4 <__mcmp>
 800e7f8:	2800      	cmp	r0, #0
 800e7fa:	f73f adbb 	bgt.w	800e374 <_dtoa_r+0x4b4>
 800e7fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e800:	9d01      	ldr	r5, [sp, #4]
 800e802:	43db      	mvns	r3, r3
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	f04f 0800 	mov.w	r8, #0
 800e80a:	4631      	mov	r1, r6
 800e80c:	4620      	mov	r0, r4
 800e80e:	f000 f99f 	bl	800eb50 <_Bfree>
 800e812:	2f00      	cmp	r7, #0
 800e814:	f43f aea4 	beq.w	800e560 <_dtoa_r+0x6a0>
 800e818:	f1b8 0f00 	cmp.w	r8, #0
 800e81c:	d005      	beq.n	800e82a <_dtoa_r+0x96a>
 800e81e:	45b8      	cmp	r8, r7
 800e820:	d003      	beq.n	800e82a <_dtoa_r+0x96a>
 800e822:	4641      	mov	r1, r8
 800e824:	4620      	mov	r0, r4
 800e826:	f000 f993 	bl	800eb50 <_Bfree>
 800e82a:	4639      	mov	r1, r7
 800e82c:	4620      	mov	r0, r4
 800e82e:	f000 f98f 	bl	800eb50 <_Bfree>
 800e832:	e695      	b.n	800e560 <_dtoa_r+0x6a0>
 800e834:	2600      	movs	r6, #0
 800e836:	4637      	mov	r7, r6
 800e838:	e7e1      	b.n	800e7fe <_dtoa_r+0x93e>
 800e83a:	9700      	str	r7, [sp, #0]
 800e83c:	4637      	mov	r7, r6
 800e83e:	e599      	b.n	800e374 <_dtoa_r+0x4b4>
 800e840:	40240000 	.word	0x40240000
 800e844:	9b08      	ldr	r3, [sp, #32]
 800e846:	2b00      	cmp	r3, #0
 800e848:	f000 80ca 	beq.w	800e9e0 <_dtoa_r+0xb20>
 800e84c:	9b03      	ldr	r3, [sp, #12]
 800e84e:	9302      	str	r3, [sp, #8]
 800e850:	2d00      	cmp	r5, #0
 800e852:	dd05      	ble.n	800e860 <_dtoa_r+0x9a0>
 800e854:	4639      	mov	r1, r7
 800e856:	462a      	mov	r2, r5
 800e858:	4620      	mov	r0, r4
 800e85a:	f000 fb4b 	bl	800eef4 <__lshift>
 800e85e:	4607      	mov	r7, r0
 800e860:	f1b8 0f00 	cmp.w	r8, #0
 800e864:	d05b      	beq.n	800e91e <_dtoa_r+0xa5e>
 800e866:	6879      	ldr	r1, [r7, #4]
 800e868:	4620      	mov	r0, r4
 800e86a:	f000 f931 	bl	800ead0 <_Balloc>
 800e86e:	4605      	mov	r5, r0
 800e870:	b928      	cbnz	r0, 800e87e <_dtoa_r+0x9be>
 800e872:	4b87      	ldr	r3, [pc, #540]	; (800ea90 <_dtoa_r+0xbd0>)
 800e874:	4602      	mov	r2, r0
 800e876:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e87a:	f7ff bb3b 	b.w	800def4 <_dtoa_r+0x34>
 800e87e:	693a      	ldr	r2, [r7, #16]
 800e880:	3202      	adds	r2, #2
 800e882:	0092      	lsls	r2, r2, #2
 800e884:	f107 010c 	add.w	r1, r7, #12
 800e888:	300c      	adds	r0, #12
 800e88a:	f000 f913 	bl	800eab4 <memcpy>
 800e88e:	2201      	movs	r2, #1
 800e890:	4629      	mov	r1, r5
 800e892:	4620      	mov	r0, r4
 800e894:	f000 fb2e 	bl	800eef4 <__lshift>
 800e898:	9b01      	ldr	r3, [sp, #4]
 800e89a:	f103 0901 	add.w	r9, r3, #1
 800e89e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e8a2:	4413      	add	r3, r2
 800e8a4:	9305      	str	r3, [sp, #20]
 800e8a6:	f00a 0301 	and.w	r3, sl, #1
 800e8aa:	46b8      	mov	r8, r7
 800e8ac:	9304      	str	r3, [sp, #16]
 800e8ae:	4607      	mov	r7, r0
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	ee18 0a10 	vmov	r0, s16
 800e8b6:	f7ff fa77 	bl	800dda8 <quorem>
 800e8ba:	4641      	mov	r1, r8
 800e8bc:	9002      	str	r0, [sp, #8]
 800e8be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8c2:	ee18 0a10 	vmov	r0, s16
 800e8c6:	f000 fb85 	bl	800efd4 <__mcmp>
 800e8ca:	463a      	mov	r2, r7
 800e8cc:	9003      	str	r0, [sp, #12]
 800e8ce:	4631      	mov	r1, r6
 800e8d0:	4620      	mov	r0, r4
 800e8d2:	f000 fb9b 	bl	800f00c <__mdiff>
 800e8d6:	68c2      	ldr	r2, [r0, #12]
 800e8d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e8dc:	4605      	mov	r5, r0
 800e8de:	bb02      	cbnz	r2, 800e922 <_dtoa_r+0xa62>
 800e8e0:	4601      	mov	r1, r0
 800e8e2:	ee18 0a10 	vmov	r0, s16
 800e8e6:	f000 fb75 	bl	800efd4 <__mcmp>
 800e8ea:	4602      	mov	r2, r0
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	4620      	mov	r0, r4
 800e8f0:	9207      	str	r2, [sp, #28]
 800e8f2:	f000 f92d 	bl	800eb50 <_Bfree>
 800e8f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e8fa:	ea43 0102 	orr.w	r1, r3, r2
 800e8fe:	9b04      	ldr	r3, [sp, #16]
 800e900:	430b      	orrs	r3, r1
 800e902:	464d      	mov	r5, r9
 800e904:	d10f      	bne.n	800e926 <_dtoa_r+0xa66>
 800e906:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e90a:	d02a      	beq.n	800e962 <_dtoa_r+0xaa2>
 800e90c:	9b03      	ldr	r3, [sp, #12]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	dd02      	ble.n	800e918 <_dtoa_r+0xa58>
 800e912:	9b02      	ldr	r3, [sp, #8]
 800e914:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e918:	f88b a000 	strb.w	sl, [fp]
 800e91c:	e775      	b.n	800e80a <_dtoa_r+0x94a>
 800e91e:	4638      	mov	r0, r7
 800e920:	e7ba      	b.n	800e898 <_dtoa_r+0x9d8>
 800e922:	2201      	movs	r2, #1
 800e924:	e7e2      	b.n	800e8ec <_dtoa_r+0xa2c>
 800e926:	9b03      	ldr	r3, [sp, #12]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	db04      	blt.n	800e936 <_dtoa_r+0xa76>
 800e92c:	9906      	ldr	r1, [sp, #24]
 800e92e:	430b      	orrs	r3, r1
 800e930:	9904      	ldr	r1, [sp, #16]
 800e932:	430b      	orrs	r3, r1
 800e934:	d122      	bne.n	800e97c <_dtoa_r+0xabc>
 800e936:	2a00      	cmp	r2, #0
 800e938:	ddee      	ble.n	800e918 <_dtoa_r+0xa58>
 800e93a:	ee18 1a10 	vmov	r1, s16
 800e93e:	2201      	movs	r2, #1
 800e940:	4620      	mov	r0, r4
 800e942:	f000 fad7 	bl	800eef4 <__lshift>
 800e946:	4631      	mov	r1, r6
 800e948:	ee08 0a10 	vmov	s16, r0
 800e94c:	f000 fb42 	bl	800efd4 <__mcmp>
 800e950:	2800      	cmp	r0, #0
 800e952:	dc03      	bgt.n	800e95c <_dtoa_r+0xa9c>
 800e954:	d1e0      	bne.n	800e918 <_dtoa_r+0xa58>
 800e956:	f01a 0f01 	tst.w	sl, #1
 800e95a:	d0dd      	beq.n	800e918 <_dtoa_r+0xa58>
 800e95c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e960:	d1d7      	bne.n	800e912 <_dtoa_r+0xa52>
 800e962:	2339      	movs	r3, #57	; 0x39
 800e964:	f88b 3000 	strb.w	r3, [fp]
 800e968:	462b      	mov	r3, r5
 800e96a:	461d      	mov	r5, r3
 800e96c:	3b01      	subs	r3, #1
 800e96e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e972:	2a39      	cmp	r2, #57	; 0x39
 800e974:	d071      	beq.n	800ea5a <_dtoa_r+0xb9a>
 800e976:	3201      	adds	r2, #1
 800e978:	701a      	strb	r2, [r3, #0]
 800e97a:	e746      	b.n	800e80a <_dtoa_r+0x94a>
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	dd07      	ble.n	800e990 <_dtoa_r+0xad0>
 800e980:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e984:	d0ed      	beq.n	800e962 <_dtoa_r+0xaa2>
 800e986:	f10a 0301 	add.w	r3, sl, #1
 800e98a:	f88b 3000 	strb.w	r3, [fp]
 800e98e:	e73c      	b.n	800e80a <_dtoa_r+0x94a>
 800e990:	9b05      	ldr	r3, [sp, #20]
 800e992:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e996:	4599      	cmp	r9, r3
 800e998:	d047      	beq.n	800ea2a <_dtoa_r+0xb6a>
 800e99a:	ee18 1a10 	vmov	r1, s16
 800e99e:	2300      	movs	r3, #0
 800e9a0:	220a      	movs	r2, #10
 800e9a2:	4620      	mov	r0, r4
 800e9a4:	f000 f8f6 	bl	800eb94 <__multadd>
 800e9a8:	45b8      	cmp	r8, r7
 800e9aa:	ee08 0a10 	vmov	s16, r0
 800e9ae:	f04f 0300 	mov.w	r3, #0
 800e9b2:	f04f 020a 	mov.w	r2, #10
 800e9b6:	4641      	mov	r1, r8
 800e9b8:	4620      	mov	r0, r4
 800e9ba:	d106      	bne.n	800e9ca <_dtoa_r+0xb0a>
 800e9bc:	f000 f8ea 	bl	800eb94 <__multadd>
 800e9c0:	4680      	mov	r8, r0
 800e9c2:	4607      	mov	r7, r0
 800e9c4:	f109 0901 	add.w	r9, r9, #1
 800e9c8:	e772      	b.n	800e8b0 <_dtoa_r+0x9f0>
 800e9ca:	f000 f8e3 	bl	800eb94 <__multadd>
 800e9ce:	4639      	mov	r1, r7
 800e9d0:	4680      	mov	r8, r0
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	220a      	movs	r2, #10
 800e9d6:	4620      	mov	r0, r4
 800e9d8:	f000 f8dc 	bl	800eb94 <__multadd>
 800e9dc:	4607      	mov	r7, r0
 800e9de:	e7f1      	b.n	800e9c4 <_dtoa_r+0xb04>
 800e9e0:	9b03      	ldr	r3, [sp, #12]
 800e9e2:	9302      	str	r3, [sp, #8]
 800e9e4:	9d01      	ldr	r5, [sp, #4]
 800e9e6:	ee18 0a10 	vmov	r0, s16
 800e9ea:	4631      	mov	r1, r6
 800e9ec:	f7ff f9dc 	bl	800dda8 <quorem>
 800e9f0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e9f4:	9b01      	ldr	r3, [sp, #4]
 800e9f6:	f805 ab01 	strb.w	sl, [r5], #1
 800e9fa:	1aea      	subs	r2, r5, r3
 800e9fc:	9b02      	ldr	r3, [sp, #8]
 800e9fe:	4293      	cmp	r3, r2
 800ea00:	dd09      	ble.n	800ea16 <_dtoa_r+0xb56>
 800ea02:	ee18 1a10 	vmov	r1, s16
 800ea06:	2300      	movs	r3, #0
 800ea08:	220a      	movs	r2, #10
 800ea0a:	4620      	mov	r0, r4
 800ea0c:	f000 f8c2 	bl	800eb94 <__multadd>
 800ea10:	ee08 0a10 	vmov	s16, r0
 800ea14:	e7e7      	b.n	800e9e6 <_dtoa_r+0xb26>
 800ea16:	9b02      	ldr	r3, [sp, #8]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	bfc8      	it	gt
 800ea1c:	461d      	movgt	r5, r3
 800ea1e:	9b01      	ldr	r3, [sp, #4]
 800ea20:	bfd8      	it	le
 800ea22:	2501      	movle	r5, #1
 800ea24:	441d      	add	r5, r3
 800ea26:	f04f 0800 	mov.w	r8, #0
 800ea2a:	ee18 1a10 	vmov	r1, s16
 800ea2e:	2201      	movs	r2, #1
 800ea30:	4620      	mov	r0, r4
 800ea32:	f000 fa5f 	bl	800eef4 <__lshift>
 800ea36:	4631      	mov	r1, r6
 800ea38:	ee08 0a10 	vmov	s16, r0
 800ea3c:	f000 faca 	bl	800efd4 <__mcmp>
 800ea40:	2800      	cmp	r0, #0
 800ea42:	dc91      	bgt.n	800e968 <_dtoa_r+0xaa8>
 800ea44:	d102      	bne.n	800ea4c <_dtoa_r+0xb8c>
 800ea46:	f01a 0f01 	tst.w	sl, #1
 800ea4a:	d18d      	bne.n	800e968 <_dtoa_r+0xaa8>
 800ea4c:	462b      	mov	r3, r5
 800ea4e:	461d      	mov	r5, r3
 800ea50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ea54:	2a30      	cmp	r2, #48	; 0x30
 800ea56:	d0fa      	beq.n	800ea4e <_dtoa_r+0xb8e>
 800ea58:	e6d7      	b.n	800e80a <_dtoa_r+0x94a>
 800ea5a:	9a01      	ldr	r2, [sp, #4]
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d184      	bne.n	800e96a <_dtoa_r+0xaaa>
 800ea60:	9b00      	ldr	r3, [sp, #0]
 800ea62:	3301      	adds	r3, #1
 800ea64:	9300      	str	r3, [sp, #0]
 800ea66:	2331      	movs	r3, #49	; 0x31
 800ea68:	7013      	strb	r3, [r2, #0]
 800ea6a:	e6ce      	b.n	800e80a <_dtoa_r+0x94a>
 800ea6c:	4b09      	ldr	r3, [pc, #36]	; (800ea94 <_dtoa_r+0xbd4>)
 800ea6e:	f7ff ba95 	b.w	800df9c <_dtoa_r+0xdc>
 800ea72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f47f aa6e 	bne.w	800df56 <_dtoa_r+0x96>
 800ea7a:	4b07      	ldr	r3, [pc, #28]	; (800ea98 <_dtoa_r+0xbd8>)
 800ea7c:	f7ff ba8e 	b.w	800df9c <_dtoa_r+0xdc>
 800ea80:	9b02      	ldr	r3, [sp, #8]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	dcae      	bgt.n	800e9e4 <_dtoa_r+0xb24>
 800ea86:	9b06      	ldr	r3, [sp, #24]
 800ea88:	2b02      	cmp	r3, #2
 800ea8a:	f73f aea8 	bgt.w	800e7de <_dtoa_r+0x91e>
 800ea8e:	e7a9      	b.n	800e9e4 <_dtoa_r+0xb24>
 800ea90:	080112eb 	.word	0x080112eb
 800ea94:	08011248 	.word	0x08011248
 800ea98:	0801126c 	.word	0x0801126c

0800ea9c <_localeconv_r>:
 800ea9c:	4800      	ldr	r0, [pc, #0]	; (800eaa0 <_localeconv_r+0x4>)
 800ea9e:	4770      	bx	lr
 800eaa0:	20000180 	.word	0x20000180

0800eaa4 <malloc>:
 800eaa4:	4b02      	ldr	r3, [pc, #8]	; (800eab0 <malloc+0xc>)
 800eaa6:	4601      	mov	r1, r0
 800eaa8:	6818      	ldr	r0, [r3, #0]
 800eaaa:	f000 bc17 	b.w	800f2dc <_malloc_r>
 800eaae:	bf00      	nop
 800eab0:	2000002c 	.word	0x2000002c

0800eab4 <memcpy>:
 800eab4:	440a      	add	r2, r1
 800eab6:	4291      	cmp	r1, r2
 800eab8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eabc:	d100      	bne.n	800eac0 <memcpy+0xc>
 800eabe:	4770      	bx	lr
 800eac0:	b510      	push	{r4, lr}
 800eac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaca:	4291      	cmp	r1, r2
 800eacc:	d1f9      	bne.n	800eac2 <memcpy+0xe>
 800eace:	bd10      	pop	{r4, pc}

0800ead0 <_Balloc>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ead4:	4604      	mov	r4, r0
 800ead6:	460d      	mov	r5, r1
 800ead8:	b976      	cbnz	r6, 800eaf8 <_Balloc+0x28>
 800eada:	2010      	movs	r0, #16
 800eadc:	f7ff ffe2 	bl	800eaa4 <malloc>
 800eae0:	4602      	mov	r2, r0
 800eae2:	6260      	str	r0, [r4, #36]	; 0x24
 800eae4:	b920      	cbnz	r0, 800eaf0 <_Balloc+0x20>
 800eae6:	4b18      	ldr	r3, [pc, #96]	; (800eb48 <_Balloc+0x78>)
 800eae8:	4818      	ldr	r0, [pc, #96]	; (800eb4c <_Balloc+0x7c>)
 800eaea:	2166      	movs	r1, #102	; 0x66
 800eaec:	f000 fdd6 	bl	800f69c <__assert_func>
 800eaf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eaf4:	6006      	str	r6, [r0, #0]
 800eaf6:	60c6      	str	r6, [r0, #12]
 800eaf8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eafa:	68f3      	ldr	r3, [r6, #12]
 800eafc:	b183      	cbz	r3, 800eb20 <_Balloc+0x50>
 800eafe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb06:	b9b8      	cbnz	r0, 800eb38 <_Balloc+0x68>
 800eb08:	2101      	movs	r1, #1
 800eb0a:	fa01 f605 	lsl.w	r6, r1, r5
 800eb0e:	1d72      	adds	r2, r6, #5
 800eb10:	0092      	lsls	r2, r2, #2
 800eb12:	4620      	mov	r0, r4
 800eb14:	f000 fb60 	bl	800f1d8 <_calloc_r>
 800eb18:	b160      	cbz	r0, 800eb34 <_Balloc+0x64>
 800eb1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb1e:	e00e      	b.n	800eb3e <_Balloc+0x6e>
 800eb20:	2221      	movs	r2, #33	; 0x21
 800eb22:	2104      	movs	r1, #4
 800eb24:	4620      	mov	r0, r4
 800eb26:	f000 fb57 	bl	800f1d8 <_calloc_r>
 800eb2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb2c:	60f0      	str	r0, [r6, #12]
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	d1e4      	bne.n	800eafe <_Balloc+0x2e>
 800eb34:	2000      	movs	r0, #0
 800eb36:	bd70      	pop	{r4, r5, r6, pc}
 800eb38:	6802      	ldr	r2, [r0, #0]
 800eb3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb3e:	2300      	movs	r3, #0
 800eb40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb44:	e7f7      	b.n	800eb36 <_Balloc+0x66>
 800eb46:	bf00      	nop
 800eb48:	08011279 	.word	0x08011279
 800eb4c:	080112fc 	.word	0x080112fc

0800eb50 <_Bfree>:
 800eb50:	b570      	push	{r4, r5, r6, lr}
 800eb52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb54:	4605      	mov	r5, r0
 800eb56:	460c      	mov	r4, r1
 800eb58:	b976      	cbnz	r6, 800eb78 <_Bfree+0x28>
 800eb5a:	2010      	movs	r0, #16
 800eb5c:	f7ff ffa2 	bl	800eaa4 <malloc>
 800eb60:	4602      	mov	r2, r0
 800eb62:	6268      	str	r0, [r5, #36]	; 0x24
 800eb64:	b920      	cbnz	r0, 800eb70 <_Bfree+0x20>
 800eb66:	4b09      	ldr	r3, [pc, #36]	; (800eb8c <_Bfree+0x3c>)
 800eb68:	4809      	ldr	r0, [pc, #36]	; (800eb90 <_Bfree+0x40>)
 800eb6a:	218a      	movs	r1, #138	; 0x8a
 800eb6c:	f000 fd96 	bl	800f69c <__assert_func>
 800eb70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb74:	6006      	str	r6, [r0, #0]
 800eb76:	60c6      	str	r6, [r0, #12]
 800eb78:	b13c      	cbz	r4, 800eb8a <_Bfree+0x3a>
 800eb7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb7c:	6862      	ldr	r2, [r4, #4]
 800eb7e:	68db      	ldr	r3, [r3, #12]
 800eb80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb84:	6021      	str	r1, [r4, #0]
 800eb86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb8a:	bd70      	pop	{r4, r5, r6, pc}
 800eb8c:	08011279 	.word	0x08011279
 800eb90:	080112fc 	.word	0x080112fc

0800eb94 <__multadd>:
 800eb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb98:	690d      	ldr	r5, [r1, #16]
 800eb9a:	4607      	mov	r7, r0
 800eb9c:	460c      	mov	r4, r1
 800eb9e:	461e      	mov	r6, r3
 800eba0:	f101 0c14 	add.w	ip, r1, #20
 800eba4:	2000      	movs	r0, #0
 800eba6:	f8dc 3000 	ldr.w	r3, [ip]
 800ebaa:	b299      	uxth	r1, r3
 800ebac:	fb02 6101 	mla	r1, r2, r1, r6
 800ebb0:	0c1e      	lsrs	r6, r3, #16
 800ebb2:	0c0b      	lsrs	r3, r1, #16
 800ebb4:	fb02 3306 	mla	r3, r2, r6, r3
 800ebb8:	b289      	uxth	r1, r1
 800ebba:	3001      	adds	r0, #1
 800ebbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebc0:	4285      	cmp	r5, r0
 800ebc2:	f84c 1b04 	str.w	r1, [ip], #4
 800ebc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebca:	dcec      	bgt.n	800eba6 <__multadd+0x12>
 800ebcc:	b30e      	cbz	r6, 800ec12 <__multadd+0x7e>
 800ebce:	68a3      	ldr	r3, [r4, #8]
 800ebd0:	42ab      	cmp	r3, r5
 800ebd2:	dc19      	bgt.n	800ec08 <__multadd+0x74>
 800ebd4:	6861      	ldr	r1, [r4, #4]
 800ebd6:	4638      	mov	r0, r7
 800ebd8:	3101      	adds	r1, #1
 800ebda:	f7ff ff79 	bl	800ead0 <_Balloc>
 800ebde:	4680      	mov	r8, r0
 800ebe0:	b928      	cbnz	r0, 800ebee <__multadd+0x5a>
 800ebe2:	4602      	mov	r2, r0
 800ebe4:	4b0c      	ldr	r3, [pc, #48]	; (800ec18 <__multadd+0x84>)
 800ebe6:	480d      	ldr	r0, [pc, #52]	; (800ec1c <__multadd+0x88>)
 800ebe8:	21b5      	movs	r1, #181	; 0xb5
 800ebea:	f000 fd57 	bl	800f69c <__assert_func>
 800ebee:	6922      	ldr	r2, [r4, #16]
 800ebf0:	3202      	adds	r2, #2
 800ebf2:	f104 010c 	add.w	r1, r4, #12
 800ebf6:	0092      	lsls	r2, r2, #2
 800ebf8:	300c      	adds	r0, #12
 800ebfa:	f7ff ff5b 	bl	800eab4 <memcpy>
 800ebfe:	4621      	mov	r1, r4
 800ec00:	4638      	mov	r0, r7
 800ec02:	f7ff ffa5 	bl	800eb50 <_Bfree>
 800ec06:	4644      	mov	r4, r8
 800ec08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec0c:	3501      	adds	r5, #1
 800ec0e:	615e      	str	r6, [r3, #20]
 800ec10:	6125      	str	r5, [r4, #16]
 800ec12:	4620      	mov	r0, r4
 800ec14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec18:	080112eb 	.word	0x080112eb
 800ec1c:	080112fc 	.word	0x080112fc

0800ec20 <__hi0bits>:
 800ec20:	0c03      	lsrs	r3, r0, #16
 800ec22:	041b      	lsls	r3, r3, #16
 800ec24:	b9d3      	cbnz	r3, 800ec5c <__hi0bits+0x3c>
 800ec26:	0400      	lsls	r0, r0, #16
 800ec28:	2310      	movs	r3, #16
 800ec2a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ec2e:	bf04      	itt	eq
 800ec30:	0200      	lsleq	r0, r0, #8
 800ec32:	3308      	addeq	r3, #8
 800ec34:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec38:	bf04      	itt	eq
 800ec3a:	0100      	lsleq	r0, r0, #4
 800ec3c:	3304      	addeq	r3, #4
 800ec3e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ec42:	bf04      	itt	eq
 800ec44:	0080      	lsleq	r0, r0, #2
 800ec46:	3302      	addeq	r3, #2
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	db05      	blt.n	800ec58 <__hi0bits+0x38>
 800ec4c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec50:	f103 0301 	add.w	r3, r3, #1
 800ec54:	bf08      	it	eq
 800ec56:	2320      	moveq	r3, #32
 800ec58:	4618      	mov	r0, r3
 800ec5a:	4770      	bx	lr
 800ec5c:	2300      	movs	r3, #0
 800ec5e:	e7e4      	b.n	800ec2a <__hi0bits+0xa>

0800ec60 <__lo0bits>:
 800ec60:	6803      	ldr	r3, [r0, #0]
 800ec62:	f013 0207 	ands.w	r2, r3, #7
 800ec66:	4601      	mov	r1, r0
 800ec68:	d00b      	beq.n	800ec82 <__lo0bits+0x22>
 800ec6a:	07da      	lsls	r2, r3, #31
 800ec6c:	d423      	bmi.n	800ecb6 <__lo0bits+0x56>
 800ec6e:	0798      	lsls	r0, r3, #30
 800ec70:	bf49      	itett	mi
 800ec72:	085b      	lsrmi	r3, r3, #1
 800ec74:	089b      	lsrpl	r3, r3, #2
 800ec76:	2001      	movmi	r0, #1
 800ec78:	600b      	strmi	r3, [r1, #0]
 800ec7a:	bf5c      	itt	pl
 800ec7c:	600b      	strpl	r3, [r1, #0]
 800ec7e:	2002      	movpl	r0, #2
 800ec80:	4770      	bx	lr
 800ec82:	b298      	uxth	r0, r3
 800ec84:	b9a8      	cbnz	r0, 800ecb2 <__lo0bits+0x52>
 800ec86:	0c1b      	lsrs	r3, r3, #16
 800ec88:	2010      	movs	r0, #16
 800ec8a:	b2da      	uxtb	r2, r3
 800ec8c:	b90a      	cbnz	r2, 800ec92 <__lo0bits+0x32>
 800ec8e:	3008      	adds	r0, #8
 800ec90:	0a1b      	lsrs	r3, r3, #8
 800ec92:	071a      	lsls	r2, r3, #28
 800ec94:	bf04      	itt	eq
 800ec96:	091b      	lsreq	r3, r3, #4
 800ec98:	3004      	addeq	r0, #4
 800ec9a:	079a      	lsls	r2, r3, #30
 800ec9c:	bf04      	itt	eq
 800ec9e:	089b      	lsreq	r3, r3, #2
 800eca0:	3002      	addeq	r0, #2
 800eca2:	07da      	lsls	r2, r3, #31
 800eca4:	d403      	bmi.n	800ecae <__lo0bits+0x4e>
 800eca6:	085b      	lsrs	r3, r3, #1
 800eca8:	f100 0001 	add.w	r0, r0, #1
 800ecac:	d005      	beq.n	800ecba <__lo0bits+0x5a>
 800ecae:	600b      	str	r3, [r1, #0]
 800ecb0:	4770      	bx	lr
 800ecb2:	4610      	mov	r0, r2
 800ecb4:	e7e9      	b.n	800ec8a <__lo0bits+0x2a>
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	4770      	bx	lr
 800ecba:	2020      	movs	r0, #32
 800ecbc:	4770      	bx	lr
	...

0800ecc0 <__i2b>:
 800ecc0:	b510      	push	{r4, lr}
 800ecc2:	460c      	mov	r4, r1
 800ecc4:	2101      	movs	r1, #1
 800ecc6:	f7ff ff03 	bl	800ead0 <_Balloc>
 800ecca:	4602      	mov	r2, r0
 800eccc:	b928      	cbnz	r0, 800ecda <__i2b+0x1a>
 800ecce:	4b05      	ldr	r3, [pc, #20]	; (800ece4 <__i2b+0x24>)
 800ecd0:	4805      	ldr	r0, [pc, #20]	; (800ece8 <__i2b+0x28>)
 800ecd2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ecd6:	f000 fce1 	bl	800f69c <__assert_func>
 800ecda:	2301      	movs	r3, #1
 800ecdc:	6144      	str	r4, [r0, #20]
 800ecde:	6103      	str	r3, [r0, #16]
 800ece0:	bd10      	pop	{r4, pc}
 800ece2:	bf00      	nop
 800ece4:	080112eb 	.word	0x080112eb
 800ece8:	080112fc 	.word	0x080112fc

0800ecec <__multiply>:
 800ecec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecf0:	4691      	mov	r9, r2
 800ecf2:	690a      	ldr	r2, [r1, #16]
 800ecf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecf8:	429a      	cmp	r2, r3
 800ecfa:	bfb8      	it	lt
 800ecfc:	460b      	movlt	r3, r1
 800ecfe:	460c      	mov	r4, r1
 800ed00:	bfbc      	itt	lt
 800ed02:	464c      	movlt	r4, r9
 800ed04:	4699      	movlt	r9, r3
 800ed06:	6927      	ldr	r7, [r4, #16]
 800ed08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ed0c:	68a3      	ldr	r3, [r4, #8]
 800ed0e:	6861      	ldr	r1, [r4, #4]
 800ed10:	eb07 060a 	add.w	r6, r7, sl
 800ed14:	42b3      	cmp	r3, r6
 800ed16:	b085      	sub	sp, #20
 800ed18:	bfb8      	it	lt
 800ed1a:	3101      	addlt	r1, #1
 800ed1c:	f7ff fed8 	bl	800ead0 <_Balloc>
 800ed20:	b930      	cbnz	r0, 800ed30 <__multiply+0x44>
 800ed22:	4602      	mov	r2, r0
 800ed24:	4b44      	ldr	r3, [pc, #272]	; (800ee38 <__multiply+0x14c>)
 800ed26:	4845      	ldr	r0, [pc, #276]	; (800ee3c <__multiply+0x150>)
 800ed28:	f240 115d 	movw	r1, #349	; 0x15d
 800ed2c:	f000 fcb6 	bl	800f69c <__assert_func>
 800ed30:	f100 0514 	add.w	r5, r0, #20
 800ed34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed38:	462b      	mov	r3, r5
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	4543      	cmp	r3, r8
 800ed3e:	d321      	bcc.n	800ed84 <__multiply+0x98>
 800ed40:	f104 0314 	add.w	r3, r4, #20
 800ed44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ed48:	f109 0314 	add.w	r3, r9, #20
 800ed4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed50:	9202      	str	r2, [sp, #8]
 800ed52:	1b3a      	subs	r2, r7, r4
 800ed54:	3a15      	subs	r2, #21
 800ed56:	f022 0203 	bic.w	r2, r2, #3
 800ed5a:	3204      	adds	r2, #4
 800ed5c:	f104 0115 	add.w	r1, r4, #21
 800ed60:	428f      	cmp	r7, r1
 800ed62:	bf38      	it	cc
 800ed64:	2204      	movcc	r2, #4
 800ed66:	9201      	str	r2, [sp, #4]
 800ed68:	9a02      	ldr	r2, [sp, #8]
 800ed6a:	9303      	str	r3, [sp, #12]
 800ed6c:	429a      	cmp	r2, r3
 800ed6e:	d80c      	bhi.n	800ed8a <__multiply+0x9e>
 800ed70:	2e00      	cmp	r6, #0
 800ed72:	dd03      	ble.n	800ed7c <__multiply+0x90>
 800ed74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d05a      	beq.n	800ee32 <__multiply+0x146>
 800ed7c:	6106      	str	r6, [r0, #16]
 800ed7e:	b005      	add	sp, #20
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed84:	f843 2b04 	str.w	r2, [r3], #4
 800ed88:	e7d8      	b.n	800ed3c <__multiply+0x50>
 800ed8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed8e:	f1ba 0f00 	cmp.w	sl, #0
 800ed92:	d024      	beq.n	800edde <__multiply+0xf2>
 800ed94:	f104 0e14 	add.w	lr, r4, #20
 800ed98:	46a9      	mov	r9, r5
 800ed9a:	f04f 0c00 	mov.w	ip, #0
 800ed9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800eda2:	f8d9 1000 	ldr.w	r1, [r9]
 800eda6:	fa1f fb82 	uxth.w	fp, r2
 800edaa:	b289      	uxth	r1, r1
 800edac:	fb0a 110b 	mla	r1, sl, fp, r1
 800edb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800edb4:	f8d9 2000 	ldr.w	r2, [r9]
 800edb8:	4461      	add	r1, ip
 800edba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800edbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800edc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800edc6:	b289      	uxth	r1, r1
 800edc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800edcc:	4577      	cmp	r7, lr
 800edce:	f849 1b04 	str.w	r1, [r9], #4
 800edd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800edd6:	d8e2      	bhi.n	800ed9e <__multiply+0xb2>
 800edd8:	9a01      	ldr	r2, [sp, #4]
 800edda:	f845 c002 	str.w	ip, [r5, r2]
 800edde:	9a03      	ldr	r2, [sp, #12]
 800ede0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ede4:	3304      	adds	r3, #4
 800ede6:	f1b9 0f00 	cmp.w	r9, #0
 800edea:	d020      	beq.n	800ee2e <__multiply+0x142>
 800edec:	6829      	ldr	r1, [r5, #0]
 800edee:	f104 0c14 	add.w	ip, r4, #20
 800edf2:	46ae      	mov	lr, r5
 800edf4:	f04f 0a00 	mov.w	sl, #0
 800edf8:	f8bc b000 	ldrh.w	fp, [ip]
 800edfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ee00:	fb09 220b 	mla	r2, r9, fp, r2
 800ee04:	4492      	add	sl, r2
 800ee06:	b289      	uxth	r1, r1
 800ee08:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ee0c:	f84e 1b04 	str.w	r1, [lr], #4
 800ee10:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ee14:	f8be 1000 	ldrh.w	r1, [lr]
 800ee18:	0c12      	lsrs	r2, r2, #16
 800ee1a:	fb09 1102 	mla	r1, r9, r2, r1
 800ee1e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ee22:	4567      	cmp	r7, ip
 800ee24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ee28:	d8e6      	bhi.n	800edf8 <__multiply+0x10c>
 800ee2a:	9a01      	ldr	r2, [sp, #4]
 800ee2c:	50a9      	str	r1, [r5, r2]
 800ee2e:	3504      	adds	r5, #4
 800ee30:	e79a      	b.n	800ed68 <__multiply+0x7c>
 800ee32:	3e01      	subs	r6, #1
 800ee34:	e79c      	b.n	800ed70 <__multiply+0x84>
 800ee36:	bf00      	nop
 800ee38:	080112eb 	.word	0x080112eb
 800ee3c:	080112fc 	.word	0x080112fc

0800ee40 <__pow5mult>:
 800ee40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee44:	4615      	mov	r5, r2
 800ee46:	f012 0203 	ands.w	r2, r2, #3
 800ee4a:	4606      	mov	r6, r0
 800ee4c:	460f      	mov	r7, r1
 800ee4e:	d007      	beq.n	800ee60 <__pow5mult+0x20>
 800ee50:	4c25      	ldr	r4, [pc, #148]	; (800eee8 <__pow5mult+0xa8>)
 800ee52:	3a01      	subs	r2, #1
 800ee54:	2300      	movs	r3, #0
 800ee56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee5a:	f7ff fe9b 	bl	800eb94 <__multadd>
 800ee5e:	4607      	mov	r7, r0
 800ee60:	10ad      	asrs	r5, r5, #2
 800ee62:	d03d      	beq.n	800eee0 <__pow5mult+0xa0>
 800ee64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee66:	b97c      	cbnz	r4, 800ee88 <__pow5mult+0x48>
 800ee68:	2010      	movs	r0, #16
 800ee6a:	f7ff fe1b 	bl	800eaa4 <malloc>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	6270      	str	r0, [r6, #36]	; 0x24
 800ee72:	b928      	cbnz	r0, 800ee80 <__pow5mult+0x40>
 800ee74:	4b1d      	ldr	r3, [pc, #116]	; (800eeec <__pow5mult+0xac>)
 800ee76:	481e      	ldr	r0, [pc, #120]	; (800eef0 <__pow5mult+0xb0>)
 800ee78:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee7c:	f000 fc0e 	bl	800f69c <__assert_func>
 800ee80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee84:	6004      	str	r4, [r0, #0]
 800ee86:	60c4      	str	r4, [r0, #12]
 800ee88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee90:	b94c      	cbnz	r4, 800eea6 <__pow5mult+0x66>
 800ee92:	f240 2171 	movw	r1, #625	; 0x271
 800ee96:	4630      	mov	r0, r6
 800ee98:	f7ff ff12 	bl	800ecc0 <__i2b>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800eea2:	4604      	mov	r4, r0
 800eea4:	6003      	str	r3, [r0, #0]
 800eea6:	f04f 0900 	mov.w	r9, #0
 800eeaa:	07eb      	lsls	r3, r5, #31
 800eeac:	d50a      	bpl.n	800eec4 <__pow5mult+0x84>
 800eeae:	4639      	mov	r1, r7
 800eeb0:	4622      	mov	r2, r4
 800eeb2:	4630      	mov	r0, r6
 800eeb4:	f7ff ff1a 	bl	800ecec <__multiply>
 800eeb8:	4639      	mov	r1, r7
 800eeba:	4680      	mov	r8, r0
 800eebc:	4630      	mov	r0, r6
 800eebe:	f7ff fe47 	bl	800eb50 <_Bfree>
 800eec2:	4647      	mov	r7, r8
 800eec4:	106d      	asrs	r5, r5, #1
 800eec6:	d00b      	beq.n	800eee0 <__pow5mult+0xa0>
 800eec8:	6820      	ldr	r0, [r4, #0]
 800eeca:	b938      	cbnz	r0, 800eedc <__pow5mult+0x9c>
 800eecc:	4622      	mov	r2, r4
 800eece:	4621      	mov	r1, r4
 800eed0:	4630      	mov	r0, r6
 800eed2:	f7ff ff0b 	bl	800ecec <__multiply>
 800eed6:	6020      	str	r0, [r4, #0]
 800eed8:	f8c0 9000 	str.w	r9, [r0]
 800eedc:	4604      	mov	r4, r0
 800eede:	e7e4      	b.n	800eeaa <__pow5mult+0x6a>
 800eee0:	4638      	mov	r0, r7
 800eee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eee6:	bf00      	nop
 800eee8:	08011448 	.word	0x08011448
 800eeec:	08011279 	.word	0x08011279
 800eef0:	080112fc 	.word	0x080112fc

0800eef4 <__lshift>:
 800eef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eef8:	460c      	mov	r4, r1
 800eefa:	6849      	ldr	r1, [r1, #4]
 800eefc:	6923      	ldr	r3, [r4, #16]
 800eefe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef02:	68a3      	ldr	r3, [r4, #8]
 800ef04:	4607      	mov	r7, r0
 800ef06:	4691      	mov	r9, r2
 800ef08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef0c:	f108 0601 	add.w	r6, r8, #1
 800ef10:	42b3      	cmp	r3, r6
 800ef12:	db0b      	blt.n	800ef2c <__lshift+0x38>
 800ef14:	4638      	mov	r0, r7
 800ef16:	f7ff fddb 	bl	800ead0 <_Balloc>
 800ef1a:	4605      	mov	r5, r0
 800ef1c:	b948      	cbnz	r0, 800ef32 <__lshift+0x3e>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	4b2a      	ldr	r3, [pc, #168]	; (800efcc <__lshift+0xd8>)
 800ef22:	482b      	ldr	r0, [pc, #172]	; (800efd0 <__lshift+0xdc>)
 800ef24:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ef28:	f000 fbb8 	bl	800f69c <__assert_func>
 800ef2c:	3101      	adds	r1, #1
 800ef2e:	005b      	lsls	r3, r3, #1
 800ef30:	e7ee      	b.n	800ef10 <__lshift+0x1c>
 800ef32:	2300      	movs	r3, #0
 800ef34:	f100 0114 	add.w	r1, r0, #20
 800ef38:	f100 0210 	add.w	r2, r0, #16
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	4553      	cmp	r3, sl
 800ef40:	db37      	blt.n	800efb2 <__lshift+0xbe>
 800ef42:	6920      	ldr	r0, [r4, #16]
 800ef44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef48:	f104 0314 	add.w	r3, r4, #20
 800ef4c:	f019 091f 	ands.w	r9, r9, #31
 800ef50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef54:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef58:	d02f      	beq.n	800efba <__lshift+0xc6>
 800ef5a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef5e:	468a      	mov	sl, r1
 800ef60:	f04f 0c00 	mov.w	ip, #0
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	fa02 f209 	lsl.w	r2, r2, r9
 800ef6a:	ea42 020c 	orr.w	r2, r2, ip
 800ef6e:	f84a 2b04 	str.w	r2, [sl], #4
 800ef72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef76:	4298      	cmp	r0, r3
 800ef78:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef7c:	d8f2      	bhi.n	800ef64 <__lshift+0x70>
 800ef7e:	1b03      	subs	r3, r0, r4
 800ef80:	3b15      	subs	r3, #21
 800ef82:	f023 0303 	bic.w	r3, r3, #3
 800ef86:	3304      	adds	r3, #4
 800ef88:	f104 0215 	add.w	r2, r4, #21
 800ef8c:	4290      	cmp	r0, r2
 800ef8e:	bf38      	it	cc
 800ef90:	2304      	movcc	r3, #4
 800ef92:	f841 c003 	str.w	ip, [r1, r3]
 800ef96:	f1bc 0f00 	cmp.w	ip, #0
 800ef9a:	d001      	beq.n	800efa0 <__lshift+0xac>
 800ef9c:	f108 0602 	add.w	r6, r8, #2
 800efa0:	3e01      	subs	r6, #1
 800efa2:	4638      	mov	r0, r7
 800efa4:	612e      	str	r6, [r5, #16]
 800efa6:	4621      	mov	r1, r4
 800efa8:	f7ff fdd2 	bl	800eb50 <_Bfree>
 800efac:	4628      	mov	r0, r5
 800efae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efb2:	f842 0f04 	str.w	r0, [r2, #4]!
 800efb6:	3301      	adds	r3, #1
 800efb8:	e7c1      	b.n	800ef3e <__lshift+0x4a>
 800efba:	3904      	subs	r1, #4
 800efbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc0:	f841 2f04 	str.w	r2, [r1, #4]!
 800efc4:	4298      	cmp	r0, r3
 800efc6:	d8f9      	bhi.n	800efbc <__lshift+0xc8>
 800efc8:	e7ea      	b.n	800efa0 <__lshift+0xac>
 800efca:	bf00      	nop
 800efcc:	080112eb 	.word	0x080112eb
 800efd0:	080112fc 	.word	0x080112fc

0800efd4 <__mcmp>:
 800efd4:	b530      	push	{r4, r5, lr}
 800efd6:	6902      	ldr	r2, [r0, #16]
 800efd8:	690c      	ldr	r4, [r1, #16]
 800efda:	1b12      	subs	r2, r2, r4
 800efdc:	d10e      	bne.n	800effc <__mcmp+0x28>
 800efde:	f100 0314 	add.w	r3, r0, #20
 800efe2:	3114      	adds	r1, #20
 800efe4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800efe8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800efec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800eff0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800eff4:	42a5      	cmp	r5, r4
 800eff6:	d003      	beq.n	800f000 <__mcmp+0x2c>
 800eff8:	d305      	bcc.n	800f006 <__mcmp+0x32>
 800effa:	2201      	movs	r2, #1
 800effc:	4610      	mov	r0, r2
 800effe:	bd30      	pop	{r4, r5, pc}
 800f000:	4283      	cmp	r3, r0
 800f002:	d3f3      	bcc.n	800efec <__mcmp+0x18>
 800f004:	e7fa      	b.n	800effc <__mcmp+0x28>
 800f006:	f04f 32ff 	mov.w	r2, #4294967295
 800f00a:	e7f7      	b.n	800effc <__mcmp+0x28>

0800f00c <__mdiff>:
 800f00c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f010:	460c      	mov	r4, r1
 800f012:	4606      	mov	r6, r0
 800f014:	4611      	mov	r1, r2
 800f016:	4620      	mov	r0, r4
 800f018:	4690      	mov	r8, r2
 800f01a:	f7ff ffdb 	bl	800efd4 <__mcmp>
 800f01e:	1e05      	subs	r5, r0, #0
 800f020:	d110      	bne.n	800f044 <__mdiff+0x38>
 800f022:	4629      	mov	r1, r5
 800f024:	4630      	mov	r0, r6
 800f026:	f7ff fd53 	bl	800ead0 <_Balloc>
 800f02a:	b930      	cbnz	r0, 800f03a <__mdiff+0x2e>
 800f02c:	4b3a      	ldr	r3, [pc, #232]	; (800f118 <__mdiff+0x10c>)
 800f02e:	4602      	mov	r2, r0
 800f030:	f240 2132 	movw	r1, #562	; 0x232
 800f034:	4839      	ldr	r0, [pc, #228]	; (800f11c <__mdiff+0x110>)
 800f036:	f000 fb31 	bl	800f69c <__assert_func>
 800f03a:	2301      	movs	r3, #1
 800f03c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f040:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f044:	bfa4      	itt	ge
 800f046:	4643      	movge	r3, r8
 800f048:	46a0      	movge	r8, r4
 800f04a:	4630      	mov	r0, r6
 800f04c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f050:	bfa6      	itte	ge
 800f052:	461c      	movge	r4, r3
 800f054:	2500      	movge	r5, #0
 800f056:	2501      	movlt	r5, #1
 800f058:	f7ff fd3a 	bl	800ead0 <_Balloc>
 800f05c:	b920      	cbnz	r0, 800f068 <__mdiff+0x5c>
 800f05e:	4b2e      	ldr	r3, [pc, #184]	; (800f118 <__mdiff+0x10c>)
 800f060:	4602      	mov	r2, r0
 800f062:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f066:	e7e5      	b.n	800f034 <__mdiff+0x28>
 800f068:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f06c:	6926      	ldr	r6, [r4, #16]
 800f06e:	60c5      	str	r5, [r0, #12]
 800f070:	f104 0914 	add.w	r9, r4, #20
 800f074:	f108 0514 	add.w	r5, r8, #20
 800f078:	f100 0e14 	add.w	lr, r0, #20
 800f07c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f080:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f084:	f108 0210 	add.w	r2, r8, #16
 800f088:	46f2      	mov	sl, lr
 800f08a:	2100      	movs	r1, #0
 800f08c:	f859 3b04 	ldr.w	r3, [r9], #4
 800f090:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f094:	fa1f f883 	uxth.w	r8, r3
 800f098:	fa11 f18b 	uxtah	r1, r1, fp
 800f09c:	0c1b      	lsrs	r3, r3, #16
 800f09e:	eba1 0808 	sub.w	r8, r1, r8
 800f0a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f0a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f0aa:	fa1f f888 	uxth.w	r8, r8
 800f0ae:	1419      	asrs	r1, r3, #16
 800f0b0:	454e      	cmp	r6, r9
 800f0b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f0b6:	f84a 3b04 	str.w	r3, [sl], #4
 800f0ba:	d8e7      	bhi.n	800f08c <__mdiff+0x80>
 800f0bc:	1b33      	subs	r3, r6, r4
 800f0be:	3b15      	subs	r3, #21
 800f0c0:	f023 0303 	bic.w	r3, r3, #3
 800f0c4:	3304      	adds	r3, #4
 800f0c6:	3415      	adds	r4, #21
 800f0c8:	42a6      	cmp	r6, r4
 800f0ca:	bf38      	it	cc
 800f0cc:	2304      	movcc	r3, #4
 800f0ce:	441d      	add	r5, r3
 800f0d0:	4473      	add	r3, lr
 800f0d2:	469e      	mov	lr, r3
 800f0d4:	462e      	mov	r6, r5
 800f0d6:	4566      	cmp	r6, ip
 800f0d8:	d30e      	bcc.n	800f0f8 <__mdiff+0xec>
 800f0da:	f10c 0203 	add.w	r2, ip, #3
 800f0de:	1b52      	subs	r2, r2, r5
 800f0e0:	f022 0203 	bic.w	r2, r2, #3
 800f0e4:	3d03      	subs	r5, #3
 800f0e6:	45ac      	cmp	ip, r5
 800f0e8:	bf38      	it	cc
 800f0ea:	2200      	movcc	r2, #0
 800f0ec:	441a      	add	r2, r3
 800f0ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f0f2:	b17b      	cbz	r3, 800f114 <__mdiff+0x108>
 800f0f4:	6107      	str	r7, [r0, #16]
 800f0f6:	e7a3      	b.n	800f040 <__mdiff+0x34>
 800f0f8:	f856 8b04 	ldr.w	r8, [r6], #4
 800f0fc:	fa11 f288 	uxtah	r2, r1, r8
 800f100:	1414      	asrs	r4, r2, #16
 800f102:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f106:	b292      	uxth	r2, r2
 800f108:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f10c:	f84e 2b04 	str.w	r2, [lr], #4
 800f110:	1421      	asrs	r1, r4, #16
 800f112:	e7e0      	b.n	800f0d6 <__mdiff+0xca>
 800f114:	3f01      	subs	r7, #1
 800f116:	e7ea      	b.n	800f0ee <__mdiff+0xe2>
 800f118:	080112eb 	.word	0x080112eb
 800f11c:	080112fc 	.word	0x080112fc

0800f120 <__d2b>:
 800f120:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f124:	4689      	mov	r9, r1
 800f126:	2101      	movs	r1, #1
 800f128:	ec57 6b10 	vmov	r6, r7, d0
 800f12c:	4690      	mov	r8, r2
 800f12e:	f7ff fccf 	bl	800ead0 <_Balloc>
 800f132:	4604      	mov	r4, r0
 800f134:	b930      	cbnz	r0, 800f144 <__d2b+0x24>
 800f136:	4602      	mov	r2, r0
 800f138:	4b25      	ldr	r3, [pc, #148]	; (800f1d0 <__d2b+0xb0>)
 800f13a:	4826      	ldr	r0, [pc, #152]	; (800f1d4 <__d2b+0xb4>)
 800f13c:	f240 310a 	movw	r1, #778	; 0x30a
 800f140:	f000 faac 	bl	800f69c <__assert_func>
 800f144:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f148:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f14c:	bb35      	cbnz	r5, 800f19c <__d2b+0x7c>
 800f14e:	2e00      	cmp	r6, #0
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	d028      	beq.n	800f1a6 <__d2b+0x86>
 800f154:	4668      	mov	r0, sp
 800f156:	9600      	str	r6, [sp, #0]
 800f158:	f7ff fd82 	bl	800ec60 <__lo0bits>
 800f15c:	9900      	ldr	r1, [sp, #0]
 800f15e:	b300      	cbz	r0, 800f1a2 <__d2b+0x82>
 800f160:	9a01      	ldr	r2, [sp, #4]
 800f162:	f1c0 0320 	rsb	r3, r0, #32
 800f166:	fa02 f303 	lsl.w	r3, r2, r3
 800f16a:	430b      	orrs	r3, r1
 800f16c:	40c2      	lsrs	r2, r0
 800f16e:	6163      	str	r3, [r4, #20]
 800f170:	9201      	str	r2, [sp, #4]
 800f172:	9b01      	ldr	r3, [sp, #4]
 800f174:	61a3      	str	r3, [r4, #24]
 800f176:	2b00      	cmp	r3, #0
 800f178:	bf14      	ite	ne
 800f17a:	2202      	movne	r2, #2
 800f17c:	2201      	moveq	r2, #1
 800f17e:	6122      	str	r2, [r4, #16]
 800f180:	b1d5      	cbz	r5, 800f1b8 <__d2b+0x98>
 800f182:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f186:	4405      	add	r5, r0
 800f188:	f8c9 5000 	str.w	r5, [r9]
 800f18c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f190:	f8c8 0000 	str.w	r0, [r8]
 800f194:	4620      	mov	r0, r4
 800f196:	b003      	add	sp, #12
 800f198:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f19c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f1a0:	e7d5      	b.n	800f14e <__d2b+0x2e>
 800f1a2:	6161      	str	r1, [r4, #20]
 800f1a4:	e7e5      	b.n	800f172 <__d2b+0x52>
 800f1a6:	a801      	add	r0, sp, #4
 800f1a8:	f7ff fd5a 	bl	800ec60 <__lo0bits>
 800f1ac:	9b01      	ldr	r3, [sp, #4]
 800f1ae:	6163      	str	r3, [r4, #20]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	6122      	str	r2, [r4, #16]
 800f1b4:	3020      	adds	r0, #32
 800f1b6:	e7e3      	b.n	800f180 <__d2b+0x60>
 800f1b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f1c0:	f8c9 0000 	str.w	r0, [r9]
 800f1c4:	6918      	ldr	r0, [r3, #16]
 800f1c6:	f7ff fd2b 	bl	800ec20 <__hi0bits>
 800f1ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1ce:	e7df      	b.n	800f190 <__d2b+0x70>
 800f1d0:	080112eb 	.word	0x080112eb
 800f1d4:	080112fc 	.word	0x080112fc

0800f1d8 <_calloc_r>:
 800f1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1da:	fba1 2402 	umull	r2, r4, r1, r2
 800f1de:	b94c      	cbnz	r4, 800f1f4 <_calloc_r+0x1c>
 800f1e0:	4611      	mov	r1, r2
 800f1e2:	9201      	str	r2, [sp, #4]
 800f1e4:	f000 f87a 	bl	800f2dc <_malloc_r>
 800f1e8:	9a01      	ldr	r2, [sp, #4]
 800f1ea:	4605      	mov	r5, r0
 800f1ec:	b930      	cbnz	r0, 800f1fc <_calloc_r+0x24>
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	b003      	add	sp, #12
 800f1f2:	bd30      	pop	{r4, r5, pc}
 800f1f4:	220c      	movs	r2, #12
 800f1f6:	6002      	str	r2, [r0, #0]
 800f1f8:	2500      	movs	r5, #0
 800f1fa:	e7f8      	b.n	800f1ee <_calloc_r+0x16>
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	f7fe f941 	bl	800d484 <memset>
 800f202:	e7f4      	b.n	800f1ee <_calloc_r+0x16>

0800f204 <_free_r>:
 800f204:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f206:	2900      	cmp	r1, #0
 800f208:	d044      	beq.n	800f294 <_free_r+0x90>
 800f20a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f20e:	9001      	str	r0, [sp, #4]
 800f210:	2b00      	cmp	r3, #0
 800f212:	f1a1 0404 	sub.w	r4, r1, #4
 800f216:	bfb8      	it	lt
 800f218:	18e4      	addlt	r4, r4, r3
 800f21a:	f000 fa9b 	bl	800f754 <__malloc_lock>
 800f21e:	4a1e      	ldr	r2, [pc, #120]	; (800f298 <_free_r+0x94>)
 800f220:	9801      	ldr	r0, [sp, #4]
 800f222:	6813      	ldr	r3, [r2, #0]
 800f224:	b933      	cbnz	r3, 800f234 <_free_r+0x30>
 800f226:	6063      	str	r3, [r4, #4]
 800f228:	6014      	str	r4, [r2, #0]
 800f22a:	b003      	add	sp, #12
 800f22c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f230:	f000 ba96 	b.w	800f760 <__malloc_unlock>
 800f234:	42a3      	cmp	r3, r4
 800f236:	d908      	bls.n	800f24a <_free_r+0x46>
 800f238:	6825      	ldr	r5, [r4, #0]
 800f23a:	1961      	adds	r1, r4, r5
 800f23c:	428b      	cmp	r3, r1
 800f23e:	bf01      	itttt	eq
 800f240:	6819      	ldreq	r1, [r3, #0]
 800f242:	685b      	ldreq	r3, [r3, #4]
 800f244:	1949      	addeq	r1, r1, r5
 800f246:	6021      	streq	r1, [r4, #0]
 800f248:	e7ed      	b.n	800f226 <_free_r+0x22>
 800f24a:	461a      	mov	r2, r3
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	b10b      	cbz	r3, 800f254 <_free_r+0x50>
 800f250:	42a3      	cmp	r3, r4
 800f252:	d9fa      	bls.n	800f24a <_free_r+0x46>
 800f254:	6811      	ldr	r1, [r2, #0]
 800f256:	1855      	adds	r5, r2, r1
 800f258:	42a5      	cmp	r5, r4
 800f25a:	d10b      	bne.n	800f274 <_free_r+0x70>
 800f25c:	6824      	ldr	r4, [r4, #0]
 800f25e:	4421      	add	r1, r4
 800f260:	1854      	adds	r4, r2, r1
 800f262:	42a3      	cmp	r3, r4
 800f264:	6011      	str	r1, [r2, #0]
 800f266:	d1e0      	bne.n	800f22a <_free_r+0x26>
 800f268:	681c      	ldr	r4, [r3, #0]
 800f26a:	685b      	ldr	r3, [r3, #4]
 800f26c:	6053      	str	r3, [r2, #4]
 800f26e:	4421      	add	r1, r4
 800f270:	6011      	str	r1, [r2, #0]
 800f272:	e7da      	b.n	800f22a <_free_r+0x26>
 800f274:	d902      	bls.n	800f27c <_free_r+0x78>
 800f276:	230c      	movs	r3, #12
 800f278:	6003      	str	r3, [r0, #0]
 800f27a:	e7d6      	b.n	800f22a <_free_r+0x26>
 800f27c:	6825      	ldr	r5, [r4, #0]
 800f27e:	1961      	adds	r1, r4, r5
 800f280:	428b      	cmp	r3, r1
 800f282:	bf04      	itt	eq
 800f284:	6819      	ldreq	r1, [r3, #0]
 800f286:	685b      	ldreq	r3, [r3, #4]
 800f288:	6063      	str	r3, [r4, #4]
 800f28a:	bf04      	itt	eq
 800f28c:	1949      	addeq	r1, r1, r5
 800f28e:	6021      	streq	r1, [r4, #0]
 800f290:	6054      	str	r4, [r2, #4]
 800f292:	e7ca      	b.n	800f22a <_free_r+0x26>
 800f294:	b003      	add	sp, #12
 800f296:	bd30      	pop	{r4, r5, pc}
 800f298:	20000770 	.word	0x20000770

0800f29c <sbrk_aligned>:
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	4e0e      	ldr	r6, [pc, #56]	; (800f2d8 <sbrk_aligned+0x3c>)
 800f2a0:	460c      	mov	r4, r1
 800f2a2:	6831      	ldr	r1, [r6, #0]
 800f2a4:	4605      	mov	r5, r0
 800f2a6:	b911      	cbnz	r1, 800f2ae <sbrk_aligned+0x12>
 800f2a8:	f000 f9e8 	bl	800f67c <_sbrk_r>
 800f2ac:	6030      	str	r0, [r6, #0]
 800f2ae:	4621      	mov	r1, r4
 800f2b0:	4628      	mov	r0, r5
 800f2b2:	f000 f9e3 	bl	800f67c <_sbrk_r>
 800f2b6:	1c43      	adds	r3, r0, #1
 800f2b8:	d00a      	beq.n	800f2d0 <sbrk_aligned+0x34>
 800f2ba:	1cc4      	adds	r4, r0, #3
 800f2bc:	f024 0403 	bic.w	r4, r4, #3
 800f2c0:	42a0      	cmp	r0, r4
 800f2c2:	d007      	beq.n	800f2d4 <sbrk_aligned+0x38>
 800f2c4:	1a21      	subs	r1, r4, r0
 800f2c6:	4628      	mov	r0, r5
 800f2c8:	f000 f9d8 	bl	800f67c <_sbrk_r>
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d101      	bne.n	800f2d4 <sbrk_aligned+0x38>
 800f2d0:	f04f 34ff 	mov.w	r4, #4294967295
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	bd70      	pop	{r4, r5, r6, pc}
 800f2d8:	20000774 	.word	0x20000774

0800f2dc <_malloc_r>:
 800f2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2e0:	1ccd      	adds	r5, r1, #3
 800f2e2:	f025 0503 	bic.w	r5, r5, #3
 800f2e6:	3508      	adds	r5, #8
 800f2e8:	2d0c      	cmp	r5, #12
 800f2ea:	bf38      	it	cc
 800f2ec:	250c      	movcc	r5, #12
 800f2ee:	2d00      	cmp	r5, #0
 800f2f0:	4607      	mov	r7, r0
 800f2f2:	db01      	blt.n	800f2f8 <_malloc_r+0x1c>
 800f2f4:	42a9      	cmp	r1, r5
 800f2f6:	d905      	bls.n	800f304 <_malloc_r+0x28>
 800f2f8:	230c      	movs	r3, #12
 800f2fa:	603b      	str	r3, [r7, #0]
 800f2fc:	2600      	movs	r6, #0
 800f2fe:	4630      	mov	r0, r6
 800f300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f304:	4e2e      	ldr	r6, [pc, #184]	; (800f3c0 <_malloc_r+0xe4>)
 800f306:	f000 fa25 	bl	800f754 <__malloc_lock>
 800f30a:	6833      	ldr	r3, [r6, #0]
 800f30c:	461c      	mov	r4, r3
 800f30e:	bb34      	cbnz	r4, 800f35e <_malloc_r+0x82>
 800f310:	4629      	mov	r1, r5
 800f312:	4638      	mov	r0, r7
 800f314:	f7ff ffc2 	bl	800f29c <sbrk_aligned>
 800f318:	1c43      	adds	r3, r0, #1
 800f31a:	4604      	mov	r4, r0
 800f31c:	d14d      	bne.n	800f3ba <_malloc_r+0xde>
 800f31e:	6834      	ldr	r4, [r6, #0]
 800f320:	4626      	mov	r6, r4
 800f322:	2e00      	cmp	r6, #0
 800f324:	d140      	bne.n	800f3a8 <_malloc_r+0xcc>
 800f326:	6823      	ldr	r3, [r4, #0]
 800f328:	4631      	mov	r1, r6
 800f32a:	4638      	mov	r0, r7
 800f32c:	eb04 0803 	add.w	r8, r4, r3
 800f330:	f000 f9a4 	bl	800f67c <_sbrk_r>
 800f334:	4580      	cmp	r8, r0
 800f336:	d13a      	bne.n	800f3ae <_malloc_r+0xd2>
 800f338:	6821      	ldr	r1, [r4, #0]
 800f33a:	3503      	adds	r5, #3
 800f33c:	1a6d      	subs	r5, r5, r1
 800f33e:	f025 0503 	bic.w	r5, r5, #3
 800f342:	3508      	adds	r5, #8
 800f344:	2d0c      	cmp	r5, #12
 800f346:	bf38      	it	cc
 800f348:	250c      	movcc	r5, #12
 800f34a:	4629      	mov	r1, r5
 800f34c:	4638      	mov	r0, r7
 800f34e:	f7ff ffa5 	bl	800f29c <sbrk_aligned>
 800f352:	3001      	adds	r0, #1
 800f354:	d02b      	beq.n	800f3ae <_malloc_r+0xd2>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	442b      	add	r3, r5
 800f35a:	6023      	str	r3, [r4, #0]
 800f35c:	e00e      	b.n	800f37c <_malloc_r+0xa0>
 800f35e:	6822      	ldr	r2, [r4, #0]
 800f360:	1b52      	subs	r2, r2, r5
 800f362:	d41e      	bmi.n	800f3a2 <_malloc_r+0xc6>
 800f364:	2a0b      	cmp	r2, #11
 800f366:	d916      	bls.n	800f396 <_malloc_r+0xba>
 800f368:	1961      	adds	r1, r4, r5
 800f36a:	42a3      	cmp	r3, r4
 800f36c:	6025      	str	r5, [r4, #0]
 800f36e:	bf18      	it	ne
 800f370:	6059      	strne	r1, [r3, #4]
 800f372:	6863      	ldr	r3, [r4, #4]
 800f374:	bf08      	it	eq
 800f376:	6031      	streq	r1, [r6, #0]
 800f378:	5162      	str	r2, [r4, r5]
 800f37a:	604b      	str	r3, [r1, #4]
 800f37c:	4638      	mov	r0, r7
 800f37e:	f104 060b 	add.w	r6, r4, #11
 800f382:	f000 f9ed 	bl	800f760 <__malloc_unlock>
 800f386:	f026 0607 	bic.w	r6, r6, #7
 800f38a:	1d23      	adds	r3, r4, #4
 800f38c:	1af2      	subs	r2, r6, r3
 800f38e:	d0b6      	beq.n	800f2fe <_malloc_r+0x22>
 800f390:	1b9b      	subs	r3, r3, r6
 800f392:	50a3      	str	r3, [r4, r2]
 800f394:	e7b3      	b.n	800f2fe <_malloc_r+0x22>
 800f396:	6862      	ldr	r2, [r4, #4]
 800f398:	42a3      	cmp	r3, r4
 800f39a:	bf0c      	ite	eq
 800f39c:	6032      	streq	r2, [r6, #0]
 800f39e:	605a      	strne	r2, [r3, #4]
 800f3a0:	e7ec      	b.n	800f37c <_malloc_r+0xa0>
 800f3a2:	4623      	mov	r3, r4
 800f3a4:	6864      	ldr	r4, [r4, #4]
 800f3a6:	e7b2      	b.n	800f30e <_malloc_r+0x32>
 800f3a8:	4634      	mov	r4, r6
 800f3aa:	6876      	ldr	r6, [r6, #4]
 800f3ac:	e7b9      	b.n	800f322 <_malloc_r+0x46>
 800f3ae:	230c      	movs	r3, #12
 800f3b0:	603b      	str	r3, [r7, #0]
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	f000 f9d4 	bl	800f760 <__malloc_unlock>
 800f3b8:	e7a1      	b.n	800f2fe <_malloc_r+0x22>
 800f3ba:	6025      	str	r5, [r4, #0]
 800f3bc:	e7de      	b.n	800f37c <_malloc_r+0xa0>
 800f3be:	bf00      	nop
 800f3c0:	20000770 	.word	0x20000770

0800f3c4 <__ssputs_r>:
 800f3c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c8:	688e      	ldr	r6, [r1, #8]
 800f3ca:	429e      	cmp	r6, r3
 800f3cc:	4682      	mov	sl, r0
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	4690      	mov	r8, r2
 800f3d2:	461f      	mov	r7, r3
 800f3d4:	d838      	bhi.n	800f448 <__ssputs_r+0x84>
 800f3d6:	898a      	ldrh	r2, [r1, #12]
 800f3d8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f3dc:	d032      	beq.n	800f444 <__ssputs_r+0x80>
 800f3de:	6825      	ldr	r5, [r4, #0]
 800f3e0:	6909      	ldr	r1, [r1, #16]
 800f3e2:	eba5 0901 	sub.w	r9, r5, r1
 800f3e6:	6965      	ldr	r5, [r4, #20]
 800f3e8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f3ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	444b      	add	r3, r9
 800f3f4:	106d      	asrs	r5, r5, #1
 800f3f6:	429d      	cmp	r5, r3
 800f3f8:	bf38      	it	cc
 800f3fa:	461d      	movcc	r5, r3
 800f3fc:	0553      	lsls	r3, r2, #21
 800f3fe:	d531      	bpl.n	800f464 <__ssputs_r+0xa0>
 800f400:	4629      	mov	r1, r5
 800f402:	f7ff ff6b 	bl	800f2dc <_malloc_r>
 800f406:	4606      	mov	r6, r0
 800f408:	b950      	cbnz	r0, 800f420 <__ssputs_r+0x5c>
 800f40a:	230c      	movs	r3, #12
 800f40c:	f8ca 3000 	str.w	r3, [sl]
 800f410:	89a3      	ldrh	r3, [r4, #12]
 800f412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f416:	81a3      	strh	r3, [r4, #12]
 800f418:	f04f 30ff 	mov.w	r0, #4294967295
 800f41c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f420:	6921      	ldr	r1, [r4, #16]
 800f422:	464a      	mov	r2, r9
 800f424:	f7ff fb46 	bl	800eab4 <memcpy>
 800f428:	89a3      	ldrh	r3, [r4, #12]
 800f42a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f432:	81a3      	strh	r3, [r4, #12]
 800f434:	6126      	str	r6, [r4, #16]
 800f436:	6165      	str	r5, [r4, #20]
 800f438:	444e      	add	r6, r9
 800f43a:	eba5 0509 	sub.w	r5, r5, r9
 800f43e:	6026      	str	r6, [r4, #0]
 800f440:	60a5      	str	r5, [r4, #8]
 800f442:	463e      	mov	r6, r7
 800f444:	42be      	cmp	r6, r7
 800f446:	d900      	bls.n	800f44a <__ssputs_r+0x86>
 800f448:	463e      	mov	r6, r7
 800f44a:	6820      	ldr	r0, [r4, #0]
 800f44c:	4632      	mov	r2, r6
 800f44e:	4641      	mov	r1, r8
 800f450:	f000 f966 	bl	800f720 <memmove>
 800f454:	68a3      	ldr	r3, [r4, #8]
 800f456:	1b9b      	subs	r3, r3, r6
 800f458:	60a3      	str	r3, [r4, #8]
 800f45a:	6823      	ldr	r3, [r4, #0]
 800f45c:	4433      	add	r3, r6
 800f45e:	6023      	str	r3, [r4, #0]
 800f460:	2000      	movs	r0, #0
 800f462:	e7db      	b.n	800f41c <__ssputs_r+0x58>
 800f464:	462a      	mov	r2, r5
 800f466:	f000 f981 	bl	800f76c <_realloc_r>
 800f46a:	4606      	mov	r6, r0
 800f46c:	2800      	cmp	r0, #0
 800f46e:	d1e1      	bne.n	800f434 <__ssputs_r+0x70>
 800f470:	6921      	ldr	r1, [r4, #16]
 800f472:	4650      	mov	r0, sl
 800f474:	f7ff fec6 	bl	800f204 <_free_r>
 800f478:	e7c7      	b.n	800f40a <__ssputs_r+0x46>
	...

0800f47c <_svfiprintf_r>:
 800f47c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f480:	4698      	mov	r8, r3
 800f482:	898b      	ldrh	r3, [r1, #12]
 800f484:	061b      	lsls	r3, r3, #24
 800f486:	b09d      	sub	sp, #116	; 0x74
 800f488:	4607      	mov	r7, r0
 800f48a:	460d      	mov	r5, r1
 800f48c:	4614      	mov	r4, r2
 800f48e:	d50e      	bpl.n	800f4ae <_svfiprintf_r+0x32>
 800f490:	690b      	ldr	r3, [r1, #16]
 800f492:	b963      	cbnz	r3, 800f4ae <_svfiprintf_r+0x32>
 800f494:	2140      	movs	r1, #64	; 0x40
 800f496:	f7ff ff21 	bl	800f2dc <_malloc_r>
 800f49a:	6028      	str	r0, [r5, #0]
 800f49c:	6128      	str	r0, [r5, #16]
 800f49e:	b920      	cbnz	r0, 800f4aa <_svfiprintf_r+0x2e>
 800f4a0:	230c      	movs	r3, #12
 800f4a2:	603b      	str	r3, [r7, #0]
 800f4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a8:	e0d1      	b.n	800f64e <_svfiprintf_r+0x1d2>
 800f4aa:	2340      	movs	r3, #64	; 0x40
 800f4ac:	616b      	str	r3, [r5, #20]
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	9309      	str	r3, [sp, #36]	; 0x24
 800f4b2:	2320      	movs	r3, #32
 800f4b4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f4b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800f4bc:	2330      	movs	r3, #48	; 0x30
 800f4be:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f668 <_svfiprintf_r+0x1ec>
 800f4c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f4c6:	f04f 0901 	mov.w	r9, #1
 800f4ca:	4623      	mov	r3, r4
 800f4cc:	469a      	mov	sl, r3
 800f4ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4d2:	b10a      	cbz	r2, 800f4d8 <_svfiprintf_r+0x5c>
 800f4d4:	2a25      	cmp	r2, #37	; 0x25
 800f4d6:	d1f9      	bne.n	800f4cc <_svfiprintf_r+0x50>
 800f4d8:	ebba 0b04 	subs.w	fp, sl, r4
 800f4dc:	d00b      	beq.n	800f4f6 <_svfiprintf_r+0x7a>
 800f4de:	465b      	mov	r3, fp
 800f4e0:	4622      	mov	r2, r4
 800f4e2:	4629      	mov	r1, r5
 800f4e4:	4638      	mov	r0, r7
 800f4e6:	f7ff ff6d 	bl	800f3c4 <__ssputs_r>
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	f000 80aa 	beq.w	800f644 <_svfiprintf_r+0x1c8>
 800f4f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f4f2:	445a      	add	r2, fp
 800f4f4:	9209      	str	r2, [sp, #36]	; 0x24
 800f4f6:	f89a 3000 	ldrb.w	r3, [sl]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	f000 80a2 	beq.w	800f644 <_svfiprintf_r+0x1c8>
 800f500:	2300      	movs	r3, #0
 800f502:	f04f 32ff 	mov.w	r2, #4294967295
 800f506:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f50a:	f10a 0a01 	add.w	sl, sl, #1
 800f50e:	9304      	str	r3, [sp, #16]
 800f510:	9307      	str	r3, [sp, #28]
 800f512:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f516:	931a      	str	r3, [sp, #104]	; 0x68
 800f518:	4654      	mov	r4, sl
 800f51a:	2205      	movs	r2, #5
 800f51c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f520:	4851      	ldr	r0, [pc, #324]	; (800f668 <_svfiprintf_r+0x1ec>)
 800f522:	f7f0 fe85 	bl	8000230 <memchr>
 800f526:	9a04      	ldr	r2, [sp, #16]
 800f528:	b9d8      	cbnz	r0, 800f562 <_svfiprintf_r+0xe6>
 800f52a:	06d0      	lsls	r0, r2, #27
 800f52c:	bf44      	itt	mi
 800f52e:	2320      	movmi	r3, #32
 800f530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f534:	0711      	lsls	r1, r2, #28
 800f536:	bf44      	itt	mi
 800f538:	232b      	movmi	r3, #43	; 0x2b
 800f53a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f53e:	f89a 3000 	ldrb.w	r3, [sl]
 800f542:	2b2a      	cmp	r3, #42	; 0x2a
 800f544:	d015      	beq.n	800f572 <_svfiprintf_r+0xf6>
 800f546:	9a07      	ldr	r2, [sp, #28]
 800f548:	4654      	mov	r4, sl
 800f54a:	2000      	movs	r0, #0
 800f54c:	f04f 0c0a 	mov.w	ip, #10
 800f550:	4621      	mov	r1, r4
 800f552:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f556:	3b30      	subs	r3, #48	; 0x30
 800f558:	2b09      	cmp	r3, #9
 800f55a:	d94e      	bls.n	800f5fa <_svfiprintf_r+0x17e>
 800f55c:	b1b0      	cbz	r0, 800f58c <_svfiprintf_r+0x110>
 800f55e:	9207      	str	r2, [sp, #28]
 800f560:	e014      	b.n	800f58c <_svfiprintf_r+0x110>
 800f562:	eba0 0308 	sub.w	r3, r0, r8
 800f566:	fa09 f303 	lsl.w	r3, r9, r3
 800f56a:	4313      	orrs	r3, r2
 800f56c:	9304      	str	r3, [sp, #16]
 800f56e:	46a2      	mov	sl, r4
 800f570:	e7d2      	b.n	800f518 <_svfiprintf_r+0x9c>
 800f572:	9b03      	ldr	r3, [sp, #12]
 800f574:	1d19      	adds	r1, r3, #4
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	9103      	str	r1, [sp, #12]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	bfbb      	ittet	lt
 800f57e:	425b      	neglt	r3, r3
 800f580:	f042 0202 	orrlt.w	r2, r2, #2
 800f584:	9307      	strge	r3, [sp, #28]
 800f586:	9307      	strlt	r3, [sp, #28]
 800f588:	bfb8      	it	lt
 800f58a:	9204      	strlt	r2, [sp, #16]
 800f58c:	7823      	ldrb	r3, [r4, #0]
 800f58e:	2b2e      	cmp	r3, #46	; 0x2e
 800f590:	d10c      	bne.n	800f5ac <_svfiprintf_r+0x130>
 800f592:	7863      	ldrb	r3, [r4, #1]
 800f594:	2b2a      	cmp	r3, #42	; 0x2a
 800f596:	d135      	bne.n	800f604 <_svfiprintf_r+0x188>
 800f598:	9b03      	ldr	r3, [sp, #12]
 800f59a:	1d1a      	adds	r2, r3, #4
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	9203      	str	r2, [sp, #12]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	bfb8      	it	lt
 800f5a4:	f04f 33ff 	movlt.w	r3, #4294967295
 800f5a8:	3402      	adds	r4, #2
 800f5aa:	9305      	str	r3, [sp, #20]
 800f5ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f678 <_svfiprintf_r+0x1fc>
 800f5b0:	7821      	ldrb	r1, [r4, #0]
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	4650      	mov	r0, sl
 800f5b6:	f7f0 fe3b 	bl	8000230 <memchr>
 800f5ba:	b140      	cbz	r0, 800f5ce <_svfiprintf_r+0x152>
 800f5bc:	2340      	movs	r3, #64	; 0x40
 800f5be:	eba0 000a 	sub.w	r0, r0, sl
 800f5c2:	fa03 f000 	lsl.w	r0, r3, r0
 800f5c6:	9b04      	ldr	r3, [sp, #16]
 800f5c8:	4303      	orrs	r3, r0
 800f5ca:	3401      	adds	r4, #1
 800f5cc:	9304      	str	r3, [sp, #16]
 800f5ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5d2:	4826      	ldr	r0, [pc, #152]	; (800f66c <_svfiprintf_r+0x1f0>)
 800f5d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f5d8:	2206      	movs	r2, #6
 800f5da:	f7f0 fe29 	bl	8000230 <memchr>
 800f5de:	2800      	cmp	r0, #0
 800f5e0:	d038      	beq.n	800f654 <_svfiprintf_r+0x1d8>
 800f5e2:	4b23      	ldr	r3, [pc, #140]	; (800f670 <_svfiprintf_r+0x1f4>)
 800f5e4:	bb1b      	cbnz	r3, 800f62e <_svfiprintf_r+0x1b2>
 800f5e6:	9b03      	ldr	r3, [sp, #12]
 800f5e8:	3307      	adds	r3, #7
 800f5ea:	f023 0307 	bic.w	r3, r3, #7
 800f5ee:	3308      	adds	r3, #8
 800f5f0:	9303      	str	r3, [sp, #12]
 800f5f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f5f4:	4433      	add	r3, r6
 800f5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800f5f8:	e767      	b.n	800f4ca <_svfiprintf_r+0x4e>
 800f5fa:	fb0c 3202 	mla	r2, ip, r2, r3
 800f5fe:	460c      	mov	r4, r1
 800f600:	2001      	movs	r0, #1
 800f602:	e7a5      	b.n	800f550 <_svfiprintf_r+0xd4>
 800f604:	2300      	movs	r3, #0
 800f606:	3401      	adds	r4, #1
 800f608:	9305      	str	r3, [sp, #20]
 800f60a:	4619      	mov	r1, r3
 800f60c:	f04f 0c0a 	mov.w	ip, #10
 800f610:	4620      	mov	r0, r4
 800f612:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f616:	3a30      	subs	r2, #48	; 0x30
 800f618:	2a09      	cmp	r2, #9
 800f61a:	d903      	bls.n	800f624 <_svfiprintf_r+0x1a8>
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d0c5      	beq.n	800f5ac <_svfiprintf_r+0x130>
 800f620:	9105      	str	r1, [sp, #20]
 800f622:	e7c3      	b.n	800f5ac <_svfiprintf_r+0x130>
 800f624:	fb0c 2101 	mla	r1, ip, r1, r2
 800f628:	4604      	mov	r4, r0
 800f62a:	2301      	movs	r3, #1
 800f62c:	e7f0      	b.n	800f610 <_svfiprintf_r+0x194>
 800f62e:	ab03      	add	r3, sp, #12
 800f630:	9300      	str	r3, [sp, #0]
 800f632:	462a      	mov	r2, r5
 800f634:	4b0f      	ldr	r3, [pc, #60]	; (800f674 <_svfiprintf_r+0x1f8>)
 800f636:	a904      	add	r1, sp, #16
 800f638:	4638      	mov	r0, r7
 800f63a:	f7fd ffcb 	bl	800d5d4 <_printf_float>
 800f63e:	1c42      	adds	r2, r0, #1
 800f640:	4606      	mov	r6, r0
 800f642:	d1d6      	bne.n	800f5f2 <_svfiprintf_r+0x176>
 800f644:	89ab      	ldrh	r3, [r5, #12]
 800f646:	065b      	lsls	r3, r3, #25
 800f648:	f53f af2c 	bmi.w	800f4a4 <_svfiprintf_r+0x28>
 800f64c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f64e:	b01d      	add	sp, #116	; 0x74
 800f650:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f654:	ab03      	add	r3, sp, #12
 800f656:	9300      	str	r3, [sp, #0]
 800f658:	462a      	mov	r2, r5
 800f65a:	4b06      	ldr	r3, [pc, #24]	; (800f674 <_svfiprintf_r+0x1f8>)
 800f65c:	a904      	add	r1, sp, #16
 800f65e:	4638      	mov	r0, r7
 800f660:	f7fe fa5c 	bl	800db1c <_printf_i>
 800f664:	e7eb      	b.n	800f63e <_svfiprintf_r+0x1c2>
 800f666:	bf00      	nop
 800f668:	08011454 	.word	0x08011454
 800f66c:	0801145e 	.word	0x0801145e
 800f670:	0800d5d5 	.word	0x0800d5d5
 800f674:	0800f3c5 	.word	0x0800f3c5
 800f678:	0801145a 	.word	0x0801145a

0800f67c <_sbrk_r>:
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	4d06      	ldr	r5, [pc, #24]	; (800f698 <_sbrk_r+0x1c>)
 800f680:	2300      	movs	r3, #0
 800f682:	4604      	mov	r4, r0
 800f684:	4608      	mov	r0, r1
 800f686:	602b      	str	r3, [r5, #0]
 800f688:	f7f5 fca6 	bl	8004fd8 <_sbrk>
 800f68c:	1c43      	adds	r3, r0, #1
 800f68e:	d102      	bne.n	800f696 <_sbrk_r+0x1a>
 800f690:	682b      	ldr	r3, [r5, #0]
 800f692:	b103      	cbz	r3, 800f696 <_sbrk_r+0x1a>
 800f694:	6023      	str	r3, [r4, #0]
 800f696:	bd38      	pop	{r3, r4, r5, pc}
 800f698:	20000778 	.word	0x20000778

0800f69c <__assert_func>:
 800f69c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f69e:	4614      	mov	r4, r2
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	4b09      	ldr	r3, [pc, #36]	; (800f6c8 <__assert_func+0x2c>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	4605      	mov	r5, r0
 800f6a8:	68d8      	ldr	r0, [r3, #12]
 800f6aa:	b14c      	cbz	r4, 800f6c0 <__assert_func+0x24>
 800f6ac:	4b07      	ldr	r3, [pc, #28]	; (800f6cc <__assert_func+0x30>)
 800f6ae:	9100      	str	r1, [sp, #0]
 800f6b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f6b4:	4906      	ldr	r1, [pc, #24]	; (800f6d0 <__assert_func+0x34>)
 800f6b6:	462b      	mov	r3, r5
 800f6b8:	f000 f80e 	bl	800f6d8 <fiprintf>
 800f6bc:	f000 faac 	bl	800fc18 <abort>
 800f6c0:	4b04      	ldr	r3, [pc, #16]	; (800f6d4 <__assert_func+0x38>)
 800f6c2:	461c      	mov	r4, r3
 800f6c4:	e7f3      	b.n	800f6ae <__assert_func+0x12>
 800f6c6:	bf00      	nop
 800f6c8:	2000002c 	.word	0x2000002c
 800f6cc:	08011465 	.word	0x08011465
 800f6d0:	08011472 	.word	0x08011472
 800f6d4:	080114a0 	.word	0x080114a0

0800f6d8 <fiprintf>:
 800f6d8:	b40e      	push	{r1, r2, r3}
 800f6da:	b503      	push	{r0, r1, lr}
 800f6dc:	4601      	mov	r1, r0
 800f6de:	ab03      	add	r3, sp, #12
 800f6e0:	4805      	ldr	r0, [pc, #20]	; (800f6f8 <fiprintf+0x20>)
 800f6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f6e6:	6800      	ldr	r0, [r0, #0]
 800f6e8:	9301      	str	r3, [sp, #4]
 800f6ea:	f000 f897 	bl	800f81c <_vfiprintf_r>
 800f6ee:	b002      	add	sp, #8
 800f6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6f4:	b003      	add	sp, #12
 800f6f6:	4770      	bx	lr
 800f6f8:	2000002c 	.word	0x2000002c

0800f6fc <__ascii_mbtowc>:
 800f6fc:	b082      	sub	sp, #8
 800f6fe:	b901      	cbnz	r1, 800f702 <__ascii_mbtowc+0x6>
 800f700:	a901      	add	r1, sp, #4
 800f702:	b142      	cbz	r2, 800f716 <__ascii_mbtowc+0x1a>
 800f704:	b14b      	cbz	r3, 800f71a <__ascii_mbtowc+0x1e>
 800f706:	7813      	ldrb	r3, [r2, #0]
 800f708:	600b      	str	r3, [r1, #0]
 800f70a:	7812      	ldrb	r2, [r2, #0]
 800f70c:	1e10      	subs	r0, r2, #0
 800f70e:	bf18      	it	ne
 800f710:	2001      	movne	r0, #1
 800f712:	b002      	add	sp, #8
 800f714:	4770      	bx	lr
 800f716:	4610      	mov	r0, r2
 800f718:	e7fb      	b.n	800f712 <__ascii_mbtowc+0x16>
 800f71a:	f06f 0001 	mvn.w	r0, #1
 800f71e:	e7f8      	b.n	800f712 <__ascii_mbtowc+0x16>

0800f720 <memmove>:
 800f720:	4288      	cmp	r0, r1
 800f722:	b510      	push	{r4, lr}
 800f724:	eb01 0402 	add.w	r4, r1, r2
 800f728:	d902      	bls.n	800f730 <memmove+0x10>
 800f72a:	4284      	cmp	r4, r0
 800f72c:	4623      	mov	r3, r4
 800f72e:	d807      	bhi.n	800f740 <memmove+0x20>
 800f730:	1e43      	subs	r3, r0, #1
 800f732:	42a1      	cmp	r1, r4
 800f734:	d008      	beq.n	800f748 <memmove+0x28>
 800f736:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f73a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f73e:	e7f8      	b.n	800f732 <memmove+0x12>
 800f740:	4402      	add	r2, r0
 800f742:	4601      	mov	r1, r0
 800f744:	428a      	cmp	r2, r1
 800f746:	d100      	bne.n	800f74a <memmove+0x2a>
 800f748:	bd10      	pop	{r4, pc}
 800f74a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f74e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f752:	e7f7      	b.n	800f744 <memmove+0x24>

0800f754 <__malloc_lock>:
 800f754:	4801      	ldr	r0, [pc, #4]	; (800f75c <__malloc_lock+0x8>)
 800f756:	f000 bc1f 	b.w	800ff98 <__retarget_lock_acquire_recursive>
 800f75a:	bf00      	nop
 800f75c:	2000077c 	.word	0x2000077c

0800f760 <__malloc_unlock>:
 800f760:	4801      	ldr	r0, [pc, #4]	; (800f768 <__malloc_unlock+0x8>)
 800f762:	f000 bc1a 	b.w	800ff9a <__retarget_lock_release_recursive>
 800f766:	bf00      	nop
 800f768:	2000077c 	.word	0x2000077c

0800f76c <_realloc_r>:
 800f76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f770:	4680      	mov	r8, r0
 800f772:	4614      	mov	r4, r2
 800f774:	460e      	mov	r6, r1
 800f776:	b921      	cbnz	r1, 800f782 <_realloc_r+0x16>
 800f778:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f77c:	4611      	mov	r1, r2
 800f77e:	f7ff bdad 	b.w	800f2dc <_malloc_r>
 800f782:	b92a      	cbnz	r2, 800f790 <_realloc_r+0x24>
 800f784:	f7ff fd3e 	bl	800f204 <_free_r>
 800f788:	4625      	mov	r5, r4
 800f78a:	4628      	mov	r0, r5
 800f78c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f790:	f000 fc6a 	bl	8010068 <_malloc_usable_size_r>
 800f794:	4284      	cmp	r4, r0
 800f796:	4607      	mov	r7, r0
 800f798:	d802      	bhi.n	800f7a0 <_realloc_r+0x34>
 800f79a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f79e:	d812      	bhi.n	800f7c6 <_realloc_r+0x5a>
 800f7a0:	4621      	mov	r1, r4
 800f7a2:	4640      	mov	r0, r8
 800f7a4:	f7ff fd9a 	bl	800f2dc <_malloc_r>
 800f7a8:	4605      	mov	r5, r0
 800f7aa:	2800      	cmp	r0, #0
 800f7ac:	d0ed      	beq.n	800f78a <_realloc_r+0x1e>
 800f7ae:	42bc      	cmp	r4, r7
 800f7b0:	4622      	mov	r2, r4
 800f7b2:	4631      	mov	r1, r6
 800f7b4:	bf28      	it	cs
 800f7b6:	463a      	movcs	r2, r7
 800f7b8:	f7ff f97c 	bl	800eab4 <memcpy>
 800f7bc:	4631      	mov	r1, r6
 800f7be:	4640      	mov	r0, r8
 800f7c0:	f7ff fd20 	bl	800f204 <_free_r>
 800f7c4:	e7e1      	b.n	800f78a <_realloc_r+0x1e>
 800f7c6:	4635      	mov	r5, r6
 800f7c8:	e7df      	b.n	800f78a <_realloc_r+0x1e>

0800f7ca <__sfputc_r>:
 800f7ca:	6893      	ldr	r3, [r2, #8]
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	b410      	push	{r4}
 800f7d2:	6093      	str	r3, [r2, #8]
 800f7d4:	da08      	bge.n	800f7e8 <__sfputc_r+0x1e>
 800f7d6:	6994      	ldr	r4, [r2, #24]
 800f7d8:	42a3      	cmp	r3, r4
 800f7da:	db01      	blt.n	800f7e0 <__sfputc_r+0x16>
 800f7dc:	290a      	cmp	r1, #10
 800f7de:	d103      	bne.n	800f7e8 <__sfputc_r+0x1e>
 800f7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7e4:	f000 b94a 	b.w	800fa7c <__swbuf_r>
 800f7e8:	6813      	ldr	r3, [r2, #0]
 800f7ea:	1c58      	adds	r0, r3, #1
 800f7ec:	6010      	str	r0, [r2, #0]
 800f7ee:	7019      	strb	r1, [r3, #0]
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f7f6:	4770      	bx	lr

0800f7f8 <__sfputs_r>:
 800f7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7fa:	4606      	mov	r6, r0
 800f7fc:	460f      	mov	r7, r1
 800f7fe:	4614      	mov	r4, r2
 800f800:	18d5      	adds	r5, r2, r3
 800f802:	42ac      	cmp	r4, r5
 800f804:	d101      	bne.n	800f80a <__sfputs_r+0x12>
 800f806:	2000      	movs	r0, #0
 800f808:	e007      	b.n	800f81a <__sfputs_r+0x22>
 800f80a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f80e:	463a      	mov	r2, r7
 800f810:	4630      	mov	r0, r6
 800f812:	f7ff ffda 	bl	800f7ca <__sfputc_r>
 800f816:	1c43      	adds	r3, r0, #1
 800f818:	d1f3      	bne.n	800f802 <__sfputs_r+0xa>
 800f81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f81c <_vfiprintf_r>:
 800f81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f820:	460d      	mov	r5, r1
 800f822:	b09d      	sub	sp, #116	; 0x74
 800f824:	4614      	mov	r4, r2
 800f826:	4698      	mov	r8, r3
 800f828:	4606      	mov	r6, r0
 800f82a:	b118      	cbz	r0, 800f834 <_vfiprintf_r+0x18>
 800f82c:	6983      	ldr	r3, [r0, #24]
 800f82e:	b90b      	cbnz	r3, 800f834 <_vfiprintf_r+0x18>
 800f830:	f000 fb14 	bl	800fe5c <__sinit>
 800f834:	4b89      	ldr	r3, [pc, #548]	; (800fa5c <_vfiprintf_r+0x240>)
 800f836:	429d      	cmp	r5, r3
 800f838:	d11b      	bne.n	800f872 <_vfiprintf_r+0x56>
 800f83a:	6875      	ldr	r5, [r6, #4]
 800f83c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f83e:	07d9      	lsls	r1, r3, #31
 800f840:	d405      	bmi.n	800f84e <_vfiprintf_r+0x32>
 800f842:	89ab      	ldrh	r3, [r5, #12]
 800f844:	059a      	lsls	r2, r3, #22
 800f846:	d402      	bmi.n	800f84e <_vfiprintf_r+0x32>
 800f848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f84a:	f000 fba5 	bl	800ff98 <__retarget_lock_acquire_recursive>
 800f84e:	89ab      	ldrh	r3, [r5, #12]
 800f850:	071b      	lsls	r3, r3, #28
 800f852:	d501      	bpl.n	800f858 <_vfiprintf_r+0x3c>
 800f854:	692b      	ldr	r3, [r5, #16]
 800f856:	b9eb      	cbnz	r3, 800f894 <_vfiprintf_r+0x78>
 800f858:	4629      	mov	r1, r5
 800f85a:	4630      	mov	r0, r6
 800f85c:	f000 f96e 	bl	800fb3c <__swsetup_r>
 800f860:	b1c0      	cbz	r0, 800f894 <_vfiprintf_r+0x78>
 800f862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f864:	07dc      	lsls	r4, r3, #31
 800f866:	d50e      	bpl.n	800f886 <_vfiprintf_r+0x6a>
 800f868:	f04f 30ff 	mov.w	r0, #4294967295
 800f86c:	b01d      	add	sp, #116	; 0x74
 800f86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f872:	4b7b      	ldr	r3, [pc, #492]	; (800fa60 <_vfiprintf_r+0x244>)
 800f874:	429d      	cmp	r5, r3
 800f876:	d101      	bne.n	800f87c <_vfiprintf_r+0x60>
 800f878:	68b5      	ldr	r5, [r6, #8]
 800f87a:	e7df      	b.n	800f83c <_vfiprintf_r+0x20>
 800f87c:	4b79      	ldr	r3, [pc, #484]	; (800fa64 <_vfiprintf_r+0x248>)
 800f87e:	429d      	cmp	r5, r3
 800f880:	bf08      	it	eq
 800f882:	68f5      	ldreq	r5, [r6, #12]
 800f884:	e7da      	b.n	800f83c <_vfiprintf_r+0x20>
 800f886:	89ab      	ldrh	r3, [r5, #12]
 800f888:	0598      	lsls	r0, r3, #22
 800f88a:	d4ed      	bmi.n	800f868 <_vfiprintf_r+0x4c>
 800f88c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f88e:	f000 fb84 	bl	800ff9a <__retarget_lock_release_recursive>
 800f892:	e7e9      	b.n	800f868 <_vfiprintf_r+0x4c>
 800f894:	2300      	movs	r3, #0
 800f896:	9309      	str	r3, [sp, #36]	; 0x24
 800f898:	2320      	movs	r3, #32
 800f89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f89e:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8a2:	2330      	movs	r3, #48	; 0x30
 800f8a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fa68 <_vfiprintf_r+0x24c>
 800f8a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f8ac:	f04f 0901 	mov.w	r9, #1
 800f8b0:	4623      	mov	r3, r4
 800f8b2:	469a      	mov	sl, r3
 800f8b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8b8:	b10a      	cbz	r2, 800f8be <_vfiprintf_r+0xa2>
 800f8ba:	2a25      	cmp	r2, #37	; 0x25
 800f8bc:	d1f9      	bne.n	800f8b2 <_vfiprintf_r+0x96>
 800f8be:	ebba 0b04 	subs.w	fp, sl, r4
 800f8c2:	d00b      	beq.n	800f8dc <_vfiprintf_r+0xc0>
 800f8c4:	465b      	mov	r3, fp
 800f8c6:	4622      	mov	r2, r4
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	4630      	mov	r0, r6
 800f8cc:	f7ff ff94 	bl	800f7f8 <__sfputs_r>
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	f000 80aa 	beq.w	800fa2a <_vfiprintf_r+0x20e>
 800f8d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8d8:	445a      	add	r2, fp
 800f8da:	9209      	str	r2, [sp, #36]	; 0x24
 800f8dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	f000 80a2 	beq.w	800fa2a <_vfiprintf_r+0x20e>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	f04f 32ff 	mov.w	r2, #4294967295
 800f8ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f8f0:	f10a 0a01 	add.w	sl, sl, #1
 800f8f4:	9304      	str	r3, [sp, #16]
 800f8f6:	9307      	str	r3, [sp, #28]
 800f8f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f8fc:	931a      	str	r3, [sp, #104]	; 0x68
 800f8fe:	4654      	mov	r4, sl
 800f900:	2205      	movs	r2, #5
 800f902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f906:	4858      	ldr	r0, [pc, #352]	; (800fa68 <_vfiprintf_r+0x24c>)
 800f908:	f7f0 fc92 	bl	8000230 <memchr>
 800f90c:	9a04      	ldr	r2, [sp, #16]
 800f90e:	b9d8      	cbnz	r0, 800f948 <_vfiprintf_r+0x12c>
 800f910:	06d1      	lsls	r1, r2, #27
 800f912:	bf44      	itt	mi
 800f914:	2320      	movmi	r3, #32
 800f916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f91a:	0713      	lsls	r3, r2, #28
 800f91c:	bf44      	itt	mi
 800f91e:	232b      	movmi	r3, #43	; 0x2b
 800f920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f924:	f89a 3000 	ldrb.w	r3, [sl]
 800f928:	2b2a      	cmp	r3, #42	; 0x2a
 800f92a:	d015      	beq.n	800f958 <_vfiprintf_r+0x13c>
 800f92c:	9a07      	ldr	r2, [sp, #28]
 800f92e:	4654      	mov	r4, sl
 800f930:	2000      	movs	r0, #0
 800f932:	f04f 0c0a 	mov.w	ip, #10
 800f936:	4621      	mov	r1, r4
 800f938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f93c:	3b30      	subs	r3, #48	; 0x30
 800f93e:	2b09      	cmp	r3, #9
 800f940:	d94e      	bls.n	800f9e0 <_vfiprintf_r+0x1c4>
 800f942:	b1b0      	cbz	r0, 800f972 <_vfiprintf_r+0x156>
 800f944:	9207      	str	r2, [sp, #28]
 800f946:	e014      	b.n	800f972 <_vfiprintf_r+0x156>
 800f948:	eba0 0308 	sub.w	r3, r0, r8
 800f94c:	fa09 f303 	lsl.w	r3, r9, r3
 800f950:	4313      	orrs	r3, r2
 800f952:	9304      	str	r3, [sp, #16]
 800f954:	46a2      	mov	sl, r4
 800f956:	e7d2      	b.n	800f8fe <_vfiprintf_r+0xe2>
 800f958:	9b03      	ldr	r3, [sp, #12]
 800f95a:	1d19      	adds	r1, r3, #4
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	9103      	str	r1, [sp, #12]
 800f960:	2b00      	cmp	r3, #0
 800f962:	bfbb      	ittet	lt
 800f964:	425b      	neglt	r3, r3
 800f966:	f042 0202 	orrlt.w	r2, r2, #2
 800f96a:	9307      	strge	r3, [sp, #28]
 800f96c:	9307      	strlt	r3, [sp, #28]
 800f96e:	bfb8      	it	lt
 800f970:	9204      	strlt	r2, [sp, #16]
 800f972:	7823      	ldrb	r3, [r4, #0]
 800f974:	2b2e      	cmp	r3, #46	; 0x2e
 800f976:	d10c      	bne.n	800f992 <_vfiprintf_r+0x176>
 800f978:	7863      	ldrb	r3, [r4, #1]
 800f97a:	2b2a      	cmp	r3, #42	; 0x2a
 800f97c:	d135      	bne.n	800f9ea <_vfiprintf_r+0x1ce>
 800f97e:	9b03      	ldr	r3, [sp, #12]
 800f980:	1d1a      	adds	r2, r3, #4
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	9203      	str	r2, [sp, #12]
 800f986:	2b00      	cmp	r3, #0
 800f988:	bfb8      	it	lt
 800f98a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f98e:	3402      	adds	r4, #2
 800f990:	9305      	str	r3, [sp, #20]
 800f992:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fa78 <_vfiprintf_r+0x25c>
 800f996:	7821      	ldrb	r1, [r4, #0]
 800f998:	2203      	movs	r2, #3
 800f99a:	4650      	mov	r0, sl
 800f99c:	f7f0 fc48 	bl	8000230 <memchr>
 800f9a0:	b140      	cbz	r0, 800f9b4 <_vfiprintf_r+0x198>
 800f9a2:	2340      	movs	r3, #64	; 0x40
 800f9a4:	eba0 000a 	sub.w	r0, r0, sl
 800f9a8:	fa03 f000 	lsl.w	r0, r3, r0
 800f9ac:	9b04      	ldr	r3, [sp, #16]
 800f9ae:	4303      	orrs	r3, r0
 800f9b0:	3401      	adds	r4, #1
 800f9b2:	9304      	str	r3, [sp, #16]
 800f9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b8:	482c      	ldr	r0, [pc, #176]	; (800fa6c <_vfiprintf_r+0x250>)
 800f9ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f9be:	2206      	movs	r2, #6
 800f9c0:	f7f0 fc36 	bl	8000230 <memchr>
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d03f      	beq.n	800fa48 <_vfiprintf_r+0x22c>
 800f9c8:	4b29      	ldr	r3, [pc, #164]	; (800fa70 <_vfiprintf_r+0x254>)
 800f9ca:	bb1b      	cbnz	r3, 800fa14 <_vfiprintf_r+0x1f8>
 800f9cc:	9b03      	ldr	r3, [sp, #12]
 800f9ce:	3307      	adds	r3, #7
 800f9d0:	f023 0307 	bic.w	r3, r3, #7
 800f9d4:	3308      	adds	r3, #8
 800f9d6:	9303      	str	r3, [sp, #12]
 800f9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9da:	443b      	add	r3, r7
 800f9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800f9de:	e767      	b.n	800f8b0 <_vfiprintf_r+0x94>
 800f9e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f9e4:	460c      	mov	r4, r1
 800f9e6:	2001      	movs	r0, #1
 800f9e8:	e7a5      	b.n	800f936 <_vfiprintf_r+0x11a>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	3401      	adds	r4, #1
 800f9ee:	9305      	str	r3, [sp, #20]
 800f9f0:	4619      	mov	r1, r3
 800f9f2:	f04f 0c0a 	mov.w	ip, #10
 800f9f6:	4620      	mov	r0, r4
 800f9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f9fc:	3a30      	subs	r2, #48	; 0x30
 800f9fe:	2a09      	cmp	r2, #9
 800fa00:	d903      	bls.n	800fa0a <_vfiprintf_r+0x1ee>
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d0c5      	beq.n	800f992 <_vfiprintf_r+0x176>
 800fa06:	9105      	str	r1, [sp, #20]
 800fa08:	e7c3      	b.n	800f992 <_vfiprintf_r+0x176>
 800fa0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa0e:	4604      	mov	r4, r0
 800fa10:	2301      	movs	r3, #1
 800fa12:	e7f0      	b.n	800f9f6 <_vfiprintf_r+0x1da>
 800fa14:	ab03      	add	r3, sp, #12
 800fa16:	9300      	str	r3, [sp, #0]
 800fa18:	462a      	mov	r2, r5
 800fa1a:	4b16      	ldr	r3, [pc, #88]	; (800fa74 <_vfiprintf_r+0x258>)
 800fa1c:	a904      	add	r1, sp, #16
 800fa1e:	4630      	mov	r0, r6
 800fa20:	f7fd fdd8 	bl	800d5d4 <_printf_float>
 800fa24:	4607      	mov	r7, r0
 800fa26:	1c78      	adds	r0, r7, #1
 800fa28:	d1d6      	bne.n	800f9d8 <_vfiprintf_r+0x1bc>
 800fa2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa2c:	07d9      	lsls	r1, r3, #31
 800fa2e:	d405      	bmi.n	800fa3c <_vfiprintf_r+0x220>
 800fa30:	89ab      	ldrh	r3, [r5, #12]
 800fa32:	059a      	lsls	r2, r3, #22
 800fa34:	d402      	bmi.n	800fa3c <_vfiprintf_r+0x220>
 800fa36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa38:	f000 faaf 	bl	800ff9a <__retarget_lock_release_recursive>
 800fa3c:	89ab      	ldrh	r3, [r5, #12]
 800fa3e:	065b      	lsls	r3, r3, #25
 800fa40:	f53f af12 	bmi.w	800f868 <_vfiprintf_r+0x4c>
 800fa44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fa46:	e711      	b.n	800f86c <_vfiprintf_r+0x50>
 800fa48:	ab03      	add	r3, sp, #12
 800fa4a:	9300      	str	r3, [sp, #0]
 800fa4c:	462a      	mov	r2, r5
 800fa4e:	4b09      	ldr	r3, [pc, #36]	; (800fa74 <_vfiprintf_r+0x258>)
 800fa50:	a904      	add	r1, sp, #16
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7fe f862 	bl	800db1c <_printf_i>
 800fa58:	e7e4      	b.n	800fa24 <_vfiprintf_r+0x208>
 800fa5a:	bf00      	nop
 800fa5c:	080115cc 	.word	0x080115cc
 800fa60:	080115ec 	.word	0x080115ec
 800fa64:	080115ac 	.word	0x080115ac
 800fa68:	08011454 	.word	0x08011454
 800fa6c:	0801145e 	.word	0x0801145e
 800fa70:	0800d5d5 	.word	0x0800d5d5
 800fa74:	0800f7f9 	.word	0x0800f7f9
 800fa78:	0801145a 	.word	0x0801145a

0800fa7c <__swbuf_r>:
 800fa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa7e:	460e      	mov	r6, r1
 800fa80:	4614      	mov	r4, r2
 800fa82:	4605      	mov	r5, r0
 800fa84:	b118      	cbz	r0, 800fa8e <__swbuf_r+0x12>
 800fa86:	6983      	ldr	r3, [r0, #24]
 800fa88:	b90b      	cbnz	r3, 800fa8e <__swbuf_r+0x12>
 800fa8a:	f000 f9e7 	bl	800fe5c <__sinit>
 800fa8e:	4b21      	ldr	r3, [pc, #132]	; (800fb14 <__swbuf_r+0x98>)
 800fa90:	429c      	cmp	r4, r3
 800fa92:	d12b      	bne.n	800faec <__swbuf_r+0x70>
 800fa94:	686c      	ldr	r4, [r5, #4]
 800fa96:	69a3      	ldr	r3, [r4, #24]
 800fa98:	60a3      	str	r3, [r4, #8]
 800fa9a:	89a3      	ldrh	r3, [r4, #12]
 800fa9c:	071a      	lsls	r2, r3, #28
 800fa9e:	d52f      	bpl.n	800fb00 <__swbuf_r+0x84>
 800faa0:	6923      	ldr	r3, [r4, #16]
 800faa2:	b36b      	cbz	r3, 800fb00 <__swbuf_r+0x84>
 800faa4:	6923      	ldr	r3, [r4, #16]
 800faa6:	6820      	ldr	r0, [r4, #0]
 800faa8:	1ac0      	subs	r0, r0, r3
 800faaa:	6963      	ldr	r3, [r4, #20]
 800faac:	b2f6      	uxtb	r6, r6
 800faae:	4283      	cmp	r3, r0
 800fab0:	4637      	mov	r7, r6
 800fab2:	dc04      	bgt.n	800fabe <__swbuf_r+0x42>
 800fab4:	4621      	mov	r1, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	f000 f93c 	bl	800fd34 <_fflush_r>
 800fabc:	bb30      	cbnz	r0, 800fb0c <__swbuf_r+0x90>
 800fabe:	68a3      	ldr	r3, [r4, #8]
 800fac0:	3b01      	subs	r3, #1
 800fac2:	60a3      	str	r3, [r4, #8]
 800fac4:	6823      	ldr	r3, [r4, #0]
 800fac6:	1c5a      	adds	r2, r3, #1
 800fac8:	6022      	str	r2, [r4, #0]
 800faca:	701e      	strb	r6, [r3, #0]
 800facc:	6963      	ldr	r3, [r4, #20]
 800face:	3001      	adds	r0, #1
 800fad0:	4283      	cmp	r3, r0
 800fad2:	d004      	beq.n	800fade <__swbuf_r+0x62>
 800fad4:	89a3      	ldrh	r3, [r4, #12]
 800fad6:	07db      	lsls	r3, r3, #31
 800fad8:	d506      	bpl.n	800fae8 <__swbuf_r+0x6c>
 800fada:	2e0a      	cmp	r6, #10
 800fadc:	d104      	bne.n	800fae8 <__swbuf_r+0x6c>
 800fade:	4621      	mov	r1, r4
 800fae0:	4628      	mov	r0, r5
 800fae2:	f000 f927 	bl	800fd34 <_fflush_r>
 800fae6:	b988      	cbnz	r0, 800fb0c <__swbuf_r+0x90>
 800fae8:	4638      	mov	r0, r7
 800faea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faec:	4b0a      	ldr	r3, [pc, #40]	; (800fb18 <__swbuf_r+0x9c>)
 800faee:	429c      	cmp	r4, r3
 800faf0:	d101      	bne.n	800faf6 <__swbuf_r+0x7a>
 800faf2:	68ac      	ldr	r4, [r5, #8]
 800faf4:	e7cf      	b.n	800fa96 <__swbuf_r+0x1a>
 800faf6:	4b09      	ldr	r3, [pc, #36]	; (800fb1c <__swbuf_r+0xa0>)
 800faf8:	429c      	cmp	r4, r3
 800fafa:	bf08      	it	eq
 800fafc:	68ec      	ldreq	r4, [r5, #12]
 800fafe:	e7ca      	b.n	800fa96 <__swbuf_r+0x1a>
 800fb00:	4621      	mov	r1, r4
 800fb02:	4628      	mov	r0, r5
 800fb04:	f000 f81a 	bl	800fb3c <__swsetup_r>
 800fb08:	2800      	cmp	r0, #0
 800fb0a:	d0cb      	beq.n	800faa4 <__swbuf_r+0x28>
 800fb0c:	f04f 37ff 	mov.w	r7, #4294967295
 800fb10:	e7ea      	b.n	800fae8 <__swbuf_r+0x6c>
 800fb12:	bf00      	nop
 800fb14:	080115cc 	.word	0x080115cc
 800fb18:	080115ec 	.word	0x080115ec
 800fb1c:	080115ac 	.word	0x080115ac

0800fb20 <__ascii_wctomb>:
 800fb20:	b149      	cbz	r1, 800fb36 <__ascii_wctomb+0x16>
 800fb22:	2aff      	cmp	r2, #255	; 0xff
 800fb24:	bf85      	ittet	hi
 800fb26:	238a      	movhi	r3, #138	; 0x8a
 800fb28:	6003      	strhi	r3, [r0, #0]
 800fb2a:	700a      	strbls	r2, [r1, #0]
 800fb2c:	f04f 30ff 	movhi.w	r0, #4294967295
 800fb30:	bf98      	it	ls
 800fb32:	2001      	movls	r0, #1
 800fb34:	4770      	bx	lr
 800fb36:	4608      	mov	r0, r1
 800fb38:	4770      	bx	lr
	...

0800fb3c <__swsetup_r>:
 800fb3c:	4b32      	ldr	r3, [pc, #200]	; (800fc08 <__swsetup_r+0xcc>)
 800fb3e:	b570      	push	{r4, r5, r6, lr}
 800fb40:	681d      	ldr	r5, [r3, #0]
 800fb42:	4606      	mov	r6, r0
 800fb44:	460c      	mov	r4, r1
 800fb46:	b125      	cbz	r5, 800fb52 <__swsetup_r+0x16>
 800fb48:	69ab      	ldr	r3, [r5, #24]
 800fb4a:	b913      	cbnz	r3, 800fb52 <__swsetup_r+0x16>
 800fb4c:	4628      	mov	r0, r5
 800fb4e:	f000 f985 	bl	800fe5c <__sinit>
 800fb52:	4b2e      	ldr	r3, [pc, #184]	; (800fc0c <__swsetup_r+0xd0>)
 800fb54:	429c      	cmp	r4, r3
 800fb56:	d10f      	bne.n	800fb78 <__swsetup_r+0x3c>
 800fb58:	686c      	ldr	r4, [r5, #4]
 800fb5a:	89a3      	ldrh	r3, [r4, #12]
 800fb5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb60:	0719      	lsls	r1, r3, #28
 800fb62:	d42c      	bmi.n	800fbbe <__swsetup_r+0x82>
 800fb64:	06dd      	lsls	r5, r3, #27
 800fb66:	d411      	bmi.n	800fb8c <__swsetup_r+0x50>
 800fb68:	2309      	movs	r3, #9
 800fb6a:	6033      	str	r3, [r6, #0]
 800fb6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb70:	81a3      	strh	r3, [r4, #12]
 800fb72:	f04f 30ff 	mov.w	r0, #4294967295
 800fb76:	e03e      	b.n	800fbf6 <__swsetup_r+0xba>
 800fb78:	4b25      	ldr	r3, [pc, #148]	; (800fc10 <__swsetup_r+0xd4>)
 800fb7a:	429c      	cmp	r4, r3
 800fb7c:	d101      	bne.n	800fb82 <__swsetup_r+0x46>
 800fb7e:	68ac      	ldr	r4, [r5, #8]
 800fb80:	e7eb      	b.n	800fb5a <__swsetup_r+0x1e>
 800fb82:	4b24      	ldr	r3, [pc, #144]	; (800fc14 <__swsetup_r+0xd8>)
 800fb84:	429c      	cmp	r4, r3
 800fb86:	bf08      	it	eq
 800fb88:	68ec      	ldreq	r4, [r5, #12]
 800fb8a:	e7e6      	b.n	800fb5a <__swsetup_r+0x1e>
 800fb8c:	0758      	lsls	r0, r3, #29
 800fb8e:	d512      	bpl.n	800fbb6 <__swsetup_r+0x7a>
 800fb90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb92:	b141      	cbz	r1, 800fba6 <__swsetup_r+0x6a>
 800fb94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb98:	4299      	cmp	r1, r3
 800fb9a:	d002      	beq.n	800fba2 <__swsetup_r+0x66>
 800fb9c:	4630      	mov	r0, r6
 800fb9e:	f7ff fb31 	bl	800f204 <_free_r>
 800fba2:	2300      	movs	r3, #0
 800fba4:	6363      	str	r3, [r4, #52]	; 0x34
 800fba6:	89a3      	ldrh	r3, [r4, #12]
 800fba8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbac:	81a3      	strh	r3, [r4, #12]
 800fbae:	2300      	movs	r3, #0
 800fbb0:	6063      	str	r3, [r4, #4]
 800fbb2:	6923      	ldr	r3, [r4, #16]
 800fbb4:	6023      	str	r3, [r4, #0]
 800fbb6:	89a3      	ldrh	r3, [r4, #12]
 800fbb8:	f043 0308 	orr.w	r3, r3, #8
 800fbbc:	81a3      	strh	r3, [r4, #12]
 800fbbe:	6923      	ldr	r3, [r4, #16]
 800fbc0:	b94b      	cbnz	r3, 800fbd6 <__swsetup_r+0x9a>
 800fbc2:	89a3      	ldrh	r3, [r4, #12]
 800fbc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbcc:	d003      	beq.n	800fbd6 <__swsetup_r+0x9a>
 800fbce:	4621      	mov	r1, r4
 800fbd0:	4630      	mov	r0, r6
 800fbd2:	f000 fa09 	bl	800ffe8 <__smakebuf_r>
 800fbd6:	89a0      	ldrh	r0, [r4, #12]
 800fbd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbdc:	f010 0301 	ands.w	r3, r0, #1
 800fbe0:	d00a      	beq.n	800fbf8 <__swsetup_r+0xbc>
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	60a3      	str	r3, [r4, #8]
 800fbe6:	6963      	ldr	r3, [r4, #20]
 800fbe8:	425b      	negs	r3, r3
 800fbea:	61a3      	str	r3, [r4, #24]
 800fbec:	6923      	ldr	r3, [r4, #16]
 800fbee:	b943      	cbnz	r3, 800fc02 <__swsetup_r+0xc6>
 800fbf0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbf4:	d1ba      	bne.n	800fb6c <__swsetup_r+0x30>
 800fbf6:	bd70      	pop	{r4, r5, r6, pc}
 800fbf8:	0781      	lsls	r1, r0, #30
 800fbfa:	bf58      	it	pl
 800fbfc:	6963      	ldrpl	r3, [r4, #20]
 800fbfe:	60a3      	str	r3, [r4, #8]
 800fc00:	e7f4      	b.n	800fbec <__swsetup_r+0xb0>
 800fc02:	2000      	movs	r0, #0
 800fc04:	e7f7      	b.n	800fbf6 <__swsetup_r+0xba>
 800fc06:	bf00      	nop
 800fc08:	2000002c 	.word	0x2000002c
 800fc0c:	080115cc 	.word	0x080115cc
 800fc10:	080115ec 	.word	0x080115ec
 800fc14:	080115ac 	.word	0x080115ac

0800fc18 <abort>:
 800fc18:	b508      	push	{r3, lr}
 800fc1a:	2006      	movs	r0, #6
 800fc1c:	f000 fa54 	bl	80100c8 <raise>
 800fc20:	2001      	movs	r0, #1
 800fc22:	f7f5 f961 	bl	8004ee8 <_exit>
	...

0800fc28 <__sflush_r>:
 800fc28:	898a      	ldrh	r2, [r1, #12]
 800fc2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc2e:	4605      	mov	r5, r0
 800fc30:	0710      	lsls	r0, r2, #28
 800fc32:	460c      	mov	r4, r1
 800fc34:	d458      	bmi.n	800fce8 <__sflush_r+0xc0>
 800fc36:	684b      	ldr	r3, [r1, #4]
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	dc05      	bgt.n	800fc48 <__sflush_r+0x20>
 800fc3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	dc02      	bgt.n	800fc48 <__sflush_r+0x20>
 800fc42:	2000      	movs	r0, #0
 800fc44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc4a:	2e00      	cmp	r6, #0
 800fc4c:	d0f9      	beq.n	800fc42 <__sflush_r+0x1a>
 800fc4e:	2300      	movs	r3, #0
 800fc50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fc54:	682f      	ldr	r7, [r5, #0]
 800fc56:	602b      	str	r3, [r5, #0]
 800fc58:	d032      	beq.n	800fcc0 <__sflush_r+0x98>
 800fc5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	075a      	lsls	r2, r3, #29
 800fc60:	d505      	bpl.n	800fc6e <__sflush_r+0x46>
 800fc62:	6863      	ldr	r3, [r4, #4]
 800fc64:	1ac0      	subs	r0, r0, r3
 800fc66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fc68:	b10b      	cbz	r3, 800fc6e <__sflush_r+0x46>
 800fc6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fc6c:	1ac0      	subs	r0, r0, r3
 800fc6e:	2300      	movs	r3, #0
 800fc70:	4602      	mov	r2, r0
 800fc72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fc74:	6a21      	ldr	r1, [r4, #32]
 800fc76:	4628      	mov	r0, r5
 800fc78:	47b0      	blx	r6
 800fc7a:	1c43      	adds	r3, r0, #1
 800fc7c:	89a3      	ldrh	r3, [r4, #12]
 800fc7e:	d106      	bne.n	800fc8e <__sflush_r+0x66>
 800fc80:	6829      	ldr	r1, [r5, #0]
 800fc82:	291d      	cmp	r1, #29
 800fc84:	d82c      	bhi.n	800fce0 <__sflush_r+0xb8>
 800fc86:	4a2a      	ldr	r2, [pc, #168]	; (800fd30 <__sflush_r+0x108>)
 800fc88:	40ca      	lsrs	r2, r1
 800fc8a:	07d6      	lsls	r6, r2, #31
 800fc8c:	d528      	bpl.n	800fce0 <__sflush_r+0xb8>
 800fc8e:	2200      	movs	r2, #0
 800fc90:	6062      	str	r2, [r4, #4]
 800fc92:	04d9      	lsls	r1, r3, #19
 800fc94:	6922      	ldr	r2, [r4, #16]
 800fc96:	6022      	str	r2, [r4, #0]
 800fc98:	d504      	bpl.n	800fca4 <__sflush_r+0x7c>
 800fc9a:	1c42      	adds	r2, r0, #1
 800fc9c:	d101      	bne.n	800fca2 <__sflush_r+0x7a>
 800fc9e:	682b      	ldr	r3, [r5, #0]
 800fca0:	b903      	cbnz	r3, 800fca4 <__sflush_r+0x7c>
 800fca2:	6560      	str	r0, [r4, #84]	; 0x54
 800fca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fca6:	602f      	str	r7, [r5, #0]
 800fca8:	2900      	cmp	r1, #0
 800fcaa:	d0ca      	beq.n	800fc42 <__sflush_r+0x1a>
 800fcac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fcb0:	4299      	cmp	r1, r3
 800fcb2:	d002      	beq.n	800fcba <__sflush_r+0x92>
 800fcb4:	4628      	mov	r0, r5
 800fcb6:	f7ff faa5 	bl	800f204 <_free_r>
 800fcba:	2000      	movs	r0, #0
 800fcbc:	6360      	str	r0, [r4, #52]	; 0x34
 800fcbe:	e7c1      	b.n	800fc44 <__sflush_r+0x1c>
 800fcc0:	6a21      	ldr	r1, [r4, #32]
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	4628      	mov	r0, r5
 800fcc6:	47b0      	blx	r6
 800fcc8:	1c41      	adds	r1, r0, #1
 800fcca:	d1c7      	bne.n	800fc5c <__sflush_r+0x34>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d0c4      	beq.n	800fc5c <__sflush_r+0x34>
 800fcd2:	2b1d      	cmp	r3, #29
 800fcd4:	d001      	beq.n	800fcda <__sflush_r+0xb2>
 800fcd6:	2b16      	cmp	r3, #22
 800fcd8:	d101      	bne.n	800fcde <__sflush_r+0xb6>
 800fcda:	602f      	str	r7, [r5, #0]
 800fcdc:	e7b1      	b.n	800fc42 <__sflush_r+0x1a>
 800fcde:	89a3      	ldrh	r3, [r4, #12]
 800fce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fce4:	81a3      	strh	r3, [r4, #12]
 800fce6:	e7ad      	b.n	800fc44 <__sflush_r+0x1c>
 800fce8:	690f      	ldr	r7, [r1, #16]
 800fcea:	2f00      	cmp	r7, #0
 800fcec:	d0a9      	beq.n	800fc42 <__sflush_r+0x1a>
 800fcee:	0793      	lsls	r3, r2, #30
 800fcf0:	680e      	ldr	r6, [r1, #0]
 800fcf2:	bf08      	it	eq
 800fcf4:	694b      	ldreq	r3, [r1, #20]
 800fcf6:	600f      	str	r7, [r1, #0]
 800fcf8:	bf18      	it	ne
 800fcfa:	2300      	movne	r3, #0
 800fcfc:	eba6 0807 	sub.w	r8, r6, r7
 800fd00:	608b      	str	r3, [r1, #8]
 800fd02:	f1b8 0f00 	cmp.w	r8, #0
 800fd06:	dd9c      	ble.n	800fc42 <__sflush_r+0x1a>
 800fd08:	6a21      	ldr	r1, [r4, #32]
 800fd0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fd0c:	4643      	mov	r3, r8
 800fd0e:	463a      	mov	r2, r7
 800fd10:	4628      	mov	r0, r5
 800fd12:	47b0      	blx	r6
 800fd14:	2800      	cmp	r0, #0
 800fd16:	dc06      	bgt.n	800fd26 <__sflush_r+0xfe>
 800fd18:	89a3      	ldrh	r3, [r4, #12]
 800fd1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd1e:	81a3      	strh	r3, [r4, #12]
 800fd20:	f04f 30ff 	mov.w	r0, #4294967295
 800fd24:	e78e      	b.n	800fc44 <__sflush_r+0x1c>
 800fd26:	4407      	add	r7, r0
 800fd28:	eba8 0800 	sub.w	r8, r8, r0
 800fd2c:	e7e9      	b.n	800fd02 <__sflush_r+0xda>
 800fd2e:	bf00      	nop
 800fd30:	20400001 	.word	0x20400001

0800fd34 <_fflush_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	690b      	ldr	r3, [r1, #16]
 800fd38:	4605      	mov	r5, r0
 800fd3a:	460c      	mov	r4, r1
 800fd3c:	b913      	cbnz	r3, 800fd44 <_fflush_r+0x10>
 800fd3e:	2500      	movs	r5, #0
 800fd40:	4628      	mov	r0, r5
 800fd42:	bd38      	pop	{r3, r4, r5, pc}
 800fd44:	b118      	cbz	r0, 800fd4e <_fflush_r+0x1a>
 800fd46:	6983      	ldr	r3, [r0, #24]
 800fd48:	b90b      	cbnz	r3, 800fd4e <_fflush_r+0x1a>
 800fd4a:	f000 f887 	bl	800fe5c <__sinit>
 800fd4e:	4b14      	ldr	r3, [pc, #80]	; (800fda0 <_fflush_r+0x6c>)
 800fd50:	429c      	cmp	r4, r3
 800fd52:	d11b      	bne.n	800fd8c <_fflush_r+0x58>
 800fd54:	686c      	ldr	r4, [r5, #4]
 800fd56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d0ef      	beq.n	800fd3e <_fflush_r+0xa>
 800fd5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fd60:	07d0      	lsls	r0, r2, #31
 800fd62:	d404      	bmi.n	800fd6e <_fflush_r+0x3a>
 800fd64:	0599      	lsls	r1, r3, #22
 800fd66:	d402      	bmi.n	800fd6e <_fflush_r+0x3a>
 800fd68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd6a:	f000 f915 	bl	800ff98 <__retarget_lock_acquire_recursive>
 800fd6e:	4628      	mov	r0, r5
 800fd70:	4621      	mov	r1, r4
 800fd72:	f7ff ff59 	bl	800fc28 <__sflush_r>
 800fd76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fd78:	07da      	lsls	r2, r3, #31
 800fd7a:	4605      	mov	r5, r0
 800fd7c:	d4e0      	bmi.n	800fd40 <_fflush_r+0xc>
 800fd7e:	89a3      	ldrh	r3, [r4, #12]
 800fd80:	059b      	lsls	r3, r3, #22
 800fd82:	d4dd      	bmi.n	800fd40 <_fflush_r+0xc>
 800fd84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fd86:	f000 f908 	bl	800ff9a <__retarget_lock_release_recursive>
 800fd8a:	e7d9      	b.n	800fd40 <_fflush_r+0xc>
 800fd8c:	4b05      	ldr	r3, [pc, #20]	; (800fda4 <_fflush_r+0x70>)
 800fd8e:	429c      	cmp	r4, r3
 800fd90:	d101      	bne.n	800fd96 <_fflush_r+0x62>
 800fd92:	68ac      	ldr	r4, [r5, #8]
 800fd94:	e7df      	b.n	800fd56 <_fflush_r+0x22>
 800fd96:	4b04      	ldr	r3, [pc, #16]	; (800fda8 <_fflush_r+0x74>)
 800fd98:	429c      	cmp	r4, r3
 800fd9a:	bf08      	it	eq
 800fd9c:	68ec      	ldreq	r4, [r5, #12]
 800fd9e:	e7da      	b.n	800fd56 <_fflush_r+0x22>
 800fda0:	080115cc 	.word	0x080115cc
 800fda4:	080115ec 	.word	0x080115ec
 800fda8:	080115ac 	.word	0x080115ac

0800fdac <std>:
 800fdac:	2300      	movs	r3, #0
 800fdae:	b510      	push	{r4, lr}
 800fdb0:	4604      	mov	r4, r0
 800fdb2:	e9c0 3300 	strd	r3, r3, [r0]
 800fdb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdba:	6083      	str	r3, [r0, #8]
 800fdbc:	8181      	strh	r1, [r0, #12]
 800fdbe:	6643      	str	r3, [r0, #100]	; 0x64
 800fdc0:	81c2      	strh	r2, [r0, #14]
 800fdc2:	6183      	str	r3, [r0, #24]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	2208      	movs	r2, #8
 800fdc8:	305c      	adds	r0, #92	; 0x5c
 800fdca:	f7fd fb5b 	bl	800d484 <memset>
 800fdce:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <std+0x38>)
 800fdd0:	6263      	str	r3, [r4, #36]	; 0x24
 800fdd2:	4b05      	ldr	r3, [pc, #20]	; (800fde8 <std+0x3c>)
 800fdd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fdd6:	4b05      	ldr	r3, [pc, #20]	; (800fdec <std+0x40>)
 800fdd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdda:	4b05      	ldr	r3, [pc, #20]	; (800fdf0 <std+0x44>)
 800fddc:	6224      	str	r4, [r4, #32]
 800fdde:	6323      	str	r3, [r4, #48]	; 0x30
 800fde0:	bd10      	pop	{r4, pc}
 800fde2:	bf00      	nop
 800fde4:	08010101 	.word	0x08010101
 800fde8:	08010123 	.word	0x08010123
 800fdec:	0801015b 	.word	0x0801015b
 800fdf0:	0801017f 	.word	0x0801017f

0800fdf4 <_cleanup_r>:
 800fdf4:	4901      	ldr	r1, [pc, #4]	; (800fdfc <_cleanup_r+0x8>)
 800fdf6:	f000 b8af 	b.w	800ff58 <_fwalk_reent>
 800fdfa:	bf00      	nop
 800fdfc:	0800fd35 	.word	0x0800fd35

0800fe00 <__sfmoreglue>:
 800fe00:	b570      	push	{r4, r5, r6, lr}
 800fe02:	2268      	movs	r2, #104	; 0x68
 800fe04:	1e4d      	subs	r5, r1, #1
 800fe06:	4355      	muls	r5, r2
 800fe08:	460e      	mov	r6, r1
 800fe0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fe0e:	f7ff fa65 	bl	800f2dc <_malloc_r>
 800fe12:	4604      	mov	r4, r0
 800fe14:	b140      	cbz	r0, 800fe28 <__sfmoreglue+0x28>
 800fe16:	2100      	movs	r1, #0
 800fe18:	e9c0 1600 	strd	r1, r6, [r0]
 800fe1c:	300c      	adds	r0, #12
 800fe1e:	60a0      	str	r0, [r4, #8]
 800fe20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fe24:	f7fd fb2e 	bl	800d484 <memset>
 800fe28:	4620      	mov	r0, r4
 800fe2a:	bd70      	pop	{r4, r5, r6, pc}

0800fe2c <__sfp_lock_acquire>:
 800fe2c:	4801      	ldr	r0, [pc, #4]	; (800fe34 <__sfp_lock_acquire+0x8>)
 800fe2e:	f000 b8b3 	b.w	800ff98 <__retarget_lock_acquire_recursive>
 800fe32:	bf00      	nop
 800fe34:	2000077d 	.word	0x2000077d

0800fe38 <__sfp_lock_release>:
 800fe38:	4801      	ldr	r0, [pc, #4]	; (800fe40 <__sfp_lock_release+0x8>)
 800fe3a:	f000 b8ae 	b.w	800ff9a <__retarget_lock_release_recursive>
 800fe3e:	bf00      	nop
 800fe40:	2000077d 	.word	0x2000077d

0800fe44 <__sinit_lock_acquire>:
 800fe44:	4801      	ldr	r0, [pc, #4]	; (800fe4c <__sinit_lock_acquire+0x8>)
 800fe46:	f000 b8a7 	b.w	800ff98 <__retarget_lock_acquire_recursive>
 800fe4a:	bf00      	nop
 800fe4c:	2000077e 	.word	0x2000077e

0800fe50 <__sinit_lock_release>:
 800fe50:	4801      	ldr	r0, [pc, #4]	; (800fe58 <__sinit_lock_release+0x8>)
 800fe52:	f000 b8a2 	b.w	800ff9a <__retarget_lock_release_recursive>
 800fe56:	bf00      	nop
 800fe58:	2000077e 	.word	0x2000077e

0800fe5c <__sinit>:
 800fe5c:	b510      	push	{r4, lr}
 800fe5e:	4604      	mov	r4, r0
 800fe60:	f7ff fff0 	bl	800fe44 <__sinit_lock_acquire>
 800fe64:	69a3      	ldr	r3, [r4, #24]
 800fe66:	b11b      	cbz	r3, 800fe70 <__sinit+0x14>
 800fe68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe6c:	f7ff bff0 	b.w	800fe50 <__sinit_lock_release>
 800fe70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fe74:	6523      	str	r3, [r4, #80]	; 0x50
 800fe76:	4b13      	ldr	r3, [pc, #76]	; (800fec4 <__sinit+0x68>)
 800fe78:	4a13      	ldr	r2, [pc, #76]	; (800fec8 <__sinit+0x6c>)
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800fe7e:	42a3      	cmp	r3, r4
 800fe80:	bf04      	itt	eq
 800fe82:	2301      	moveq	r3, #1
 800fe84:	61a3      	streq	r3, [r4, #24]
 800fe86:	4620      	mov	r0, r4
 800fe88:	f000 f820 	bl	800fecc <__sfp>
 800fe8c:	6060      	str	r0, [r4, #4]
 800fe8e:	4620      	mov	r0, r4
 800fe90:	f000 f81c 	bl	800fecc <__sfp>
 800fe94:	60a0      	str	r0, [r4, #8]
 800fe96:	4620      	mov	r0, r4
 800fe98:	f000 f818 	bl	800fecc <__sfp>
 800fe9c:	2200      	movs	r2, #0
 800fe9e:	60e0      	str	r0, [r4, #12]
 800fea0:	2104      	movs	r1, #4
 800fea2:	6860      	ldr	r0, [r4, #4]
 800fea4:	f7ff ff82 	bl	800fdac <std>
 800fea8:	68a0      	ldr	r0, [r4, #8]
 800feaa:	2201      	movs	r2, #1
 800feac:	2109      	movs	r1, #9
 800feae:	f7ff ff7d 	bl	800fdac <std>
 800feb2:	68e0      	ldr	r0, [r4, #12]
 800feb4:	2202      	movs	r2, #2
 800feb6:	2112      	movs	r1, #18
 800feb8:	f7ff ff78 	bl	800fdac <std>
 800febc:	2301      	movs	r3, #1
 800febe:	61a3      	str	r3, [r4, #24]
 800fec0:	e7d2      	b.n	800fe68 <__sinit+0xc>
 800fec2:	bf00      	nop
 800fec4:	08011234 	.word	0x08011234
 800fec8:	0800fdf5 	.word	0x0800fdf5

0800fecc <__sfp>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	4607      	mov	r7, r0
 800fed0:	f7ff ffac 	bl	800fe2c <__sfp_lock_acquire>
 800fed4:	4b1e      	ldr	r3, [pc, #120]	; (800ff50 <__sfp+0x84>)
 800fed6:	681e      	ldr	r6, [r3, #0]
 800fed8:	69b3      	ldr	r3, [r6, #24]
 800feda:	b913      	cbnz	r3, 800fee2 <__sfp+0x16>
 800fedc:	4630      	mov	r0, r6
 800fede:	f7ff ffbd 	bl	800fe5c <__sinit>
 800fee2:	3648      	adds	r6, #72	; 0x48
 800fee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fee8:	3b01      	subs	r3, #1
 800feea:	d503      	bpl.n	800fef4 <__sfp+0x28>
 800feec:	6833      	ldr	r3, [r6, #0]
 800feee:	b30b      	cbz	r3, 800ff34 <__sfp+0x68>
 800fef0:	6836      	ldr	r6, [r6, #0]
 800fef2:	e7f7      	b.n	800fee4 <__sfp+0x18>
 800fef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fef8:	b9d5      	cbnz	r5, 800ff30 <__sfp+0x64>
 800fefa:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <__sfp+0x88>)
 800fefc:	60e3      	str	r3, [r4, #12]
 800fefe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ff02:	6665      	str	r5, [r4, #100]	; 0x64
 800ff04:	f000 f847 	bl	800ff96 <__retarget_lock_init_recursive>
 800ff08:	f7ff ff96 	bl	800fe38 <__sfp_lock_release>
 800ff0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ff10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ff14:	6025      	str	r5, [r4, #0]
 800ff16:	61a5      	str	r5, [r4, #24]
 800ff18:	2208      	movs	r2, #8
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ff20:	f7fd fab0 	bl	800d484 <memset>
 800ff24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ff28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ff2c:	4620      	mov	r0, r4
 800ff2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ff30:	3468      	adds	r4, #104	; 0x68
 800ff32:	e7d9      	b.n	800fee8 <__sfp+0x1c>
 800ff34:	2104      	movs	r1, #4
 800ff36:	4638      	mov	r0, r7
 800ff38:	f7ff ff62 	bl	800fe00 <__sfmoreglue>
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	6030      	str	r0, [r6, #0]
 800ff40:	2800      	cmp	r0, #0
 800ff42:	d1d5      	bne.n	800fef0 <__sfp+0x24>
 800ff44:	f7ff ff78 	bl	800fe38 <__sfp_lock_release>
 800ff48:	230c      	movs	r3, #12
 800ff4a:	603b      	str	r3, [r7, #0]
 800ff4c:	e7ee      	b.n	800ff2c <__sfp+0x60>
 800ff4e:	bf00      	nop
 800ff50:	08011234 	.word	0x08011234
 800ff54:	ffff0001 	.word	0xffff0001

0800ff58 <_fwalk_reent>:
 800ff58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff5c:	4606      	mov	r6, r0
 800ff5e:	4688      	mov	r8, r1
 800ff60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ff64:	2700      	movs	r7, #0
 800ff66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ff6a:	f1b9 0901 	subs.w	r9, r9, #1
 800ff6e:	d505      	bpl.n	800ff7c <_fwalk_reent+0x24>
 800ff70:	6824      	ldr	r4, [r4, #0]
 800ff72:	2c00      	cmp	r4, #0
 800ff74:	d1f7      	bne.n	800ff66 <_fwalk_reent+0xe>
 800ff76:	4638      	mov	r0, r7
 800ff78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ff7c:	89ab      	ldrh	r3, [r5, #12]
 800ff7e:	2b01      	cmp	r3, #1
 800ff80:	d907      	bls.n	800ff92 <_fwalk_reent+0x3a>
 800ff82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff86:	3301      	adds	r3, #1
 800ff88:	d003      	beq.n	800ff92 <_fwalk_reent+0x3a>
 800ff8a:	4629      	mov	r1, r5
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	47c0      	blx	r8
 800ff90:	4307      	orrs	r7, r0
 800ff92:	3568      	adds	r5, #104	; 0x68
 800ff94:	e7e9      	b.n	800ff6a <_fwalk_reent+0x12>

0800ff96 <__retarget_lock_init_recursive>:
 800ff96:	4770      	bx	lr

0800ff98 <__retarget_lock_acquire_recursive>:
 800ff98:	4770      	bx	lr

0800ff9a <__retarget_lock_release_recursive>:
 800ff9a:	4770      	bx	lr

0800ff9c <__swhatbuf_r>:
 800ff9c:	b570      	push	{r4, r5, r6, lr}
 800ff9e:	460e      	mov	r6, r1
 800ffa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffa4:	2900      	cmp	r1, #0
 800ffa6:	b096      	sub	sp, #88	; 0x58
 800ffa8:	4614      	mov	r4, r2
 800ffaa:	461d      	mov	r5, r3
 800ffac:	da08      	bge.n	800ffc0 <__swhatbuf_r+0x24>
 800ffae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	602a      	str	r2, [r5, #0]
 800ffb6:	061a      	lsls	r2, r3, #24
 800ffb8:	d410      	bmi.n	800ffdc <__swhatbuf_r+0x40>
 800ffba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffbe:	e00e      	b.n	800ffde <__swhatbuf_r+0x42>
 800ffc0:	466a      	mov	r2, sp
 800ffc2:	f000 f903 	bl	80101cc <_fstat_r>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	dbf1      	blt.n	800ffae <__swhatbuf_r+0x12>
 800ffca:	9a01      	ldr	r2, [sp, #4]
 800ffcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ffd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ffd4:	425a      	negs	r2, r3
 800ffd6:	415a      	adcs	r2, r3
 800ffd8:	602a      	str	r2, [r5, #0]
 800ffda:	e7ee      	b.n	800ffba <__swhatbuf_r+0x1e>
 800ffdc:	2340      	movs	r3, #64	; 0x40
 800ffde:	2000      	movs	r0, #0
 800ffe0:	6023      	str	r3, [r4, #0]
 800ffe2:	b016      	add	sp, #88	; 0x58
 800ffe4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ffe8 <__smakebuf_r>:
 800ffe8:	898b      	ldrh	r3, [r1, #12]
 800ffea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ffec:	079d      	lsls	r5, r3, #30
 800ffee:	4606      	mov	r6, r0
 800fff0:	460c      	mov	r4, r1
 800fff2:	d507      	bpl.n	8010004 <__smakebuf_r+0x1c>
 800fff4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fff8:	6023      	str	r3, [r4, #0]
 800fffa:	6123      	str	r3, [r4, #16]
 800fffc:	2301      	movs	r3, #1
 800fffe:	6163      	str	r3, [r4, #20]
 8010000:	b002      	add	sp, #8
 8010002:	bd70      	pop	{r4, r5, r6, pc}
 8010004:	ab01      	add	r3, sp, #4
 8010006:	466a      	mov	r2, sp
 8010008:	f7ff ffc8 	bl	800ff9c <__swhatbuf_r>
 801000c:	9900      	ldr	r1, [sp, #0]
 801000e:	4605      	mov	r5, r0
 8010010:	4630      	mov	r0, r6
 8010012:	f7ff f963 	bl	800f2dc <_malloc_r>
 8010016:	b948      	cbnz	r0, 801002c <__smakebuf_r+0x44>
 8010018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801001c:	059a      	lsls	r2, r3, #22
 801001e:	d4ef      	bmi.n	8010000 <__smakebuf_r+0x18>
 8010020:	f023 0303 	bic.w	r3, r3, #3
 8010024:	f043 0302 	orr.w	r3, r3, #2
 8010028:	81a3      	strh	r3, [r4, #12]
 801002a:	e7e3      	b.n	800fff4 <__smakebuf_r+0xc>
 801002c:	4b0d      	ldr	r3, [pc, #52]	; (8010064 <__smakebuf_r+0x7c>)
 801002e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010030:	89a3      	ldrh	r3, [r4, #12]
 8010032:	6020      	str	r0, [r4, #0]
 8010034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010038:	81a3      	strh	r3, [r4, #12]
 801003a:	9b00      	ldr	r3, [sp, #0]
 801003c:	6163      	str	r3, [r4, #20]
 801003e:	9b01      	ldr	r3, [sp, #4]
 8010040:	6120      	str	r0, [r4, #16]
 8010042:	b15b      	cbz	r3, 801005c <__smakebuf_r+0x74>
 8010044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010048:	4630      	mov	r0, r6
 801004a:	f000 f8d1 	bl	80101f0 <_isatty_r>
 801004e:	b128      	cbz	r0, 801005c <__smakebuf_r+0x74>
 8010050:	89a3      	ldrh	r3, [r4, #12]
 8010052:	f023 0303 	bic.w	r3, r3, #3
 8010056:	f043 0301 	orr.w	r3, r3, #1
 801005a:	81a3      	strh	r3, [r4, #12]
 801005c:	89a0      	ldrh	r0, [r4, #12]
 801005e:	4305      	orrs	r5, r0
 8010060:	81a5      	strh	r5, [r4, #12]
 8010062:	e7cd      	b.n	8010000 <__smakebuf_r+0x18>
 8010064:	0800fdf5 	.word	0x0800fdf5

08010068 <_malloc_usable_size_r>:
 8010068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801006c:	1f18      	subs	r0, r3, #4
 801006e:	2b00      	cmp	r3, #0
 8010070:	bfbc      	itt	lt
 8010072:	580b      	ldrlt	r3, [r1, r0]
 8010074:	18c0      	addlt	r0, r0, r3
 8010076:	4770      	bx	lr

08010078 <_raise_r>:
 8010078:	291f      	cmp	r1, #31
 801007a:	b538      	push	{r3, r4, r5, lr}
 801007c:	4604      	mov	r4, r0
 801007e:	460d      	mov	r5, r1
 8010080:	d904      	bls.n	801008c <_raise_r+0x14>
 8010082:	2316      	movs	r3, #22
 8010084:	6003      	str	r3, [r0, #0]
 8010086:	f04f 30ff 	mov.w	r0, #4294967295
 801008a:	bd38      	pop	{r3, r4, r5, pc}
 801008c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801008e:	b112      	cbz	r2, 8010096 <_raise_r+0x1e>
 8010090:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010094:	b94b      	cbnz	r3, 80100aa <_raise_r+0x32>
 8010096:	4620      	mov	r0, r4
 8010098:	f000 f830 	bl	80100fc <_getpid_r>
 801009c:	462a      	mov	r2, r5
 801009e:	4601      	mov	r1, r0
 80100a0:	4620      	mov	r0, r4
 80100a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80100a6:	f000 b817 	b.w	80100d8 <_kill_r>
 80100aa:	2b01      	cmp	r3, #1
 80100ac:	d00a      	beq.n	80100c4 <_raise_r+0x4c>
 80100ae:	1c59      	adds	r1, r3, #1
 80100b0:	d103      	bne.n	80100ba <_raise_r+0x42>
 80100b2:	2316      	movs	r3, #22
 80100b4:	6003      	str	r3, [r0, #0]
 80100b6:	2001      	movs	r0, #1
 80100b8:	e7e7      	b.n	801008a <_raise_r+0x12>
 80100ba:	2400      	movs	r4, #0
 80100bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80100c0:	4628      	mov	r0, r5
 80100c2:	4798      	blx	r3
 80100c4:	2000      	movs	r0, #0
 80100c6:	e7e0      	b.n	801008a <_raise_r+0x12>

080100c8 <raise>:
 80100c8:	4b02      	ldr	r3, [pc, #8]	; (80100d4 <raise+0xc>)
 80100ca:	4601      	mov	r1, r0
 80100cc:	6818      	ldr	r0, [r3, #0]
 80100ce:	f7ff bfd3 	b.w	8010078 <_raise_r>
 80100d2:	bf00      	nop
 80100d4:	2000002c 	.word	0x2000002c

080100d8 <_kill_r>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	4d07      	ldr	r5, [pc, #28]	; (80100f8 <_kill_r+0x20>)
 80100dc:	2300      	movs	r3, #0
 80100de:	4604      	mov	r4, r0
 80100e0:	4608      	mov	r0, r1
 80100e2:	4611      	mov	r1, r2
 80100e4:	602b      	str	r3, [r5, #0]
 80100e6:	f7f4 feef 	bl	8004ec8 <_kill>
 80100ea:	1c43      	adds	r3, r0, #1
 80100ec:	d102      	bne.n	80100f4 <_kill_r+0x1c>
 80100ee:	682b      	ldr	r3, [r5, #0]
 80100f0:	b103      	cbz	r3, 80100f4 <_kill_r+0x1c>
 80100f2:	6023      	str	r3, [r4, #0]
 80100f4:	bd38      	pop	{r3, r4, r5, pc}
 80100f6:	bf00      	nop
 80100f8:	20000778 	.word	0x20000778

080100fc <_getpid_r>:
 80100fc:	f7f4 bedc 	b.w	8004eb8 <_getpid>

08010100 <__sread>:
 8010100:	b510      	push	{r4, lr}
 8010102:	460c      	mov	r4, r1
 8010104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010108:	f000 f894 	bl	8010234 <_read_r>
 801010c:	2800      	cmp	r0, #0
 801010e:	bfab      	itete	ge
 8010110:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010112:	89a3      	ldrhlt	r3, [r4, #12]
 8010114:	181b      	addge	r3, r3, r0
 8010116:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801011a:	bfac      	ite	ge
 801011c:	6563      	strge	r3, [r4, #84]	; 0x54
 801011e:	81a3      	strhlt	r3, [r4, #12]
 8010120:	bd10      	pop	{r4, pc}

08010122 <__swrite>:
 8010122:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010126:	461f      	mov	r7, r3
 8010128:	898b      	ldrh	r3, [r1, #12]
 801012a:	05db      	lsls	r3, r3, #23
 801012c:	4605      	mov	r5, r0
 801012e:	460c      	mov	r4, r1
 8010130:	4616      	mov	r6, r2
 8010132:	d505      	bpl.n	8010140 <__swrite+0x1e>
 8010134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010138:	2302      	movs	r3, #2
 801013a:	2200      	movs	r2, #0
 801013c:	f000 f868 	bl	8010210 <_lseek_r>
 8010140:	89a3      	ldrh	r3, [r4, #12]
 8010142:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010146:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801014a:	81a3      	strh	r3, [r4, #12]
 801014c:	4632      	mov	r2, r6
 801014e:	463b      	mov	r3, r7
 8010150:	4628      	mov	r0, r5
 8010152:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010156:	f000 b817 	b.w	8010188 <_write_r>

0801015a <__sseek>:
 801015a:	b510      	push	{r4, lr}
 801015c:	460c      	mov	r4, r1
 801015e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010162:	f000 f855 	bl	8010210 <_lseek_r>
 8010166:	1c43      	adds	r3, r0, #1
 8010168:	89a3      	ldrh	r3, [r4, #12]
 801016a:	bf15      	itete	ne
 801016c:	6560      	strne	r0, [r4, #84]	; 0x54
 801016e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010172:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010176:	81a3      	strheq	r3, [r4, #12]
 8010178:	bf18      	it	ne
 801017a:	81a3      	strhne	r3, [r4, #12]
 801017c:	bd10      	pop	{r4, pc}

0801017e <__sclose>:
 801017e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010182:	f000 b813 	b.w	80101ac <_close_r>
	...

08010188 <_write_r>:
 8010188:	b538      	push	{r3, r4, r5, lr}
 801018a:	4d07      	ldr	r5, [pc, #28]	; (80101a8 <_write_r+0x20>)
 801018c:	4604      	mov	r4, r0
 801018e:	4608      	mov	r0, r1
 8010190:	4611      	mov	r1, r2
 8010192:	2200      	movs	r2, #0
 8010194:	602a      	str	r2, [r5, #0]
 8010196:	461a      	mov	r2, r3
 8010198:	f7f4 fecd 	bl	8004f36 <_write>
 801019c:	1c43      	adds	r3, r0, #1
 801019e:	d102      	bne.n	80101a6 <_write_r+0x1e>
 80101a0:	682b      	ldr	r3, [r5, #0]
 80101a2:	b103      	cbz	r3, 80101a6 <_write_r+0x1e>
 80101a4:	6023      	str	r3, [r4, #0]
 80101a6:	bd38      	pop	{r3, r4, r5, pc}
 80101a8:	20000778 	.word	0x20000778

080101ac <_close_r>:
 80101ac:	b538      	push	{r3, r4, r5, lr}
 80101ae:	4d06      	ldr	r5, [pc, #24]	; (80101c8 <_close_r+0x1c>)
 80101b0:	2300      	movs	r3, #0
 80101b2:	4604      	mov	r4, r0
 80101b4:	4608      	mov	r0, r1
 80101b6:	602b      	str	r3, [r5, #0]
 80101b8:	f7f4 fed9 	bl	8004f6e <_close>
 80101bc:	1c43      	adds	r3, r0, #1
 80101be:	d102      	bne.n	80101c6 <_close_r+0x1a>
 80101c0:	682b      	ldr	r3, [r5, #0]
 80101c2:	b103      	cbz	r3, 80101c6 <_close_r+0x1a>
 80101c4:	6023      	str	r3, [r4, #0]
 80101c6:	bd38      	pop	{r3, r4, r5, pc}
 80101c8:	20000778 	.word	0x20000778

080101cc <_fstat_r>:
 80101cc:	b538      	push	{r3, r4, r5, lr}
 80101ce:	4d07      	ldr	r5, [pc, #28]	; (80101ec <_fstat_r+0x20>)
 80101d0:	2300      	movs	r3, #0
 80101d2:	4604      	mov	r4, r0
 80101d4:	4608      	mov	r0, r1
 80101d6:	4611      	mov	r1, r2
 80101d8:	602b      	str	r3, [r5, #0]
 80101da:	f7f4 fed4 	bl	8004f86 <_fstat>
 80101de:	1c43      	adds	r3, r0, #1
 80101e0:	d102      	bne.n	80101e8 <_fstat_r+0x1c>
 80101e2:	682b      	ldr	r3, [r5, #0]
 80101e4:	b103      	cbz	r3, 80101e8 <_fstat_r+0x1c>
 80101e6:	6023      	str	r3, [r4, #0]
 80101e8:	bd38      	pop	{r3, r4, r5, pc}
 80101ea:	bf00      	nop
 80101ec:	20000778 	.word	0x20000778

080101f0 <_isatty_r>:
 80101f0:	b538      	push	{r3, r4, r5, lr}
 80101f2:	4d06      	ldr	r5, [pc, #24]	; (801020c <_isatty_r+0x1c>)
 80101f4:	2300      	movs	r3, #0
 80101f6:	4604      	mov	r4, r0
 80101f8:	4608      	mov	r0, r1
 80101fa:	602b      	str	r3, [r5, #0]
 80101fc:	f7f4 fed3 	bl	8004fa6 <_isatty>
 8010200:	1c43      	adds	r3, r0, #1
 8010202:	d102      	bne.n	801020a <_isatty_r+0x1a>
 8010204:	682b      	ldr	r3, [r5, #0]
 8010206:	b103      	cbz	r3, 801020a <_isatty_r+0x1a>
 8010208:	6023      	str	r3, [r4, #0]
 801020a:	bd38      	pop	{r3, r4, r5, pc}
 801020c:	20000778 	.word	0x20000778

08010210 <_lseek_r>:
 8010210:	b538      	push	{r3, r4, r5, lr}
 8010212:	4d07      	ldr	r5, [pc, #28]	; (8010230 <_lseek_r+0x20>)
 8010214:	4604      	mov	r4, r0
 8010216:	4608      	mov	r0, r1
 8010218:	4611      	mov	r1, r2
 801021a:	2200      	movs	r2, #0
 801021c:	602a      	str	r2, [r5, #0]
 801021e:	461a      	mov	r2, r3
 8010220:	f7f4 fecc 	bl	8004fbc <_lseek>
 8010224:	1c43      	adds	r3, r0, #1
 8010226:	d102      	bne.n	801022e <_lseek_r+0x1e>
 8010228:	682b      	ldr	r3, [r5, #0]
 801022a:	b103      	cbz	r3, 801022e <_lseek_r+0x1e>
 801022c:	6023      	str	r3, [r4, #0]
 801022e:	bd38      	pop	{r3, r4, r5, pc}
 8010230:	20000778 	.word	0x20000778

08010234 <_read_r>:
 8010234:	b538      	push	{r3, r4, r5, lr}
 8010236:	4d07      	ldr	r5, [pc, #28]	; (8010254 <_read_r+0x20>)
 8010238:	4604      	mov	r4, r0
 801023a:	4608      	mov	r0, r1
 801023c:	4611      	mov	r1, r2
 801023e:	2200      	movs	r2, #0
 8010240:	602a      	str	r2, [r5, #0]
 8010242:	461a      	mov	r2, r3
 8010244:	f7f4 fe5a 	bl	8004efc <_read>
 8010248:	1c43      	adds	r3, r0, #1
 801024a:	d102      	bne.n	8010252 <_read_r+0x1e>
 801024c:	682b      	ldr	r3, [r5, #0]
 801024e:	b103      	cbz	r3, 8010252 <_read_r+0x1e>
 8010250:	6023      	str	r3, [r4, #0]
 8010252:	bd38      	pop	{r3, r4, r5, pc}
 8010254:	20000778 	.word	0x20000778

08010258 <cosf>:
 8010258:	ee10 3a10 	vmov	r3, s0
 801025c:	b507      	push	{r0, r1, r2, lr}
 801025e:	4a1e      	ldr	r2, [pc, #120]	; (80102d8 <cosf+0x80>)
 8010260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010264:	4293      	cmp	r3, r2
 8010266:	dc06      	bgt.n	8010276 <cosf+0x1e>
 8010268:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80102dc <cosf+0x84>
 801026c:	b003      	add	sp, #12
 801026e:	f85d eb04 	ldr.w	lr, [sp], #4
 8010272:	f000 bacd 	b.w	8010810 <__kernel_cosf>
 8010276:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801027a:	db04      	blt.n	8010286 <cosf+0x2e>
 801027c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8010280:	b003      	add	sp, #12
 8010282:	f85d fb04 	ldr.w	pc, [sp], #4
 8010286:	4668      	mov	r0, sp
 8010288:	f000 f982 	bl	8010590 <__ieee754_rem_pio2f>
 801028c:	f000 0003 	and.w	r0, r0, #3
 8010290:	2801      	cmp	r0, #1
 8010292:	d009      	beq.n	80102a8 <cosf+0x50>
 8010294:	2802      	cmp	r0, #2
 8010296:	d010      	beq.n	80102ba <cosf+0x62>
 8010298:	b9b0      	cbnz	r0, 80102c8 <cosf+0x70>
 801029a:	eddd 0a01 	vldr	s1, [sp, #4]
 801029e:	ed9d 0a00 	vldr	s0, [sp]
 80102a2:	f000 fab5 	bl	8010810 <__kernel_cosf>
 80102a6:	e7eb      	b.n	8010280 <cosf+0x28>
 80102a8:	eddd 0a01 	vldr	s1, [sp, #4]
 80102ac:	ed9d 0a00 	vldr	s0, [sp]
 80102b0:	f000 fd84 	bl	8010dbc <__kernel_sinf>
 80102b4:	eeb1 0a40 	vneg.f32	s0, s0
 80102b8:	e7e2      	b.n	8010280 <cosf+0x28>
 80102ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80102be:	ed9d 0a00 	vldr	s0, [sp]
 80102c2:	f000 faa5 	bl	8010810 <__kernel_cosf>
 80102c6:	e7f5      	b.n	80102b4 <cosf+0x5c>
 80102c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80102cc:	ed9d 0a00 	vldr	s0, [sp]
 80102d0:	2001      	movs	r0, #1
 80102d2:	f000 fd73 	bl	8010dbc <__kernel_sinf>
 80102d6:	e7d3      	b.n	8010280 <cosf+0x28>
 80102d8:	3f490fd8 	.word	0x3f490fd8
 80102dc:	00000000 	.word	0x00000000

080102e0 <fmaxf>:
 80102e0:	b508      	push	{r3, lr}
 80102e2:	ed2d 8b02 	vpush	{d8}
 80102e6:	eeb0 8a40 	vmov.f32	s16, s0
 80102ea:	eef0 8a60 	vmov.f32	s17, s1
 80102ee:	f000 f82d 	bl	801034c <__fpclassifyf>
 80102f2:	b148      	cbz	r0, 8010308 <fmaxf+0x28>
 80102f4:	eeb0 0a68 	vmov.f32	s0, s17
 80102f8:	f000 f828 	bl	801034c <__fpclassifyf>
 80102fc:	b130      	cbz	r0, 801030c <fmaxf+0x2c>
 80102fe:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010306:	dc01      	bgt.n	801030c <fmaxf+0x2c>
 8010308:	eeb0 8a68 	vmov.f32	s16, s17
 801030c:	eeb0 0a48 	vmov.f32	s0, s16
 8010310:	ecbd 8b02 	vpop	{d8}
 8010314:	bd08      	pop	{r3, pc}

08010316 <fminf>:
 8010316:	b508      	push	{r3, lr}
 8010318:	ed2d 8b02 	vpush	{d8}
 801031c:	eeb0 8a40 	vmov.f32	s16, s0
 8010320:	eef0 8a60 	vmov.f32	s17, s1
 8010324:	f000 f812 	bl	801034c <__fpclassifyf>
 8010328:	b148      	cbz	r0, 801033e <fminf+0x28>
 801032a:	eeb0 0a68 	vmov.f32	s0, s17
 801032e:	f000 f80d 	bl	801034c <__fpclassifyf>
 8010332:	b130      	cbz	r0, 8010342 <fminf+0x2c>
 8010334:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801033c:	d401      	bmi.n	8010342 <fminf+0x2c>
 801033e:	eeb0 8a68 	vmov.f32	s16, s17
 8010342:	eeb0 0a48 	vmov.f32	s0, s16
 8010346:	ecbd 8b02 	vpop	{d8}
 801034a:	bd08      	pop	{r3, pc}

0801034c <__fpclassifyf>:
 801034c:	ee10 3a10 	vmov	r3, s0
 8010350:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8010354:	d00d      	beq.n	8010372 <__fpclassifyf+0x26>
 8010356:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801035a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801035e:	d30a      	bcc.n	8010376 <__fpclassifyf+0x2a>
 8010360:	4b07      	ldr	r3, [pc, #28]	; (8010380 <__fpclassifyf+0x34>)
 8010362:	1e42      	subs	r2, r0, #1
 8010364:	429a      	cmp	r2, r3
 8010366:	d908      	bls.n	801037a <__fpclassifyf+0x2e>
 8010368:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801036c:	4258      	negs	r0, r3
 801036e:	4158      	adcs	r0, r3
 8010370:	4770      	bx	lr
 8010372:	2002      	movs	r0, #2
 8010374:	4770      	bx	lr
 8010376:	2004      	movs	r0, #4
 8010378:	4770      	bx	lr
 801037a:	2003      	movs	r0, #3
 801037c:	4770      	bx	lr
 801037e:	bf00      	nop
 8010380:	007ffffe 	.word	0x007ffffe

08010384 <sinf>:
 8010384:	ee10 3a10 	vmov	r3, s0
 8010388:	b507      	push	{r0, r1, r2, lr}
 801038a:	4a1f      	ldr	r2, [pc, #124]	; (8010408 <sinf+0x84>)
 801038c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010390:	4293      	cmp	r3, r2
 8010392:	dc07      	bgt.n	80103a4 <sinf+0x20>
 8010394:	eddf 0a1d 	vldr	s1, [pc, #116]	; 801040c <sinf+0x88>
 8010398:	2000      	movs	r0, #0
 801039a:	b003      	add	sp, #12
 801039c:	f85d eb04 	ldr.w	lr, [sp], #4
 80103a0:	f000 bd0c 	b.w	8010dbc <__kernel_sinf>
 80103a4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80103a8:	db04      	blt.n	80103b4 <sinf+0x30>
 80103aa:	ee30 0a40 	vsub.f32	s0, s0, s0
 80103ae:	b003      	add	sp, #12
 80103b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80103b4:	4668      	mov	r0, sp
 80103b6:	f000 f8eb 	bl	8010590 <__ieee754_rem_pio2f>
 80103ba:	f000 0003 	and.w	r0, r0, #3
 80103be:	2801      	cmp	r0, #1
 80103c0:	d00a      	beq.n	80103d8 <sinf+0x54>
 80103c2:	2802      	cmp	r0, #2
 80103c4:	d00f      	beq.n	80103e6 <sinf+0x62>
 80103c6:	b9c0      	cbnz	r0, 80103fa <sinf+0x76>
 80103c8:	eddd 0a01 	vldr	s1, [sp, #4]
 80103cc:	ed9d 0a00 	vldr	s0, [sp]
 80103d0:	2001      	movs	r0, #1
 80103d2:	f000 fcf3 	bl	8010dbc <__kernel_sinf>
 80103d6:	e7ea      	b.n	80103ae <sinf+0x2a>
 80103d8:	eddd 0a01 	vldr	s1, [sp, #4]
 80103dc:	ed9d 0a00 	vldr	s0, [sp]
 80103e0:	f000 fa16 	bl	8010810 <__kernel_cosf>
 80103e4:	e7e3      	b.n	80103ae <sinf+0x2a>
 80103e6:	eddd 0a01 	vldr	s1, [sp, #4]
 80103ea:	ed9d 0a00 	vldr	s0, [sp]
 80103ee:	2001      	movs	r0, #1
 80103f0:	f000 fce4 	bl	8010dbc <__kernel_sinf>
 80103f4:	eeb1 0a40 	vneg.f32	s0, s0
 80103f8:	e7d9      	b.n	80103ae <sinf+0x2a>
 80103fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80103fe:	ed9d 0a00 	vldr	s0, [sp]
 8010402:	f000 fa05 	bl	8010810 <__kernel_cosf>
 8010406:	e7f5      	b.n	80103f4 <sinf+0x70>
 8010408:	3f490fd8 	.word	0x3f490fd8
 801040c:	00000000 	.word	0x00000000

08010410 <fmodf>:
 8010410:	b508      	push	{r3, lr}
 8010412:	ed2d 8b02 	vpush	{d8}
 8010416:	eef0 8a40 	vmov.f32	s17, s0
 801041a:	eeb0 8a60 	vmov.f32	s16, s1
 801041e:	f000 f835 	bl	801048c <__ieee754_fmodf>
 8010422:	eef4 8a48 	vcmp.f32	s17, s16
 8010426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801042a:	d60c      	bvs.n	8010446 <fmodf+0x36>
 801042c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801044c <fmodf+0x3c>
 8010430:	eeb4 8a68 	vcmp.f32	s16, s17
 8010434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010438:	d105      	bne.n	8010446 <fmodf+0x36>
 801043a:	f7fc fff9 	bl	800d430 <__errno>
 801043e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010442:	2321      	movs	r3, #33	; 0x21
 8010444:	6003      	str	r3, [r0, #0]
 8010446:	ecbd 8b02 	vpop	{d8}
 801044a:	bd08      	pop	{r3, pc}
 801044c:	00000000 	.word	0x00000000

08010450 <sqrtf>:
 8010450:	b508      	push	{r3, lr}
 8010452:	ed2d 8b02 	vpush	{d8}
 8010456:	eeb0 8a40 	vmov.f32	s16, s0
 801045a:	f000 f9d5 	bl	8010808 <__ieee754_sqrtf>
 801045e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010466:	d60c      	bvs.n	8010482 <sqrtf+0x32>
 8010468:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010488 <sqrtf+0x38>
 801046c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010474:	d505      	bpl.n	8010482 <sqrtf+0x32>
 8010476:	f7fc ffdb 	bl	800d430 <__errno>
 801047a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801047e:	2321      	movs	r3, #33	; 0x21
 8010480:	6003      	str	r3, [r0, #0]
 8010482:	ecbd 8b02 	vpop	{d8}
 8010486:	bd08      	pop	{r3, pc}
 8010488:	00000000 	.word	0x00000000

0801048c <__ieee754_fmodf>:
 801048c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801048e:	ee10 5a90 	vmov	r5, s1
 8010492:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8010496:	d009      	beq.n	80104ac <__ieee754_fmodf+0x20>
 8010498:	ee10 2a10 	vmov	r2, s0
 801049c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80104a0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80104a4:	da02      	bge.n	80104ac <__ieee754_fmodf+0x20>
 80104a6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 80104aa:	dd04      	ble.n	80104b6 <__ieee754_fmodf+0x2a>
 80104ac:	ee60 0a20 	vmul.f32	s1, s0, s1
 80104b0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80104b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104b6:	42a3      	cmp	r3, r4
 80104b8:	dbfc      	blt.n	80104b4 <__ieee754_fmodf+0x28>
 80104ba:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80104be:	d105      	bne.n	80104cc <__ieee754_fmodf+0x40>
 80104c0:	4b32      	ldr	r3, [pc, #200]	; (801058c <__ieee754_fmodf+0x100>)
 80104c2:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80104c6:	ed93 0a00 	vldr	s0, [r3]
 80104ca:	e7f3      	b.n	80104b4 <__ieee754_fmodf+0x28>
 80104cc:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80104d0:	d13f      	bne.n	8010552 <__ieee754_fmodf+0xc6>
 80104d2:	0219      	lsls	r1, r3, #8
 80104d4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80104d8:	2900      	cmp	r1, #0
 80104da:	dc37      	bgt.n	801054c <__ieee754_fmodf+0xc0>
 80104dc:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80104e0:	d13d      	bne.n	801055e <__ieee754_fmodf+0xd2>
 80104e2:	0227      	lsls	r7, r4, #8
 80104e4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80104e8:	2f00      	cmp	r7, #0
 80104ea:	da35      	bge.n	8010558 <__ieee754_fmodf+0xcc>
 80104ec:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80104f0:	bfbb      	ittet	lt
 80104f2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80104f6:	1a12      	sublt	r2, r2, r0
 80104f8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80104fc:	4093      	lsllt	r3, r2
 80104fe:	bfa8      	it	ge
 8010500:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8010504:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010508:	bfb5      	itete	lt
 801050a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 801050e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8010512:	1a52      	sublt	r2, r2, r1
 8010514:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8010518:	bfb8      	it	lt
 801051a:	4094      	lsllt	r4, r2
 801051c:	1a40      	subs	r0, r0, r1
 801051e:	1b1a      	subs	r2, r3, r4
 8010520:	bb00      	cbnz	r0, 8010564 <__ieee754_fmodf+0xd8>
 8010522:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8010526:	bf38      	it	cc
 8010528:	4613      	movcc	r3, r2
 801052a:	2b00      	cmp	r3, #0
 801052c:	d0c8      	beq.n	80104c0 <__ieee754_fmodf+0x34>
 801052e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010532:	db1f      	blt.n	8010574 <__ieee754_fmodf+0xe8>
 8010534:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8010538:	db1f      	blt.n	801057a <__ieee754_fmodf+0xee>
 801053a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801053e:	317f      	adds	r1, #127	; 0x7f
 8010540:	4333      	orrs	r3, r6
 8010542:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8010546:	ee00 3a10 	vmov	s0, r3
 801054a:	e7b3      	b.n	80104b4 <__ieee754_fmodf+0x28>
 801054c:	3801      	subs	r0, #1
 801054e:	0049      	lsls	r1, r1, #1
 8010550:	e7c2      	b.n	80104d8 <__ieee754_fmodf+0x4c>
 8010552:	15d8      	asrs	r0, r3, #23
 8010554:	387f      	subs	r0, #127	; 0x7f
 8010556:	e7c1      	b.n	80104dc <__ieee754_fmodf+0x50>
 8010558:	3901      	subs	r1, #1
 801055a:	007f      	lsls	r7, r7, #1
 801055c:	e7c4      	b.n	80104e8 <__ieee754_fmodf+0x5c>
 801055e:	15e1      	asrs	r1, r4, #23
 8010560:	397f      	subs	r1, #127	; 0x7f
 8010562:	e7c3      	b.n	80104ec <__ieee754_fmodf+0x60>
 8010564:	2a00      	cmp	r2, #0
 8010566:	da02      	bge.n	801056e <__ieee754_fmodf+0xe2>
 8010568:	005b      	lsls	r3, r3, #1
 801056a:	3801      	subs	r0, #1
 801056c:	e7d7      	b.n	801051e <__ieee754_fmodf+0x92>
 801056e:	d0a7      	beq.n	80104c0 <__ieee754_fmodf+0x34>
 8010570:	0053      	lsls	r3, r2, #1
 8010572:	e7fa      	b.n	801056a <__ieee754_fmodf+0xde>
 8010574:	005b      	lsls	r3, r3, #1
 8010576:	3901      	subs	r1, #1
 8010578:	e7d9      	b.n	801052e <__ieee754_fmodf+0xa2>
 801057a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801057e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8010582:	3182      	adds	r1, #130	; 0x82
 8010584:	410b      	asrs	r3, r1
 8010586:	4333      	orrs	r3, r6
 8010588:	e7dd      	b.n	8010546 <__ieee754_fmodf+0xba>
 801058a:	bf00      	nop
 801058c:	0801160c 	.word	0x0801160c

08010590 <__ieee754_rem_pio2f>:
 8010590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010592:	ee10 6a10 	vmov	r6, s0
 8010596:	4b8e      	ldr	r3, [pc, #568]	; (80107d0 <__ieee754_rem_pio2f+0x240>)
 8010598:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801059c:	429d      	cmp	r5, r3
 801059e:	b087      	sub	sp, #28
 80105a0:	eef0 7a40 	vmov.f32	s15, s0
 80105a4:	4604      	mov	r4, r0
 80105a6:	dc05      	bgt.n	80105b4 <__ieee754_rem_pio2f+0x24>
 80105a8:	2300      	movs	r3, #0
 80105aa:	ed80 0a00 	vstr	s0, [r0]
 80105ae:	6043      	str	r3, [r0, #4]
 80105b0:	2000      	movs	r0, #0
 80105b2:	e01a      	b.n	80105ea <__ieee754_rem_pio2f+0x5a>
 80105b4:	4b87      	ldr	r3, [pc, #540]	; (80107d4 <__ieee754_rem_pio2f+0x244>)
 80105b6:	429d      	cmp	r5, r3
 80105b8:	dc46      	bgt.n	8010648 <__ieee754_rem_pio2f+0xb8>
 80105ba:	2e00      	cmp	r6, #0
 80105bc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80107d8 <__ieee754_rem_pio2f+0x248>
 80105c0:	4b86      	ldr	r3, [pc, #536]	; (80107dc <__ieee754_rem_pio2f+0x24c>)
 80105c2:	f025 050f 	bic.w	r5, r5, #15
 80105c6:	dd1f      	ble.n	8010608 <__ieee754_rem_pio2f+0x78>
 80105c8:	429d      	cmp	r5, r3
 80105ca:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80105ce:	d00e      	beq.n	80105ee <__ieee754_rem_pio2f+0x5e>
 80105d0:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80107e0 <__ieee754_rem_pio2f+0x250>
 80105d4:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80105d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80105dc:	ed80 0a00 	vstr	s0, [r0]
 80105e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80105e4:	2001      	movs	r0, #1
 80105e6:	edc4 7a01 	vstr	s15, [r4, #4]
 80105ea:	b007      	add	sp, #28
 80105ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105ee:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 80107e4 <__ieee754_rem_pio2f+0x254>
 80105f2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80107e8 <__ieee754_rem_pio2f+0x258>
 80105f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80105fa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80105fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010602:	edc0 6a00 	vstr	s13, [r0]
 8010606:	e7eb      	b.n	80105e0 <__ieee754_rem_pio2f+0x50>
 8010608:	429d      	cmp	r5, r3
 801060a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801060e:	d00e      	beq.n	801062e <__ieee754_rem_pio2f+0x9e>
 8010610:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80107e0 <__ieee754_rem_pio2f+0x250>
 8010614:	ee37 0a87 	vadd.f32	s0, s15, s14
 8010618:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801061c:	ed80 0a00 	vstr	s0, [r0]
 8010620:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010624:	f04f 30ff 	mov.w	r0, #4294967295
 8010628:	edc4 7a01 	vstr	s15, [r4, #4]
 801062c:	e7dd      	b.n	80105ea <__ieee754_rem_pio2f+0x5a>
 801062e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80107e4 <__ieee754_rem_pio2f+0x254>
 8010632:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80107e8 <__ieee754_rem_pio2f+0x258>
 8010636:	ee77 7a80 	vadd.f32	s15, s15, s0
 801063a:	ee77 6a87 	vadd.f32	s13, s15, s14
 801063e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010642:	edc0 6a00 	vstr	s13, [r0]
 8010646:	e7eb      	b.n	8010620 <__ieee754_rem_pio2f+0x90>
 8010648:	4b68      	ldr	r3, [pc, #416]	; (80107ec <__ieee754_rem_pio2f+0x25c>)
 801064a:	429d      	cmp	r5, r3
 801064c:	dc72      	bgt.n	8010734 <__ieee754_rem_pio2f+0x1a4>
 801064e:	f000 fbfd 	bl	8010e4c <fabsf>
 8010652:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80107f0 <__ieee754_rem_pio2f+0x260>
 8010656:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801065a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801065e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8010666:	ee17 0a90 	vmov	r0, s15
 801066a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80107d8 <__ieee754_rem_pio2f+0x248>
 801066e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8010672:	281f      	cmp	r0, #31
 8010674:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80107e0 <__ieee754_rem_pio2f+0x250>
 8010678:	ee67 7a27 	vmul.f32	s15, s14, s15
 801067c:	eeb1 6a47 	vneg.f32	s12, s14
 8010680:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010684:	ee16 2a90 	vmov	r2, s13
 8010688:	dc1c      	bgt.n	80106c4 <__ieee754_rem_pio2f+0x134>
 801068a:	495a      	ldr	r1, [pc, #360]	; (80107f4 <__ieee754_rem_pio2f+0x264>)
 801068c:	1e47      	subs	r7, r0, #1
 801068e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8010692:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8010696:	428b      	cmp	r3, r1
 8010698:	d014      	beq.n	80106c4 <__ieee754_rem_pio2f+0x134>
 801069a:	6022      	str	r2, [r4, #0]
 801069c:	ed94 7a00 	vldr	s14, [r4]
 80106a0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80106a4:	2e00      	cmp	r6, #0
 80106a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80106aa:	ed84 0a01 	vstr	s0, [r4, #4]
 80106ae:	da9c      	bge.n	80105ea <__ieee754_rem_pio2f+0x5a>
 80106b0:	eeb1 7a47 	vneg.f32	s14, s14
 80106b4:	eeb1 0a40 	vneg.f32	s0, s0
 80106b8:	ed84 7a00 	vstr	s14, [r4]
 80106bc:	ed84 0a01 	vstr	s0, [r4, #4]
 80106c0:	4240      	negs	r0, r0
 80106c2:	e792      	b.n	80105ea <__ieee754_rem_pio2f+0x5a>
 80106c4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80106c8:	15eb      	asrs	r3, r5, #23
 80106ca:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80106ce:	2d08      	cmp	r5, #8
 80106d0:	dde3      	ble.n	801069a <__ieee754_rem_pio2f+0x10a>
 80106d2:	eddf 7a44 	vldr	s15, [pc, #272]	; 80107e4 <__ieee754_rem_pio2f+0x254>
 80106d6:	eddf 5a44 	vldr	s11, [pc, #272]	; 80107e8 <__ieee754_rem_pio2f+0x258>
 80106da:	eef0 6a40 	vmov.f32	s13, s0
 80106de:	eee6 6a27 	vfma.f32	s13, s12, s15
 80106e2:	ee30 0a66 	vsub.f32	s0, s0, s13
 80106e6:	eea6 0a27 	vfma.f32	s0, s12, s15
 80106ea:	eef0 7a40 	vmov.f32	s15, s0
 80106ee:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80106f2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80106f6:	ee15 2a90 	vmov	r2, s11
 80106fa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80106fe:	1a5b      	subs	r3, r3, r1
 8010700:	2b19      	cmp	r3, #25
 8010702:	dc04      	bgt.n	801070e <__ieee754_rem_pio2f+0x17e>
 8010704:	edc4 5a00 	vstr	s11, [r4]
 8010708:	eeb0 0a66 	vmov.f32	s0, s13
 801070c:	e7c6      	b.n	801069c <__ieee754_rem_pio2f+0x10c>
 801070e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80107f8 <__ieee754_rem_pio2f+0x268>
 8010712:	eeb0 0a66 	vmov.f32	s0, s13
 8010716:	eea6 0a25 	vfma.f32	s0, s12, s11
 801071a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801071e:	eddf 6a37 	vldr	s13, [pc, #220]	; 80107fc <__ieee754_rem_pio2f+0x26c>
 8010722:	eee6 7a25 	vfma.f32	s15, s12, s11
 8010726:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801072a:	ee30 7a67 	vsub.f32	s14, s0, s15
 801072e:	ed84 7a00 	vstr	s14, [r4]
 8010732:	e7b3      	b.n	801069c <__ieee754_rem_pio2f+0x10c>
 8010734:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8010738:	db06      	blt.n	8010748 <__ieee754_rem_pio2f+0x1b8>
 801073a:	ee70 7a40 	vsub.f32	s15, s0, s0
 801073e:	edc0 7a01 	vstr	s15, [r0, #4]
 8010742:	edc0 7a00 	vstr	s15, [r0]
 8010746:	e733      	b.n	80105b0 <__ieee754_rem_pio2f+0x20>
 8010748:	15ea      	asrs	r2, r5, #23
 801074a:	3a86      	subs	r2, #134	; 0x86
 801074c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8010750:	ee07 3a90 	vmov	s15, r3
 8010754:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010758:	eddf 6a29 	vldr	s13, [pc, #164]	; 8010800 <__ieee754_rem_pio2f+0x270>
 801075c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010760:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010764:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010768:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801076c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010770:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010774:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010778:	ed8d 7a04 	vstr	s14, [sp, #16]
 801077c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010780:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010788:	edcd 7a05 	vstr	s15, [sp, #20]
 801078c:	d11e      	bne.n	80107cc <__ieee754_rem_pio2f+0x23c>
 801078e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010796:	bf14      	ite	ne
 8010798:	2302      	movne	r3, #2
 801079a:	2301      	moveq	r3, #1
 801079c:	4919      	ldr	r1, [pc, #100]	; (8010804 <__ieee754_rem_pio2f+0x274>)
 801079e:	9101      	str	r1, [sp, #4]
 80107a0:	2102      	movs	r1, #2
 80107a2:	9100      	str	r1, [sp, #0]
 80107a4:	a803      	add	r0, sp, #12
 80107a6:	4621      	mov	r1, r4
 80107a8:	f000 f892 	bl	80108d0 <__kernel_rem_pio2f>
 80107ac:	2e00      	cmp	r6, #0
 80107ae:	f6bf af1c 	bge.w	80105ea <__ieee754_rem_pio2f+0x5a>
 80107b2:	edd4 7a00 	vldr	s15, [r4]
 80107b6:	eef1 7a67 	vneg.f32	s15, s15
 80107ba:	edc4 7a00 	vstr	s15, [r4]
 80107be:	edd4 7a01 	vldr	s15, [r4, #4]
 80107c2:	eef1 7a67 	vneg.f32	s15, s15
 80107c6:	edc4 7a01 	vstr	s15, [r4, #4]
 80107ca:	e779      	b.n	80106c0 <__ieee754_rem_pio2f+0x130>
 80107cc:	2303      	movs	r3, #3
 80107ce:	e7e5      	b.n	801079c <__ieee754_rem_pio2f+0x20c>
 80107d0:	3f490fd8 	.word	0x3f490fd8
 80107d4:	4016cbe3 	.word	0x4016cbe3
 80107d8:	3fc90f80 	.word	0x3fc90f80
 80107dc:	3fc90fd0 	.word	0x3fc90fd0
 80107e0:	37354443 	.word	0x37354443
 80107e4:	37354400 	.word	0x37354400
 80107e8:	2e85a308 	.word	0x2e85a308
 80107ec:	43490f80 	.word	0x43490f80
 80107f0:	3f22f984 	.word	0x3f22f984
 80107f4:	08011614 	.word	0x08011614
 80107f8:	2e85a300 	.word	0x2e85a300
 80107fc:	248d3132 	.word	0x248d3132
 8010800:	43800000 	.word	0x43800000
 8010804:	08011694 	.word	0x08011694

08010808 <__ieee754_sqrtf>:
 8010808:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801080c:	4770      	bx	lr
	...

08010810 <__kernel_cosf>:
 8010810:	ee10 3a10 	vmov	r3, s0
 8010814:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010818:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801081c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010820:	da05      	bge.n	801082e <__kernel_cosf+0x1e>
 8010822:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010826:	ee17 2a90 	vmov	r2, s15
 801082a:	2a00      	cmp	r2, #0
 801082c:	d03d      	beq.n	80108aa <__kernel_cosf+0x9a>
 801082e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8010832:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80108b0 <__kernel_cosf+0xa0>
 8010836:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80108b4 <__kernel_cosf+0xa4>
 801083a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80108b8 <__kernel_cosf+0xa8>
 801083e:	4a1f      	ldr	r2, [pc, #124]	; (80108bc <__kernel_cosf+0xac>)
 8010840:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010844:	4293      	cmp	r3, r2
 8010846:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80108c0 <__kernel_cosf+0xb0>
 801084a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801084e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80108c4 <__kernel_cosf+0xb4>
 8010852:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010856:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80108c8 <__kernel_cosf+0xb8>
 801085a:	eee7 7a25 	vfma.f32	s15, s14, s11
 801085e:	eeb0 7a66 	vmov.f32	s14, s13
 8010862:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8010866:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801086a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801086e:	ee67 6a25 	vmul.f32	s13, s14, s11
 8010872:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8010876:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801087a:	dc04      	bgt.n	8010886 <__kernel_cosf+0x76>
 801087c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8010880:	ee36 0a47 	vsub.f32	s0, s12, s14
 8010884:	4770      	bx	lr
 8010886:	4a11      	ldr	r2, [pc, #68]	; (80108cc <__kernel_cosf+0xbc>)
 8010888:	4293      	cmp	r3, r2
 801088a:	bfda      	itte	le
 801088c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8010890:	ee06 3a90 	vmovle	s13, r3
 8010894:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8010898:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801089c:	ee36 0a66 	vsub.f32	s0, s12, s13
 80108a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80108a4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80108a8:	4770      	bx	lr
 80108aa:	eeb0 0a46 	vmov.f32	s0, s12
 80108ae:	4770      	bx	lr
 80108b0:	ad47d74e 	.word	0xad47d74e
 80108b4:	310f74f6 	.word	0x310f74f6
 80108b8:	3d2aaaab 	.word	0x3d2aaaab
 80108bc:	3e999999 	.word	0x3e999999
 80108c0:	b493f27c 	.word	0xb493f27c
 80108c4:	37d00d01 	.word	0x37d00d01
 80108c8:	bab60b61 	.word	0xbab60b61
 80108cc:	3f480000 	.word	0x3f480000

080108d0 <__kernel_rem_pio2f>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	ed2d 8b04 	vpush	{d8-d9}
 80108d8:	b0d9      	sub	sp, #356	; 0x164
 80108da:	4688      	mov	r8, r1
 80108dc:	9002      	str	r0, [sp, #8]
 80108de:	49bb      	ldr	r1, [pc, #748]	; (8010bcc <__kernel_rem_pio2f+0x2fc>)
 80108e0:	9866      	ldr	r0, [sp, #408]	; 0x198
 80108e2:	9301      	str	r3, [sp, #4]
 80108e4:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80108e8:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80108ec:	1e59      	subs	r1, r3, #1
 80108ee:	1d13      	adds	r3, r2, #4
 80108f0:	db27      	blt.n	8010942 <__kernel_rem_pio2f+0x72>
 80108f2:	f1b2 0b03 	subs.w	fp, r2, #3
 80108f6:	bf48      	it	mi
 80108f8:	f102 0b04 	addmi.w	fp, r2, #4
 80108fc:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8010900:	1c45      	adds	r5, r0, #1
 8010902:	00ec      	lsls	r4, r5, #3
 8010904:	1a47      	subs	r7, r0, r1
 8010906:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 801090a:	9403      	str	r4, [sp, #12]
 801090c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8010910:	eb0a 0c01 	add.w	ip, sl, r1
 8010914:	ae1c      	add	r6, sp, #112	; 0x70
 8010916:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801091a:	2400      	movs	r4, #0
 801091c:	4564      	cmp	r4, ip
 801091e:	dd12      	ble.n	8010946 <__kernel_rem_pio2f+0x76>
 8010920:	9b01      	ldr	r3, [sp, #4]
 8010922:	ac1c      	add	r4, sp, #112	; 0x70
 8010924:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8010928:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801092c:	f04f 0c00 	mov.w	ip, #0
 8010930:	45d4      	cmp	ip, sl
 8010932:	dc27      	bgt.n	8010984 <__kernel_rem_pio2f+0xb4>
 8010934:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8010938:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 801093c:	4627      	mov	r7, r4
 801093e:	2600      	movs	r6, #0
 8010940:	e016      	b.n	8010970 <__kernel_rem_pio2f+0xa0>
 8010942:	2000      	movs	r0, #0
 8010944:	e7dc      	b.n	8010900 <__kernel_rem_pio2f+0x30>
 8010946:	42e7      	cmn	r7, r4
 8010948:	bf5d      	ittte	pl
 801094a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801094e:	ee07 3a90 	vmovpl	s15, r3
 8010952:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8010956:	eef0 7a47 	vmovmi.f32	s15, s14
 801095a:	ece6 7a01 	vstmia	r6!, {s15}
 801095e:	3401      	adds	r4, #1
 8010960:	e7dc      	b.n	801091c <__kernel_rem_pio2f+0x4c>
 8010962:	ecf9 6a01 	vldmia	r9!, {s13}
 8010966:	ed97 7a00 	vldr	s14, [r7]
 801096a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801096e:	3601      	adds	r6, #1
 8010970:	428e      	cmp	r6, r1
 8010972:	f1a7 0704 	sub.w	r7, r7, #4
 8010976:	ddf4      	ble.n	8010962 <__kernel_rem_pio2f+0x92>
 8010978:	eceb 7a01 	vstmia	fp!, {s15}
 801097c:	f10c 0c01 	add.w	ip, ip, #1
 8010980:	3404      	adds	r4, #4
 8010982:	e7d5      	b.n	8010930 <__kernel_rem_pio2f+0x60>
 8010984:	ab08      	add	r3, sp, #32
 8010986:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801098a:	eddf 8a93 	vldr	s17, [pc, #588]	; 8010bd8 <__kernel_rem_pio2f+0x308>
 801098e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8010bd4 <__kernel_rem_pio2f+0x304>
 8010992:	9304      	str	r3, [sp, #16]
 8010994:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8010998:	4656      	mov	r6, sl
 801099a:	00b3      	lsls	r3, r6, #2
 801099c:	9305      	str	r3, [sp, #20]
 801099e:	ab58      	add	r3, sp, #352	; 0x160
 80109a0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80109a4:	ac08      	add	r4, sp, #32
 80109a6:	ab44      	add	r3, sp, #272	; 0x110
 80109a8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80109ac:	46a4      	mov	ip, r4
 80109ae:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80109b2:	4637      	mov	r7, r6
 80109b4:	2f00      	cmp	r7, #0
 80109b6:	f1a0 0004 	sub.w	r0, r0, #4
 80109ba:	dc4f      	bgt.n	8010a5c <__kernel_rem_pio2f+0x18c>
 80109bc:	4628      	mov	r0, r5
 80109be:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80109c2:	f000 fa8d 	bl	8010ee0 <scalbnf>
 80109c6:	eeb0 8a40 	vmov.f32	s16, s0
 80109ca:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80109ce:	ee28 0a00 	vmul.f32	s0, s16, s0
 80109d2:	f000 fa43 	bl	8010e5c <floorf>
 80109d6:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80109da:	eea0 8a67 	vfms.f32	s16, s0, s15
 80109de:	2d00      	cmp	r5, #0
 80109e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80109e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80109e8:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80109ec:	ee17 9a90 	vmov	r9, s15
 80109f0:	ee38 8a40 	vsub.f32	s16, s16, s0
 80109f4:	dd44      	ble.n	8010a80 <__kernel_rem_pio2f+0x1b0>
 80109f6:	f106 3cff 	add.w	ip, r6, #4294967295
 80109fa:	ab08      	add	r3, sp, #32
 80109fc:	f1c5 0e08 	rsb	lr, r5, #8
 8010a00:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8010a04:	fa47 f00e 	asr.w	r0, r7, lr
 8010a08:	4481      	add	r9, r0
 8010a0a:	fa00 f00e 	lsl.w	r0, r0, lr
 8010a0e:	1a3f      	subs	r7, r7, r0
 8010a10:	f1c5 0007 	rsb	r0, r5, #7
 8010a14:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8010a18:	4107      	asrs	r7, r0
 8010a1a:	2f00      	cmp	r7, #0
 8010a1c:	dd3f      	ble.n	8010a9e <__kernel_rem_pio2f+0x1ce>
 8010a1e:	f04f 0e00 	mov.w	lr, #0
 8010a22:	f109 0901 	add.w	r9, r9, #1
 8010a26:	4673      	mov	r3, lr
 8010a28:	4576      	cmp	r6, lr
 8010a2a:	dc6b      	bgt.n	8010b04 <__kernel_rem_pio2f+0x234>
 8010a2c:	2d00      	cmp	r5, #0
 8010a2e:	dd04      	ble.n	8010a3a <__kernel_rem_pio2f+0x16a>
 8010a30:	2d01      	cmp	r5, #1
 8010a32:	d078      	beq.n	8010b26 <__kernel_rem_pio2f+0x256>
 8010a34:	2d02      	cmp	r5, #2
 8010a36:	f000 8081 	beq.w	8010b3c <__kernel_rem_pio2f+0x26c>
 8010a3a:	2f02      	cmp	r7, #2
 8010a3c:	d12f      	bne.n	8010a9e <__kernel_rem_pio2f+0x1ce>
 8010a3e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010a42:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010a46:	b353      	cbz	r3, 8010a9e <__kernel_rem_pio2f+0x1ce>
 8010a48:	4628      	mov	r0, r5
 8010a4a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8010a4e:	f000 fa47 	bl	8010ee0 <scalbnf>
 8010a52:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8010a56:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010a5a:	e020      	b.n	8010a9e <__kernel_rem_pio2f+0x1ce>
 8010a5c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8010a60:	3f01      	subs	r7, #1
 8010a62:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a6a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010a6e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010a72:	ecac 0a01 	vstmia	ip!, {s0}
 8010a76:	ed90 0a00 	vldr	s0, [r0]
 8010a7a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010a7e:	e799      	b.n	80109b4 <__kernel_rem_pio2f+0xe4>
 8010a80:	d105      	bne.n	8010a8e <__kernel_rem_pio2f+0x1be>
 8010a82:	1e70      	subs	r0, r6, #1
 8010a84:	ab08      	add	r3, sp, #32
 8010a86:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8010a8a:	11ff      	asrs	r7, r7, #7
 8010a8c:	e7c5      	b.n	8010a1a <__kernel_rem_pio2f+0x14a>
 8010a8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8010a92:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a9a:	da31      	bge.n	8010b00 <__kernel_rem_pio2f+0x230>
 8010a9c:	2700      	movs	r7, #0
 8010a9e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010aa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010aa6:	f040 809b 	bne.w	8010be0 <__kernel_rem_pio2f+0x310>
 8010aaa:	1e74      	subs	r4, r6, #1
 8010aac:	46a4      	mov	ip, r4
 8010aae:	2000      	movs	r0, #0
 8010ab0:	45d4      	cmp	ip, sl
 8010ab2:	da4a      	bge.n	8010b4a <__kernel_rem_pio2f+0x27a>
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d07a      	beq.n	8010bae <__kernel_rem_pio2f+0x2de>
 8010ab8:	ab08      	add	r3, sp, #32
 8010aba:	3d08      	subs	r5, #8
 8010abc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f000 8081 	beq.w	8010bc8 <__kernel_rem_pio2f+0x2f8>
 8010ac6:	4628      	mov	r0, r5
 8010ac8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010acc:	00a5      	lsls	r5, r4, #2
 8010ace:	f000 fa07 	bl	8010ee0 <scalbnf>
 8010ad2:	aa44      	add	r2, sp, #272	; 0x110
 8010ad4:	1d2b      	adds	r3, r5, #4
 8010ad6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8010bd8 <__kernel_rem_pio2f+0x308>
 8010ada:	18d1      	adds	r1, r2, r3
 8010adc:	4622      	mov	r2, r4
 8010ade:	2a00      	cmp	r2, #0
 8010ae0:	f280 80ae 	bge.w	8010c40 <__kernel_rem_pio2f+0x370>
 8010ae4:	4622      	mov	r2, r4
 8010ae6:	2a00      	cmp	r2, #0
 8010ae8:	f2c0 80cc 	blt.w	8010c84 <__kernel_rem_pio2f+0x3b4>
 8010aec:	a944      	add	r1, sp, #272	; 0x110
 8010aee:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8010af2:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8010bd0 <__kernel_rem_pio2f+0x300>
 8010af6:	eddf 7a39 	vldr	s15, [pc, #228]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 8010afa:	2000      	movs	r0, #0
 8010afc:	1aa1      	subs	r1, r4, r2
 8010afe:	e0b6      	b.n	8010c6e <__kernel_rem_pio2f+0x39e>
 8010b00:	2702      	movs	r7, #2
 8010b02:	e78c      	b.n	8010a1e <__kernel_rem_pio2f+0x14e>
 8010b04:	6820      	ldr	r0, [r4, #0]
 8010b06:	b94b      	cbnz	r3, 8010b1c <__kernel_rem_pio2f+0x24c>
 8010b08:	b118      	cbz	r0, 8010b12 <__kernel_rem_pio2f+0x242>
 8010b0a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8010b0e:	6020      	str	r0, [r4, #0]
 8010b10:	2001      	movs	r0, #1
 8010b12:	f10e 0e01 	add.w	lr, lr, #1
 8010b16:	3404      	adds	r4, #4
 8010b18:	4603      	mov	r3, r0
 8010b1a:	e785      	b.n	8010a28 <__kernel_rem_pio2f+0x158>
 8010b1c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8010b20:	6020      	str	r0, [r4, #0]
 8010b22:	4618      	mov	r0, r3
 8010b24:	e7f5      	b.n	8010b12 <__kernel_rem_pio2f+0x242>
 8010b26:	1e74      	subs	r4, r6, #1
 8010b28:	a808      	add	r0, sp, #32
 8010b2a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010b2e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8010b32:	f10d 0c20 	add.w	ip, sp, #32
 8010b36:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8010b3a:	e77e      	b.n	8010a3a <__kernel_rem_pio2f+0x16a>
 8010b3c:	1e74      	subs	r4, r6, #1
 8010b3e:	a808      	add	r0, sp, #32
 8010b40:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8010b44:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8010b48:	e7f3      	b.n	8010b32 <__kernel_rem_pio2f+0x262>
 8010b4a:	ab08      	add	r3, sp, #32
 8010b4c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8010b50:	f10c 3cff 	add.w	ip, ip, #4294967295
 8010b54:	4318      	orrs	r0, r3
 8010b56:	e7ab      	b.n	8010ab0 <__kernel_rem_pio2f+0x1e0>
 8010b58:	f10c 0c01 	add.w	ip, ip, #1
 8010b5c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8010b60:	2c00      	cmp	r4, #0
 8010b62:	d0f9      	beq.n	8010b58 <__kernel_rem_pio2f+0x288>
 8010b64:	9b05      	ldr	r3, [sp, #20]
 8010b66:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8010b6a:	eb0d 0003 	add.w	r0, sp, r3
 8010b6e:	9b01      	ldr	r3, [sp, #4]
 8010b70:	18f4      	adds	r4, r6, r3
 8010b72:	ab1c      	add	r3, sp, #112	; 0x70
 8010b74:	1c77      	adds	r7, r6, #1
 8010b76:	384c      	subs	r0, #76	; 0x4c
 8010b78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010b7c:	4466      	add	r6, ip
 8010b7e:	42be      	cmp	r6, r7
 8010b80:	f6ff af0b 	blt.w	801099a <__kernel_rem_pio2f+0xca>
 8010b84:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8010b88:	f8dd e008 	ldr.w	lr, [sp, #8]
 8010b8c:	ee07 3a90 	vmov	s15, r3
 8010b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b94:	f04f 0c00 	mov.w	ip, #0
 8010b98:	ece4 7a01 	vstmia	r4!, {s15}
 8010b9c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 8010ba0:	46a1      	mov	r9, r4
 8010ba2:	458c      	cmp	ip, r1
 8010ba4:	dd07      	ble.n	8010bb6 <__kernel_rem_pio2f+0x2e6>
 8010ba6:	ece0 7a01 	vstmia	r0!, {s15}
 8010baa:	3701      	adds	r7, #1
 8010bac:	e7e7      	b.n	8010b7e <__kernel_rem_pio2f+0x2ae>
 8010bae:	9804      	ldr	r0, [sp, #16]
 8010bb0:	f04f 0c01 	mov.w	ip, #1
 8010bb4:	e7d2      	b.n	8010b5c <__kernel_rem_pio2f+0x28c>
 8010bb6:	ecfe 6a01 	vldmia	lr!, {s13}
 8010bba:	ed39 7a01 	vldmdb	r9!, {s14}
 8010bbe:	f10c 0c01 	add.w	ip, ip, #1
 8010bc2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010bc6:	e7ec      	b.n	8010ba2 <__kernel_rem_pio2f+0x2d2>
 8010bc8:	3c01      	subs	r4, #1
 8010bca:	e775      	b.n	8010ab8 <__kernel_rem_pio2f+0x1e8>
 8010bcc:	080119d8 	.word	0x080119d8
 8010bd0:	080119ac 	.word	0x080119ac
 8010bd4:	43800000 	.word	0x43800000
 8010bd8:	3b800000 	.word	0x3b800000
 8010bdc:	00000000 	.word	0x00000000
 8010be0:	9b03      	ldr	r3, [sp, #12]
 8010be2:	eeb0 0a48 	vmov.f32	s0, s16
 8010be6:	1a98      	subs	r0, r3, r2
 8010be8:	f000 f97a 	bl	8010ee0 <scalbnf>
 8010bec:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8010bd4 <__kernel_rem_pio2f+0x304>
 8010bf0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8010bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf8:	db19      	blt.n	8010c2e <__kernel_rem_pio2f+0x35e>
 8010bfa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8010bd8 <__kernel_rem_pio2f+0x308>
 8010bfe:	ee60 7a27 	vmul.f32	s15, s0, s15
 8010c02:	aa08      	add	r2, sp, #32
 8010c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c08:	1c74      	adds	r4, r6, #1
 8010c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c0e:	3508      	adds	r5, #8
 8010c10:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8010c14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010c1c:	ee10 3a10 	vmov	r3, s0
 8010c20:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010c24:	ee17 3a90 	vmov	r3, s15
 8010c28:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8010c2c:	e74b      	b.n	8010ac6 <__kernel_rem_pio2f+0x1f6>
 8010c2e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010c32:	aa08      	add	r2, sp, #32
 8010c34:	ee10 3a10 	vmov	r3, s0
 8010c38:	4634      	mov	r4, r6
 8010c3a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8010c3e:	e742      	b.n	8010ac6 <__kernel_rem_pio2f+0x1f6>
 8010c40:	a808      	add	r0, sp, #32
 8010c42:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8010c46:	9001      	str	r0, [sp, #4]
 8010c48:	ee07 0a90 	vmov	s15, r0
 8010c4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c50:	3a01      	subs	r2, #1
 8010c52:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010c56:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010c5a:	ed61 7a01 	vstmdb	r1!, {s15}
 8010c5e:	e73e      	b.n	8010ade <__kernel_rem_pio2f+0x20e>
 8010c60:	ecfc 6a01 	vldmia	ip!, {s13}
 8010c64:	ecb6 7a01 	vldmia	r6!, {s14}
 8010c68:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010c6c:	3001      	adds	r0, #1
 8010c6e:	4550      	cmp	r0, sl
 8010c70:	dc01      	bgt.n	8010c76 <__kernel_rem_pio2f+0x3a6>
 8010c72:	4288      	cmp	r0, r1
 8010c74:	ddf4      	ble.n	8010c60 <__kernel_rem_pio2f+0x390>
 8010c76:	a858      	add	r0, sp, #352	; 0x160
 8010c78:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010c7c:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8010c80:	3a01      	subs	r2, #1
 8010c82:	e730      	b.n	8010ae6 <__kernel_rem_pio2f+0x216>
 8010c84:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8010c86:	2a02      	cmp	r2, #2
 8010c88:	dc09      	bgt.n	8010c9e <__kernel_rem_pio2f+0x3ce>
 8010c8a:	2a00      	cmp	r2, #0
 8010c8c:	dc2a      	bgt.n	8010ce4 <__kernel_rem_pio2f+0x414>
 8010c8e:	d043      	beq.n	8010d18 <__kernel_rem_pio2f+0x448>
 8010c90:	f009 0007 	and.w	r0, r9, #7
 8010c94:	b059      	add	sp, #356	; 0x164
 8010c96:	ecbd 8b04 	vpop	{d8-d9}
 8010c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c9e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8010ca0:	2b03      	cmp	r3, #3
 8010ca2:	d1f5      	bne.n	8010c90 <__kernel_rem_pio2f+0x3c0>
 8010ca4:	ab30      	add	r3, sp, #192	; 0xc0
 8010ca6:	442b      	add	r3, r5
 8010ca8:	461a      	mov	r2, r3
 8010caa:	4619      	mov	r1, r3
 8010cac:	4620      	mov	r0, r4
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	f1a1 0104 	sub.w	r1, r1, #4
 8010cb4:	dc51      	bgt.n	8010d5a <__kernel_rem_pio2f+0x48a>
 8010cb6:	4621      	mov	r1, r4
 8010cb8:	2901      	cmp	r1, #1
 8010cba:	f1a2 0204 	sub.w	r2, r2, #4
 8010cbe:	dc5c      	bgt.n	8010d7a <__kernel_rem_pio2f+0x4aa>
 8010cc0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 8010cc4:	3304      	adds	r3, #4
 8010cc6:	2c01      	cmp	r4, #1
 8010cc8:	dc67      	bgt.n	8010d9a <__kernel_rem_pio2f+0x4ca>
 8010cca:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8010cce:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8010cd2:	2f00      	cmp	r7, #0
 8010cd4:	d167      	bne.n	8010da6 <__kernel_rem_pio2f+0x4d6>
 8010cd6:	edc8 6a00 	vstr	s13, [r8]
 8010cda:	ed88 7a01 	vstr	s14, [r8, #4]
 8010cde:	edc8 7a02 	vstr	s15, [r8, #8]
 8010ce2:	e7d5      	b.n	8010c90 <__kernel_rem_pio2f+0x3c0>
 8010ce4:	aa30      	add	r2, sp, #192	; 0xc0
 8010ce6:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 8010cea:	4413      	add	r3, r2
 8010cec:	4622      	mov	r2, r4
 8010cee:	2a00      	cmp	r2, #0
 8010cf0:	da24      	bge.n	8010d3c <__kernel_rem_pio2f+0x46c>
 8010cf2:	b34f      	cbz	r7, 8010d48 <__kernel_rem_pio2f+0x478>
 8010cf4:	eef1 7a47 	vneg.f32	s15, s14
 8010cf8:	edc8 7a00 	vstr	s15, [r8]
 8010cfc:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8010d00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d04:	aa31      	add	r2, sp, #196	; 0xc4
 8010d06:	2301      	movs	r3, #1
 8010d08:	429c      	cmp	r4, r3
 8010d0a:	da20      	bge.n	8010d4e <__kernel_rem_pio2f+0x47e>
 8010d0c:	b10f      	cbz	r7, 8010d12 <__kernel_rem_pio2f+0x442>
 8010d0e:	eef1 7a67 	vneg.f32	s15, s15
 8010d12:	edc8 7a01 	vstr	s15, [r8, #4]
 8010d16:	e7bb      	b.n	8010c90 <__kernel_rem_pio2f+0x3c0>
 8010d18:	aa30      	add	r2, sp, #192	; 0xc0
 8010d1a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8010bdc <__kernel_rem_pio2f+0x30c>
 8010d1e:	4413      	add	r3, r2
 8010d20:	2c00      	cmp	r4, #0
 8010d22:	da05      	bge.n	8010d30 <__kernel_rem_pio2f+0x460>
 8010d24:	b10f      	cbz	r7, 8010d2a <__kernel_rem_pio2f+0x45a>
 8010d26:	eef1 7a67 	vneg.f32	s15, s15
 8010d2a:	edc8 7a00 	vstr	s15, [r8]
 8010d2e:	e7af      	b.n	8010c90 <__kernel_rem_pio2f+0x3c0>
 8010d30:	ed33 7a01 	vldmdb	r3!, {s14}
 8010d34:	3c01      	subs	r4, #1
 8010d36:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d3a:	e7f1      	b.n	8010d20 <__kernel_rem_pio2f+0x450>
 8010d3c:	ed73 7a01 	vldmdb	r3!, {s15}
 8010d40:	3a01      	subs	r2, #1
 8010d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010d46:	e7d2      	b.n	8010cee <__kernel_rem_pio2f+0x41e>
 8010d48:	eef0 7a47 	vmov.f32	s15, s14
 8010d4c:	e7d4      	b.n	8010cf8 <__kernel_rem_pio2f+0x428>
 8010d4e:	ecb2 7a01 	vldmia	r2!, {s14}
 8010d52:	3301      	adds	r3, #1
 8010d54:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d58:	e7d6      	b.n	8010d08 <__kernel_rem_pio2f+0x438>
 8010d5a:	edd1 7a00 	vldr	s15, [r1]
 8010d5e:	edd1 6a01 	vldr	s13, [r1, #4]
 8010d62:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d66:	3801      	subs	r0, #1
 8010d68:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d6c:	ed81 7a00 	vstr	s14, [r1]
 8010d70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d74:	edc1 7a01 	vstr	s15, [r1, #4]
 8010d78:	e799      	b.n	8010cae <__kernel_rem_pio2f+0x3de>
 8010d7a:	edd2 7a00 	vldr	s15, [r2]
 8010d7e:	edd2 6a01 	vldr	s13, [r2, #4]
 8010d82:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010d86:	3901      	subs	r1, #1
 8010d88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010d8c:	ed82 7a00 	vstr	s14, [r2]
 8010d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010d94:	edc2 7a01 	vstr	s15, [r2, #4]
 8010d98:	e78e      	b.n	8010cb8 <__kernel_rem_pio2f+0x3e8>
 8010d9a:	ed33 7a01 	vldmdb	r3!, {s14}
 8010d9e:	3c01      	subs	r4, #1
 8010da0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010da4:	e78f      	b.n	8010cc6 <__kernel_rem_pio2f+0x3f6>
 8010da6:	eef1 6a66 	vneg.f32	s13, s13
 8010daa:	eeb1 7a47 	vneg.f32	s14, s14
 8010dae:	edc8 6a00 	vstr	s13, [r8]
 8010db2:	ed88 7a01 	vstr	s14, [r8, #4]
 8010db6:	eef1 7a67 	vneg.f32	s15, s15
 8010dba:	e790      	b.n	8010cde <__kernel_rem_pio2f+0x40e>

08010dbc <__kernel_sinf>:
 8010dbc:	ee10 3a10 	vmov	r3, s0
 8010dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010dc4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8010dc8:	da04      	bge.n	8010dd4 <__kernel_sinf+0x18>
 8010dca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010dce:	ee17 3a90 	vmov	r3, s15
 8010dd2:	b35b      	cbz	r3, 8010e2c <__kernel_sinf+0x70>
 8010dd4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010dd8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8010e30 <__kernel_sinf+0x74>
 8010ddc:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8010e34 <__kernel_sinf+0x78>
 8010de0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010de4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8010e38 <__kernel_sinf+0x7c>
 8010de8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010dec:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8010e3c <__kernel_sinf+0x80>
 8010df0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8010df4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8010e40 <__kernel_sinf+0x84>
 8010df8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8010dfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8010e00:	b930      	cbnz	r0, 8010e10 <__kernel_sinf+0x54>
 8010e02:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8010e44 <__kernel_sinf+0x88>
 8010e06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8010e0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8010e0e:	4770      	bx	lr
 8010e10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8010e14:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010e18:	eee0 7a86 	vfma.f32	s15, s1, s12
 8010e1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8010e20:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010e48 <__kernel_sinf+0x8c>
 8010e24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8010e28:	ee30 0a60 	vsub.f32	s0, s0, s1
 8010e2c:	4770      	bx	lr
 8010e2e:	bf00      	nop
 8010e30:	2f2ec9d3 	.word	0x2f2ec9d3
 8010e34:	b2d72f34 	.word	0xb2d72f34
 8010e38:	3638ef1b 	.word	0x3638ef1b
 8010e3c:	b9500d01 	.word	0xb9500d01
 8010e40:	3c088889 	.word	0x3c088889
 8010e44:	be2aaaab 	.word	0xbe2aaaab
 8010e48:	3e2aaaab 	.word	0x3e2aaaab

08010e4c <fabsf>:
 8010e4c:	ee10 3a10 	vmov	r3, s0
 8010e50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010e54:	ee00 3a10 	vmov	s0, r3
 8010e58:	4770      	bx	lr
	...

08010e5c <floorf>:
 8010e5c:	ee10 3a10 	vmov	r3, s0
 8010e60:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010e64:	3a7f      	subs	r2, #127	; 0x7f
 8010e66:	2a16      	cmp	r2, #22
 8010e68:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010e6c:	dc2a      	bgt.n	8010ec4 <floorf+0x68>
 8010e6e:	2a00      	cmp	r2, #0
 8010e70:	da11      	bge.n	8010e96 <floorf+0x3a>
 8010e72:	eddf 7a18 	vldr	s15, [pc, #96]	; 8010ed4 <floorf+0x78>
 8010e76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010e7a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e82:	dd05      	ble.n	8010e90 <floorf+0x34>
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	da23      	bge.n	8010ed0 <floorf+0x74>
 8010e88:	4a13      	ldr	r2, [pc, #76]	; (8010ed8 <floorf+0x7c>)
 8010e8a:	2900      	cmp	r1, #0
 8010e8c:	bf18      	it	ne
 8010e8e:	4613      	movne	r3, r2
 8010e90:	ee00 3a10 	vmov	s0, r3
 8010e94:	4770      	bx	lr
 8010e96:	4911      	ldr	r1, [pc, #68]	; (8010edc <floorf+0x80>)
 8010e98:	4111      	asrs	r1, r2
 8010e9a:	420b      	tst	r3, r1
 8010e9c:	d0fa      	beq.n	8010e94 <floorf+0x38>
 8010e9e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8010ed4 <floorf+0x78>
 8010ea2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010ea6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010eae:	ddef      	ble.n	8010e90 <floorf+0x34>
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	bfbe      	ittt	lt
 8010eb4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8010eb8:	fa40 f202 	asrlt.w	r2, r0, r2
 8010ebc:	189b      	addlt	r3, r3, r2
 8010ebe:	ea23 0301 	bic.w	r3, r3, r1
 8010ec2:	e7e5      	b.n	8010e90 <floorf+0x34>
 8010ec4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8010ec8:	d3e4      	bcc.n	8010e94 <floorf+0x38>
 8010eca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ece:	4770      	bx	lr
 8010ed0:	2300      	movs	r3, #0
 8010ed2:	e7dd      	b.n	8010e90 <floorf+0x34>
 8010ed4:	7149f2ca 	.word	0x7149f2ca
 8010ed8:	bf800000 	.word	0xbf800000
 8010edc:	007fffff 	.word	0x007fffff

08010ee0 <scalbnf>:
 8010ee0:	ee10 3a10 	vmov	r3, s0
 8010ee4:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8010ee8:	d025      	beq.n	8010f36 <scalbnf+0x56>
 8010eea:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8010eee:	d302      	bcc.n	8010ef6 <scalbnf+0x16>
 8010ef0:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ef4:	4770      	bx	lr
 8010ef6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8010efa:	d122      	bne.n	8010f42 <scalbnf+0x62>
 8010efc:	4b2a      	ldr	r3, [pc, #168]	; (8010fa8 <scalbnf+0xc8>)
 8010efe:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8010fac <scalbnf+0xcc>
 8010f02:	4298      	cmp	r0, r3
 8010f04:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f08:	db16      	blt.n	8010f38 <scalbnf+0x58>
 8010f0a:	ee10 3a10 	vmov	r3, s0
 8010f0e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010f12:	3a19      	subs	r2, #25
 8010f14:	4402      	add	r2, r0
 8010f16:	2afe      	cmp	r2, #254	; 0xfe
 8010f18:	dd15      	ble.n	8010f46 <scalbnf+0x66>
 8010f1a:	ee10 3a10 	vmov	r3, s0
 8010f1e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8010fb0 <scalbnf+0xd0>
 8010f22:	eddf 6a24 	vldr	s13, [pc, #144]	; 8010fb4 <scalbnf+0xd4>
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	eeb0 7a67 	vmov.f32	s14, s15
 8010f2c:	bfb8      	it	lt
 8010f2e:	eef0 7a66 	vmovlt.f32	s15, s13
 8010f32:	ee27 0a27 	vmul.f32	s0, s14, s15
 8010f36:	4770      	bx	lr
 8010f38:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8010fb8 <scalbnf+0xd8>
 8010f3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010f40:	4770      	bx	lr
 8010f42:	0dd2      	lsrs	r2, r2, #23
 8010f44:	e7e6      	b.n	8010f14 <scalbnf+0x34>
 8010f46:	2a00      	cmp	r2, #0
 8010f48:	dd06      	ble.n	8010f58 <scalbnf+0x78>
 8010f4a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f4e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010f52:	ee00 3a10 	vmov	s0, r3
 8010f56:	4770      	bx	lr
 8010f58:	f112 0f16 	cmn.w	r2, #22
 8010f5c:	da1a      	bge.n	8010f94 <scalbnf+0xb4>
 8010f5e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010f62:	4298      	cmp	r0, r3
 8010f64:	ee10 3a10 	vmov	r3, s0
 8010f68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f6c:	dd0a      	ble.n	8010f84 <scalbnf+0xa4>
 8010f6e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8010fb0 <scalbnf+0xd0>
 8010f72:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8010fb4 <scalbnf+0xd4>
 8010f76:	eef0 7a40 	vmov.f32	s15, s0
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	bf18      	it	ne
 8010f7e:	eeb0 0a47 	vmovne.f32	s0, s14
 8010f82:	e7db      	b.n	8010f3c <scalbnf+0x5c>
 8010f84:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8010fb8 <scalbnf+0xd8>
 8010f88:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8010fbc <scalbnf+0xdc>
 8010f8c:	eef0 7a40 	vmov.f32	s15, s0
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	e7f3      	b.n	8010f7c <scalbnf+0x9c>
 8010f94:	3219      	adds	r2, #25
 8010f96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010f9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8010f9e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010fc0 <scalbnf+0xe0>
 8010fa2:	ee07 3a10 	vmov	s14, r3
 8010fa6:	e7c4      	b.n	8010f32 <scalbnf+0x52>
 8010fa8:	ffff3cb0 	.word	0xffff3cb0
 8010fac:	4c000000 	.word	0x4c000000
 8010fb0:	7149f2ca 	.word	0x7149f2ca
 8010fb4:	f149f2ca 	.word	0xf149f2ca
 8010fb8:	0da24260 	.word	0x0da24260
 8010fbc:	8da24260 	.word	0x8da24260
 8010fc0:	33000000 	.word	0x33000000

08010fc4 <_init>:
 8010fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fc6:	bf00      	nop
 8010fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fca:	bc08      	pop	{r3}
 8010fcc:	469e      	mov	lr, r3
 8010fce:	4770      	bx	lr

08010fd0 <_fini>:
 8010fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fd2:	bf00      	nop
 8010fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010fd6:	bc08      	pop	{r3}
 8010fd8:	469e      	mov	lr, r3
 8010fda:	4770      	bx	lr
