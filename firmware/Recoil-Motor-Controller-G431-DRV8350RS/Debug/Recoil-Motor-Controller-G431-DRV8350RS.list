
Recoil-Motor-Controller-G431-DRV8350RS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800fd60  0800fd60  0001fd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801063c  0801063c  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801063c  0801063c  0002063c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010644  08010644  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010644  08010644  00020644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010648  08010648  00020648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801064c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  200001fc  08010848  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08010848  00030778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026c73  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000460e  00000000  00000000  00056e9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd0  00000000  00000000  0005b4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001be8  00000000  00000000  0005d280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024185  00000000  00000000  0005ee68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a60  00000000  00000000  00082fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8030  00000000  00000000  000a5a4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0018da7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000943c  00000000  00000000  0018dad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fd44 	.word	0x0800fd44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	0800fd44 	.word	0x0800fd44

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_FDCAN_RxFifo0Callback>:

float user_input_pot;
uint8_t user_input_button;
uint8_t user_output_led;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  CAN_Frame rx_frame;
  CAN_getRxFrame(&hfdcan1, &rx_frame);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4619      	mov	r1, r3
 8000fac:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8000fae:	f000 f8e7 	bl	8001180 <CAN_getRxFrame>
  MotorController_handleCANMessage(&controller, &rx_frame);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <HAL_FDCAN_RxFifo0Callback+0x30>)
 8000fba:	f002 fb95 	bl	80036e8 <MotorController_handleCANMessage>
}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000420 	.word	0x20000420
 8000fcc:	20000218 	.word	0x20000218

08000fd0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim == &htim1) {
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	4a15      	ldr	r2, [pc, #84]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d104      	bne.n	8000fea <HAL_TIM_PeriodElapsedCallback+0x1a>
    MotorController_updateCommutation(&controller, &hadc1);
 8000fe0:	4914      	ldr	r1, [pc, #80]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000fe2:	4815      	ldr	r0, [pc, #84]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000fe4:	f001 ff7e 	bl	8002ee4 <MotorController_updateCommutation>
    #endif
  }
  else if (htim == &htim4) {
    MotorController_triggerPositionUpdate(&controller);
  }
}
 8000fe8:	e01d      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim2) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a13      	ldr	r2, [pc, #76]	; (800103c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d112      	bne.n	8001018 <HAL_TIM_PeriodElapsedCallback+0x48>
    if (controller.mode != MODE_IDLE && controller.mode != MODE_CALIBRATION) {
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ff4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d014      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000ffe:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8001002:	2b05      	cmp	r3, #5
 8001004:	d00f      	beq.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
      MotorController_setMode(&controller, MODE_DISABLED);
 8001006:	2100      	movs	r1, #0
 8001008:	480b      	ldr	r0, [pc, #44]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800100a:	f001 fd61 	bl	8002ad0 <MotorController_setMode>
      controller.error = ERROR_HEARTBEAT_TIMEOUT;
 800100e:	4b0a      	ldr	r3, [pc, #40]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001010:	2204      	movs	r2, #4
 8001012:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
}
 8001016:	e006      	b.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
  else if (htim == &htim4) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a09      	ldr	r2, [pc, #36]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d102      	bne.n	8001026 <HAL_TIM_PeriodElapsedCallback+0x56>
    MotorController_triggerPositionUpdate(&controller);
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001022:	f001 ffd7 	bl	8002fd4 <MotorController_triggerPositionUpdate>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000059c 	.word	0x2000059c
 8001034:	20000348 	.word	0x20000348
 8001038:	20000218 	.word	0x20000218
 800103c:	200005e8 	.word	0x200005e8
 8001040:	20000634 	.word	0x20000634

08001044 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f006 ff63 	bl	8007f20 <HAL_GPIO_WritePin>

  MotorController_updatePositionReading(&controller);
 800105a:	4805      	ldr	r0, [pc, #20]	; (8001070 <HAL_SPI_TxRxCpltCallback+0x2c>)
 800105c:	f002 f80c 	bl	8003078 <MotorController_updatePositionReading>
  /* ====== Start user APP code ====== */
//  controller.position_controller.position_target = APP_getUserPot() * M_PI;

  /* ====== End user APP code ====== */

  MotorController_updatePositionController(&controller);
 8001060:	4803      	ldr	r0, [pc, #12]	; (8001070 <HAL_SPI_TxRxCpltCallback+0x2c>)
 8001062:	f002 f859 	bl	8003118 <MotorController_updatePositionController>
}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000218 	.word	0x20000218

08001074 <APP_init>:

  HAL_FLASH_Lock();
  HAL_FLASH_OB_Launch();  // reload the new settings
}

void APP_init() {
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
//  APP_initFlashOption();

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 8001078:	2201      	movs	r2, #1
 800107a:	2104      	movs	r1, #4
 800107c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001080:	f006 ff4e 	bl	8007f20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	2110      	movs	r1, #16
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f006 ff48 	bl	8007f20 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8001090:	2201      	movs	r2, #1
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001098:	f006 ff42 	bl	8007f20 <HAL_GPIO_WritePin>

  MotorController_init(&controller);
 800109c:	480a      	ldr	r0, [pc, #40]	; (80010c8 <APP_init+0x54>)
 800109e:	f001 fc15 	bl	80028cc <MotorController_init>

  MotorController_setMode(&controller, MODE_IDLE);
 80010a2:	2101      	movs	r1, #1
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <APP_init+0x54>)
 80010a6:	f001 fd13 	bl	8002ad0 <MotorController_setMode>

  controller.position_controller.position_kp = 0.5;
 80010aa:	4b07      	ldr	r3, [pc, #28]	; (80010c8 <APP_init+0x54>)
 80010ac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80010b0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  controller.position_controller.torque_limit_lower = -3;
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <APP_init+0x54>)
 80010b6:	4a05      	ldr	r2, [pc, #20]	; (80010cc <APP_init+0x58>)
 80010b8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  controller.position_controller.torque_limit_upper = 3;
 80010bc:	4b02      	ldr	r3, [pc, #8]	; (80010c8 <APP_init+0x54>)
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <APP_init+0x5c>)
 80010c0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
//  MotorController_setMode(&controller, MODE_POSITION);

//  controller.current_controller.v_q_target = 1.5;
//  controller.current_controller.v_d_target = 0;
//  MotorController_setMode(&controller, MODE_OPEN_VDQ);
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20000218 	.word	0x20000218
 80010cc:	c0400000 	.word	0xc0400000
 80010d0:	40400000 	.word	0x40400000

080010d4 <APP_main>:


void APP_main() {
 80010d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010d8:	b0a4      	sub	sp, #144	; 0x90
 80010da:	af04      	add	r7, sp, #16
  MotorController_updateService(&controller);
 80010dc:	4825      	ldr	r0, [pc, #148]	; (8001174 <APP_main+0xa0>)
 80010de:	f002 f857 	bl	8003190 <MotorController_updateService>


  if (controller.mode != MODE_IDLE) {
 80010e2:	4b24      	ldr	r3, [pc, #144]	; (8001174 <APP_main+0xa0>)
 80010e4:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d006      	beq.n	80010fa <APP_main+0x26>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);    // blue LED
 80010ec:	2201      	movs	r2, #1
 80010ee:	2140      	movs	r1, #64	; 0x40
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f006 ff14 	bl	8007f20 <HAL_GPIO_WritePin>
 80010f8:	e005      	b.n	8001106 <APP_main+0x32>
  }
  else {
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);    // blue LED
 80010fa:	2200      	movs	r2, #0
 80010fc:	2140      	movs	r1, #64	; 0x40
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f006 ff0d 	bl	8007f20 <HAL_GPIO_WritePin>
  char str[128];
//  sprintf(str, "error: %d encoder:%d\n",
//      ((uint16_t)controller.position_controller.position_measured) >> 14,
//      ((uint16_t)controller.position_controller.position_measured) & 0x3FFF);
  sprintf(str, "pos:%f\tpos_t:%f\tpos_s:%f\n",
      controller.position_controller.position_measured,
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <APP_main+0xa0>)
 8001108:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
  sprintf(str, "pos:%f\tpos_t:%f\tpos_s:%f\n",
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa43 	bl	8000598 <__aeabi_f2d>
 8001112:	4680      	mov	r8, r0
 8001114:	4689      	mov	r9, r1
      controller.position_controller.position_target,
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <APP_main+0xa0>)
 8001118:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
  sprintf(str, "pos:%f\tpos_t:%f\tpos_s:%f\n",
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa3b 	bl	8000598 <__aeabi_f2d>
 8001122:	4604      	mov	r4, r0
 8001124:	460d      	mov	r5, r1
      controller.position_controller.position_setpoint);
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <APP_main+0xa0>)
 8001128:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
  sprintf(str, "pos:%f\tpos_t:%f\tpos_s:%f\n",
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa33 	bl	8000598 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4638      	mov	r0, r7
 8001138:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800113c:	e9cd 4500 	strd	r4, r5, [sp]
 8001140:	4642      	mov	r2, r8
 8001142:	464b      	mov	r3, r9
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <APP_main+0xa4>)
 8001146:	f00b fccf 	bl	800cae8 <siprintf>
//      controller.current_controller.i_b_measured,
//      controller.current_controller.i_c_measured);
//    sprintf(str, "pos:%f\tvbus:%f\r\n",
//        controller.position_controller.position_measured,
//        controller.powerstage.bus_voltage_measured);
  HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 1000);
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff f867 	bl	8000220 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	4639      	mov	r1, r7
 8001158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115c:	4807      	ldr	r0, [pc, #28]	; (800117c <APP_main+0xa8>)
 800115e:	f00a fa0c 	bl	800b57a <HAL_UART_Transmit>
////
  HAL_Delay(5);
 8001162:	2005      	movs	r0, #5
 8001164:	f004 f860 	bl	8005228 <HAL_Delay>

}
 8001168:	bf00      	nop
 800116a:	3780      	adds	r7, #128	; 0x80
 800116c:	46bd      	mov	sp, r7
 800116e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001172:	bf00      	nop
 8001174:	20000218 	.word	0x20000218
 8001178:	0800fd60 	.word	0x0800fd60
 800117c:	200006cc 	.word	0x200006cc

08001180 <CAN_getRxFrame>:
 *      Author: TK
 */

#include "can.h"

void CAN_getRxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *rx_frame) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08c      	sub	sp, #48	; 0x30
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  FDCAN_RxHeaderTypeDef rx_header;
  HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_frame->data);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	3308      	adds	r3, #8
 800118e:	f107 0208 	add.w	r2, r7, #8
 8001192:	2140      	movs	r1, #64	; 0x40
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f005 fe83 	bl	8006ea0 <HAL_FDCAN_GetRxMessage>

  rx_frame->id = rx_header.Identifier;
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	601a      	str	r2, [r3, #0]
  rx_frame->id_type = (rx_header.IdType == FDCAN_STANDARD_ID) ? CAN_ID_STANDARD : CAN_ID_EXTENDED;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	bf14      	ite	ne
 80011a6:	2301      	movne	r3, #1
 80011a8:	2300      	moveq	r3, #0
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	711a      	strb	r2, [r3, #4]
  rx_frame->frame_type = (rx_header.RxFrameType == FDCAN_DATA_FRAME) ? CAN_FRAME_DATA : CAN_FRAME_REMOTE;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d101      	bne.n	80011bc <CAN_getRxFrame+0x3c>
 80011b8:	2201      	movs	r2, #1
 80011ba:	e000      	b.n	80011be <CAN_getRxFrame+0x3e>
 80011bc:	2200      	movs	r2, #0
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	715a      	strb	r2, [r3, #5]
  switch (rx_header.DataLength) {
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011c8:	d04c      	beq.n	8001264 <CAN_getRxFrame+0xe4>
 80011ca:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80011ce:	d84d      	bhi.n	800126c <CAN_getRxFrame+0xec>
 80011d0:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011d4:	d042      	beq.n	800125c <CAN_getRxFrame+0xdc>
 80011d6:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80011da:	d847      	bhi.n	800126c <CAN_getRxFrame+0xec>
 80011dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011e0:	d038      	beq.n	8001254 <CAN_getRxFrame+0xd4>
 80011e2:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80011e6:	d841      	bhi.n	800126c <CAN_getRxFrame+0xec>
 80011e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ec:	d02e      	beq.n	800124c <CAN_getRxFrame+0xcc>
 80011ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f2:	d83b      	bhi.n	800126c <CAN_getRxFrame+0xec>
 80011f4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011f8:	d024      	beq.n	8001244 <CAN_getRxFrame+0xc4>
 80011fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80011fe:	d835      	bhi.n	800126c <CAN_getRxFrame+0xec>
 8001200:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001204:	d01a      	beq.n	800123c <CAN_getRxFrame+0xbc>
 8001206:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800120a:	d82f      	bhi.n	800126c <CAN_getRxFrame+0xec>
 800120c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001210:	d010      	beq.n	8001234 <CAN_getRxFrame+0xb4>
 8001212:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001216:	d829      	bhi.n	800126c <CAN_getRxFrame+0xec>
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <CAN_getRxFrame+0xa4>
 800121c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001220:	d004      	beq.n	800122c <CAN_getRxFrame+0xac>
 8001222:	e023      	b.n	800126c <CAN_getRxFrame+0xec>
    case FDCAN_DLC_BYTES_0:
      rx_frame->size = 0; break;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	80da      	strh	r2, [r3, #6]
 800122a:	e023      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_1:
      rx_frame->size = 1; break;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2201      	movs	r2, #1
 8001230:	80da      	strh	r2, [r3, #6]
 8001232:	e01f      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_2:
      rx_frame->size = 2; break;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2202      	movs	r2, #2
 8001238:	80da      	strh	r2, [r3, #6]
 800123a:	e01b      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_3:
      rx_frame->size = 3; break;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	80da      	strh	r2, [r3, #6]
 8001242:	e017      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_4:
      rx_frame->size = 4; break;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2204      	movs	r2, #4
 8001248:	80da      	strh	r2, [r3, #6]
 800124a:	e013      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_5:
      rx_frame->size = 5; break;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2205      	movs	r2, #5
 8001250:	80da      	strh	r2, [r3, #6]
 8001252:	e00f      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_6:
      rx_frame->size = 6; break;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	2206      	movs	r2, #6
 8001258:	80da      	strh	r2, [r3, #6]
 800125a:	e00b      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_7:
      rx_frame->size = 7; break;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	2207      	movs	r2, #7
 8001260:	80da      	strh	r2, [r3, #6]
 8001262:	e007      	b.n	8001274 <CAN_getRxFrame+0xf4>
    case FDCAN_DLC_BYTES_8:
      rx_frame->size = 8; break;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2208      	movs	r2, #8
 8001268:	80da      	strh	r2, [r3, #6]
 800126a:	e003      	b.n	8001274 <CAN_getRxFrame+0xf4>
    default:
      rx_frame->size = 0;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	80da      	strh	r2, [r3, #6]
  }
}
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	3730      	adds	r7, #48	; 0x30
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <CAN_putTxFrame>:

HAL_StatusTypeDef CAN_putTxFrame(FDCAN_HandleTypeDef *hfdcan, CAN_Frame *tx_frame) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	; 0x30
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  FDCAN_TxHeaderTypeDef tx_header;

  tx_header.Identifier = tx_frame->id;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	60fb      	str	r3, [r7, #12]
  tx_header.IdType = (tx_frame->id_type == CAN_ID_STANDARD) ? FDCAN_STANDARD_ID : FDCAN_EXTENDED_ID;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	791b      	ldrb	r3, [r3, #4]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <CAN_putTxFrame+0x1c>
 8001294:	2300      	movs	r3, #0
 8001296:	e001      	b.n	800129c <CAN_putTxFrame+0x20>
 8001298:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800129c:	613b      	str	r3, [r7, #16]
  tx_header.TxFrameType = (tx_frame->frame_type == CAN_FRAME_DATA) ? FDCAN_DATA_FRAME : FDCAN_REMOTE_FRAME;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	795b      	ldrb	r3, [r3, #5]
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d101      	bne.n	80012aa <CAN_putTxFrame+0x2e>
 80012a6:	2300      	movs	r3, #0
 80012a8:	e001      	b.n	80012ae <CAN_putTxFrame+0x32>
 80012aa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80012ae:	617b      	str	r3, [r7, #20]
  switch (tx_frame->size) {
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	88db      	ldrh	r3, [r3, #6]
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d838      	bhi.n	800132a <CAN_putTxFrame+0xae>
 80012b8:	a201      	add	r2, pc, #4	; (adr r2, 80012c0 <CAN_putTxFrame+0x44>)
 80012ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012be:	bf00      	nop
 80012c0:	080012e5 	.word	0x080012e5
 80012c4:	080012eb 	.word	0x080012eb
 80012c8:	080012f3 	.word	0x080012f3
 80012cc:	080012fb 	.word	0x080012fb
 80012d0:	08001303 	.word	0x08001303
 80012d4:	0800130b 	.word	0x0800130b
 80012d8:	08001313 	.word	0x08001313
 80012dc:	0800131b 	.word	0x0800131b
 80012e0:	08001323 	.word	0x08001323
    case 0:
      tx_header.DataLength = FDCAN_DLC_BYTES_0; break;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	e021      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 1:
      tx_header.DataLength = FDCAN_DLC_BYTES_1; break;
 80012ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	e01d      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 2:
      tx_header.DataLength = FDCAN_DLC_BYTES_2; break;
 80012f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	e019      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 3:
      tx_header.DataLength = FDCAN_DLC_BYTES_3; break;
 80012fa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80012fe:	61bb      	str	r3, [r7, #24]
 8001300:	e015      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 4:
      tx_header.DataLength = FDCAN_DLC_BYTES_4; break;
 8001302:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	e011      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 5:
      tx_header.DataLength = FDCAN_DLC_BYTES_5; break;
 800130a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800130e:	61bb      	str	r3, [r7, #24]
 8001310:	e00d      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 6:
      tx_header.DataLength = FDCAN_DLC_BYTES_6; break;
 8001312:	f44f 23c0 	mov.w	r3, #393216	; 0x60000
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	e009      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 7:
      tx_header.DataLength = FDCAN_DLC_BYTES_7; break;
 800131a:	f44f 23e0 	mov.w	r3, #458752	; 0x70000
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	e005      	b.n	800132e <CAN_putTxFrame+0xb2>
    case 8:
      tx_header.DataLength = FDCAN_DLC_BYTES_8; break;
 8001322:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	e001      	b.n	800132e <CAN_putTxFrame+0xb2>
    default:
      tx_header.DataLength = FDCAN_DLC_BYTES_0;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  }
  tx_header.ErrorStateIndicator = FDCAN_ESI_PASSIVE;
 800132e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001332:	61fb      	str	r3, [r7, #28]
  tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8001334:	2300      	movs	r3, #0
 8001336:	623b      	str	r3, [r7, #32]
  tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8001338:	2300      	movs	r3, #0
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
  tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800133c:	2300      	movs	r3, #0
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  tx_header.MessageMarker = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c

  return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &tx_header, tx_frame->data);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	f103 0208 	add.w	r2, r3, #8
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4619      	mov	r1, r3
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f005 fd61 	bl	8006e18 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001356:	4603      	mov	r3, r0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3730      	adds	r7, #48	; 0x30
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <clampf>:
#define SET_BITS(REG, BIT)                    ((REG) |= (BIT))
#define CLEAR_BITS(REG, BIT)                  ((REG) &= ~(BIT))
#define READ_BITS(REG, BIT)                   ((REG) & (BIT))
#define WRITE_BITS(REG, CLEARMASK, SETMASK)   ((REG) = (((REG) & (~(CLEARMASK))) | (SETMASK)))

static inline float clampf(float value, float min, float max) {
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	ed87 0a03 	vstr	s0, [r7, #12]
 800136a:	edc7 0a02 	vstr	s1, [r7, #8]
 800136e:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8001372:	ed97 7a03 	vldr	s14, [r7, #12]
 8001376:	edd7 7a01 	vldr	s15, [r7, #4]
 800137a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800137e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001382:	dd01      	ble.n	8001388 <clampf+0x28>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	e00b      	b.n	80013a0 <clampf+0x40>
 8001388:	ed97 7a03 	vldr	s14, [r7, #12]
 800138c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001390:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d501      	bpl.n	800139e <clampf+0x3e>
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	e000      	b.n	80013a0 <clampf+0x40>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	ee07 3a90 	vmov	s15, r3
}
 80013a4:	eeb0 0a67 	vmov.f32	s0, s15
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <CurrentController_init>:

#include "current_controller.h"

void CurrentController_init(CurrentController *controller) {
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  controller->current_filter_alpha = 0.5;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80013c0:	601a      	str	r2, [r3, #0]

  controller->i_q_kp = 1.;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c8:	605a      	str	r2, [r3, #4]
  controller->i_q_ki = 0.; // 0.01
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f04f 0200 	mov.w	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]

  controller->i_d_kp = 1.;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013d8:	60da      	str	r2, [r3, #12]
  controller->i_d_ki = 0.;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f04f 0200 	mov.w	r2, #0
 80013e0:	611a      	str	r2, [r3, #16]

  controller->i_q_measured = 0;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f04f 0200 	mov.w	r2, #0
 80013e8:	669a      	str	r2, [r3, #104]	; 0x68
  controller->i_d_measured = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f04f 0200 	mov.w	r2, #0
 80013f0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <CurrentController_update>:

void CurrentController_update(CurrentController *controller, Mode mode, float sin_theta, float cos_theta, float v_bus) {
 8001400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001404:	b08c      	sub	sp, #48	; 0x30
 8001406:	af00      	add	r7, sp, #0
 8001408:	6178      	str	r0, [r7, #20]
 800140a:	460b      	mov	r3, r1
 800140c:	ed87 0a03 	vstr	s0, [r7, #12]
 8001410:	edc7 0a02 	vstr	s1, [r7, #8]
 8001414:	ed87 1a01 	vstr	s2, [r7, #4]
 8001418:	74fb      	strb	r3, [r7, #19]
  //  current_error = command_current - feedback_current
  //  current_integrator = limit(current_integrator + ki * current_error, ilimit)
  //  voltage = current_integrator + kp * current_error

  FOC_clarkTransform(
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	edd3 7a08 	vldr	s15, [r3, #32]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001438:	eeb0 1a66 	vmov.f32	s2, s13
 800143c:	eef0 0a47 	vmov.f32	s1, s14
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	4610      	mov	r0, r2
 8001446:	f000 fb57 	bl	8001af8 <FOC_clarkTransform>
    controller->i_c_measured);

  float i_q;
  float i_d;

  FOC_parkTransform(
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001456:	f107 021c 	add.w	r2, r7, #28
 800145a:	f107 0320 	add.w	r3, r7, #32
 800145e:	edd7 1a02 	vldr	s3, [r7, #8]
 8001462:	ed97 1a03 	vldr	s2, [r7, #12]
 8001466:	eef0 0a47 	vmov.f32	s1, s14
 800146a:	eeb0 0a67 	vmov.f32	s0, s15
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f000 fba5 	bl	8001bc0 <FOC_parkTransform>
    controller->i_alpha_measured,
    controller->i_beta_measured,
    sin_theta, cos_theta);

  controller->i_q_measured = (
      controller->current_filter_alpha * i_q
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	ed93 7a00 	vldr	s14, [r3]
 800147c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001484:	ee17 0a90 	vmov	r0, s15
 8001488:	f7ff f886 	bl	8000598 <__aeabi_f2d>
 800148c:	4604      	mov	r4, r0
 800148e:	460d      	mov	r5, r1
      + (1.-controller->current_filter_alpha) * controller->i_q_measured
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff f87f 	bl	8000598 <__aeabi_f2d>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	f04f 0000 	mov.w	r0, #0
 80014a2:	49bd      	ldr	r1, [pc, #756]	; (8001798 <CurrentController_update+0x398>)
 80014a4:	f7fe ff18 	bl	80002d8 <__aeabi_dsub>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4690      	mov	r8, r2
 80014ae:	4699      	mov	r9, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff f86f 	bl	8000598 <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	4640      	mov	r0, r8
 80014c0:	4649      	mov	r1, r9
 80014c2:	f7ff f8c1 	bl	8000648 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4620      	mov	r0, r4
 80014cc:	4629      	mov	r1, r5
 80014ce:	f7fe ff05 	bl	80002dc <__adddf3>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4610      	mov	r0, r2
 80014d8:	4619      	mov	r1, r3
 80014da:	f7ff fb8d 	bl	8000bf8 <__aeabi_d2f>
 80014de:	4602      	mov	r2, r0
  controller->i_q_measured = (
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	669a      	str	r2, [r3, #104]	; 0x68
      );

  controller->i_d_measured = (
      controller->current_filter_alpha * i_d
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	ed93 7a00 	vldr	s14, [r3]
 80014ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80014ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014f2:	ee17 0a90 	vmov	r0, s15
 80014f6:	f7ff f84f 	bl	8000598 <__aeabi_f2d>
 80014fa:	4604      	mov	r4, r0
 80014fc:	460d      	mov	r5, r1
      + (1.-controller->current_filter_alpha) * controller->i_d_measured
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff f848 	bl	8000598 <__aeabi_f2d>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	f04f 0000 	mov.w	r0, #0
 8001510:	49a1      	ldr	r1, [pc, #644]	; (8001798 <CurrentController_update+0x398>)
 8001512:	f7fe fee1 	bl	80002d8 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4690      	mov	r8, r2
 800151c:	4699      	mov	r9, r3
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f838 	bl	8000598 <__aeabi_f2d>
 8001528:	4602      	mov	r2, r0
 800152a:	460b      	mov	r3, r1
 800152c:	4640      	mov	r0, r8
 800152e:	4649      	mov	r1, r9
 8001530:	f7ff f88a 	bl	8000648 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fece 	bl	80002dc <__adddf3>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f7ff fb56 	bl	8000bf8 <__aeabi_d2f>
 800154c:	4602      	mov	r2, r0
  controller->i_d_measured = (
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	66da      	str	r2, [r3, #108]	; 0x6c
      );


  if (mode != MODE_OPEN_IDQ) {
 8001552:	7cfb      	ldrb	r3, [r7, #19]
 8001554:	2b21      	cmp	r3, #33	; 0x21
 8001556:	d016      	beq.n	8001586 <CurrentController_update+0x186>
    controller->i_q_setpoint = controller->i_q_target - controller->i_q_measured;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->i_d_setpoint = controller->i_d_target - controller->i_d_measured;
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800157a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
 8001584:	e007      	b.n	8001596 <CurrentController_update+0x196>
  }
  else {
    controller->i_q_setpoint = controller->i_q_target;
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	671a      	str	r2, [r3, #112]	; 0x70
    controller->i_d_setpoint = controller->i_d_target;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	675a      	str	r2, [r3, #116]	; 0x74
  }

  if (mode != MODE_OPEN_VDQ) {
 8001596:	7cfb      	ldrb	r3, [r7, #19]
 8001598:	2b22      	cmp	r3, #34	; 0x22
 800159a:	d054      	beq.n	8001646 <CurrentController_update+0x246>
    controller->i_q_integrator = clampf(
        controller->i_q_integrator + controller->i_q_ki * controller->i_q_setpoint, -1, 1);
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_q_integrator = clampf(
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015ba:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	f7ff fecd 	bl	8001360 <clampf>
 80015c6:	eef0 7a40 	vmov.f32	s15, s0
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
    controller->i_d_integrator = clampf(
        controller->i_d_integrator + controller->i_d_ki * controller->i_d_setpoint, -1, 1);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	edd3 6a04 	vldr	s13, [r3, #16]
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 80015e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
    controller->i_d_integrator = clampf(
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80015ee:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	f7ff feb3 	bl	8001360 <clampf>
 80015fa:	eef0 7a40 	vmov.f32	s15, s0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c

    controller->v_q_setpoint =
        controller->i_q_kp * controller->i_q_setpoint + controller->i_q_integrator;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	ed93 7a01 	vldr	s14, [r3, #4]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8001610:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800161a:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_q_setpoint =
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
    controller->v_d_setpoint =
        controller->i_d_kp * controller->i_d_setpoint + controller->i_d_integrator;
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	ed93 7a03 	vldr	s14, [r3, #12]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001630:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800163a:	ee77 7a27 	vadd.f32	s15, s14, s15
    controller->v_d_setpoint =
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 8001644:	e007      	b.n	8001656 <CurrentController_update+0x256>
  }
  else {
    controller->v_q_setpoint = controller->v_q_target;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	659a      	str	r2, [r3, #88]	; 0x58
    controller->v_d_setpoint = controller->v_d_target;
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  // clamp voltage
  if (v_bus > 0) {
 8001656:	edd7 7a01 	vldr	s15, [r7, #4]
 800165a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800165e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001662:	dd53      	ble.n	800170c <CurrentController_update+0x30c>
    // CSVPWM over modulation
    float v_max_sq = v_bus * v_bus * 1.15;
 8001664:	edd7 7a01 	vldr	s15, [r7, #4]
 8001668:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800166c:	ee17 0a90 	vmov	r0, s15
 8001670:	f7fe ff92 	bl	8000598 <__aeabi_f2d>
 8001674:	a346      	add	r3, pc, #280	; (adr r3, 8001790 <CurrentController_update+0x390>)
 8001676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167a:	f7fe ffe5 	bl	8000648 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	4610      	mov	r0, r2
 8001684:	4619      	mov	r1, r3
 8001686:	f7ff fab7 	bl	8000bf8 <__aeabi_d2f>
 800168a:	4603      	mov	r3, r0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
    float v_norm = (
        (controller->v_q_setpoint * controller->v_q_setpoint)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800169a:	ee27 7a27 	vmul.f32	s14, s14, s15
        + (controller->v_d_setpoint * controller->v_d_setpoint)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80016aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
    float v_norm = (
 80016ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        );
    if (v_norm > v_max_sq) {
 80016b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80016ba:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c6:	dd21      	ble.n	800170c <CurrentController_update+0x30c>
      float k = sqrtf(fabsf(v_norm / v_max_sq));
 80016c8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80016cc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80016d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016d4:	eef0 7ae7 	vabs.f32	s15, s15
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f00d fd78 	bl	800f1d0 <sqrtf>
 80016e0:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
      controller->v_q_setpoint *= k;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 80016ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80016ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
      controller->v_d_setpoint *= k;
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 80016fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
    }
  }

  if (mode != MODE_OPEN_VALPHABETA && mode != MODE_CALIBRATION) {
 800170c:	7cfb      	ldrb	r3, [r7, #19]
 800170e:	2b23      	cmp	r3, #35	; 0x23
 8001710:	d01a      	beq.n	8001748 <CurrentController_update+0x348>
 8001712:	7cfb      	ldrb	r3, [r7, #19]
 8001714:	2b05      	cmp	r3, #5
 8001716:	d017      	beq.n	8001748 <CurrentController_update+0x348>
    FOC_invParkTransform(
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001730:	edd7 1a02 	vldr	s3, [r7, #8]
 8001734:	ed97 1a03 	vldr	s2, [r7, #12]
 8001738:	eef0 0a47 	vmov.f32	s1, s14
 800173c:	eeb0 0a67 	vmov.f32	s0, s15
 8001740:	4610      	mov	r0, r2
 8001742:	f000 fa72 	bl	8001c2a <FOC_invParkTransform>
 8001746:	e007      	b.n	8001758 <CurrentController_update+0x358>
      controller->v_q_setpoint,
      controller->v_d_setpoint,
      sin_theta, cos_theta);
  }
  else {
    controller->v_alpha_setpoint = controller->v_alpha_target;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	649a      	str	r2, [r3, #72]	; 0x48
    controller->v_beta_setpoint = controller->v_beta_target;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (mode != MODE_OPEN_VABC) {
 8001758:	7cfb      	ldrb	r3, [r7, #19]
 800175a:	2b24      	cmp	r3, #36	; 0x24
 800175c:	d01e      	beq.n	800179c <CurrentController_update+0x39c>
    FOC_invClarkSVPWM(
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800177c:	eef0 0a47 	vmov.f32	s1, s14
 8001780:	eeb0 0a67 	vmov.f32	s0, s15
 8001784:	f000 fa88 	bl	8001c98 <FOC_invClarkSVPWM>
  else {
    controller->v_a_setpoint = controller->v_a_target;
    controller->v_b_setpoint = controller->v_b_target;
    controller->v_c_setpoint = controller->v_c_target;
  }
}
 8001788:	e014      	b.n	80017b4 <CurrentController_update+0x3b4>
 800178a:	bf00      	nop
 800178c:	f3af 8000 	nop.w
 8001790:	66666666 	.word	0x66666666
 8001794:	3ff26666 	.word	0x3ff26666
 8001798:	3ff00000 	.word	0x3ff00000
    controller->v_a_setpoint = controller->v_a_target;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	62da      	str	r2, [r3, #44]	; 0x2c
    controller->v_b_setpoint = controller->v_b_target;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	631a      	str	r2, [r3, #48]	; 0x30
    controller->v_c_setpoint = controller->v_c_target;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	69da      	ldr	r2, [r3, #28]
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017be:	bf00      	nop

080017c0 <getParity>:
 * If that count is odd, the parity bit value is set to 1, making the total count of occurrences of 1s in the whole set (including the parity bit) an even number.
 * If the count of 1s in a given set of bits is already even, the parity bit's value is 0.
 *
 * @return true if the number of ones in the data package is even, else false.
 */
uint16_t getParity(uint16_t data) {
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 8;              // example for 8-bit (this line scales it up to 16 bit)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	88fb      	ldrh	r3, [r7, #6]
 80017d2:	4053      	eors	r3, r2
 80017d4:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 4;              // ( a b c d e f g h ) xor ( 0 0 0 0 a b c d ) = ( a b c d ae bf cg dh )
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	091b      	lsrs	r3, r3, #4
 80017da:	b29a      	uxth	r2, r3
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4053      	eors	r3, r2
 80017e0:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 2;              // ( a b c d ae bf cg dh ) xor ( 0 0 a b c d ae bf ) = ( a b ac bd ace bdf aceg bdfh )
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	4053      	eors	r3, r2
 80017ec:	80fb      	strh	r3, [r7, #6]
  data ^= data >> 1;              // ( a b ac bd ace bdf aceg bdfh ) xor ( 0 a b ac bd ace bdf aceg ) = ( a ab abc abcd abcde abcdef abcdefg abcdefgh )
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	085b      	lsrs	r3, r3, #1
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	4053      	eors	r3, r2
 80017f8:	80fb      	strh	r3, [r7, #6]
  return data & 1;                // if lsb of data is 0 -> data is even. if lsb of data is 1 -> data is odd.
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	f003 0301 	and.w	r3, r3, #1
 8001800:	b29b      	uxth	r3, r3
}
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <Encoder_init>:


void Encoder_init(Encoder *encoder, SPI_HandleTypeDef *hspi, TIM_HandleTypeDef *htim) {
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	607a      	str	r2, [r7, #4]
  encoder->hspi = hspi;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	601a      	str	r2, [r3, #0]
  encoder->htim = htim;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	605a      	str	r2, [r3, #4]

  encoder->cpr = -16384;  // 14 bit precision
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <Encoder_init+0x40>)
 800182c:	60da      	str	r2, [r3, #12]

  encoder->velocity_filter_alpha = 0.02;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	4a08      	ldr	r2, [pc, #32]	; (8001854 <Encoder_init+0x44>)
 8001832:	615a      	str	r2, [r3, #20]
  encoder->position_offset = 0;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	611a      	str	r2, [r3, #16]

  encoder->n_rotations = 0;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
}
 8001842:	bf00      	nop
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	ffffc000 	.word	0xffffc000
 8001854:	3ca3d70a 	.word	0x3ca3d70a

08001858 <Encoder_triggerUpdate>:

void Encoder_setOffset(Encoder *encoder, float offset) {
  encoder->position_offset = offset;
}

void Encoder_triggerUpdate(Encoder *encoder) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  __HAL_TIM_SET_COUNTER(encoder->htim, 0);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24

  encoder->spi_tx_buffer = 0x3FFF;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001870:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= 1 << 14;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	891b      	ldrh	r3, [r3, #8]
 8001876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187a:	b29a      	uxth	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	811a      	strh	r2, [r3, #8]
  encoder->spi_tx_buffer |= getParity(encoder->spi_tx_buffer) << 15;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	891b      	ldrh	r3, [r3, #8]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff9b 	bl	80017c0 <getParity>
 800188a:	4603      	mov	r3, r0
 800188c:	03d9      	lsls	r1, r3, #15
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	891b      	ldrh	r3, [r3, #8]
 8001892:	b21a      	sxth	r2, r3
 8001894:	b20b      	sxth	r3, r1
 8001896:	4313      	orrs	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	b29a      	uxth	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	811a      	strh	r2, [r3, #8]

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018aa:	f006 fb39 	bl	8007f20 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive_IT(encoder->hspi, (uint8_t *)&encoder->spi_tx_buffer, (uint8_t *)&encoder->spi_rx_buffer, 1);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6818      	ldr	r0, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0108 	add.w	r1, r3, #8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f103 020a 	add.w	r2, r3, #10
 80018be:	2301      	movs	r3, #1
 80018c0:	f007 fcbc 	bl	800923c <HAL_SPI_TransmitReceive_IT>
}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	0000      	movs	r0, r0
	...

080018d0 <Encoder_update>:

void Encoder_update(Encoder *encoder) {
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  float dt = (float)__HAL_TIM_GET_COUNTER(encoder->htim) / 100000.;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e0:	ee07 3a90 	vmov	s15, r3
 80018e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018e8:	ee17 0a90 	vmov	r0, s15
 80018ec:	f7fe fe54 	bl	8000598 <__aeabi_f2d>
 80018f0:	a361      	add	r3, pc, #388	; (adr r3, 8001a78 <Encoder_update+0x1a8>)
 80018f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f6:	f7fe ffd1 	bl	800089c <__aeabi_ddiv>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4610      	mov	r0, r2
 8001900:	4619      	mov	r1, r3
 8001902:	f7ff f979 	bl	8000bf8 <__aeabi_d2f>
 8001906:	4603      	mov	r3, r0
 8001908:	613b      	str	r3, [r7, #16]
//
//  float dt = 1/4000.;

  uint16_t reading = READ_BITS(encoder->spi_rx_buffer, 0x3FFF);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	895b      	ldrh	r3, [r3, #10]
 800190e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001912:	81fb      	strh	r3, [r7, #14]
//  uint16_t error = READ_BITS(encoder->spi_rx_buffer, 0x4000);

  float position_relative = ((float)reading / (float)encoder->cpr) * (2*M_PI);
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800192e:	ee16 0a90 	vmov	r0, s13
 8001932:	f7fe fe31 	bl	8000598 <__aeabi_f2d>
 8001936:	a352      	add	r3, pc, #328	; (adr r3, 8001a80 <Encoder_update+0x1b0>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe fe84 	bl	8000648 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	f7ff f956 	bl	8000bf8 <__aeabi_d2f>
 800194c:	4603      	mov	r3, r0
 800194e:	60bb      	str	r3, [r7, #8]

  float delta_position = position_relative - encoder->position_relative;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	edd3 7a07 	vldr	s15, [r3, #28]
 8001956:	ed97 7a02 	vldr	s14, [r7, #8]
 800195a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800195e:	edc7 7a05 	vstr	s15, [r7, #20]

  if (fabsf(delta_position) > 0.75 * (2*M_PI)) {
 8001962:	edd7 7a05 	vldr	s15, [r7, #20]
 8001966:	eef0 7ae7 	vabs.f32	s15, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a345      	add	r3, pc, #276	; (adr r3, 8001a88 <Encoder_update+0x1b8>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7ff f8f6 	bl	8000b68 <__aeabi_dcmpgt>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02c      	beq.n	80019dc <Encoder_update+0x10c>
    encoder->n_rotations += (delta_position > 0) ? -1 : 1;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	edd7 7a05 	vldr	s15, [r7, #20]
 800198a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800198e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001992:	dd02      	ble.n	800199a <Encoder_update+0xca>
 8001994:	f04f 32ff 	mov.w	r2, #4294967295
 8001998:	e000      	b.n	800199c <Encoder_update+0xcc>
 800199a:	2201      	movs	r2, #1
 800199c:	441a      	add	r2, r3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]

    // unwrap delta pos to correct value for velocity calculation
    delta_position += (delta_position > 0) ? -2*M_PI : 2*M_PI;
 80019a2:	6978      	ldr	r0, [r7, #20]
 80019a4:	f7fe fdf8 	bl	8000598 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80019b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019b8:	dd03      	ble.n	80019c2 <Encoder_update+0xf2>
 80019ba:	a135      	add	r1, pc, #212	; (adr r1, 8001a90 <Encoder_update+0x1c0>)
 80019bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c0:	e002      	b.n	80019c8 <Encoder_update+0xf8>
 80019c2:	a12f      	add	r1, pc, #188	; (adr r1, 8001a80 <Encoder_update+0x1b0>)
 80019c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c8:	f7fe fc88 	bl	80002dc <__adddf3>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4610      	mov	r0, r2
 80019d2:	4619      	mov	r1, r3
 80019d4:	f7ff f910 	bl	8000bf8 <__aeabi_d2f>
 80019d8:	4603      	mov	r3, r0
 80019da:	617b      	str	r3, [r7, #20]
  }

  encoder->position_relative = position_relative;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	61da      	str	r2, [r3, #28]
  encoder->position_raw = encoder->position_relative + (encoder->n_rotations * (2*M_PI));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	69db      	ldr	r3, [r3, #28]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fdd6 	bl	8000598 <__aeabi_f2d>
 80019ec:	4604      	mov	r4, r0
 80019ee:	460d      	mov	r5, r1
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7fe fdbd 	bl	8000574 <__aeabi_i2d>
 80019fa:	a321      	add	r3, pc, #132	; (adr r3, 8001a80 <Encoder_update+0x1b0>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fe22 	bl	8000648 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fc66 	bl	80002dc <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7ff f8ee 	bl	8000bf8 <__aeabi_d2f>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	621a      	str	r2, [r3, #32]
  encoder->position = encoder->position_raw + encoder->position_offset;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	ed93 7a08 	vldr	s14, [r3, #32]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
  encoder->velocity = (encoder->velocity_filter_alpha * delta_position / dt) + ((1 - encoder->velocity_filter_alpha) * encoder->velocity);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	ed93 7a05 	vldr	s14, [r3, #20]
 8001a3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a42:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001a46:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a58:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8001a70:	bf00      	nop
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bdb0      	pop	{r4, r5, r7, pc}
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40f86a00 	.word	0x40f86a00
 8001a80:	54442d18 	.word	0x54442d18
 8001a84:	401921fb 	.word	0x401921fb
 8001a88:	7f3321d2 	.word	0x7f3321d2
 8001a8c:	4012d97c 	.word	0x4012d97c
 8001a90:	54442d18 	.word	0x54442d18
 8001a94:	c01921fb 	.word	0xc01921fb

08001a98 <Encoder_getRelativePosition>:

float Encoder_getRelativePosition(Encoder *encoder) {
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return encoder->position_relative;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	ee07 3a90 	vmov	s15, r3
}
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <Encoder_getPosition>:

float Encoder_getRawPosition(Encoder *encoder) {
  return encoder->position_raw;
}

float Encoder_getPosition(Encoder *encoder) {
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  return encoder->position;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	ee07 3a90 	vmov	s15, r3
}
 8001ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <Encoder_getVelocity>:

float Encoder_getVelocity(Encoder *encoder) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  return encoder->velocity;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae0:	ee07 3a90 	vmov	s15, r3
}
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	0000      	movs	r0, r0
 8001af4:	0000      	movs	r0, r0
	...

08001af8 <FOC_clarkTransform>:
 *      Author: TK
 */

#include "foc_math.h"

void FOC_clarkTransform(float *i_alpha, float *i_beta, float i_a, float i_b, float i_c) {
 8001af8:	b5b0      	push	{r4, r5, r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6178      	str	r0, [r7, #20]
 8001b00:	6139      	str	r1, [r7, #16]
 8001b02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b0a:	ed87 1a01 	vstr	s2, [r7, #4]
//  float i_beta_raw  = sinf((2./3.) * M_PI) * i_b + sinf((4./3.) * M_PI) * i_c;
//
//  *i_alpha = i_alpha_raw * (2.f/3.f);
//  *i_beta  = i_beta_raw * (2.f/3.f);

  *i_alpha = (1. / 3.) * (2. * i_a - i_b - i_c);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f7fe fd42 	bl	8000598 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	f7fe fbe0 	bl	80002dc <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4614      	mov	r4, r2
 8001b22:	461d      	mov	r5, r3
 8001b24:	68b8      	ldr	r0, [r7, #8]
 8001b26:	f7fe fd37 	bl	8000598 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4620      	mov	r0, r4
 8001b30:	4629      	mov	r1, r5
 8001b32:	f7fe fbd1 	bl	80002d8 <__aeabi_dsub>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4614      	mov	r4, r2
 8001b3c:	461d      	mov	r5, r3
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7fe fd2a 	bl	8000598 <__aeabi_f2d>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4620      	mov	r0, r4
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	f7fe fbc4 	bl	80002d8 <__aeabi_dsub>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	a315      	add	r3, pc, #84	; (adr r3, 8001bb0 <FOC_clarkTransform+0xb8>)
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	f7fe fd73 	bl	8000648 <__aeabi_dmul>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f845 	bl	8000bf8 <__aeabi_d2f>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	601a      	str	r2, [r3, #0]
  *i_beta = (1. / sqrtf(3.)) * (i_b - i_c);
 8001b74:	ed97 7a02 	vldr	s14, [r7, #8]
 8001b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b80:	ee17 0a90 	vmov	r0, s15
 8001b84:	f7fe fd08 	bl	8000598 <__aeabi_f2d>
 8001b88:	a30b      	add	r3, pc, #44	; (adr r3, 8001bb8 <FOC_clarkTransform+0xc0>)
 8001b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8e:	f7fe fd5b 	bl	8000648 <__aeabi_dmul>
 8001b92:	4602      	mov	r2, r0
 8001b94:	460b      	mov	r3, r1
 8001b96:	4610      	mov	r0, r2
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f82d 	bl	8000bf8 <__aeabi_d2f>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	601a      	str	r2, [r3, #0]
}
 8001ba4:	bf00      	nop
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bdb0      	pop	{r4, r5, r7, pc}
 8001bac:	f3af 8000 	nop.w
 8001bb0:	55555555 	.word	0x55555555
 8001bb4:	3fd55555 	.word	0x3fd55555
 8001bb8:	4b20663a 	.word	0x4b20663a
 8001bbc:	3fe279a7 	.word	0x3fe279a7

08001bc0 <FOC_parkTransform>:


void FOC_parkTransform(float *i_q, float *i_d, float i_alpha, float i_beta, float sin_theta, float cos_theta) {
 8001bc0:	b480      	push	{r7}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6178      	str	r0, [r7, #20]
 8001bc8:	6139      	str	r1, [r7, #16]
 8001bca:	ed87 0a03 	vstr	s0, [r7, #12]
 8001bce:	edc7 0a02 	vstr	s1, [r7, #8]
 8001bd2:	ed87 1a01 	vstr	s2, [r7, #4]
 8001bd6:	edc7 1a00 	vstr	s3, [r7]
  *i_q  = -(sin_theta * i_alpha) + (cos_theta * i_beta);
 8001bda:	ed97 7a00 	vldr	s14, [r7]
 8001bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8001be2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001be6:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bea:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
  *i_d  =  (cos_theta * i_alpha) + (sin_theta * i_beta);
 8001bfc:	ed97 7a00 	vldr	s14, [r7]
 8001c00:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c08:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	edc3 7a00 	vstr	s15, [r3]

}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <FOC_invParkTransform>:

void FOC_invParkTransform(float *v_alpha, float *v_beta, float v_q, float v_d, float sin_theta, float cos_theta) {
 8001c2a:	b480      	push	{r7}
 8001c2c:	b087      	sub	sp, #28
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6178      	str	r0, [r7, #20]
 8001c32:	6139      	str	r1, [r7, #16]
 8001c34:	ed87 0a03 	vstr	s0, [r7, #12]
 8001c38:	edc7 0a02 	vstr	s1, [r7, #8]
 8001c3c:	ed87 1a01 	vstr	s2, [r7, #4]
 8001c40:	edc7 1a00 	vstr	s3, [r7]
  *v_alpha  = -sin_theta * v_q + cos_theta * v_d;
 8001c44:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c48:	eeb1 7a67 	vneg.f32	s14, s15
 8001c4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c54:	edd7 6a00 	vldr	s13, [r7]
 8001c58:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c5c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	edc3 7a00 	vstr	s15, [r3]
  *v_beta   =  cos_theta * v_q + sin_theta * v_d;
 8001c6a:	ed97 7a00 	vldr	s14, [r7]
 8001c6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c76:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c7a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	edc3 7a00 	vstr	s15, [r3]
}
 8001c8c:	bf00      	nop
 8001c8e:	371c      	adds	r7, #28
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <FOC_invClarkSVPWM>:


void FOC_invClarkSVPWM(float *v_a, float *v_b, float *v_c, float v_alpha, float v_beta) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	ed2d 8b02 	vpush	{d8}
 8001c9e:	b08a      	sub	sp, #40	; 0x28
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6178      	str	r0, [r7, #20]
 8001ca4:	6139      	str	r1, [r7, #16]
 8001ca6:	60fa      	str	r2, [r7, #12]
 8001ca8:	ed87 0a02 	vstr	s0, [r7, #8]
 8001cac:	edc7 0a01 	vstr	s1, [r7, #4]
  float v_a_phase = v_alpha;
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  float v_b_phase = (-.5f * v_alpha) + ((sqrtf(3.f)/2.f) * v_beta);
 8001cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cb8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001cc4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8001d88 <FOC_invClarkSVPWM+0xf0>
 8001cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ccc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cd0:	edc7 7a08 	vstr	s15, [r7, #32]
  float v_c_phase = (-.5f * v_alpha) - ((sqrtf(3.f)/2.f) * v_beta);
 8001cd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cd8:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 8001cdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ce0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ce4:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001d88 <FOC_invClarkSVPWM+0xf0>
 8001ce8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf0:	edc7 7a07 	vstr	s15, [r7, #28]

  float v_neutral = .5f * (fmaxf(fmaxf(v_a_phase, v_b_phase), v_c_phase) + fminf(fminf(v_a_phase, v_b_phase), v_c_phase));
 8001cf4:	edd7 0a08 	vldr	s1, [r7, #32]
 8001cf8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001cfc:	f00d f9b0 	bl	800f060 <fmaxf>
 8001d00:	eef0 7a40 	vmov.f32	s15, s0
 8001d04:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	f00d f9a8 	bl	800f060 <fmaxf>
 8001d10:	eeb0 8a40 	vmov.f32	s16, s0
 8001d14:	edd7 0a08 	vldr	s1, [r7, #32]
 8001d18:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001d1c:	f00d f9bb 	bl	800f096 <fminf>
 8001d20:	eef0 7a40 	vmov.f32	s15, s0
 8001d24:	edd7 0a07 	vldr	s1, [r7, #28]
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	f00d f9b3 	bl	800f096 <fminf>
 8001d30:	eef0 7a40 	vmov.f32	s15, s0
 8001d34:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d40:	edc7 7a06 	vstr	s15, [r7, #24]

  *v_a = v_a_phase - v_neutral;
 8001d44:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d48:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	edc3 7a00 	vstr	s15, [r3]
  *v_b = v_b_phase - v_neutral;
 8001d56:	ed97 7a08 	vldr	s14, [r7, #32]
 8001d5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	edc3 7a00 	vstr	s15, [r3]
  *v_c = v_c_phase - v_neutral;
 8001d68:	ed97 7a07 	vldr	s14, [r7, #28]
 8001d6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	edc3 7a00 	vstr	s15, [r3]
}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	ecbd 8b02 	vpop	{d8}
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	3f5db3d7 	.word	0x3f5db3d7

08001d8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d90:	f003 f9d9 	bl	8005146 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d94:	f000 f81f 	bl	8001dd6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d98:	f000 fc98 	bl	80026cc <MX_GPIO_Init>
  MX_ADC1_Init();
 8001d9c:	f000 f866 	bl	8001e6c <MX_ADC1_Init>
  MX_FDCAN1_Init();
 8001da0:	f000 f98e 	bl	80020c0 <MX_FDCAN1_Init>
  MX_OPAMP1_Init();
 8001da4:	f000 f9d2 	bl	800214c <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001da8:	f000 f9fe 	bl	80021a8 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8001dac:	f000 fa2a 	bl	8002204 <MX_OPAMP3_Init>
  MX_SPI1_Init();
 8001db0:	f000 fa56 	bl	8002260 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001db4:	f000 fa92 	bl	80022dc <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001db8:	f000 fc3c 	bl	8002634 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 8001dbc:	f000 f8fc 	bl	8001fb8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001dc0:	f000 fb64 	bl	800248c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001dc4:	f000 fbb0 	bl	8002528 <MX_TIM4_Init>
  MX_TIM6_Init();
 8001dc8:	f000 fbfc 	bl	80025c4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  APP_init();
 8001dcc:	f7ff f952 	bl	8001074 <APP_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    APP_main();
 8001dd0:	f7ff f980 	bl	80010d4 <APP_main>
  {
 8001dd4:	e7fc      	b.n	8001dd0 <main+0x44>

08001dd6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b094      	sub	sp, #80	; 0x50
 8001dda:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ddc:	f107 0318 	add.w	r3, r7, #24
 8001de0:	2238      	movs	r2, #56	; 0x38
 8001de2:	2100      	movs	r1, #0
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00a fa0d 	bl	800c204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f006 f9ab 	bl	8008154 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e08:	2340      	movs	r3, #64	; 0x40
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e10:	2302      	movs	r3, #2
 8001e12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001e14:	2301      	movs	r3, #1
 8001e16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001e18:	2314      	movs	r3, #20
 8001e1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e20:	2302      	movs	r3, #2
 8001e22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e24:	2302      	movs	r3, #2
 8001e26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e28:	f107 0318 	add.w	r3, r7, #24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f006 fa35 	bl	800829c <HAL_RCC_OscConfig>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e38:	f000 fcfa 	bl	8002830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e40:	2303      	movs	r3, #3
 8001e42:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e50:	1d3b      	adds	r3, r7, #4
 8001e52:	2104      	movs	r1, #4
 8001e54:	4618      	mov	r0, r3
 8001e56:	f006 fd39 	bl	80088cc <HAL_RCC_ClockConfig>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e60:	f000 fce6 	bl	8002830 <Error_Handler>
  }
}
 8001e64:	bf00      	nop
 8001e66:	3750      	adds	r7, #80	; 0x50
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b092      	sub	sp, #72	; 0x48
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e72:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001e7e:	463b      	mov	r3, r7
 8001e80:	223c      	movs	r2, #60	; 0x3c
 8001e82:	2100      	movs	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f00a f9bd 	bl	800c204 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001e8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e92:	4b45      	ldr	r3, [pc, #276]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001e94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e98:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e9a:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea0:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001ea6:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001eac:	4b3e      	ldr	r3, [pc, #248]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001eb4:	2208      	movs	r2, #8
 8001eb6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ebe:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001eca:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ed2:	4b35      	ldr	r3, [pc, #212]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001edc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ee2:	4b31      	ldr	r3, [pc, #196]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eea:	482f      	ldr	r0, [pc, #188]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001eec:	f003 fa6c 	bl	80053c8 <HAL_ADC_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ef6:	f000 fc9b 	bl	8002830 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001efa:	2300      	movs	r3, #0
 8001efc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f02:	4619      	mov	r1, r3
 8001f04:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001f06:	f004 fb91 	bl	800662c <HAL_ADCEx_MultiModeConfigChannel>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001f10:	f000 fc8e 	bl	8002830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP1;
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <MX_ADC1_Init+0x140>)
 8001f16:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001f18:	2309      	movs	r3, #9
 8001f1a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001f20:	237f      	movs	r3, #127	; 0x7f
 8001f22:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001f24:	2304      	movs	r3, #4
 8001f26:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f50:	463b      	mov	r3, r7
 8001f52:	4619      	mov	r1, r3
 8001f54:	4814      	ldr	r0, [pc, #80]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001f56:	f003 fe89 	bl	8005c6c <HAL_ADCEx_InjectedConfigChannel>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8001f60:	f000 fc66 	bl	8002830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <MX_ADC1_Init+0x144>)
 8001f66:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001f68:	f240 130f 	movw	r3, #271	; 0x10f
 8001f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f6e:	463b      	mov	r3, r7
 8001f70:	4619      	mov	r1, r3
 8001f72:	480d      	ldr	r0, [pc, #52]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001f74:	f003 fe7a 	bl	8005c6c <HAL_ADCEx_InjectedConfigChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001f7e:	f000 fc57 	bl	8002830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001f82:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <MX_ADC1_Init+0x148>)
 8001f84:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001f86:	f240 2315 	movw	r3, #533	; 0x215
 8001f8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <MX_ADC1_Init+0x13c>)
 8001f92:	f003 fe6b 	bl	8005c6c <HAL_ADCEx_InjectedConfigChannel>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8001f9c:	f000 fc48 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	3748      	adds	r7, #72	; 0x48
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000348 	.word	0x20000348
 8001fac:	b6902000 	.word	0xb6902000
 8001fb0:	04300002 	.word	0x04300002
 8001fb4:	2e300800 	.word	0x2e300800

08001fb8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b090      	sub	sp, #64	; 0x40
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001fbe:	1d3b      	adds	r3, r7, #4
 8001fc0:	223c      	movs	r2, #60	; 0x3c
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f00a f91d 	bl	800c204 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001fca:	4b39      	ldr	r3, [pc, #228]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001fcc:	4a39      	ldr	r2, [pc, #228]	; (80020b4 <MX_ADC2_Init+0xfc>)
 8001fce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001fd2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001fd6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001fe4:	4b32      	ldr	r3, [pc, #200]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fea:	4b31      	ldr	r3, [pc, #196]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001fec:	2201      	movs	r2, #1
 8001fee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001ff0:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ff6:	4b2e      	ldr	r3, [pc, #184]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001ffc:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002002:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8002004:	2201      	movs	r2, #1
 8002006:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002008:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <MX_ADC2_Init+0xf8>)
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8002012:	2200      	movs	r2, #0
 8002014:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002018:	4b25      	ldr	r3, [pc, #148]	; (80020b0 <MX_ADC2_Init+0xf8>)
 800201a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800201e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002020:	4b23      	ldr	r3, [pc, #140]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002028:	4821      	ldr	r0, [pc, #132]	; (80020b0 <MX_ADC2_Init+0xf8>)
 800202a:	f003 f9cd 	bl	80053c8 <HAL_ADC_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8002034:	f000 fbfc 	bl	8002830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP2;
 8002038:	4b1f      	ldr	r3, [pc, #124]	; (80020b8 <MX_ADC2_Init+0x100>)
 800203a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800203c:	2309      	movs	r3, #9
 800203e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002044:	237f      	movs	r3, #127	; 0x7f
 8002046:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002048:	2304      	movs	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002050:	2302      	movs	r3, #2
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002060:	2300      	movs	r3, #0
 8002062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800206a:	2380      	movs	r3, #128	; 0x80
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800206e:	2300      	movs	r3, #0
 8002070:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	4619      	mov	r1, r3
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <MX_ADC2_Init+0xf8>)
 800207a:	f003 fdf7 	bl	8005c6c <HAL_ADCEx_InjectedConfigChannel>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8002084:	f000 fbd4 	bl	8002830 <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <MX_ADC2_Init+0x104>)
 800208a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800208c:	f240 130f 	movw	r3, #271	; 0x10f
 8002090:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_ADC2_Init+0xf8>)
 8002098:	f003 fde8 	bl	8005c6c <HAL_ADCEx_InjectedConfigChannel>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 80020a2:	f000 fbc5 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	3740      	adds	r7, #64	; 0x40
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200003b4 	.word	0x200003b4
 80020b4:	50000100 	.word	0x50000100
 80020b8:	c3290000 	.word	0xc3290000
 80020bc:	cb8c0000 	.word	0xcb8c0000

080020c0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80020c4:	4b1f      	ldr	r3, [pc, #124]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020c6:	4a20      	ldr	r2, [pc, #128]	; (8002148 <MX_FDCAN1_Init+0x88>)
 80020c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80020d0:	4b1c      	ldr	r3, [pc, #112]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80020d6:	4b1b      	ldr	r3, [pc, #108]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020d8:	2200      	movs	r2, #0
 80020da:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020de:	2200      	movs	r2, #0
 80020e0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80020e2:	4b18      	ldr	r3, [pc, #96]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80020e8:	4b16      	ldr	r3, [pc, #88]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020ea:	2200      	movs	r2, #0
 80020ec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020f0:	2210      	movs	r2, #16
 80020f2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80020f4:	4b13      	ldr	r3, [pc, #76]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020f6:	2201      	movs	r2, #1
 80020f8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 7;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <MX_FDCAN1_Init+0x84>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002100:	4b10      	ldr	r3, [pc, #64]	; (8002144 <MX_FDCAN1_Init+0x84>)
 8002102:	2202      	movs	r2, #2
 8002104:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <MX_FDCAN1_Init+0x84>)
 8002108:	2201      	movs	r2, #1
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800210c:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <MX_FDCAN1_Init+0x84>)
 800210e:	2201      	movs	r2, #1
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002112:	4b0c      	ldr	r3, [pc, #48]	; (8002144 <MX_FDCAN1_Init+0x84>)
 8002114:	2201      	movs	r2, #1
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8002118:	4b0a      	ldr	r3, [pc, #40]	; (8002144 <MX_FDCAN1_Init+0x84>)
 800211a:	2201      	movs	r2, #1
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <MX_FDCAN1_Init+0x84>)
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <MX_FDCAN1_Init+0x84>)
 8002126:	2200      	movs	r2, #0
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <MX_FDCAN1_Init+0x84>)
 800212c:	2200      	movs	r2, #0
 800212e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	; (8002144 <MX_FDCAN1_Init+0x84>)
 8002132:	f004 fc95 	bl	8006a60 <HAL_FDCAN_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800213c:	f000 fb78 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000420 	.word	0x20000420
 8002148:	40006400 	.word	0x40006400

0800214c <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8002150:	4b13      	ldr	r3, [pc, #76]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 8002152:	4a14      	ldr	r2, [pc, #80]	; (80021a4 <MX_OPAMP1_Init+0x58>)
 8002154:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 8002158:	2200      	movs	r2, #0
 800215a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 800215e:	2240      	movs	r2, #64	; 0x40
 8002160:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 8002164:	2200      	movs	r2, #0
 8002166:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 800216a:	2201      	movs	r2, #1
 800216c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 8002170:	2200      	movs	r2, #0
 8002172:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 8002176:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800217c:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 800217e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8002182:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 8002186:	2200      	movs	r2, #0
 8002188:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800218a:	4805      	ldr	r0, [pc, #20]	; (80021a0 <MX_OPAMP1_Init+0x54>)
 800218c:	f005 fee0 	bl	8007f50 <HAL_OPAMP_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8002196:	f000 fb4b 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000484 	.word	0x20000484
 80021a4:	40010300 	.word	0x40010300

080021a8 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 80021ac:	4b13      	ldr	r3, [pc, #76]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <MX_OPAMP2_Init+0x58>)
 80021b0:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80021b2:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 80021b8:	4b10      	ldr	r3, [pc, #64]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021c6:	2201      	movs	r2, #1
 80021c8:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80021ca:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80021d8:	4b08      	ldr	r3, [pc, #32]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021da:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80021de:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80021e0:	4b06      	ldr	r3, [pc, #24]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 80021e6:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_OPAMP2_Init+0x54>)
 80021e8:	f005 feb2 	bl	8007f50 <HAL_OPAMP_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80021f2:	f000 fb1d 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200004c0 	.word	0x200004c0
 8002200:	40010304 	.word	0x40010304

08002204 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8002208:	4b13      	ldr	r3, [pc, #76]	; (8002258 <MX_OPAMP3_Init+0x54>)
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <MX_OPAMP3_Init+0x58>)
 800220c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800220e:	4b12      	ldr	r3, [pc, #72]	; (8002258 <MX_OPAMP3_Init+0x54>)
 8002210:	2200      	movs	r2, #0
 8002212:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002214:	4b10      	ldr	r3, [pc, #64]	; (8002258 <MX_OPAMP3_Init+0x54>)
 8002216:	2240      	movs	r2, #64	; 0x40
 8002218:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800221a:	4b0f      	ldr	r3, [pc, #60]	; (8002258 <MX_OPAMP3_Init+0x54>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8002220:	4b0d      	ldr	r3, [pc, #52]	; (8002258 <MX_OPAMP3_Init+0x54>)
 8002222:	2201      	movs	r2, #1
 8002224:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002226:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <MX_OPAMP3_Init+0x54>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 800222c:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <MX_OPAMP3_Init+0x54>)
 800222e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002232:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <MX_OPAMP3_Init+0x54>)
 8002236:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800223a:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800223c:	4b06      	ldr	r3, [pc, #24]	; (8002258 <MX_OPAMP3_Init+0x54>)
 800223e:	2200      	movs	r2, #0
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <MX_OPAMP3_Init+0x54>)
 8002244:	f005 fe84 	bl	8007f50 <HAL_OPAMP_Init>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 800224e:	f000 faef 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200004fc 	.word	0x200004fc
 800225c:	40010308 	.word	0x40010308

08002260 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002266:	4a1c      	ldr	r2, [pc, #112]	; (80022d8 <MX_SPI1_Init+0x78>)
 8002268:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800226a:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <MX_SPI1_Init+0x74>)
 800226c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002270:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <MX_SPI1_Init+0x74>)
 800227a:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800227e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002288:	2201      	movs	r2, #1
 800228a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_SPI1_Init+0x74>)
 800228e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002292:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_SPI1_Init+0x74>)
 8002296:	2218      	movs	r2, #24
 8002298:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_SPI1_Init+0x74>)
 800229c:	2200      	movs	r2, #0
 800229e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022ae:	2207      	movs	r2, #7
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_SPI1_Init+0x74>)
 80022c0:	f006 ff10 	bl	80090e4 <HAL_SPI_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022ca:	f000 fab1 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	20000538 	.word	0x20000538
 80022d8:	40013000 	.word	0x40013000

080022dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b09c      	sub	sp, #112	; 0x70
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022e2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2234      	movs	r2, #52	; 0x34
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f009 ff74 	bl	800c204 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800231c:	4b59      	ldr	r3, [pc, #356]	; (8002484 <MX_TIM1_Init+0x1a8>)
 800231e:	4a5a      	ldr	r2, [pc, #360]	; (8002488 <MX_TIM1_Init+0x1ac>)
 8002320:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002322:	4b58      	ldr	r3, [pc, #352]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002324:	2200      	movs	r2, #0
 8002326:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002328:	4b56      	ldr	r3, [pc, #344]	; (8002484 <MX_TIM1_Init+0x1a8>)
 800232a:	2220      	movs	r2, #32
 800232c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 800232e:	4b55      	ldr	r3, [pc, #340]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002330:	f640 729f 	movw	r2, #3999	; 0xf9f
 8002334:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002336:	4b53      	ldr	r3, [pc, #332]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002338:	2200      	movs	r2, #0
 800233a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800233c:	4b51      	ldr	r3, [pc, #324]	; (8002484 <MX_TIM1_Init+0x1a8>)
 800233e:	2201      	movs	r2, #1
 8002340:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002342:	4b50      	ldr	r3, [pc, #320]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002344:	2200      	movs	r2, #0
 8002346:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002348:	484e      	ldr	r0, [pc, #312]	; (8002484 <MX_TIM1_Init+0x1a8>)
 800234a:	f007 fc01 	bl	8009b50 <HAL_TIM_Base_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002354:	f000 fa6c 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002358:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800235c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800235e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002362:	4619      	mov	r1, r3
 8002364:	4847      	ldr	r0, [pc, #284]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002366:	f008 f90d 	bl	800a584 <HAL_TIM_ConfigClockSource>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002370:	f000 fa5e 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002374:	4843      	ldr	r0, [pc, #268]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002376:	f007 fd0f 	bl	8009d98 <HAL_TIM_PWM_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8002380:	f000 fa56 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002384:	2370      	movs	r3, #112	; 0x70
 8002386:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002388:	2300      	movs	r3, #0
 800238a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800238c:	2300      	movs	r3, #0
 800238e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002390:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002394:	4619      	mov	r1, r3
 8002396:	483b      	ldr	r0, [pc, #236]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002398:	f008 ff12 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80023a2:	f000 fa45 	bl	8002830 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023a6:	2360      	movs	r3, #96	; 0x60
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80023aa:	2300      	movs	r3, #0
 80023ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ae:	2300      	movs	r3, #0
 80023b0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023b2:	2300      	movs	r3, #0
 80023b4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023ba:	2300      	movs	r3, #0
 80023bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023c6:	2200      	movs	r2, #0
 80023c8:	4619      	mov	r1, r3
 80023ca:	482e      	ldr	r0, [pc, #184]	; (8002484 <MX_TIM1_Init+0x1a8>)
 80023cc:	f007 ffc6 	bl	800a35c <HAL_TIM_PWM_ConfigChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80023d6:	f000 fa2b 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023de:	2204      	movs	r2, #4
 80023e0:	4619      	mov	r1, r3
 80023e2:	4828      	ldr	r0, [pc, #160]	; (8002484 <MX_TIM1_Init+0x1a8>)
 80023e4:	f007 ffba 	bl	800a35c <HAL_TIM_PWM_ConfigChannel>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80023ee:	f000 fa1f 	bl	8002830 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80023f6:	2208      	movs	r2, #8
 80023f8:	4619      	mov	r1, r3
 80023fa:	4822      	ldr	r0, [pc, #136]	; (8002484 <MX_TIM1_Init+0x1a8>)
 80023fc:	f007 ffae 	bl	800a35c <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8002406:	f000 fa13 	bl	8002830 <Error_Handler>
  }
  sConfigOC.Pulse = 3998;
 800240a:	f640 739e 	movw	r3, #3998	; 0xf9e
 800240e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002410:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002414:	220c      	movs	r2, #12
 8002416:	4619      	mov	r1, r3
 8002418:	481a      	ldr	r0, [pc, #104]	; (8002484 <MX_TIM1_Init+0x1a8>)
 800241a:	f007 ff9f 	bl	800a35c <HAL_TIM_PWM_ConfigChannel>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d001      	beq.n	8002428 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 8002424:	f000 fa04 	bl	8002830 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800242c:	2300      	movs	r3, #0
 800242e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 128;
 8002434:	2380      	movs	r3, #128	; 0x80
 8002436:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800243c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002440:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800244a:	2300      	movs	r3, #0
 800244c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800244e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002460:	1d3b      	adds	r3, r7, #4
 8002462:	4619      	mov	r1, r3
 8002464:	4807      	ldr	r0, [pc, #28]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002466:	f008 ff2d 	bl	800b2c4 <HAL_TIMEx_ConfigBreakDeadTime>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM1_Init+0x198>
  {
    Error_Handler();
 8002470:	f000 f9de 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002474:	4803      	ldr	r0, [pc, #12]	; (8002484 <MX_TIM1_Init+0x1a8>)
 8002476:	f002 fc3d 	bl	8004cf4 <HAL_TIM_MspPostInit>

}
 800247a:	bf00      	nop
 800247c:	3770      	adds	r7, #112	; 0x70
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	2000059c 	.word	0x2000059c
 8002488:	40012c00 	.word	0x40012c00

0800248c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002492:	f107 0310 	add.w	r3, r7, #16
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]
 800249e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
 80024a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024aa:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <MX_TIM2_Init+0x98>)
 80024ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15999;
 80024b2:	4b1c      	ldr	r3, [pc, #112]	; (8002524 <MX_TIM2_Init+0x98>)
 80024b4:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80024b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ba:	4b1a      	ldr	r3, [pc, #104]	; (8002524 <MX_TIM2_Init+0x98>)
 80024bc:	2200      	movs	r2, #0
 80024be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80024c0:	4b18      	ldr	r3, [pc, #96]	; (8002524 <MX_TIM2_Init+0x98>)
 80024c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80024c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <MX_TIM2_Init+0x98>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <MX_TIM2_Init+0x98>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024d4:	4813      	ldr	r0, [pc, #76]	; (8002524 <MX_TIM2_Init+0x98>)
 80024d6:	f007 fb3b 	bl	8009b50 <HAL_TIM_Base_Init>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d001      	beq.n	80024e4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80024e0:	f000 f9a6 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024ea:	f107 0310 	add.w	r3, r7, #16
 80024ee:	4619      	mov	r1, r3
 80024f0:	480c      	ldr	r0, [pc, #48]	; (8002524 <MX_TIM2_Init+0x98>)
 80024f2:	f008 f847 	bl	800a584 <HAL_TIM_ConfigClockSource>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80024fc:	f000 f998 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002500:	2320      	movs	r3, #32
 8002502:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	4619      	mov	r1, r3
 800250c:	4805      	ldr	r0, [pc, #20]	; (8002524 <MX_TIM2_Init+0x98>)
 800250e:	f008 fe57 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8002518:	f000 f98a 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800251c:	bf00      	nop
 800251e:	3720      	adds	r7, #32
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	200005e8 	.word	0x200005e8

08002528 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b088      	sub	sp, #32
 800252c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]
 8002538:	609a      	str	r2, [r3, #8]
 800253a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2200      	movs	r2, #0
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002546:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <MX_TIM4_Init+0x94>)
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <MX_TIM4_Init+0x98>)
 800254a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 39;
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <MX_TIM4_Init+0x94>)
 800254e:	2227      	movs	r2, #39	; 0x27
 8002550:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <MX_TIM4_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002558:	4b18      	ldr	r3, [pc, #96]	; (80025bc <MX_TIM4_Init+0x94>)
 800255a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800255e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <MX_TIM4_Init+0x94>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <MX_TIM4_Init+0x94>)
 8002568:	2200      	movs	r2, #0
 800256a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800256c:	4813      	ldr	r0, [pc, #76]	; (80025bc <MX_TIM4_Init+0x94>)
 800256e:	f007 faef 	bl	8009b50 <HAL_TIM_Base_Init>
 8002572:	4603      	mov	r3, r0
 8002574:	2b00      	cmp	r3, #0
 8002576:	d001      	beq.n	800257c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002578:	f000 f95a 	bl	8002830 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4619      	mov	r1, r3
 8002588:	480c      	ldr	r0, [pc, #48]	; (80025bc <MX_TIM4_Init+0x94>)
 800258a:	f007 fffb 	bl	800a584 <HAL_TIM_ConfigClockSource>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d001      	beq.n	8002598 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002594:	f000 f94c 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002598:	2320      	movs	r3, #32
 800259a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025a0:	1d3b      	adds	r3, r7, #4
 80025a2:	4619      	mov	r1, r3
 80025a4:	4805      	ldr	r0, [pc, #20]	; (80025bc <MX_TIM4_Init+0x94>)
 80025a6:	f008 fe0b 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80025b0:	f000 f93e 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	20000634 	.word	0x20000634
 80025c0:	40000800 	.word	0x40000800

080025c4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ca:	1d3b      	adds	r3, r7, #4
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <MX_TIM6_Init+0x68>)
 80025d6:	4a16      	ldr	r2, [pc, #88]	; (8002630 <MX_TIM6_Init+0x6c>)
 80025d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 80025da:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_TIM6_Init+0x68>)
 80025dc:	f240 623f 	movw	r2, #1599	; 0x63f
 80025e0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <MX_TIM6_Init+0x68>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <MX_TIM6_Init+0x68>)
 80025ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025ee:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025f0:	4b0e      	ldr	r3, [pc, #56]	; (800262c <MX_TIM6_Init+0x68>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <MX_TIM6_Init+0x68>)
 80025f8:	f007 faaa 	bl	8009b50 <HAL_TIM_Base_Init>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002602:	f000 f915 	bl	8002830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	4619      	mov	r1, r3
 8002612:	4806      	ldr	r0, [pc, #24]	; (800262c <MX_TIM6_Init+0x68>)
 8002614:	f008 fdd4 	bl	800b1c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 800261e:	f000 f907 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20000680 	.word	0x20000680
 8002630:	40001000 	.word	0x40001000

08002634 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002638:	4b22      	ldr	r3, [pc, #136]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 800263a:	4a23      	ldr	r2, [pc, #140]	; (80026c8 <MX_USART3_UART_Init+0x94>)
 800263c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800263e:	4b21      	ldr	r3, [pc, #132]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002644:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002646:	4b1f      	ldr	r3, [pc, #124]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800264c:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002652:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002658:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 800265a:	220c      	movs	r2, #12
 800265c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265e:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002664:	4b17      	ldr	r3, [pc, #92]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002676:	4b13      	ldr	r3, [pc, #76]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800267c:	4811      	ldr	r0, [pc, #68]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 800267e:	f008 ff2c 	bl	800b4da <HAL_UART_Init>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002688:	f000 f8d2 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800268c:	2100      	movs	r1, #0
 800268e:	480d      	ldr	r0, [pc, #52]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 8002690:	f009 fcc4 	bl	800c01c <HAL_UARTEx_SetTxFifoThreshold>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800269a:	f000 f8c9 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800269e:	2100      	movs	r1, #0
 80026a0:	4808      	ldr	r0, [pc, #32]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 80026a2:	f009 fcf9 	bl	800c098 <HAL_UARTEx_SetRxFifoThreshold>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d001      	beq.n	80026b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026ac:	f000 f8c0 	bl	8002830 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026b0:	4804      	ldr	r0, [pc, #16]	; (80026c4 <MX_USART3_UART_Init+0x90>)
 80026b2:	f009 fc7a 	bl	800bfaa <HAL_UARTEx_DisableFifoMode>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026bc:	f000 f8b8 	bl	8002830 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	200006cc 	.word	0x200006cc
 80026c8:	40004800 	.word	0x40004800

080026cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08a      	sub	sp, #40	; 0x28
 80026d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d2:	f107 0314 	add.w	r3, r7, #20
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	605a      	str	r2, [r3, #4]
 80026dc:	609a      	str	r2, [r3, #8]
 80026de:	60da      	str	r2, [r3, #12]
 80026e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	4b50      	ldr	r3, [pc, #320]	; (8002824 <MX_GPIO_Init+0x158>)
 80026e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e6:	4a4f      	ldr	r2, [pc, #316]	; (8002824 <MX_GPIO_Init+0x158>)
 80026e8:	f043 0304 	orr.w	r3, r3, #4
 80026ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ee:	4b4d      	ldr	r3, [pc, #308]	; (8002824 <MX_GPIO_Init+0x158>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <MX_GPIO_Init+0x158>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	4a49      	ldr	r2, [pc, #292]	; (8002824 <MX_GPIO_Init+0x158>)
 8002700:	f043 0320 	orr.w	r3, r3, #32
 8002704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <MX_GPIO_Init+0x158>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	4b44      	ldr	r3, [pc, #272]	; (8002824 <MX_GPIO_Init+0x158>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	4a43      	ldr	r2, [pc, #268]	; (8002824 <MX_GPIO_Init+0x158>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <MX_GPIO_Init+0x158>)
 8002720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800272a:	4b3e      	ldr	r3, [pc, #248]	; (8002824 <MX_GPIO_Init+0x158>)
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	4a3d      	ldr	r2, [pc, #244]	; (8002824 <MX_GPIO_Init+0x158>)
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002736:	4b3b      	ldr	r3, [pc, #236]	; (8002824 <MX_GPIO_Init+0x158>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2154      	movs	r1, #84	; 0x54
 8002746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800274a:	f005 fbe9 	bl	8007f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 800274e:	2201      	movs	r2, #1
 8002750:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002758:	f005 fbe2 	bl	8007f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800275c:	2201      	movs	r2, #1
 800275e:	2140      	movs	r1, #64	; 0x40
 8002760:	4831      	ldr	r0, [pc, #196]	; (8002828 <MX_GPIO_Init+0x15c>)
 8002762:	f005 fbdd 	bl	8007f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8002766:	2200      	movs	r2, #0
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	482f      	ldr	r0, [pc, #188]	; (8002828 <MX_GPIO_Init+0x15c>)
 800276c:	f005 fbd8 	bl	8007f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002770:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800277e:	f107 0314 	add.w	r3, r7, #20
 8002782:	4619      	mov	r1, r3
 8002784:	4829      	ldr	r0, [pc, #164]	; (800282c <MX_GPIO_Init+0x160>)
 8002786:	f005 fa31 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6;
 800278a:	2354      	movs	r3, #84	; 0x54
 800278c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800278e:	2301      	movs	r3, #1
 8002790:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4619      	mov	r1, r3
 80027a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027a4:	f005 fa22 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80027a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027ae:	2301      	movs	r3, #1
 80027b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027b6:	2302      	movs	r3, #2
 80027b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	4619      	mov	r1, r3
 80027c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027c4:	f005 fa12 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c8:	2340      	movs	r3, #64	; 0x40
 80027ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d4:	2302      	movs	r3, #2
 80027d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	4619      	mov	r1, r3
 80027de:	4812      	ldr	r0, [pc, #72]	; (8002828 <MX_GPIO_Init+0x15c>)
 80027e0:	f005 fa04 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f0:	2300      	movs	r3, #0
 80027f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f4:	f107 0314 	add.w	r3, r7, #20
 80027f8:	4619      	mov	r1, r3
 80027fa:	480b      	ldr	r0, [pc, #44]	; (8002828 <MX_GPIO_Init+0x15c>)
 80027fc:	f005 f9f6 	bl	8007bec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002804:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800280a:	2301      	movs	r3, #1
 800280c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	4804      	ldr	r0, [pc, #16]	; (8002828 <MX_GPIO_Init+0x15c>)
 8002816:	f005 f9e9 	bl	8007bec <HAL_GPIO_Init>

}
 800281a:	bf00      	nop
 800281c:	3728      	adds	r7, #40	; 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	48000400 	.word	0x48000400
 800282c:	48000800 	.word	0x48000800

08002830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002838:	e7fe      	b.n	8002838 <Error_Handler+0x8>

0800283a <Motor_init>:


#include "motor.h"


void Motor_init(Motor *motor) {
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  motor->pole_pairs = 14;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	220e      	movs	r2, #14
 8002846:	601a      	str	r2, [r3, #0]
  motor->kv_rating = 150;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2296      	movs	r2, #150	; 0x96
 800284c:	605a      	str	r2, [r3, #4]

  motor->flux_angle_offset = 0.;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	609a      	str	r2, [r3, #8]
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	0000      	movs	r0, r0
 8002864:	0000      	movs	r0, r0
	...

08002868 <wrapTo2Pi>:

static inline float wrapTo2Pi(float value) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	ed87 0a01 	vstr	s0, [r7, #4]
  value = fmodf(value, 2*M_PI);
 8002872:	eddf 0a15 	vldr	s1, [pc, #84]	; 80028c8 <wrapTo2Pi+0x60>
 8002876:	ed97 0a01 	vldr	s0, [r7, #4]
 800287a:	f00c fc89 	bl	800f190 <fmodf>
 800287e:	ed87 0a01 	vstr	s0, [r7, #4]
  return value >= 0.0f ? value : (value + 2*M_PI);
 8002882:	edd7 7a01 	vldr	s15, [r7, #4]
 8002886:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800288e:	db01      	blt.n	8002894 <wrapTo2Pi+0x2c>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	e00e      	b.n	80028b2 <wrapTo2Pi+0x4a>
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fd fe7f 	bl	8000598 <__aeabi_f2d>
 800289a:	a309      	add	r3, pc, #36	; (adr r3, 80028c0 <wrapTo2Pi+0x58>)
 800289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a0:	f7fd fd1c 	bl	80002dc <__adddf3>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f9a4 	bl	8000bf8 <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	ee07 3a90 	vmov	s15, r3
}
 80028b6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	54442d18 	.word	0x54442d18
 80028c4:	401921fb 	.word	0x401921fb
 80028c8:	40c90fdb 	.word	0x40c90fdb

080028cc <MotorController_init>:
extern TIM_HandleTypeDef htim3;
extern TIM_HandleTypeDef htim4;
extern TIM_HandleTypeDef htim6;
extern UART_HandleTypeDef huart3;

void MotorController_init(MotorController *controller) {
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	; 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  controller->mode = MODE_DISABLED;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
  controller->device_id = DEVICE_CAN_ID;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
  controller->firmware_version = FIRMWARE_VERSION;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a67      	ldr	r2, [pc, #412]	; (8002a84 <MotorController_init+0x1b8>)
 80028e8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

  FDCAN_FilterTypeDef filter_config;
  filter_config.IdType = FDCAN_STANDARD_ID;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  filter_config.FilterIndex = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
  filter_config.FilterType = FDCAN_FILTER_MASK;
 80028f4:	2302      	movs	r3, #2
 80028f6:	617b      	str	r3, [r7, #20]
  filter_config.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80028f8:	2301      	movs	r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
  filter_config.FilterID1 = controller->device_id;    // filter
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8002902:	61fb      	str	r3, [r7, #28]
  filter_config.FilterID2 = 0;//0b1111;                   // mask
 8002904:	2300      	movs	r3, #0
 8002906:	623b      	str	r3, [r7, #32]

  HAL_StatusTypeDef status = HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_ConfigFilter(&hfdcan1, &filter_config);
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	4619      	mov	r1, r3
 8002914:	485c      	ldr	r0, [pc, #368]	; (8002a88 <MotorController_init+0x1bc>)
 8002916:	f004 f9fd 	bl	8006d14 <HAL_FDCAN_ConfigFilter>
 800291a:	4603      	mov	r3, r0
 800291c:	461a      	mov	r2, r3
 800291e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002922:	4313      	orrs	r3, r2
 8002924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_Start(&hfdcan1);
 8002928:	4857      	ldr	r0, [pc, #348]	; (8002a88 <MotorController_init+0x1bc>)
 800292a:	f004 fa4d 	bl	8006dc8 <HAL_FDCAN_Start>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002936:	4313      	orrs	r3, r2
 8002938:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2101      	movs	r1, #1
 8002940:	4851      	ldr	r0, [pc, #324]	; (8002a88 <MotorController_init+0x1bc>)
 8002942:	f004 fb87 	bl	8007054 <HAL_FDCAN_ActivateNotification>
 8002946:	4603      	mov	r3, r0
 8002948:	461a      	mov	r2, r3
 800294a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800294e:	4313      	orrs	r3, r2
 8002950:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  Encoder_init(&controller->encoder, &hspi1, &htim6);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a4d      	ldr	r2, [pc, #308]	; (8002a8c <MotorController_init+0x1c0>)
 8002958:	494d      	ldr	r1, [pc, #308]	; (8002a90 <MotorController_init+0x1c4>)
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe ff58 	bl	8001810 <Encoder_init>
  PowerStage_init(&controller->powerstage, &htim1, &hadc1, &hadc2);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8002966:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <MotorController_init+0x1c8>)
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <MotorController_init+0x1cc>)
 800296a:	494c      	ldr	r1, [pc, #304]	; (8002a9c <MotorController_init+0x1d0>)
 800296c:	f001 fd7a 	bl	8004464 <PowerStage_init>
  Motor_init(&controller->motor);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3350      	adds	r3, #80	; 0x50
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff60 	bl	800283a <Motor_init>

  CurrentController_init(&controller->current_controller);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	335c      	adds	r3, #92	; 0x5c
 800297e:	4618      	mov	r0, r3
 8002980:	f7fe fd17 	bl	80013b2 <CurrentController_init>
  PositionController_init(&controller->position_controller);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	33dc      	adds	r3, #220	; 0xdc
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fcb7 	bl	80042fc <PositionController_init>

#if OVERWRITE_CONFIG
  MotorController_storeConfig(controller);
#else
  MotorController_loadConfig(controller);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f98a 	bl	8002ca8 <MotorController_loadConfig>
#endif

  PowerStage_start(&controller->powerstage);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	332c      	adds	r3, #44	; 0x2c
 8002998:	4618      	mov	r0, r3
 800299a:	f001 fd7f 	bl	800449c <PowerStage_start>

  status |= HAL_OPAMP_Start(&hopamp1);
 800299e:	4840      	ldr	r0, [pc, #256]	; (8002aa0 <MotorController_init+0x1d4>)
 80029a0:	f005 fba6 	bl	80080f0 <HAL_OPAMP_Start>
 80029a4:	4603      	mov	r3, r0
 80029a6:	461a      	mov	r2, r3
 80029a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_OPAMP_Start(&hopamp2);
 80029b2:	483c      	ldr	r0, [pc, #240]	; (8002aa4 <MotorController_init+0x1d8>)
 80029b4:	f005 fb9c 	bl	80080f0 <HAL_OPAMP_Start>
 80029b8:	4603      	mov	r3, r0
 80029ba:	461a      	mov	r2, r3
 80029bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029c0:	4313      	orrs	r3, r2
 80029c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_OPAMP_Start(&hopamp3);
 80029c6:	4838      	ldr	r0, [pc, #224]	; (8002aa8 <MotorController_init+0x1dc>)
 80029c8:	f005 fb92 	bl	80080f0 <HAL_OPAMP_Start>
 80029cc:	4603      	mov	r3, r0
 80029ce:	461a      	mov	r2, r3
 80029d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_TIM_Base_Start_IT(&htim2);    // safety watchdog timer
 80029da:	4834      	ldr	r0, [pc, #208]	; (8002aac <MotorController_init+0x1e0>)
 80029dc:	f007 f972 	bl	8009cc4 <HAL_TIM_Base_Start_IT>
 80029e0:	4603      	mov	r3, r0
 80029e2:	461a      	mov	r2, r3
 80029e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_TIM_Base_Start_IT(&htim4);    // position update trigger timer
 80029ee:	4830      	ldr	r0, [pc, #192]	; (8002ab0 <MotorController_init+0x1e4>)
 80029f0:	f007 f968 	bl	8009cc4 <HAL_TIM_Base_Start_IT>
 80029f4:	4603      	mov	r3, r0
 80029f6:	461a      	mov	r2, r3
 80029f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_TIM_Base_Start(&htim6);       // time keeper timer
 8002a02:	4822      	ldr	r0, [pc, #136]	; (8002a8c <MotorController_init+0x1c0>)
 8002a04:	f007 f8fc 	bl	8009c00 <HAL_TIM_Base_Start>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  status |= HAL_ADCEx_InjectedStart(&hadc1);
 8002a16:	4820      	ldr	r0, [pc, #128]	; (8002a98 <MotorController_init+0x1cc>)
 8002a18:	f003 f840 	bl	8005a9c <HAL_ADCEx_InjectedStart>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  status |= HAL_ADCEx_InjectedStart(&hadc2);
 8002a2a:	481a      	ldr	r0, [pc, #104]	; (8002a94 <MotorController_init+0x1c8>)
 8002a2c:	f003 f836 	bl	8005a9c <HAL_ADCEx_InjectedStart>
 8002a30:	4603      	mov	r3, r0
 8002a32:	461a      	mov	r2, r3
 8002a34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (status != HAL_OK) {
 8002a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d000      	beq.n	8002a48 <MotorController_init+0x17c>
    while (1) {
 8002a46:	e7fe      	b.n	8002a46 <MotorController_init+0x17a>
      // error loop
    }
  }

  Encoder_triggerUpdate(&controller->encoder);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f7fe ff04 	bl	8001858 <Encoder_triggerUpdate>

  HAL_Delay(100);
 8002a50:	2064      	movs	r0, #100	; 0x64
 8002a52:	f002 fbe9 	bl	8005228 <HAL_Delay>
  PowerStage_calibratePhaseCurrentOffset(&controller->powerstage);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	332c      	adds	r3, #44	; 0x2c
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f001 fe2c 	bl	80046b8 <PowerStage_calibratePhaseCurrentOffset>

  if (controller->mode == MODE_DISABLED) {
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d107      	bne.n	8002a7a <MotorController_init+0x1ae>
    controller->mode = MODE_IDLE;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
    controller->error = ERROR_NO_ERROR;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
  }
}
 8002a7a:	bf00      	nop
 8002a7c:	3728      	adds	r7, #40	; 0x28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	00100003 	.word	0x00100003
 8002a88:	20000420 	.word	0x20000420
 8002a8c:	20000680 	.word	0x20000680
 8002a90:	20000538 	.word	0x20000538
 8002a94:	200003b4 	.word	0x200003b4
 8002a98:	20000348 	.word	0x20000348
 8002a9c:	2000059c 	.word	0x2000059c
 8002aa0:	20000484 	.word	0x20000484
 8002aa4:	200004c0 	.word	0x200004c0
 8002aa8:	200004fc 	.word	0x200004fc
 8002aac:	200005e8 	.word	0x200005e8
 8002ab0:	20000634 	.word	0x20000634

08002ab4 <MotorController_getMode>:

ErrorCode MotorController_getError(MotorController *controller) {
  return controller->error;
}

Mode MotorController_getMode(MotorController *controller) {
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return controller->mode;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <MotorController_setMode>:

void MotorController_setMode(MotorController *controller, Mode mode) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	70fb      	strb	r3, [r7, #3]
  switch (mode) {
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	2b24      	cmp	r3, #36	; 0x24
 8002ae0:	dc52      	bgt.n	8002b88 <MotorController_setMode+0xb8>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f2c0 8082 	blt.w	8002bec <MotorController_setMode+0x11c>
 8002ae8:	2b24      	cmp	r3, #36	; 0x24
 8002aea:	d87f      	bhi.n	8002bec <MotorController_setMode+0x11c>
 8002aec:	a201      	add	r2, pc, #4	; (adr r2, 8002af4 <MotorController_setMode+0x24>)
 8002aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af2:	bf00      	nop
 8002af4:	08002b8f 	.word	0x08002b8f
 8002af8:	08002b9b 	.word	0x08002b9b
 8002afc:	08002bed 	.word	0x08002bed
 8002b00:	08002bed 	.word	0x08002bed
 8002b04:	08002bed 	.word	0x08002bed
 8002b08:	08002baf 	.word	0x08002baf
 8002b0c:	08002bed 	.word	0x08002bed
 8002b10:	08002bed 	.word	0x08002bed
 8002b14:	08002bed 	.word	0x08002bed
 8002b18:	08002bed 	.word	0x08002bed
 8002b1c:	08002bed 	.word	0x08002bed
 8002b20:	08002bed 	.word	0x08002bed
 8002b24:	08002bed 	.word	0x08002bed
 8002b28:	08002bed 	.word	0x08002bed
 8002b2c:	08002bed 	.word	0x08002bed
 8002b30:	08002bed 	.word	0x08002bed
 8002b34:	08002bbb 	.word	0x08002bbb
 8002b38:	08002bbb 	.word	0x08002bbb
 8002b3c:	08002bbb 	.word	0x08002bbb
 8002b40:	08002bed 	.word	0x08002bed
 8002b44:	08002bed 	.word	0x08002bed
 8002b48:	08002bed 	.word	0x08002bed
 8002b4c:	08002bed 	.word	0x08002bed
 8002b50:	08002bed 	.word	0x08002bed
 8002b54:	08002bed 	.word	0x08002bed
 8002b58:	08002bed 	.word	0x08002bed
 8002b5c:	08002bed 	.word	0x08002bed
 8002b60:	08002bed 	.word	0x08002bed
 8002b64:	08002bed 	.word	0x08002bed
 8002b68:	08002bed 	.word	0x08002bed
 8002b6c:	08002bed 	.word	0x08002bed
 8002b70:	08002bed 	.word	0x08002bed
 8002b74:	08002bed 	.word	0x08002bed
 8002b78:	08002bbb 	.word	0x08002bbb
 8002b7c:	08002bbb 	.word	0x08002bbb
 8002b80:	08002bbb 	.word	0x08002bbb
 8002b84:	08002bbb 	.word	0x08002bbb
 8002b88:	2b80      	cmp	r3, #128	; 0x80
 8002b8a:	d016      	beq.n	8002bba <MotorController_setMode+0xea>
 8002b8c:	e02e      	b.n	8002bec <MotorController_setMode+0x11c>
    case MODE_DISABLED:
      PowerStage_disable(&controller->powerstage);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	332c      	adds	r3, #44	; 0x2c
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fcb4 	bl	8004500 <PowerStage_disable>
      break;
 8002b98:	e036      	b.n	8002c08 <MotorController_setMode+0x138>

    case MODE_IDLE:
      PowerStage_enable(&controller->powerstage);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	332c      	adds	r3, #44	; 0x2c
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fcc8 	bl	8004534 <PowerStage_enable>
      controller->error = ERROR_NO_ERROR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
      break;
 8002bac:	e02c      	b.n	8002c08 <MotorController_setMode+0x138>

    case MODE_CALIBRATION:
      PowerStage_enable(&controller->powerstage);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	332c      	adds	r3, #44	; 0x2c
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 fcbe 	bl	8004534 <PowerStage_enable>
      break;
 8002bb8:	e026      	b.n	8002c08 <MotorController_setMode+0x138>
    case MODE_DEBUG:
    case MODE_OPEN_VDQ:
    case MODE_OPEN_VALPHABETA:
    case MODE_OPEN_VABC:
    case MODE_OPEN_IDQ:
      if (controller->mode != MODE_IDLE) {
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d00d      	beq.n	8002be0 <MotorController_setMode+0x110>
        PowerStage_disable(&controller->powerstage);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	332c      	adds	r3, #44	; 0x2c
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f001 fc99 	bl	8004500 <PowerStage_disable>
        controller->mode = MODE_DISABLED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
        controller->error = ERROR_INVALID_MODE_SWITCH;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2203      	movs	r2, #3
 8002bda:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
        return;  // return directly, do not update mode
 8002bde:	e017      	b.n	8002c10 <MotorController_setMode+0x140>
      }
      PowerStage_enable(&controller->powerstage);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	332c      	adds	r3, #44	; 0x2c
 8002be4:	4618      	mov	r0, r3
 8002be6:	f001 fca5 	bl	8004534 <PowerStage_enable>
      break;
 8002bea:	e00d      	b.n	8002c08 <MotorController_setMode+0x138>

    default:
      PowerStage_disable(&controller->powerstage);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	332c      	adds	r3, #44	; 0x2c
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fc85 	bl	8004500 <PowerStage_disable>
      controller->mode = MODE_DISABLED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
      controller->error = ERROR_INVALID_MODE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2202      	movs	r2, #2
 8002c02:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
      return;  // return directly, do not update mode
 8002c06:	e003      	b.n	8002c10 <MotorController_setMode+0x140>
  }
  controller->mode = mode;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	f883 2124 	strb.w	r2, [r3, #292]	; 0x124
}
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop

08002c18 <MotorController_setFluxAngle>:

void MotorController_setFluxAngle(MotorController *controller, float angle_setpoint, float voltage_setpoint) {
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	ed87 0a02 	vstr	s0, [r7, #8]
 8002c24:	edc7 0a01 	vstr	s1, [r7, #4]
  float theta = wrapTo2Pi(angle_setpoint);
 8002c28:	ed97 0a02 	vldr	s0, [r7, #8]
 8002c2c:	f7ff fe1c 	bl	8002868 <wrapTo2Pi>
 8002c30:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
  float sin_theta = sinf(theta);
 8002c34:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c38:	f00c fa64 	bl	800f104 <sinf>
 8002c3c:	ed87 0a08 	vstr	s0, [r7, #32]
  float cos_theta = cosf(theta);
 8002c40:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c44:	f00c f9c8 	bl	800efd8 <cosf>
 8002c48:	ed87 0a07 	vstr	s0, [r7, #28]
  float v_q = 0.0;
 8002c4c:	f04f 0300 	mov.w	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  float v_d = voltage_setpoint;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	617b      	str	r3, [r7, #20]

  controller->current_controller.v_alpha_target = -sin_theta * v_q + cos_theta * v_d;
 8002c56:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c5a:	eeb1 7a67 	vneg.f32	s14, s15
 8002c5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c66:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c6a:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	edc3 7a25 	vstr	s15, [r3, #148]	; 0x94
  controller->current_controller.v_beta_target =   cos_theta * v_q + sin_theta * v_d;
 8002c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8002c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c88:	edd7 6a08 	vldr	s13, [r7, #32]
 8002c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	edc3 7a26 	vstr	s15, [r3, #152]	; 0x98
}
 8002c9e:	bf00      	nop
 8002ca0:	3728      	adds	r7, #40	; 0x28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <MotorController_loadConfig>:

void MotorController_loadConfig(MotorController *controller) {
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  EEPROMConfig *config = (EEPROMConfig *)FLASH_CONFIG_ADDRESS;
 8002cb0:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <MotorController_loadConfig+0xf0>)
 8002cb2:	60fb      	str	r3, [r7, #12]

  controller->firmware_version                  = config->firmware_version;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  controller->device_id                         = config->device_id;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	b2da      	uxtb	r2, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

  controller->encoder.cpr                       = config->encoder_cpr;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60da      	str	r2, [r3, #12]
  controller->encoder.position_offset           = config->encoder_position_offset;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	611a      	str	r2, [r3, #16]
  controller->encoder.velocity_filter_alpha     = config->encoder_velocity_filter_alpha;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	691a      	ldr	r2, [r3, #16]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	615a      	str	r2, [r3, #20]

  controller->powerstage.undervoltage_threshold = config->powerstage_undervoltage_threshold;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	695a      	ldr	r2, [r3, #20]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
  controller->powerstage.overvoltage_threshold  = config->powerstage_overvoltage_threshold;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	63da      	str	r2, [r3, #60]	; 0x3c

  controller->motor.pole_pairs                  = config->motor_pole_pairs;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	69da      	ldr	r2, [r3, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	651a      	str	r2, [r3, #80]	; 0x50
  controller->motor.kv_rating                   = config->motor_kv_rating;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a1a      	ldr	r2, [r3, #32]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
  controller->motor.flux_angle_offset           = config->motor_flux_angle_offset;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	659a      	str	r2, [r3, #88]	; 0x58

  controller->current_controller.current_filter_alpha   =   config->current_controller_current_filter_alpha;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	; 0x5c
  controller->current_controller.i_q_kp         = config->current_controller_i_q_kp;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	661a      	str	r2, [r3, #96]	; 0x60
  controller->current_controller.i_q_ki         = config->current_controller_i_q_ki;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	665a      	str	r2, [r3, #100]	; 0x64
  controller->current_controller.i_d_kp         = config->current_controller_i_d_kp;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	669a      	str	r2, [r3, #104]	; 0x68
  controller->current_controller.i_d_ki         = config->current_controller_i_d_ki;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	66da      	str	r2, [r3, #108]	; 0x6c

  controller->position_controller.position_kp   = config->position_controller_position_kp;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  controller->position_controller.position_ki   = config->position_controller_position_ki;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  controller->position_controller.position_kd   = config->position_controller_position_kd;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
  controller->position_controller.torque_limit_upper    = config->position_controller_torque_limit_upper;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  controller->position_controller.torque_limit_lower    = config->position_controller_torque_limit_lower;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  controller->position_controller.velocity_limit_upper  = config->position_controller_velocity_limit_upper;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  controller->position_controller.velocity_limit_lower  = config->position_controller_velocity_limit_lower;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
  controller->position_controller.position_limit_upper  = config->position_controller_position_limit_upper;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
  controller->position_controller.position_limit_lower  = config->position_controller_position_limit_lower;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	0801f800 	.word	0x0801f800

08002d9c <MotorController_storeConfig>:

uint32_t MotorController_storeConfig(MotorController *controller) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b0a4      	sub	sp, #144	; 0x90
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  EEPROMConfig config;

  config.firmware_version                     = controller->firmware_version;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8002daa:	623b      	str	r3, [r7, #32]
  config.device_id                            = controller->device_id;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8002db2:	61fb      	str	r3, [r7, #28]

  config.encoder_cpr                          = controller->encoder.cpr;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
  config.encoder_position_offset              = controller->encoder.position_offset;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
  config.encoder_velocity_filter_alpha        = controller->encoder.velocity_filter_alpha;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c

  config.powerstage_undervoltage_threshold    = controller->powerstage.undervoltage_threshold;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dca:	633b      	str	r3, [r7, #48]	; 0x30
  config.powerstage_overvoltage_threshold     = controller->powerstage.overvoltage_threshold;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34

  config.motor_pole_pairs                     = controller->motor.pole_pairs;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dd6:	63bb      	str	r3, [r7, #56]	; 0x38
  config.motor_kv_rating                      = controller->motor.kv_rating;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ddc:	63fb      	str	r3, [r7, #60]	; 0x3c
  config.motor_flux_angle_offset              = controller->motor.flux_angle_offset;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	643b      	str	r3, [r7, #64]	; 0x40

  config.current_controller_current_filter_alpha  = controller->current_controller.current_filter_alpha;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	647b      	str	r3, [r7, #68]	; 0x44
  config.current_controller_i_q_kp            = controller->current_controller.i_q_kp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
  config.current_controller_i_q_ki            = controller->current_controller.i_q_ki;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  config.current_controller_i_d_kp            = controller->current_controller.i_d_kp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dfa:	653b      	str	r3, [r7, #80]	; 0x50
  config.current_controller_i_d_ki            = controller->current_controller.i_d_ki;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e00:	657b      	str	r3, [r7, #84]	; 0x54

  config.position_controller_position_kp      = controller->position_controller.position_kp;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002e08:	65bb      	str	r3, [r7, #88]	; 0x58
  config.position_controller_position_ki      = controller->position_controller.position_ki;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e10:	65fb      	str	r3, [r7, #92]	; 0x5c
  config.position_controller_position_kd      = controller->position_controller.position_kd;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002e18:	663b      	str	r3, [r7, #96]	; 0x60
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_upper;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e20:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_torque_limit_upper       = controller->position_controller.torque_limit_lower;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002e28:	667b      	str	r3, [r7, #100]	; 0x64
  config.position_controller_velocity_limit_upper     = controller->position_controller.velocity_limit_upper;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e30:	66fb      	str	r3, [r7, #108]	; 0x6c
  config.position_controller_velocity_limit_lower     = controller->position_controller.velocity_limit_lower;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e38:	673b      	str	r3, [r7, #112]	; 0x70
  config.position_controller_position_limit_upper     = controller->position_controller.position_limit_upper;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8002e40:	677b      	str	r3, [r7, #116]	; 0x74
  config.position_controller_position_limit_lower     = controller->position_controller.position_limit_lower;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 8002e48:	67bb      	str	r3, [r7, #120]	; 0x78

  FLASH_EraseInitTypeDef erase_init_struct;
  uint32_t page_error;

  /* Unlock the Flash to enable the flash control register access *************/
  HAL_FLASH_Unlock();
 8002e4a:	f004 fcb3 	bl	80077b4 <HAL_FLASH_Unlock>

  /* Erase the user Flash area */
  erase_init_struct.TypeErase = FLASH_TYPEERASE_PAGES;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
  erase_init_struct.Banks = FLASH_CONFIG_BANK;
 8002e52:	2301      	movs	r3, #1
 8002e54:	613b      	str	r3, [r7, #16]
  erase_init_struct.Page = FLASH_CONFIG_PAGE;
 8002e56:	233f      	movs	r3, #63	; 0x3f
 8002e58:	617b      	str	r3, [r7, #20]
  erase_init_struct.NbPages = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61bb      	str	r3, [r7, #24]

  if (HAL_FLASHEx_Erase(&erase_init_struct, &page_error) != HAL_OK) {
 8002e5e:	f107 0208 	add.w	r2, r7, #8
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 fd9b 	bl	80079a4 <HAL_FLASHEx_Erase>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <MotorController_storeConfig+0xe0>
    /*Error occurred while page erase.*/
    return HAL_FLASH_GetError();
 8002e74:	f004 fcda 	bl	800782c <HAL_FLASH_GetError>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	e02e      	b.n	8002eda <MotorController_storeConfig+0x13e>
  }

  /* Program the user Flash area word by word*/
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002e82:	e023      	b.n	8002ecc <MotorController_storeConfig+0x130>
    uint64_t buf = (uint64_t)*(((uint64_t *)(&config)) + i);
 8002e84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	f107 021c 	add.w	r2, r7, #28
 8002e8e:	4413      	add	r3, r2
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    uint32_t target_address = FLASH_CONFIG_ADDRESS + i*8;
 8002e98:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ea2:	f503 33fc 	add.w	r3, r3, #129024	; 0x1f800
 8002ea6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, target_address, buf) != HAL_OK) {
 8002ea8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8002eac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f004 fc2a 	bl	8007708 <HAL_FLASH_Program>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <MotorController_storeConfig+0x126>
      return HAL_FLASH_GetError();
 8002eba:	f004 fcb7 	bl	800782c <HAL_FLASH_GetError>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	e00b      	b.n	8002eda <MotorController_storeConfig+0x13e>
  for (uint16_t i=0; i<sizeof(config)/sizeof(uint64_t); i+=1) {
 8002ec2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8002ecc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8002ed0:	2b0b      	cmp	r3, #11
 8002ed2:	d9d7      	bls.n	8002e84 <MotorController_storeConfig+0xe8>
    }
  }

  /* Lock the Flash to disable the flash control register access (recommended
    to protect the FLASH memory against possible unwanted operation) *********/
  HAL_FLASH_Lock();
 8002ed4:	f004 fc90 	bl	80077f8 <HAL_FLASH_Lock>

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3790      	adds	r7, #144	; 0x90
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
	...

08002ee4 <MotorController_updateCommutation>:

float MotorController_getPosition(MotorController *controller) {
  return controller->position_controller.position_measured;
}

void MotorController_updateCommutation(MotorController *controller, ADC_HandleTypeDef *hadc) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  float position_measured = Encoder_getRelativePosition(&controller->encoder);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fe fdd1 	bl	8001a98 <Encoder_getRelativePosition>
 8002ef6:	ed87 0a05 	vstr	s0, [r7, #20]

  float theta = wrapTo2Pi((position_measured * (float)controller->motor.pole_pairs) - controller->motor.flux_angle_offset);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f06:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002f14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f18:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1c:	f7ff fca4 	bl	8002868 <wrapTo2Pi>
 8002f20:	ed87 0a04 	vstr	s0, [r7, #16]
  float sin_theta = sinf(theta);
 8002f24:	ed97 0a04 	vldr	s0, [r7, #16]
 8002f28:	f00c f8ec 	bl	800f104 <sinf>
 8002f2c:	ed87 0a03 	vstr	s0, [r7, #12]
  float cos_theta = cosf(theta);
 8002f30:	ed97 0a04 	vldr	s0, [r7, #16]
 8002f34:	f00c f850 	bl	800efd8 <cosf>
 8002f38:	ed87 0a02 	vstr	s0, [r7, #8]

  PowerStage_getPhaseCurrent(&controller->powerstage,
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	3384      	adds	r3, #132	; 0x84
 8002f52:	f001 fc01 	bl	8004758 <PowerStage_getPhaseCurrent>
    &controller->current_controller.i_a_measured,
    &controller->current_controller.i_b_measured,
    &controller->current_controller.i_c_measured);

  CurrentController_update(&controller->current_controller,
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f103 025c 	add.w	r2, r3, #92	; 0x5c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 1124 	ldrb.w	r1, [r3, #292]	; 0x124
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002f68:	eeb0 1a67 	vmov.f32	s2, s15
 8002f6c:	edd7 0a02 	vldr	s1, [r7, #8]
 8002f70:	ed97 0a03 	vldr	s0, [r7, #12]
 8002f74:	4610      	mov	r0, r2
 8002f76:	f7fe fa43 	bl	8001400 <CurrentController_update>
      controller->mode,
      sin_theta,
      cos_theta,
      controller->powerstage.bus_voltage_measured);

  if (controller->mode != MODE_IDLE) {
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d015      	beq.n	8002fb0 <MotorController_updateCommutation+0xcc>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8002f9c:	eeb0 1a66 	vmov.f32	s2, s13
 8002fa0:	eef0 0a47 	vmov.f32	s1, s14
 8002fa4:	eeb0 0a67 	vmov.f32	s0, s15
 8002fa8:	4610      	mov	r0, r2
 8002faa:	f001 fadd 	bl	8004568 <PowerStage_setBridgeOutput>
    PowerStage_setBridgeOutput(&controller->powerstage,
      0,
      0,
      0);
  }
}
 8002fae:	e00a      	b.n	8002fc6 <MotorController_updateCommutation+0xe2>
    PowerStage_setBridgeOutput(&controller->powerstage,
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	332c      	adds	r3, #44	; 0x2c
 8002fb4:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8002fd0 <MotorController_updateCommutation+0xec>
 8002fb8:	eddf 0a05 	vldr	s1, [pc, #20]	; 8002fd0 <MotorController_updateCommutation+0xec>
 8002fbc:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002fd0 <MotorController_updateCommutation+0xec>
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f001 fad1 	bl	8004568 <PowerStage_setBridgeOutput>
}
 8002fc6:	bf00      	nop
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	00000000 	.word	0x00000000

08002fd4 <MotorController_triggerPositionUpdate>:

void MotorController_triggerPositionUpdate(MotorController *controller) {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_DISABLED
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <MotorController_triggerPositionUpdate+0x1c>
      || controller->mode == MODE_IDLE) {
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d105      	bne.n	8002ffc <MotorController_triggerPositionUpdate+0x28>
    PowerStage_disable(&controller->powerstage);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	332c      	adds	r3, #44	; 0x2c
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f001 fa83 	bl	8004500 <PowerStage_disable>
 8002ffa:	e035      	b.n	8003068 <MotorController_triggerPositionUpdate+0x94>
  }
  else if (controller->mode == MODE_CALIBRATION
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003002:	2b05      	cmp	r3, #5
 8003004:	d022      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_TORQUE
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800300c:	2b10      	cmp	r3, #16
 800300e:	d01d      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_VELOCITY
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003016:	2b11      	cmp	r3, #17
 8003018:	d018      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_POSITION
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003020:	2b12      	cmp	r3, #18
 8003022:	d013      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VDQ
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800302a:	2b22      	cmp	r3, #34	; 0x22
 800302c:	d00e      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VALPHABETA
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003034:	2b23      	cmp	r3, #35	; 0x23
 8003036:	d009      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_VABC
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800303e:	2b24      	cmp	r3, #36	; 0x24
 8003040:	d004      	beq.n	800304c <MotorController_triggerPositionUpdate+0x78>
      || controller->mode == MODE_OPEN_IDQ) {
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003048:	2b21      	cmp	r3, #33	; 0x21
 800304a:	d105      	bne.n	8003058 <MotorController_triggerPositionUpdate+0x84>
    PowerStage_enable(&controller->powerstage);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	332c      	adds	r3, #44	; 0x2c
 8003050:	4618      	mov	r0, r3
 8003052:	f001 fa6f 	bl	8004534 <PowerStage_enable>
 8003056:	e007      	b.n	8003068 <MotorController_triggerPositionUpdate+0x94>
  }
  else {
    MotorController_setMode(controller, MODE_DISABLED);
 8003058:	2100      	movs	r1, #0
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7ff fd38 	bl	8002ad0 <MotorController_setMode>
    controller->error = ERROR_INVALID_MODE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2202      	movs	r2, #2
 8003064:	f883 2125 	strb.w	r2, [r3, #293]	; 0x125
  }

  Encoder_triggerUpdate(&controller->encoder);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fbf4 	bl	8001858 <Encoder_triggerUpdate>
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <MotorController_updatePositionReading>:

void MotorController_updatePositionReading(MotorController *controller) {
 8003078:	b5b0      	push	{r4, r5, r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  Encoder_update(&controller->encoder);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4618      	mov	r0, r3
 8003084:	f7fe fc24 	bl	80018d0 <Encoder_update>

  PowerStage_getBusVoltage(&controller->powerstage);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	332c      	adds	r3, #44	; 0x2c
 800308c:	4618      	mov	r0, r3
 800308e:	f001 fb3b 	bl	8004708 <PowerStage_getBusVoltage>

  controller->position_controller.position_measured = Encoder_getPosition(&controller->encoder);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4618      	mov	r0, r3
 8003096:	f7fe fd0e 	bl	8001ab6 <Encoder_getPosition>
 800309a:	eef0 7a40 	vmov.f32	s15, s0
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	edc3 7a47 	vstr	s15, [r3, #284]	; 0x11c
  controller->position_controller.velocity_measured = Encoder_getVelocity(&controller->encoder);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fe fd14 	bl	8001ad4 <Encoder_getVelocity>
 80030ac:	eef0 7a40 	vmov.f32	s15, s0
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	edc3 7a44 	vstr	s15, [r3, #272]	; 0x110
  controller->position_controller.torque_measured = (8.3 * controller->current_controller.i_q_measured) / (float)controller->motor.kv_rating;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd fa6b 	bl	8000598 <__aeabi_f2d>
 80030c2:	a313      	add	r3, pc, #76	; (adr r3, 8003110 <MotorController_updatePositionReading+0x98>)
 80030c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c8:	f7fd fabe 	bl	8000648 <__aeabi_dmul>
 80030cc:	4602      	mov	r2, r0
 80030ce:	460b      	mov	r3, r1
 80030d0:	4614      	mov	r4, r2
 80030d2:	461d      	mov	r5, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e0:	ee17 0a90 	vmov	r0, s15
 80030e4:	f7fd fa58 	bl	8000598 <__aeabi_f2d>
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4620      	mov	r0, r4
 80030ee:	4629      	mov	r1, r5
 80030f0:	f7fd fbd4 	bl	800089c <__aeabi_ddiv>
 80030f4:	4602      	mov	r2, r0
 80030f6:	460b      	mov	r3, r1
 80030f8:	4610      	mov	r0, r2
 80030fa:	4619      	mov	r1, r3
 80030fc:	f7fd fd7c 	bl	8000bf8 <__aeabi_d2f>
 8003100:	4602      	mov	r2, r0
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
}
 8003108:	bf00      	nop
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bdb0      	pop	{r4, r5, r7, pc}
 8003110:	9999999a 	.word	0x9999999a
 8003114:	40209999 	.word	0x40209999

08003118 <MotorController_updatePositionController>:

void MotorController_updatePositionController(MotorController *controller) {
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  PositionController_update(&controller->position_controller);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	33dc      	adds	r3, #220	; 0xdc
 8003124:	4618      	mov	r0, r3
 8003126:	f001 f913 	bl	8004350 <PositionController_update>

  if (controller->mode != MODE_OPEN_IDQ) {
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 8003130:	2b21      	cmp	r3, #33	; 0x21
 8003132:	d022      	beq.n	800317a <MotorController_updatePositionController+0x62>
    controller->current_controller.i_q_target = (controller->position_controller.torque_setpoint * (float)controller->motor.kv_rating) / 8.3;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313e:	ee07 3a90 	vmov	s15, r3
 8003142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	ee17 0a90 	vmov	r0, s15
 800314e:	f7fd fa23 	bl	8000598 <__aeabi_f2d>
 8003152:	a30d      	add	r3, pc, #52	; (adr r3, 8003188 <MotorController_updatePositionController+0x70>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd fba0 	bl	800089c <__aeabi_ddiv>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4610      	mov	r0, r2
 8003162:	4619      	mov	r1, r3
 8003164:	f7fd fd48 	bl	8000bf8 <__aeabi_d2f>
 8003168:	4602      	mov	r2, r0
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    controller->current_controller.i_d_target = 0;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	f3af 8000 	nop.w
 8003188:	9999999a 	.word	0x9999999a
 800318c:	40209999 	.word	0x40209999

08003190 <MotorController_updateService>:

void MotorController_updateService(MotorController *controller) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if (controller->mode == MODE_CALIBRATION) {
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3124 	ldrb.w	r3, [r3, #292]	; 0x124
 800319e:	2b05      	cmp	r3, #5
 80031a0:	d103      	bne.n	80031aa <MotorController_updateService+0x1a>
    MotorController_runCalibrationSequence(controller);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f81c 	bl	80031e0 <MotorController_runCalibrationSequence>
    return;
 80031a8:	e014      	b.n	80031d4 <MotorController_updateService+0x44>
  }
  if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8)) {
 80031aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80031ae:	480b      	ldr	r0, [pc, #44]	; (80031dc <MotorController_updateService+0x4c>)
 80031b0:	f004 fe9e 	bl	8007ef0 <HAL_GPIO_ReadPin>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d006      	beq.n	80031c8 <MotorController_updateService+0x38>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 1);
 80031ba:	2201      	movs	r2, #1
 80031bc:	2104      	movs	r1, #4
 80031be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031c2:	f004 fead 	bl	8007f20 <HAL_GPIO_WritePin>
 80031c6:	e005      	b.n	80031d4 <MotorController_updateService+0x44>
  }
  else {
    // red
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, 0);
 80031c8:	2200      	movs	r2, #0
 80031ca:	2104      	movs	r1, #4
 80031cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031d0:	f004 fea6 	bl	8007f20 <HAL_GPIO_WritePin>
  }
}
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	48000400 	.word	0x48000400

080031e0 <MotorController_runCalibrationSequence>:

void MotorController_runCalibrationSequence(MotorController *controller) {
 80031e0:	b5b0      	push	{r4, r5, r7, lr}
 80031e2:	b0ae      	sub	sp, #184	; 0xb8
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);    // green LED
 80031e8:	2200      	movs	r2, #0
 80031ea:	2110      	movs	r1, #16
 80031ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f0:	f004 fe96 	bl	8007f20 <HAL_GPIO_WritePin>
  MotorController_setMode(controller, MODE_CALIBRATION);
 80031f4:	2105      	movs	r1, #5
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff fc6a 	bl	8002ad0 <MotorController_setMode>

  // open loop calibration
  float prev_v_alpha_target = controller->current_controller.v_alpha_target;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003202:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  float prev_v_beta_target = controller->current_controller.v_beta_target;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  float flux_angle_setpoint = 0;
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  float voltage_setpoint = 0.2;
 8003218:	4b7b      	ldr	r3, [pc, #492]	; (8003408 <MotorController_runCalibrationSequence+0x228>)
 800321a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 800321e:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003222:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff fcf6 	bl	8002c18 <MotorController_setFluxAngle>
  HAL_Delay(100);
 800322c:	2064      	movs	r0, #100	; 0x64
 800322e:	f001 fffb 	bl	8005228 <HAL_Delay>
  PowerStage_enable(&controller->powerstage);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	332c      	adds	r3, #44	; 0x2c
 8003236:	4618      	mov	r0, r3
 8003238:	f001 f97c 	bl	8004534 <PowerStage_enable>
  HAL_Delay(500);
 800323c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003240:	f001 fff2 	bl	8005228 <HAL_Delay>

  float phase_current = 0;
 8003244:	f04f 0300 	mov.w	r3, #0
 8003248:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  while (phase_current < CALIBRATION_CURRENT) {
 800324c:	e07c      	b.n	8003348 <MotorController_runCalibrationSequence+0x168>
    HAL_Delay(100);
 800324e:	2064      	movs	r0, #100	; 0x64
 8003250:	f001 ffea 	bl	8005228 <HAL_Delay>
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003254:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003258:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f7ff fcdb 	bl	8002c18 <MotorController_setFluxAngle>

    voltage_setpoint += 0.1;
 8003262:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003266:	f7fd f997 	bl	8000598 <__aeabi_f2d>
 800326a:	a361      	add	r3, pc, #388	; (adr r3, 80033f0 <MotorController_runCalibrationSequence+0x210>)
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f7fd f834 	bl	80002dc <__adddf3>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	f7fd fcbc 	bl	8000bf8 <__aeabi_d2f>
 8003280:	4603      	mov	r3, r0
 8003282:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    phase_current = 1./3. * (fabs(controller->current_controller.i_a_measured) + fabs(controller->current_controller.i_b_measured) + fabs(controller->current_controller.i_c_measured));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800328c:	eef0 7ae7 	vabs.f32	s15, s15
 8003290:	ee17 0a90 	vmov	r0, s15
 8003294:	f7fd f980 	bl	8000598 <__aeabi_f2d>
 8003298:	4604      	mov	r4, r0
 800329a:	460d      	mov	r5, r1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80032a2:	eef0 7ae7 	vabs.f32	s15, s15
 80032a6:	ee17 0a90 	vmov	r0, s15
 80032aa:	f7fd f975 	bl	8000598 <__aeabi_f2d>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	4620      	mov	r0, r4
 80032b4:	4629      	mov	r1, r5
 80032b6:	f7fd f811 	bl	80002dc <__adddf3>
 80032ba:	4602      	mov	r2, r0
 80032bc:	460b      	mov	r3, r1
 80032be:	4614      	mov	r4, r2
 80032c0:	461d      	mov	r5, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 80032c8:	eef0 7ae7 	vabs.f32	s15, s15
 80032cc:	ee17 0a90 	vmov	r0, s15
 80032d0:	f7fd f962 	bl	8000598 <__aeabi_f2d>
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4620      	mov	r0, r4
 80032da:	4629      	mov	r1, r5
 80032dc:	f7fc fffe 	bl	80002dc <__adddf3>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	a343      	add	r3, pc, #268	; (adr r3, 80033f8 <MotorController_runCalibrationSequence+0x218>)
 80032ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ee:	f7fd f9ab 	bl	8000648 <__aeabi_dmul>
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	f7fd fc7d 	bl	8000bf8 <__aeabi_d2f>
 80032fe:	4603      	mov	r3, r0
 8003300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    {
      char str[128];
      sprintf(str, "voltage: %f\tphase current: %f\r\n", voltage_setpoint, phase_current);
 8003304:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8003308:	f7fd f946 	bl	8000598 <__aeabi_f2d>
 800330c:	4604      	mov	r4, r0
 800330e:	460d      	mov	r5, r1
 8003310:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8003314:	f7fd f940 	bl	8000598 <__aeabi_f2d>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	f107 000c 	add.w	r0, r7, #12
 8003320:	e9cd 2300 	strd	r2, r3, [sp]
 8003324:	4622      	mov	r2, r4
 8003326:	462b      	mov	r3, r5
 8003328:	4938      	ldr	r1, [pc, #224]	; (800340c <MotorController_runCalibrationSequence+0x22c>)
 800332a:	f009 fbdd 	bl	800cae8 <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 800332e:	f107 030c 	add.w	r3, r7, #12
 8003332:	4618      	mov	r0, r3
 8003334:	f7fc ff74 	bl	8000220 <strlen>
 8003338:	4603      	mov	r3, r0
 800333a:	b29a      	uxth	r2, r3
 800333c:	f107 010c 	add.w	r1, r7, #12
 8003340:	230a      	movs	r3, #10
 8003342:	4833      	ldr	r0, [pc, #204]	; (8003410 <MotorController_runCalibrationSequence+0x230>)
 8003344:	f008 f919 	bl	800b57a <HAL_UART_Transmit>
  while (phase_current < CALIBRATION_CURRENT) {
 8003348:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800334c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003350:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003358:	f53f af79 	bmi.w	800324e <MotorController_runCalibrationSequence+0x6e>
    }
  }


  float start_position = Encoder_getPosition(&controller->encoder);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4618      	mov	r0, r3
 8003360:	f7fe fba9 	bl	8001ab6 <Encoder_getPosition>
 8003364:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

  // move one electrical revolution forward
  for (int16_t i=0; i<=500; i+=1) {
 8003368:	2300      	movs	r3, #0
 800336a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800336e:	e02b      	b.n	80033c8 <MotorController_runCalibrationSequence+0x1e8>
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003370:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 8003374:	ee07 3a90 	vmov	s15, r3
 8003378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800337c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003414 <MotorController_runCalibrationSequence+0x234>
 8003380:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003384:	ee16 0a90 	vmov	r0, s13
 8003388:	f7fd f906 	bl	8000598 <__aeabi_f2d>
 800338c:	a31c      	add	r3, pc, #112	; (adr r3, 8003400 <MotorController_runCalibrationSequence+0x220>)
 800338e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003392:	f7fd f959 	bl	8000648 <__aeabi_dmul>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	4610      	mov	r0, r2
 800339c:	4619      	mov	r1, r3
 800339e:	f7fd fc2b 	bl	8000bf8 <__aeabi_d2f>
 80033a2:	4603      	mov	r3, r0
 80033a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 80033a8:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 80033ac:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fc31 	bl	8002c18 <MotorController_setFluxAngle>
    HAL_Delay(2);
 80033b6:	2002      	movs	r0, #2
 80033b8:	f001 ff36 	bl	8005228 <HAL_Delay>
  for (int16_t i=0; i<=500; i+=1) {
 80033bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80033c0:	3301      	adds	r3, #1
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80033c8:	f9b7 30a6 	ldrsh.w	r3, [r7, #166]	; 0xa6
 80033cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80033d0:	ddce      	ble.n	8003370 <MotorController_runCalibrationSequence+0x190>
  }
  HAL_Delay(500);
 80033d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033d6:	f001 ff27 	bl	8005228 <HAL_Delay>

  float end_position = Encoder_getPosition(&controller->encoder);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fe fb6a 	bl	8001ab6 <Encoder_getPosition>
 80033e2:	ed87 0a24 	vstr	s0, [r7, #144]	; 0x90

  for (int16_t i=500; i>=0; i-=1) {
 80033e6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80033ea:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 80033ee:	e03f      	b.n	8003470 <MotorController_runCalibrationSequence+0x290>
 80033f0:	9999999a 	.word	0x9999999a
 80033f4:	3fb99999 	.word	0x3fb99999
 80033f8:	55555555 	.word	0x55555555
 80033fc:	3fd55555 	.word	0x3fd55555
 8003400:	54442d18 	.word	0x54442d18
 8003404:	401921fb 	.word	0x401921fb
 8003408:	3e4ccccd 	.word	0x3e4ccccd
 800340c:	0800fd7c 	.word	0x0800fd7c
 8003410:	200006cc 	.word	0x200006cc
 8003414:	43fa0000 	.word	0x43fa0000
    flux_angle_setpoint = (i / 500.0f) * (2*M_PI);
 8003418:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 800341c:	ee07 3a90 	vmov	s15, r3
 8003420:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003424:	ed1f 7a05 	vldr	s14, [pc, #-20]	; 8003414 <MotorController_runCalibrationSequence+0x234>
 8003428:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800342c:	ee16 0a90 	vmov	r0, s13
 8003430:	f7fd f8b2 	bl	8000598 <__aeabi_f2d>
 8003434:	a3a2      	add	r3, pc, #648	; (adr r3, 80036c0 <MotorController_runCalibrationSequence+0x4e0>)
 8003436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343a:	f7fd f905 	bl	8000648 <__aeabi_dmul>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4610      	mov	r0, r2
 8003444:	4619      	mov	r1, r3
 8003446:	f7fd fbd7 	bl	8000bf8 <__aeabi_d2f>
 800344a:	4603      	mov	r3, r0
 800344c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003450:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003454:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fbdd 	bl	8002c18 <MotorController_setFluxAngle>
    HAL_Delay(2);
 800345e:	2002      	movs	r0, #2
 8003460:	f001 fee2 	bl	8005228 <HAL_Delay>
  for (int16_t i=500; i>=0; i-=1) {
 8003464:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8003468:	3b01      	subs	r3, #1
 800346a:	b29b      	uxth	r3, r3
 800346c:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
 8003470:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	; 0xa4
 8003474:	2b00      	cmp	r3, #0
 8003476:	dacf      	bge.n	8003418 <MotorController_runCalibrationSequence+0x238>
  }

  flux_angle_setpoint = 0;
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  MotorController_setFluxAngle(controller, flux_angle_setpoint, voltage_setpoint);
 8003480:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8003484:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff fbc5 	bl	8002c18 <MotorController_setFluxAngle>
  HAL_Delay(500);
 800348e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003492:	f001 fec9 	bl	8005228 <HAL_Delay>

  start_position = 0.5 * Encoder_getPosition(&controller->encoder) + 0.5 * start_position;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fe fb0c 	bl	8001ab6 <Encoder_getPosition>
 800349e:	ee10 3a10 	vmov	r3, s0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd f878 	bl	8000598 <__aeabi_f2d>
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	4b86      	ldr	r3, [pc, #536]	; (80036c8 <MotorController_runCalibrationSequence+0x4e8>)
 80034ae:	f7fd f8cb 	bl	8000648 <__aeabi_dmul>
 80034b2:	4602      	mov	r2, r0
 80034b4:	460b      	mov	r3, r1
 80034b6:	4614      	mov	r4, r2
 80034b8:	461d      	mov	r5, r3
 80034ba:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80034be:	f7fd f86b 	bl	8000598 <__aeabi_f2d>
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	4b80      	ldr	r3, [pc, #512]	; (80036c8 <MotorController_runCalibrationSequence+0x4e8>)
 80034c8:	f7fd f8be 	bl	8000648 <__aeabi_dmul>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4620      	mov	r0, r4
 80034d2:	4629      	mov	r1, r5
 80034d4:	f7fc ff02 	bl	80002dc <__adddf3>
 80034d8:	4602      	mov	r2, r0
 80034da:	460b      	mov	r3, r1
 80034dc:	4610      	mov	r0, r2
 80034de:	4619      	mov	r1, r3
 80034e0:	f7fd fb8a 	bl	8000bf8 <__aeabi_d2f>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Delay(500);
 80034ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80034ee:	f001 fe9b 	bl	8005228 <HAL_Delay>

  // release motor
  PowerStage_disable(&controller->powerstage);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	332c      	adds	r3, #44	; 0x2c
 80034f6:	4618      	mov	r0, r3
 80034f8:	f001 f802 	bl	8004500 <PowerStage_disable>

  controller->current_controller.v_alpha_target = prev_v_alpha_target;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8003502:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  controller->current_controller.v_beta_target = prev_v_beta_target;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800350c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

  float delta_position = end_position - start_position;
 8003510:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003514:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003518:	ee77 7a67 	vsub.f32	s15, s14, s15
 800351c:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c

  {
    char str[128];
    sprintf(str, "initial encoder angle: %f\r\n", start_position);
 8003520:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8003524:	f7fd f838 	bl	8000598 <__aeabi_f2d>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	f107 000c 	add.w	r0, r7, #12
 8003530:	4966      	ldr	r1, [pc, #408]	; (80036cc <MotorController_runCalibrationSequence+0x4ec>)
 8003532:	f009 fad9 	bl	800cae8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003536:	f107 030c 	add.w	r3, r7, #12
 800353a:	4618      	mov	r0, r3
 800353c:	f7fc fe70 	bl	8000220 <strlen>
 8003540:	4603      	mov	r3, r0
 8003542:	b29a      	uxth	r2, r3
 8003544:	f107 010c 	add.w	r1, r7, #12
 8003548:	230a      	movs	r3, #10
 800354a:	4861      	ldr	r0, [pc, #388]	; (80036d0 <MotorController_runCalibrationSequence+0x4f0>)
 800354c:	f008 f815 	bl	800b57a <HAL_UART_Transmit>
    sprintf(str, "end encoder angle: %f\r\n", end_position);
 8003550:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8003554:	f7fd f820 	bl	8000598 <__aeabi_f2d>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	f107 000c 	add.w	r0, r7, #12
 8003560:	495c      	ldr	r1, [pc, #368]	; (80036d4 <MotorController_runCalibrationSequence+0x4f4>)
 8003562:	f009 fac1 	bl	800cae8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003566:	f107 030c 	add.w	r3, r7, #12
 800356a:	4618      	mov	r0, r3
 800356c:	f7fc fe58 	bl	8000220 <strlen>
 8003570:	4603      	mov	r3, r0
 8003572:	b29a      	uxth	r2, r3
 8003574:	f107 010c 	add.w	r1, r7, #12
 8003578:	230a      	movs	r3, #10
 800357a:	4855      	ldr	r0, [pc, #340]	; (80036d0 <MotorController_runCalibrationSequence+0x4f0>)
 800357c:	f007 fffd 	bl	800b57a <HAL_UART_Transmit>
    sprintf(str, "delta angle: %f\r\n", delta_position);
 8003580:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8003584:	f7fd f808 	bl	8000598 <__aeabi_f2d>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	f107 000c 	add.w	r0, r7, #12
 8003590:	4951      	ldr	r1, [pc, #324]	; (80036d8 <MotorController_runCalibrationSequence+0x4f8>)
 8003592:	f009 faa9 	bl	800cae8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc fe40 	bl	8000220 <strlen>
 80035a0:	4603      	mov	r3, r0
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	f107 010c 	add.w	r1, r7, #12
 80035a8:	230a      	movs	r3, #10
 80035aa:	4849      	ldr	r0, [pc, #292]	; (80036d0 <MotorController_runCalibrationSequence+0x4f0>)
 80035ac:	f007 ffe5 	bl	800b57a <HAL_UART_Transmit>
  }


  if (fabsf(delta_position) < 0.1) {
 80035b0:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80035b4:	eef0 7ae7 	vabs.f32	s15, s15
 80035b8:	ee17 0a90 	vmov	r0, s15
 80035bc:	f7fc ffec 	bl	8000598 <__aeabi_f2d>
 80035c0:	a33d      	add	r3, pc, #244	; (adr r3, 80036b8 <MotorController_runCalibrationSequence+0x4d8>)
 80035c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c6:	f7fd fab1 	bl	8000b2c <__aeabi_dcmplt>
 80035ca:	4603      	mov	r3, r0
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <MotorController_runCalibrationSequence+0x3fc>
    // motor did not rotate
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor not rotating\r\n", strlen("ERROR: motor not rotating\r\n"), 10);
 80035d0:	230a      	movs	r3, #10
 80035d2:	221b      	movs	r2, #27
 80035d4:	4941      	ldr	r1, [pc, #260]	; (80036dc <MotorController_runCalibrationSequence+0x4fc>)
 80035d6:	483e      	ldr	r0, [pc, #248]	; (80036d0 <MotorController_runCalibrationSequence+0x4f0>)
 80035d8:	f007 ffcf 	bl	800b57a <HAL_UART_Transmit>
  }

  if (fabsf(fabsf(delta_position)*controller->motor.pole_pairs-(2*M_PI)) > 0.5f) {
 80035dc:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80035e0:	eeb0 7ae7 	vabs.f32	s14, s15
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e8:	ee07 3a90 	vmov	s15, r3
 80035ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035f4:	ee17 0a90 	vmov	r0, s15
 80035f8:	f7fc ffce 	bl	8000598 <__aeabi_f2d>
 80035fc:	a330      	add	r3, pc, #192	; (adr r3, 80036c0 <MotorController_runCalibrationSequence+0x4e0>)
 80035fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003602:	f7fc fe69 	bl	80002d8 <__aeabi_dsub>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4610      	mov	r0, r2
 800360c:	4619      	mov	r1, r3
 800360e:	f7fd faf3 	bl	8000bf8 <__aeabi_d2f>
 8003612:	ee07 0a90 	vmov	s15, r0
 8003616:	eef0 7ae7 	vabs.f32	s15, s15
 800361a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800361e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003626:	dd05      	ble.n	8003634 <MotorController_runCalibrationSequence+0x454>
    HAL_UART_Transmit(&huart3, (uint8_t *)"ERROR: motor pole pair mismatch\r\n", strlen("ERROR: motor pole pair mismatch\r\n"), 10);
 8003628:	230a      	movs	r3, #10
 800362a:	2221      	movs	r2, #33	; 0x21
 800362c:	492c      	ldr	r1, [pc, #176]	; (80036e0 <MotorController_runCalibrationSequence+0x500>)
 800362e:	4828      	ldr	r0, [pc, #160]	; (80036d0 <MotorController_runCalibrationSequence+0x4f0>)
 8003630:	f007 ffa3 	bl	800b57a <HAL_UART_Transmit>
  }


  // set electrical angle
  controller->motor.flux_angle_offset = wrapTo2Pi(start_position * controller->motor.pole_pairs);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003640:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	eeb0 0a67 	vmov.f32	s0, s15
 800364c:	f7ff f90c 	bl	8002868 <wrapTo2Pi>
 8003650:	eef0 7a40 	vmov.f32	s15, s0
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58

  {
    char str[128];
    sprintf(str, "offset angle: %f\r\n", controller->motor.flux_angle_offset);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365e:	4618      	mov	r0, r3
 8003660:	f7fc ff9a 	bl	8000598 <__aeabi_f2d>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	f107 000c 	add.w	r0, r7, #12
 800366c:	491d      	ldr	r1, [pc, #116]	; (80036e4 <MotorController_runCalibrationSequence+0x504>)
 800366e:	f009 fa3b 	bl	800cae8 <siprintf>
    HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), 10);
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc fdd2 	bl	8000220 <strlen>
 800367c:	4603      	mov	r3, r0
 800367e:	b29a      	uxth	r2, r3
 8003680:	f107 010c 	add.w	r1, r7, #12
 8003684:	230a      	movs	r3, #10
 8003686:	4812      	ldr	r0, [pc, #72]	; (80036d0 <MotorController_runCalibrationSequence+0x4f0>)
 8003688:	f007 ff77 	bl	800b57a <HAL_UART_Transmit>
  }

  MotorController_storeConfig(controller);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff fb85 	bl	8002d9c <MotorController_storeConfig>

  HAL_Delay(1000);
 8003692:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003696:	f001 fdc7 	bl	8005228 <HAL_Delay>

  MotorController_setMode(controller, MODE_IDLE);
 800369a:	2101      	movs	r1, #1
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7ff fa17 	bl	8002ad0 <MotorController_setMode>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);    // green LED
 80036a2:	2201      	movs	r2, #1
 80036a4:	2110      	movs	r1, #16
 80036a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036aa:	f004 fc39 	bl	8007f20 <HAL_GPIO_WritePin>
}
 80036ae:	bf00      	nop
 80036b0:	37b0      	adds	r7, #176	; 0xb0
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bdb0      	pop	{r4, r5, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	9999999a 	.word	0x9999999a
 80036bc:	3fb99999 	.word	0x3fb99999
 80036c0:	54442d18 	.word	0x54442d18
 80036c4:	401921fb 	.word	0x401921fb
 80036c8:	3fe00000 	.word	0x3fe00000
 80036cc:	0800fd9c 	.word	0x0800fd9c
 80036d0:	200006cc 	.word	0x200006cc
 80036d4:	0800fdb8 	.word	0x0800fdb8
 80036d8:	0800fdd0 	.word	0x0800fdd0
 80036dc:	0800fde4 	.word	0x0800fde4
 80036e0:	0800fe00 	.word	0x0800fe00
 80036e4:	0800fe24 	.word	0x0800fe24

080036e8 <MotorController_handleCANMessage>:

void MotorController_handleCANMessage(MotorController *controller, CAN_Frame *rx_frame) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	6039      	str	r1, [r7, #0]
  uint16_t device_id = (rx_frame->id) & 0b1111;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	83fb      	strh	r3, [r7, #30]
  if (device_id && device_id != controller->device_id) {
 80036fe:	8bfb      	ldrh	r3, [r7, #30]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d007      	beq.n	8003714 <MotorController_handleCANMessage+0x2c>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800370a:	b29b      	uxth	r3, r3
 800370c:	8bfa      	ldrh	r2, [r7, #30]
 800370e:	429a      	cmp	r2, r3
 8003710:	f040 85c6 	bne.w	80042a0 <MotorController_handleCANMessage+0xbb8>
    return;
  }

  uint16_t func_id = (rx_frame->id) >> 4;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	83bb      	strh	r3, [r7, #28]
  uint8_t is_get_request = rx_frame->frame_type == CAN_FRAME_REMOTE || rx_frame->size == 0;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	795b      	ldrb	r3, [r3, #5]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d003      	beq.n	800372c <MotorController_handleCANMessage+0x44>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	88db      	ldrh	r3, [r3, #6]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <MotorController_handleCANMessage+0x48>
 800372c:	2301      	movs	r3, #1
 800372e:	e000      	b.n	8003732 <MotorController_handleCANMessage+0x4a>
 8003730:	2300      	movs	r3, #0
 8003732:	76fb      	strb	r3, [r7, #27]

  if (is_get_request) {
 8003734:	7efb      	ldrb	r3, [r7, #27]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 83b9 	beq.w	8003eae <MotorController_handleCANMessage+0x7c6>
    CAN_Frame tx_frame;

    tx_frame.id = rx_frame->id;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	60bb      	str	r3, [r7, #8]
    tx_frame.id_type = CAN_ID_STANDARD;
 8003742:	2300      	movs	r3, #0
 8003744:	733b      	strb	r3, [r7, #12]
    tx_frame.frame_type = CAN_FRAME_DATA;
 8003746:	2301      	movs	r3, #1
 8003748:	737b      	strb	r3, [r7, #13]
    tx_frame.size = 8;
 800374a:	2308      	movs	r3, #8
 800374c:	81fb      	strh	r3, [r7, #14]

    switch (func_id) {
 800374e:	8bbb      	ldrh	r3, [r7, #28]
 8003750:	2b7f      	cmp	r3, #127	; 0x7f
 8003752:	f200 83a5 	bhi.w	8003ea0 <MotorController_handleCANMessage+0x7b8>
 8003756:	a201      	add	r2, pc, #4	; (adr r2, 800375c <MotorController_handleCANMessage+0x74>)
 8003758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375c:	0800395d 	.word	0x0800395d
 8003760:	0800396f 	.word	0x0800396f
 8003764:	0800397d 	.word	0x0800397d
 8003768:	0800398d 	.word	0x0800398d
 800376c:	08003ea1 	.word	0x08003ea1
 8003770:	08003ea1 	.word	0x08003ea1
 8003774:	080039a9 	.word	0x080039a9
 8003778:	08003ea1 	.word	0x08003ea1
 800377c:	08003ea1 	.word	0x08003ea1
 8003780:	08003ea1 	.word	0x08003ea1
 8003784:	08003ea1 	.word	0x08003ea1
 8003788:	08003ea1 	.word	0x08003ea1
 800378c:	08003ea1 	.word	0x08003ea1
 8003790:	08003ea1 	.word	0x08003ea1
 8003794:	08003ea1 	.word	0x08003ea1
 8003798:	08003ea1 	.word	0x08003ea1
 800379c:	080039b9 	.word	0x080039b9
 80037a0:	080039cb 	.word	0x080039cb
 80037a4:	080039dd 	.word	0x080039dd
 80037a8:	080039ef 	.word	0x080039ef
 80037ac:	08003a0b 	.word	0x08003a0b
 80037b0:	08003a1d 	.word	0x08003a1d
 80037b4:	08003a2f 	.word	0x08003a2f
 80037b8:	08003a41 	.word	0x08003a41
 80037bc:	08003ea1 	.word	0x08003ea1
 80037c0:	08003ea1 	.word	0x08003ea1
 80037c4:	08003ea1 	.word	0x08003ea1
 80037c8:	08003ea1 	.word	0x08003ea1
 80037cc:	08003ea1 	.word	0x08003ea1
 80037d0:	08003ea1 	.word	0x08003ea1
 80037d4:	08003ea1 	.word	0x08003ea1
 80037d8:	08003ea1 	.word	0x08003ea1
 80037dc:	08003a53 	.word	0x08003a53
 80037e0:	08003a73 	.word	0x08003a73
 80037e4:	08003aa7 	.word	0x08003aa7
 80037e8:	08003adb 	.word	0x08003adb
 80037ec:	08003ea1 	.word	0x08003ea1
 80037f0:	08003ea1 	.word	0x08003ea1
 80037f4:	08003ea1 	.word	0x08003ea1
 80037f8:	08003ea1 	.word	0x08003ea1
 80037fc:	08003ea1 	.word	0x08003ea1
 8003800:	08003ea1 	.word	0x08003ea1
 8003804:	08003ea1 	.word	0x08003ea1
 8003808:	08003ea1 	.word	0x08003ea1
 800380c:	08003ea1 	.word	0x08003ea1
 8003810:	08003ea1 	.word	0x08003ea1
 8003814:	08003ea1 	.word	0x08003ea1
 8003818:	08003ea1 	.word	0x08003ea1
 800381c:	08003aed 	.word	0x08003aed
 8003820:	08003aff 	.word	0x08003aff
 8003824:	08003b11 	.word	0x08003b11
 8003828:	08003ea1 	.word	0x08003ea1
 800382c:	08003ea1 	.word	0x08003ea1
 8003830:	08003ea1 	.word	0x08003ea1
 8003834:	08003ea1 	.word	0x08003ea1
 8003838:	08003ea1 	.word	0x08003ea1
 800383c:	08003ea1 	.word	0x08003ea1
 8003840:	08003ea1 	.word	0x08003ea1
 8003844:	08003ea1 	.word	0x08003ea1
 8003848:	08003ea1 	.word	0x08003ea1
 800384c:	08003ea1 	.word	0x08003ea1
 8003850:	08003ea1 	.word	0x08003ea1
 8003854:	08003ea1 	.word	0x08003ea1
 8003858:	08003ea1 	.word	0x08003ea1
 800385c:	08003b23 	.word	0x08003b23
 8003860:	08003b35 	.word	0x08003b35
 8003864:	08003b55 	.word	0x08003b55
 8003868:	08003b75 	.word	0x08003b75
 800386c:	08003b95 	.word	0x08003b95
 8003870:	08003bb7 	.word	0x08003bb7
 8003874:	08003bd9 	.word	0x08003bd9
 8003878:	08003bfd 	.word	0x08003bfd
 800387c:	08003c11 	.word	0x08003c11
 8003880:	08003c35 	.word	0x08003c35
 8003884:	08003c59 	.word	0x08003c59
 8003888:	08003c7d 	.word	0x08003c7d
 800388c:	08003ca1 	.word	0x08003ca1
 8003890:	08003cc5 	.word	0x08003cc5
 8003894:	08003ce9 	.word	0x08003ce9
 8003898:	08003d0d 	.word	0x08003d0d
 800389c:	08003d31 	.word	0x08003d31
 80038a0:	08003ea1 	.word	0x08003ea1
 80038a4:	08003ea1 	.word	0x08003ea1
 80038a8:	08003ea1 	.word	0x08003ea1
 80038ac:	08003ea1 	.word	0x08003ea1
 80038b0:	08003ea1 	.word	0x08003ea1
 80038b4:	08003ea1 	.word	0x08003ea1
 80038b8:	08003ea1 	.word	0x08003ea1
 80038bc:	08003ea1 	.word	0x08003ea1
 80038c0:	08003ea1 	.word	0x08003ea1
 80038c4:	08003ea1 	.word	0x08003ea1
 80038c8:	08003ea1 	.word	0x08003ea1
 80038cc:	08003ea1 	.word	0x08003ea1
 80038d0:	08003ea1 	.word	0x08003ea1
 80038d4:	08003ea1 	.word	0x08003ea1
 80038d8:	08003ea1 	.word	0x08003ea1
 80038dc:	08003d55 	.word	0x08003d55
 80038e0:	08003d79 	.word	0x08003d79
 80038e4:	08003d8d 	.word	0x08003d8d
 80038e8:	08003db1 	.word	0x08003db1
 80038ec:	08003dd5 	.word	0x08003dd5
 80038f0:	08003df9 	.word	0x08003df9
 80038f4:	08003e1d 	.word	0x08003e1d
 80038f8:	08003e31 	.word	0x08003e31
 80038fc:	08003e55 	.word	0x08003e55
 8003900:	08003e69 	.word	0x08003e69
 8003904:	08003e8d 	.word	0x08003e8d
 8003908:	08003ea1 	.word	0x08003ea1
 800390c:	08003ea1 	.word	0x08003ea1
 8003910:	08003ea1 	.word	0x08003ea1
 8003914:	08003ea1 	.word	0x08003ea1
 8003918:	08003ea1 	.word	0x08003ea1
 800391c:	08003ea1 	.word	0x08003ea1
 8003920:	08003ea1 	.word	0x08003ea1
 8003924:	08003ea1 	.word	0x08003ea1
 8003928:	08003ea1 	.word	0x08003ea1
 800392c:	08003ea1 	.word	0x08003ea1
 8003930:	08003ea1 	.word	0x08003ea1
 8003934:	08003ea1 	.word	0x08003ea1
 8003938:	08003ea1 	.word	0x08003ea1
 800393c:	08003ea1 	.word	0x08003ea1
 8003940:	08003ea1 	.word	0x08003ea1
 8003944:	08003ea1 	.word	0x08003ea1
 8003948:	08003ea1 	.word	0x08003ea1
 800394c:	08003ea1 	.word	0x08003ea1
 8003950:	08003ea1 	.word	0x08003ea1
 8003954:	08003ea1 	.word	0x08003ea1
 8003958:	0800399b 	.word	0x0800399b
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 800395c:	2100      	movs	r1, #0
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff f8b6 	bl	8002ad0 <MotorController_setMode>
        tx_frame.size = 1;
 8003964:	2301      	movs	r3, #1
 8003966:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = 0xAC;
 8003968:	23ac      	movs	r3, #172	; 0xac
 800396a:	743b      	strb	r3, [r7, #16]
        break;
 800396c:	e298      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ID:
        tx_frame.size = 1;
 800396e:	2301      	movs	r3, #1
 8003970:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8003978:	743b      	strb	r3, [r7, #16]
        break;
 800397a:	e291      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_VERSION:
        tx_frame.size = 1;
 800397c:	2301      	movs	r3, #1
 800397e:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->firmware_version;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003986:	b2db      	uxtb	r3, r3
 8003988:	743b      	strb	r3, [r7, #16]
        break;
 800398a:	e289      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_SAFETY:
        tx_frame.size = 1;
 800398c:	2301      	movs	r3, #1
 800398e:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->error;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 3125 	ldrb.w	r3, [r3, #293]	; 0x125
 8003996:	743b      	strb	r3, [r7, #16]
        break;
 8003998:	e282      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_PING:
        tx_frame.size = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = controller->device_id;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 80039a4:	743b      	strb	r3, [r7, #16]
        break;
 80039a6:	e27b      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_MODE:
        tx_frame.size = 1;
 80039a8:	2301      	movs	r3, #1
 80039aa:	81fb      	strh	r3, [r7, #14]
        *((uint8_t *)tx_frame.data) = MotorController_getMode(controller);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff f881 	bl	8002ab4 <MotorController_getMode>
 80039b2:	4603      	mov	r3, r0
 80039b4:	743b      	strb	r3, [r7, #16]
        break;
 80039b6:	e273      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_CPR:
        tx_frame.size = 4;
 80039b8:	2304      	movs	r3, #4
 80039ba:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->encoder.cpr;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	f107 0308 	add.w	r3, r7, #8
 80039c4:	3308      	adds	r3, #8
 80039c6:	601a      	str	r2, [r3, #0]
        break;
 80039c8:	e26a      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        tx_frame.size = 4;
 80039ca:	2304      	movs	r3, #4
 80039cc:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_offset;
 80039ce:	f107 0308 	add.w	r3, r7, #8
 80039d2:	3308      	adds	r3, #8
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6912      	ldr	r2, [r2, #16]
 80039d8:	601a      	str	r2, [r3, #0]
        break;
 80039da:	e261      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_VELOCITY_FILTER_ALPHA:
        tx_frame.size = 4;
 80039dc:	2304      	movs	r3, #4
 80039de:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity_filter_alpha;
 80039e0:	f107 0308 	add.w	r3, r7, #8
 80039e4:	3308      	adds	r3, #8
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6952      	ldr	r2, [r2, #20]
 80039ea:	601a      	str	r2, [r3, #0]
        break;
 80039ec:	e258      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_N_ROTATIONS:
        tx_frame.size = 4;
 80039ee:	2304      	movs	r3, #4
 80039f0:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.n_rotations;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	f107 0308 	add.w	r3, r7, #8
 80039fa:	3308      	adds	r3, #8
 80039fc:	ee07 2a90 	vmov	s15, r2
 8003a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a04:	edc3 7a00 	vstr	s15, [r3]
        break;
 8003a08:	e24a      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_POSITION_RELATIVE:
        tx_frame.size = 4;
 8003a0a:	2304      	movs	r3, #4
 8003a0c:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_relative;
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	3308      	adds	r3, #8
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	69d2      	ldr	r2, [r2, #28]
 8003a18:	601a      	str	r2, [r3, #0]
        break;
 8003a1a:	e241      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_POSITION_RAW:
        tx_frame.size = 4;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position_raw;
 8003a20:	f107 0308 	add.w	r3, r7, #8
 8003a24:	3308      	adds	r3, #8
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6a12      	ldr	r2, [r2, #32]
 8003a2a:	601a      	str	r2, [r3, #0]
        break;
 8003a2c:	e238      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_POSITION:
        tx_frame.size = 4;
 8003a2e:	2304      	movs	r3, #4
 8003a30:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.position;
 8003a32:	f107 0308 	add.w	r3, r7, #8
 8003a36:	3308      	adds	r3, #8
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a3c:	601a      	str	r2, [r3, #0]
        break;
 8003a3e:	e22f      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_ENCODER_VELOCITY:
        tx_frame.size = 4;
 8003a40:	2304      	movs	r3, #4
 8003a42:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->encoder.velocity;
 8003a44:	f107 0308 	add.w	r3, r7, #8
 8003a48:	3308      	adds	r3, #8
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003a4e:	601a      	str	r2, [r3, #0]
        break;
 8003a50:	e226      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        tx_frame.size = 8;
 8003a52:	2308      	movs	r3, #8
 8003a54:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.undervoltage_threshold;
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a60:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->powerstage.overvoltage_threshold;
 8003a62:	f107 0308 	add.w	r3, r7, #8
 8003a66:	3308      	adds	r3, #8
 8003a68:	3304      	adds	r3, #4
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a6e:	601a      	str	r2, [r3, #0]
        break;
 8003a70:	e216      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POWERSTAGE_ADC_READING_RAW_A_B_C:
        tx_frame.size = 6;
 8003a72:	2306      	movs	r3, #6
 8003a74:	81fb      	strh	r3, [r7, #14]
        *((uint16_t *)tx_frame.data) = controller->powerstage.adc_reading_raw[0];
 8003a76:	f107 0308 	add.w	r3, r7, #8
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8003a82:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_raw[1];
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	3308      	adds	r3, #8
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	f8b2 2042 	ldrh.w	r2, [r2, #66]	; 0x42
 8003a92:	801a      	strh	r2, [r3, #0]
        *((uint16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_raw[2];
 8003a94:	f107 0308 	add.w	r3, r7, #8
 8003a98:	3308      	adds	r3, #8
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 8003aa2:	801a      	strh	r2, [r3, #0]
        break;
 8003aa4:	e1fc      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POWERSTAGE_ADC_READING_OFFSET_A_B_C:
        tx_frame.size = 6;
 8003aa6:	2306      	movs	r3, #6
 8003aa8:	81fb      	strh	r3, [r7, #14]
        *((int16_t *)tx_frame.data) = controller->powerstage.adc_reading_offset[0];
 8003aaa:	f107 0308 	add.w	r3, r7, #8
 8003aae:	3308      	adds	r3, #8
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 8003ab6:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 1) = controller->powerstage.adc_reading_offset[1];
 8003ab8:	f107 0308 	add.w	r3, r7, #8
 8003abc:	3308      	adds	r3, #8
 8003abe:	3302      	adds	r3, #2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	f9b2 2048 	ldrsh.w	r2, [r2, #72]	; 0x48
 8003ac6:	801a      	strh	r2, [r3, #0]
        *((int16_t *)tx_frame.data + 2) = controller->powerstage.adc_reading_offset[2];
 8003ac8:	f107 0308 	add.w	r3, r7, #8
 8003acc:	3308      	adds	r3, #8
 8003ace:	3304      	adds	r3, #4
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	f9b2 204a 	ldrsh.w	r2, [r2, #74]	; 0x4a
 8003ad6:	801a      	strh	r2, [r3, #0]
        break;
 8003ad8:	e1e2      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POWERSTAGE_BUS_VOLTAGE:
        tx_frame.size = 4;
 8003ada:	2304      	movs	r3, #4
 8003adc:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->powerstage.bus_voltage_measured;
 8003ade:	f107 0308 	add.w	r3, r7, #8
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003ae8:	601a      	str	r2, [r3, #0]
        break;
 8003aea:	e1d9      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_MOTOR_POLE_PAIRS:
        tx_frame.size = 4;
 8003aec:	2304      	movs	r3, #4
 8003aee:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.pole_pairs;
 8003af0:	f107 0308 	add.w	r3, r7, #8
 8003af4:	3308      	adds	r3, #8
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003afa:	601a      	str	r2, [r3, #0]
        break;
 8003afc:	e1d0      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_MOTOR_KV_RATING:
        tx_frame.size = 4;
 8003afe:	2304      	movs	r3, #4
 8003b00:	81fb      	strh	r3, [r7, #14]
        *((uint32_t *)tx_frame.data) = controller->motor.kv_rating;
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	3308      	adds	r3, #8
 8003b08:	687a      	ldr	r2, [r7, #4]
 8003b0a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003b0c:	601a      	str	r2, [r3, #0]
        break;
 8003b0e:	e1c7      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_MOTOR_FLUX_ANGLE_OFFSET:
        tx_frame.size = 4;
 8003b10:	2304      	movs	r3, #4
 8003b12:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->motor.flux_angle_offset;
 8003b14:	f107 0308 	add.w	r3, r7, #8
 8003b18:	3308      	adds	r3, #8
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003b1e:	601a      	str	r2, [r3, #0]
        break;
 8003b20:	e1be      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        tx_frame.size = 4;
 8003b22:	2304      	movs	r3, #4
 8003b24:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.current_filter_alpha;
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003b30:	601a      	str	r2, [r3, #0]
        break;
 8003b32:	e1b5      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        tx_frame.size = 8;
 8003b34:	2308      	movs	r3, #8
 8003b36:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_kp;
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8003b42:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_ki;
 8003b44:	f107 0308 	add.w	r3, r7, #8
 8003b48:	3308      	adds	r3, #8
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8003b50:	601a      	str	r2, [r3, #0]
        break;
 8003b52:	e1a5      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        tx_frame.size = 8;
 8003b54:	2308      	movs	r3, #8
 8003b56:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_kp;
 8003b58:	f107 0308 	add.w	r3, r7, #8
 8003b5c:	3308      	adds	r3, #8
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b62:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_ki;
 8003b64:	f107 0308 	add.w	r3, r7, #8
 8003b68:	3308      	adds	r3, #8
 8003b6a:	3304      	adds	r3, #4
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003b70:	601a      	str	r2, [r3, #0]
        break;
 8003b72:	e195      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_A_TARGET_I_A_MEASURED:
        tx_frame.size = 8;
 8003b74:	2308      	movs	r3, #8
 8003b76:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_target;
 8003b78:	f107 0308 	add.w	r3, r7, #8
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003b82:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_a_measured;
 8003b84:	f107 0308 	add.w	r3, r7, #8
 8003b88:	3308      	adds	r3, #8
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003b90:	601a      	str	r2, [r3, #0]
        break;
 8003b92:	e185      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_B_TARGET_I_B_MEASURED:
        tx_frame.size = 8;
 8003b94:	2308      	movs	r3, #8
 8003b96:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_b_target;
 8003b98:	f107 0308 	add.w	r3, r7, #8
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ba2:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_b_measured;
 8003ba4:	f107 0308 	add.w	r3, r7, #8
 8003ba8:	3308      	adds	r3, #8
 8003baa:	3304      	adds	r3, #4
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003bb2:	601a      	str	r2, [r3, #0]
        break;
 8003bb4:	e174      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_C_TARGET_I_C_MEASURED:
        tx_frame.size = 8;
 8003bb6:	2308      	movs	r3, #8
 8003bb8:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_target;
 8003bba:	f107 0308 	add.w	r3, r7, #8
 8003bbe:	3308      	adds	r3, #8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8003bc4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_c_measured;
 8003bc6:	f107 0308 	add.w	r3, r7, #8
 8003bca:	3308      	adds	r3, #8
 8003bcc:	3304      	adds	r3, #4
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
 8003bd4:	601a      	str	r2, [r3, #0]
        break;
 8003bd6:	e163      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_A_V_B_SETPOINT:
        tx_frame.size = 8;
 8003bd8:	2308      	movs	r3, #8
 8003bda:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_a_setpoint;
 8003bdc:	f107 0308 	add.w	r3, r7, #8
 8003be0:	3308      	adds	r3, #8
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8003be8:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_b_setpoint;
 8003bea:	f107 0308 	add.w	r3, r7, #8
 8003bee:	3308      	adds	r3, #8
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8003bf8:	601a      	str	r2, [r3, #0]
        break;
 8003bfa:	e151      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_C_SETPOINT:
        tx_frame.size = 4;
 8003bfc:	2304      	movs	r3, #4
 8003bfe:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_c_setpoint;
 8003c00:	f107 0308 	add.w	r3, r7, #8
 8003c04:	3308      	adds	r3, #8
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8003c0c:	601a      	str	r2, [r3, #0]
        break;
 8003c0e:	e147      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_TARGET_I_ALPHA_MEASURED:
        tx_frame.size = 8;
 8003c10:	2308      	movs	r3, #8
 8003c12:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_target;
 8003c14:	f107 0308 	add.w	r3, r7, #8
 8003c18:	3308      	adds	r3, #8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
 8003c20:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_alpha_measured;
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	3308      	adds	r3, #8
 8003c28:	3304      	adds	r3, #4
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 8003c30:	601a      	str	r2, [r3, #0]
        break;
 8003c32:	e135      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_BETA_TARGET_I_BETA_MEASURED:
        tx_frame.size = 8;
 8003c34:	2308      	movs	r3, #8
 8003c36:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_beta_target;
 8003c38:	f107 0308 	add.w	r3, r7, #8
 8003c3c:	3308      	adds	r3, #8
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	f8d2 2098 	ldr.w	r2, [r2, #152]	; 0x98
 8003c44:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_beta_measured;
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	3308      	adds	r3, #8
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	f8d2 20a0 	ldr.w	r2, [r2, #160]	; 0xa0
 8003c54:	601a      	str	r2, [r3, #0]
        break;
 8003c56:	e123      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_V_BETA_SETPOINT:
        tx_frame.size = 8;
 8003c58:	2308      	movs	r3, #8
 8003c5a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_alpha_setpoint;
 8003c5c:	f107 0308 	add.w	r3, r7, #8
 8003c60:	3308      	adds	r3, #8
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	f8d2 20a4 	ldr.w	r2, [r2, #164]	; 0xa4
 8003c68:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_beta_setpoint;
 8003c6a:	f107 0308 	add.w	r3, r7, #8
 8003c6e:	3308      	adds	r3, #8
 8003c70:	3304      	adds	r3, #4
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	f8d2 20a8 	ldr.w	r2, [r2, #168]	; 0xa8
 8003c78:	601a      	str	r2, [r3, #0]
        break;
 8003c7a:	e111      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_TARGET:
        tx_frame.size = 8;
 8003c7c:	2308      	movs	r3, #8
 8003c7e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_target;
 8003c80:	f107 0308 	add.w	r3, r7, #8
 8003c84:	3308      	adds	r3, #8
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	f8d2 20ac 	ldr.w	r2, [r2, #172]	; 0xac
 8003c8c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_target;
 8003c8e:	f107 0308 	add.w	r3, r7, #8
 8003c92:	3308      	adds	r3, #8
 8003c94:	3304      	adds	r3, #4
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	f8d2 20b0 	ldr.w	r2, [r2, #176]	; 0xb0
 8003c9c:	601a      	str	r2, [r3, #0]
        break;
 8003c9e:	e0ff      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_SETPOINT:
        tx_frame.size = 8;
 8003ca0:	2308      	movs	r3, #8
 8003ca2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.v_q_setpoint;
 8003ca4:	f107 0308 	add.w	r3, r7, #8
 8003ca8:	3308      	adds	r3, #8
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	f8d2 20b4 	ldr.w	r2, [r2, #180]	; 0xb4
 8003cb0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.v_d_setpoint;
 8003cb2:	f107 0308 	add.w	r3, r7, #8
 8003cb6:	3308      	adds	r3, #8
 8003cb8:	3304      	adds	r3, #4
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
 8003cc0:	601a      	str	r2, [r3, #0]
        break;
 8003cc2:	e0ed      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_TARGET_MEASURED:
        tx_frame.size = 8;
 8003cc4:	2308      	movs	r3, #8
 8003cc6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_target;
 8003cc8:	f107 0308 	add.w	r3, r7, #8
 8003ccc:	3308      	adds	r3, #8
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	f8d2 20bc 	ldr.w	r2, [r2, #188]	; 0xbc
 8003cd4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_q_measured;
 8003cd6:	f107 0308 	add.w	r3, r7, #8
 8003cda:	3308      	adds	r3, #8
 8003cdc:	3304      	adds	r3, #4
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	f8d2 20c4 	ldr.w	r2, [r2, #196]	; 0xc4
 8003ce4:	601a      	str	r2, [r3, #0]
        break;
 8003ce6:	e0db      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_I_D_TARGET_MEASURED:
        tx_frame.size = 8;
 8003ce8:	2308      	movs	r3, #8
 8003cea:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_d_target;
 8003cec:	f107 0308 	add.w	r3, r7, #8
 8003cf0:	3308      	adds	r3, #8
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	f8d2 20c0 	ldr.w	r2, [r2, #192]	; 0xc0
 8003cf8:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_measured;
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	3308      	adds	r3, #8
 8003d00:	3304      	adds	r3, #4
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	f8d2 20c8 	ldr.w	r2, [r2, #200]	; 0xc8
 8003d08:	601a      	str	r2, [r3, #0]
        break;
 8003d0a:	e0c9      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_SETPOINT:
        tx_frame.size = 8;
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_setpoint;
 8003d10:	f107 0308 	add.w	r3, r7, #8
 8003d14:	3308      	adds	r3, #8
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	f8d2 20cc 	ldr.w	r2, [r2, #204]	; 0xcc
 8003d1c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_setpoint;
 8003d1e:	f107 0308 	add.w	r3, r7, #8
 8003d22:	3308      	adds	r3, #8
 8003d24:	3304      	adds	r3, #4
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
 8003d2c:	601a      	str	r2, [r3, #0]
        break;
 8003d2e:	e0b7      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_I_D_INTEGRATOR:
        tx_frame.size = 8;
 8003d30:	2308      	movs	r3, #8
 8003d32:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->current_controller.i_q_integrator;
 8003d34:	f107 0308 	add.w	r3, r7, #8
 8003d38:	3308      	adds	r3, #8
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8003d40:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->current_controller.i_d_integrator;
 8003d42:	f107 0308 	add.w	r3, r7, #8
 8003d46:	3308      	adds	r3, #8
 8003d48:	3304      	adds	r3, #4
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8003d50:	601a      	str	r2, [r3, #0]
        break;
 8003d52:	e0a5      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_KP_KI:
        tx_frame.size = 8;
 8003d54:	2308      	movs	r3, #8
 8003d56:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kp;
 8003d58:	f107 0308 	add.w	r3, r7, #8
 8003d5c:	3308      	adds	r3, #8
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	f8d2 20dc 	ldr.w	r2, [r2, #220]	; 0xdc
 8003d64:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_ki;
 8003d66:	f107 0308 	add.w	r3, r7, #8
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	f8d2 20e0 	ldr.w	r2, [r2, #224]	; 0xe0
 8003d74:	601a      	str	r2, [r3, #0]
        break;
 8003d76:	e093      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_KD:
        tx_frame.size = 4;
 8003d78:	2304      	movs	r3, #4
 8003d7a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_kd;
 8003d7c:	f107 0308 	add.w	r3, r7, #8
 8003d80:	3308      	adds	r3, #8
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 8003d88:	601a      	str	r2, [r3, #0]
        break;
 8003d8a:	e089      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        tx_frame.size = 8;
 8003d8c:	2308      	movs	r3, #8
 8003d8e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_limit_lower;
 8003d90:	f107 0308 	add.w	r3, r7, #8
 8003d94:	3308      	adds	r3, #8
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8003d9c:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_limit_upper;
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	3308      	adds	r3, #8
 8003da4:	3304      	adds	r3, #4
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	f8d2 20e8 	ldr.w	r2, [r2, #232]	; 0xe8
 8003dac:	601a      	str	r2, [r3, #0]
        break;
 8003dae:	e077      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        tx_frame.size = 8;
 8003db0:	2308      	movs	r3, #8
 8003db2:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_limit_lower;
 8003db4:	f107 0308 	add.w	r3, r7, #8
 8003db8:	3308      	adds	r3, #8
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	f8d2 20f4 	ldr.w	r2, [r2, #244]	; 0xf4
 8003dc0:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_limit_upper;
 8003dc2:	f107 0308 	add.w	r3, r7, #8
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	3304      	adds	r3, #4
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	f8d2 20f0 	ldr.w	r2, [r2, #240]	; 0xf0
 8003dd0:	601a      	str	r2, [r3, #0]
        break;
 8003dd2:	e065      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        tx_frame.size = 8;
 8003dd4:	2308      	movs	r3, #8
 8003dd6:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_limit_lower;
 8003dd8:	f107 0308 	add.w	r3, r7, #8
 8003ddc:	3308      	adds	r3, #8
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
 8003de4:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_limit_upper;
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	3308      	adds	r3, #8
 8003dec:	3304      	adds	r3, #4
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
 8003df4:	601a      	str	r2, [r3, #0]
        break;
 8003df6:	e053      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        tx_frame.size = 8;
 8003df8:	2308      	movs	r3, #8
 8003dfa:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_target;
 8003dfc:	f107 0308 	add.w	r3, r7, #8
 8003e00:	3308      	adds	r3, #8
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
 8003e08:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.torque_measured;
 8003e0a:	f107 0308 	add.w	r3, r7, #8
 8003e0e:	3308      	adds	r3, #8
 8003e10:	3304      	adds	r3, #4
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8003e18:	601a      	str	r2, [r3, #0]
        break;
 8003e1a:	e041      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_SETPOINT:
        tx_frame.size = 4;
 8003e1c:	2304      	movs	r3, #4
 8003e1e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.torque_setpoint;
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	3308      	adds	r3, #8
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	f8d2 2108 	ldr.w	r2, [r2, #264]	; 0x108
 8003e2c:	601a      	str	r2, [r3, #0]
        break;
 8003e2e:	e037      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        tx_frame.size = 8;
 8003e30:	2308      	movs	r3, #8
 8003e32:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_target;
 8003e34:	f107 0308 	add.w	r3, r7, #8
 8003e38:	3308      	adds	r3, #8
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
 8003e40:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.velocity_measured;
 8003e42:	f107 0308 	add.w	r3, r7, #8
 8003e46:	3308      	adds	r3, #8
 8003e48:	3304      	adds	r3, #4
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
 8003e50:	601a      	str	r2, [r3, #0]
        break;
 8003e52:	e025      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_SETPOINT:
        tx_frame.size = 4;
 8003e54:	2304      	movs	r3, #4
 8003e56:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.velocity_setpoint;
 8003e58:	f107 0308 	add.w	r3, r7, #8
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	f8d2 2114 	ldr.w	r2, [r2, #276]	; 0x114
 8003e64:	601a      	str	r2, [r3, #0]
        break;
 8003e66:	e01b      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        tx_frame.size = 8;
 8003e68:	2308      	movs	r3, #8
 8003e6a:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_target;
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	3308      	adds	r3, #8
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
 8003e78:	601a      	str	r2, [r3, #0]
        *((float *)tx_frame.data + 1) = controller->position_controller.position_measured;
 8003e7a:	f107 0308 	add.w	r3, r7, #8
 8003e7e:	3308      	adds	r3, #8
 8003e80:	3304      	adds	r3, #4
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
 8003e88:	601a      	str	r2, [r3, #0]
        break;
 8003e8a:	e009      	b.n	8003ea0 <MotorController_handleCANMessage+0x7b8>
      case CAN_ID_POSITION_CONTROLLER_POSITION_SETPOINT:
        tx_frame.size = 4;
 8003e8c:	2304      	movs	r3, #4
 8003e8e:	81fb      	strh	r3, [r7, #14]
        *((float *)tx_frame.data) = controller->position_controller.position_setpoint;
 8003e90:	f107 0308 	add.w	r3, r7, #8
 8003e94:	3308      	adds	r3, #8
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	f8d2 2120 	ldr.w	r2, [r2, #288]	; 0x120
 8003e9c:	601a      	str	r2, [r3, #0]
        break;
 8003e9e:	bf00      	nop
    }
    CAN_putTxFrame(&hfdcan1, &tx_frame);
 8003ea0:	f107 0308 	add.w	r3, r7, #8
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	48c4      	ldr	r0, [pc, #784]	; (80041b8 <MotorController_handleCANMessage+0xad0>)
 8003ea8:	f7fd f9e8 	bl	800127c <CAN_putTxFrame>
 8003eac:	e1f9      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
  }
  else {
    switch (func_id) {
 8003eae:	8bbb      	ldrh	r3, [r7, #28]
 8003eb0:	2b7e      	cmp	r3, #126	; 0x7e
 8003eb2:	f200 81f6 	bhi.w	80042a2 <MotorController_handleCANMessage+0xbba>
 8003eb6:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <MotorController_handleCANMessage+0x7d4>)
 8003eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebc:	080040b9 	.word	0x080040b9
 8003ec0:	080040c3 	.word	0x080040c3
 8003ec4:	080042a3 	.word	0x080042a3
 8003ec8:	080042a3 	.word	0x080042a3
 8003ecc:	080040cf 	.word	0x080040cf
 8003ed0:	080042a3 	.word	0x080042a3
 8003ed4:	080040f1 	.word	0x080040f1
 8003ed8:	080042a3 	.word	0x080042a3
 8003edc:	080042a3 	.word	0x080042a3
 8003ee0:	080042a3 	.word	0x080042a3
 8003ee4:	080042a3 	.word	0x080042a3
 8003ee8:	080042a3 	.word	0x080042a3
 8003eec:	080042a3 	.word	0x080042a3
 8003ef0:	080042a3 	.word	0x080042a3
 8003ef4:	080042a3 	.word	0x080042a3
 8003ef8:	080042a3 	.word	0x080042a3
 8003efc:	080040ff 	.word	0x080040ff
 8003f00:	0800410d 	.word	0x0800410d
 8003f04:	08004119 	.word	0x08004119
 8003f08:	080042a3 	.word	0x080042a3
 8003f0c:	080042a3 	.word	0x080042a3
 8003f10:	080042a3 	.word	0x080042a3
 8003f14:	080042a3 	.word	0x080042a3
 8003f18:	080042a3 	.word	0x080042a3
 8003f1c:	080042a3 	.word	0x080042a3
 8003f20:	080042a3 	.word	0x080042a3
 8003f24:	080042a3 	.word	0x080042a3
 8003f28:	080042a3 	.word	0x080042a3
 8003f2c:	080042a3 	.word	0x080042a3
 8003f30:	080042a3 	.word	0x080042a3
 8003f34:	080042a3 	.word	0x080042a3
 8003f38:	080042a3 	.word	0x080042a3
 8003f3c:	08004125 	.word	0x08004125
 8003f40:	080042a3 	.word	0x080042a3
 8003f44:	080042a3 	.word	0x080042a3
 8003f48:	080042a3 	.word	0x080042a3
 8003f4c:	080042a3 	.word	0x080042a3
 8003f50:	080042a3 	.word	0x080042a3
 8003f54:	080042a3 	.word	0x080042a3
 8003f58:	080042a3 	.word	0x080042a3
 8003f5c:	080042a3 	.word	0x080042a3
 8003f60:	080042a3 	.word	0x080042a3
 8003f64:	080042a3 	.word	0x080042a3
 8003f68:	080042a3 	.word	0x080042a3
 8003f6c:	080042a3 	.word	0x080042a3
 8003f70:	080042a3 	.word	0x080042a3
 8003f74:	080042a3 	.word	0x080042a3
 8003f78:	080042a3 	.word	0x080042a3
 8003f7c:	080042a3 	.word	0x080042a3
 8003f80:	080042a3 	.word	0x080042a3
 8003f84:	080042a3 	.word	0x080042a3
 8003f88:	080042a3 	.word	0x080042a3
 8003f8c:	080042a3 	.word	0x080042a3
 8003f90:	080042a3 	.word	0x080042a3
 8003f94:	080042a3 	.word	0x080042a3
 8003f98:	080042a3 	.word	0x080042a3
 8003f9c:	080042a3 	.word	0x080042a3
 8003fa0:	080042a3 	.word	0x080042a3
 8003fa4:	080042a3 	.word	0x080042a3
 8003fa8:	080042a3 	.word	0x080042a3
 8003fac:	080042a3 	.word	0x080042a3
 8003fb0:	080042a3 	.word	0x080042a3
 8003fb4:	080042a3 	.word	0x080042a3
 8003fb8:	080042a3 	.word	0x080042a3
 8003fbc:	0800413d 	.word	0x0800413d
 8003fc0:	08004149 	.word	0x08004149
 8003fc4:	08004161 	.word	0x08004161
 8003fc8:	08004179 	.word	0x08004179
 8003fcc:	08004185 	.word	0x08004185
 8003fd0:	08004191 	.word	0x08004191
 8003fd4:	080042a3 	.word	0x080042a3
 8003fd8:	080042a3 	.word	0x080042a3
 8003fdc:	0800419d 	.word	0x0800419d
 8003fe0:	080041ab 	.word	0x080041ab
 8003fe4:	080042a3 	.word	0x080042a3
 8003fe8:	080041c1 	.word	0x080041c1
 8003fec:	080042a3 	.word	0x080042a3
 8003ff0:	080041dd 	.word	0x080041dd
 8003ff4:	080041eb 	.word	0x080041eb
 8003ff8:	080042a3 	.word	0x080042a3
 8003ffc:	080042a3 	.word	0x080042a3
 8004000:	080042a3 	.word	0x080042a3
 8004004:	080042a3 	.word	0x080042a3
 8004008:	080042a3 	.word	0x080042a3
 800400c:	080042a3 	.word	0x080042a3
 8004010:	080042a3 	.word	0x080042a3
 8004014:	080042a3 	.word	0x080042a3
 8004018:	080042a3 	.word	0x080042a3
 800401c:	080042a3 	.word	0x080042a3
 8004020:	080042a3 	.word	0x080042a3
 8004024:	080042a3 	.word	0x080042a3
 8004028:	080042a3 	.word	0x080042a3
 800402c:	080042a3 	.word	0x080042a3
 8004030:	080042a3 	.word	0x080042a3
 8004034:	080042a3 	.word	0x080042a3
 8004038:	080042a3 	.word	0x080042a3
 800403c:	080041f9 	.word	0x080041f9
 8004040:	08004215 	.word	0x08004215
 8004044:	08004223 	.word	0x08004223
 8004048:	0800423f 	.word	0x0800423f
 800404c:	0800425b 	.word	0x0800425b
 8004050:	08004277 	.word	0x08004277
 8004054:	080042a3 	.word	0x080042a3
 8004058:	08004285 	.word	0x08004285
 800405c:	080042a3 	.word	0x080042a3
 8004060:	08004293 	.word	0x08004293
 8004064:	080042a3 	.word	0x080042a3
 8004068:	080042a3 	.word	0x080042a3
 800406c:	080042a3 	.word	0x080042a3
 8004070:	080042a3 	.word	0x080042a3
 8004074:	080042a3 	.word	0x080042a3
 8004078:	080042a3 	.word	0x080042a3
 800407c:	080042a3 	.word	0x080042a3
 8004080:	080042a3 	.word	0x080042a3
 8004084:	080042a3 	.word	0x080042a3
 8004088:	080042a3 	.word	0x080042a3
 800408c:	080042a3 	.word	0x080042a3
 8004090:	080042a3 	.word	0x080042a3
 8004094:	080042a3 	.word	0x080042a3
 8004098:	080042a3 	.word	0x080042a3
 800409c:	080042a3 	.word	0x080042a3
 80040a0:	080042a3 	.word	0x080042a3
 80040a4:	080042a3 	.word	0x080042a3
 80040a8:	080042a3 	.word	0x080042a3
 80040ac:	080042a3 	.word	0x080042a3
 80040b0:	080042a3 	.word	0x080042a3
 80040b4:	080040e7 	.word	0x080040e7
      case CAN_ID_ESTOP:
        MotorController_setMode(controller, MODE_DISABLED);
 80040b8:	2100      	movs	r1, #0
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fe fd08 	bl	8002ad0 <MotorController_setMode>
        break;
 80040c0:	e0ef      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_ID:
        controller->device_id = *((uint8_t *)rx_frame->data);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	7a1a      	ldrb	r2, [r3, #8]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
        break;
 80040cc:	e0e9      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_FLASH:
        if (*((uint8_t *)rx_frame->data)) {
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	7a1b      	ldrb	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <MotorController_handleCANMessage+0x9f6>
          MotorController_storeConfig(controller);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f7fe fe60 	bl	8002d9c <MotorController_storeConfig>
        }
        else {
          MotorController_loadConfig(controller);
        }
        break;
 80040dc:	e0e1      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
          MotorController_loadConfig(controller);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7fe fde2 	bl	8002ca8 <MotorController_loadConfig>
        break;
 80040e4:	e0dd      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_HEARTBEAT:
        __HAL_TIM_SET_COUNTER(&htim2, 0);
 80040e6:	4b35      	ldr	r3, [pc, #212]	; (80041bc <MotorController_handleCANMessage+0xad4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2200      	movs	r2, #0
 80040ec:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80040ee:	e0d8      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_MODE:
        MotorController_setMode(controller, (Mode)*((uint8_t *)rx_frame->data));
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	7a1b      	ldrb	r3, [r3, #8]
 80040f4:	4619      	mov	r1, r3
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fe fcea 	bl	8002ad0 <MotorController_setMode>
        break;
 80040fc:	e0d1      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_ENCODER_CPR:
        controller->encoder.cpr = *((uint32_t *)rx_frame->data);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	3308      	adds	r3, #8
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	60da      	str	r2, [r3, #12]
        break;
 800410a:	e0ca      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_ENCODER_POSITION_OFFSET:
        controller->encoder.position_offset = *((float *)rx_frame->data);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	611a      	str	r2, [r3, #16]
        break;
 8004116:	e0c4      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_ENCODER_VELOCITY_FILTER_ALPHA:
        controller->encoder.velocity_filter_alpha = *((float *)rx_frame->data);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	3308      	adds	r3, #8
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	615a      	str	r2, [r3, #20]
        break;
 8004122:	e0be      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POWERSTAGE_VOLTAGE_THREASHOLD:
        controller->powerstage.undervoltage_threshold = *((float *)rx_frame->data);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	3308      	adds	r3, #8
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	639a      	str	r2, [r3, #56]	; 0x38
        controller->powerstage.overvoltage_threshold = *((float *)rx_frame->data + 1);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	3308      	adds	r3, #8
 8004132:	3304      	adds	r3, #4
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 800413a:	e0b2      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_CURRENT_FILTER_ALPHA:
        controller->current_controller.current_filter_alpha = *((float *)rx_frame->data);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	3308      	adds	r3, #8
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8004146:	e0ac      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_KP_KI:
        controller->current_controller.i_q_kp = *((float *)rx_frame->data);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	3308      	adds	r3, #8
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	661a      	str	r2, [r3, #96]	; 0x60
        controller->current_controller.i_q_ki = *((float *)rx_frame->data + 1);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	3308      	adds	r3, #8
 8004156:	3304      	adds	r3, #4
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800415e:	e0a0      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_I_D_KP_KI:
        controller->current_controller.i_d_kp = *((float *)rx_frame->data);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	3308      	adds	r3, #8
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	669a      	str	r2, [r3, #104]	; 0x68
        controller->current_controller.i_d_ki = *((float *)rx_frame->data + 1);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	3308      	adds	r3, #8
 800416e:	3304      	adds	r3, #4
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8004176:	e094      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_V_A_TARGET_I_A_MEASURED:
        controller->current_controller.v_a_target = *((float *)rx_frame->data);
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	3308      	adds	r3, #8
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8004182:	e08e      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_V_B_TARGET_I_B_MEASURED:
        controller->current_controller.v_b_target = *((float *)rx_frame->data);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	3308      	adds	r3, #8
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800418e:	e088      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_V_C_TARGET_I_C_MEASURED:
        controller->current_controller.v_c_target = *((float *)rx_frame->data);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	3308      	adds	r3, #8
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800419a:	e082      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_V_ALPHA_TARGET_I_ALPHA_MEASURED:
        controller->current_controller.v_alpha_target = *((float *)rx_frame->data);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	3308      	adds	r3, #8
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 80041a8:	e07b      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_V_BETA_TARGET_I_BETA_MEASURED:
        controller->current_controller.v_beta_target = *((float *)rx_frame->data);
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80041b6:	e074      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
 80041b8:	20000420 	.word	0x20000420
 80041bc:	200005e8 	.word	0x200005e8
      case CAN_ID_CURRENT_CONTROLLER_V_Q_V_D_TARGET:
        controller->current_controller.v_q_target = *((float *)rx_frame->data);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	3308      	adds	r3, #8
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        controller->current_controller.v_d_target = *((float *)rx_frame->data + 1);
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	3308      	adds	r3, #8
 80041d0:	3304      	adds	r3, #4
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80041da:	e062      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_I_Q_TARGET_MEASURED:
        controller->current_controller.i_q_target = *((float *)rx_frame->data);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	3308      	adds	r3, #8
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 80041e8:	e05b      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_CURRENT_CONTROLLER_I_D_TARGET_MEASURED:
        controller->current_controller.i_d_target = *((float *)rx_frame->data);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 80041f6:	e054      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_KP_KI:
        controller->position_controller.position_kp = *((float *)rx_frame->data);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
        controller->position_controller.position_ki = *((float *)rx_frame->data + 1);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	3304      	adds	r3, #4
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
        break;
 8004212:	e046      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_KD:
        controller->position_controller.position_kd = *((float *)rx_frame->data);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
        break;
 8004220:	e03f      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_LIMIT:
        controller->position_controller.torque_limit_lower = *((float *)rx_frame->data);
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	3308      	adds	r3, #8
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
        controller->position_controller.torque_limit_upper = *((float *)rx_frame->data + 1);
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	3304      	adds	r3, #4
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
        break;
 800423c:	e031      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_LIMIT:
        controller->position_controller.velocity_limit_lower = *((float *)rx_frame->data);
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	3308      	adds	r3, #8
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
        controller->position_controller.velocity_limit_upper = *((float *)rx_frame->data + 1);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	3308      	adds	r3, #8
 800424e:	3304      	adds	r3, #4
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
        break;
 8004258:	e023      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_POSITION_LIMIT:
        controller->position_controller.position_limit_lower = *((float *)rx_frame->data);
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	3308      	adds	r3, #8
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
        controller->position_controller.position_limit_upper = *((float *)rx_frame->data + 1);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	3308      	adds	r3, #8
 800426a:	3304      	adds	r3, #4
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
        break;
 8004274:	e015      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_TORQUE_TARGET_MEASURED:
        controller->position_controller.torque_target = *((float *)rx_frame->data);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	3308      	adds	r3, #8
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        break;
 8004282:	e00e      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_VELOCITY_TARGET_MEASURED:
        controller->position_controller.velocity_target = *((float *)rx_frame->data);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	3308      	adds	r3, #8
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        break;
 8004290:	e007      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
      case CAN_ID_POSITION_CONTROLLER_POSITION_TARGET_MEASURED:
        controller->position_controller.position_target = *((float *)rx_frame->data);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	3308      	adds	r3, #8
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
        break;
 800429e:	e000      	b.n	80042a2 <MotorController_handleCANMessage+0xbba>
    return;
 80042a0:	bf00      	nop
    }
  }
}
 80042a2:	3720      	adds	r7, #32
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <clampf>:
static inline float clampf(float value, float min, float max) {
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	ed87 0a03 	vstr	s0, [r7, #12]
 80042b2:	edc7 0a02 	vstr	s1, [r7, #8]
 80042b6:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 80042ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80042be:	edd7 7a01 	vldr	s15, [r7, #4]
 80042c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ca:	dd01      	ble.n	80042d0 <clampf+0x28>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	e00b      	b.n	80042e8 <clampf+0x40>
 80042d0:	ed97 7a03 	vldr	s14, [r7, #12]
 80042d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e0:	d501      	bpl.n	80042e6 <clampf+0x3e>
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	e000      	b.n	80042e8 <clampf+0x40>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	ee07 3a90 	vmov	s15, r3
}
 80042ec:	eeb0 0a67 	vmov.f32	s0, s15
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <PositionController_init>:
 *      Author: TK
 */

#include "position_controller.h"

void PositionController_init(PositionController *controller) {
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  controller->position_kp = 1;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800430a:	601a      	str	r2, [r3, #0]
  controller->position_ki = 0;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	605a      	str	r2, [r3, #4]
  controller->position_kd = 0;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f04f 0200 	mov.w	r2, #0
 800431a:	609a      	str	r2, [r3, #8]

  controller->torque_limit_lower = -0.1;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a09      	ldr	r2, [pc, #36]	; (8004344 <PositionController_init+0x48>)
 8004320:	611a      	str	r2, [r3, #16]
  controller->torque_limit_upper = 0.1;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a08      	ldr	r2, [pc, #32]	; (8004348 <PositionController_init+0x4c>)
 8004326:	60da      	str	r2, [r3, #12]

  controller->position_limit_lower = -1;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <PositionController_init+0x50>)
 800432c:	621a      	str	r2, [r3, #32]
  controller->position_limit_upper = 1;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004334:	61da      	str	r2, [r3, #28]
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	bdcccccd 	.word	0xbdcccccd
 8004348:	3dcccccd 	.word	0x3dcccccd
 800434c:	bf800000 	.word	0xbf800000

08004350 <PositionController_update>:

void PositionController_update(PositionController *controller) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  //           kp * kp_scale * position_error +
  //           kd * kd_scale * velocity_error +
  //           command_torque

  controller->position_setpoint =
      controller->position_target - controller->position_measured;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004364:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->position_setpoint =
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

  controller->position_setpoint = clampf(
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	ed93 7a08 	vldr	s14, [r3, #32]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	edd3 6a07 	vldr	s13, [r3, #28]
 8004380:	eeb0 1a66 	vmov.f32	s2, s13
 8004384:	eef0 0a47 	vmov.f32	s1, s14
 8004388:	eeb0 0a67 	vmov.f32	s0, s15
 800438c:	f7ff ff8c 	bl	80042a8 <clampf>
 8004390:	eef0 7a40 	vmov.f32	s15, s0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
      controller->position_setpoint,
      controller->position_limit_lower,
      controller->position_limit_upper);

  controller->velocity_setpoint =
      controller->velocity_target - controller->velocity_measured;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80043a6:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->velocity_setpoint =
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

  controller->torque_target =
      controller->position_kp * controller->position_setpoint;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	ed93 7a00 	vldr	s14, [r3]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80043bc:	ee67 7a27 	vmul.f32	s15, s14, s15
  controller->torque_target =
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

  controller->torque_setpoint =
      controller->torque_target - controller->torque_measured;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80043d2:	ee77 7a67 	vsub.f32	s15, s14, s15
  controller->torque_setpoint =
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

  controller->torque_setpoint = clampf(
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	edd3 6a03 	vldr	s13, [r3, #12]
 80043ee:	eeb0 1a66 	vmov.f32	s2, s13
 80043f2:	eef0 0a47 	vmov.f32	s1, s14
 80043f6:	eeb0 0a67 	vmov.f32	s0, s15
 80043fa:	f7ff ff55 	bl	80042a8 <clampf>
 80043fe:	eef0 7a40 	vmov.f32	s15, s0
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
      controller->torque_setpoint,
      controller->torque_limit_lower,
      controller->torque_limit_upper);

}
 8004408:	bf00      	nop
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <clampf>:
static inline float clampf(float value, float min, float max) {
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	ed87 0a03 	vstr	s0, [r7, #12]
 800441a:	edc7 0a02 	vstr	s1, [r7, #8]
 800441e:	ed87 1a01 	vstr	s2, [r7, #4]
  return (value > max) ? max : ((value < min) ? min : value);
 8004422:	ed97 7a03 	vldr	s14, [r7, #12]
 8004426:	edd7 7a01 	vldr	s15, [r7, #4]
 800442a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800442e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004432:	dd01      	ble.n	8004438 <clampf+0x28>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	e00b      	b.n	8004450 <clampf+0x40>
 8004438:	ed97 7a03 	vldr	s14, [r7, #12]
 800443c:	edd7 7a02 	vldr	s15, [r7, #8]
 8004440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	d501      	bpl.n	800444e <clampf+0x3e>
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	e000      	b.n	8004450 <clampf+0x40>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	ee07 3a90 	vmov	s15, r3
}
 8004454:	eeb0 0a67 	vmov.f32	s0, s15
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <PowerStage_init>:
 *      Author: TK
 */

#include "powerstage.h"

void PowerStage_init(PowerStage *powerstage, TIM_HandleTypeDef *htim, ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc2) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
 8004470:	603b      	str	r3, [r7, #0]
  powerstage->htim = htim;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	601a      	str	r2, [r3, #0]
  powerstage->hadc1 = hadc1;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	605a      	str	r2, [r3, #4]
  powerstage->hadc2 = hadc2;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	609a      	str	r2, [r3, #8]

  powerstage->bus_voltage_measured = 12.;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4a04      	ldr	r2, [pc, #16]	; (8004498 <PowerStage_init+0x34>)
 8004488:	621a      	str	r2, [r3, #32]

  PowerStage_disable(powerstage);
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	f000 f838 	bl	8004500 <PowerStage_disable>
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	41400000 	.word	0x41400000

0800449c <PowerStage_start>:

void PowerStage_start(PowerStage *powerstage) {
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start_IT(powerstage->htim);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f005 fc0b 	bl	8009cc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_1);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f005 fcd1 	bl	8009e5c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_1);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f006 fdc9 	bl	800b058 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_2);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2104      	movs	r1, #4
 80044cc:	4618      	mov	r0, r3
 80044ce:	f005 fcc5 	bl	8009e5c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_2);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2104      	movs	r1, #4
 80044d8:	4618      	mov	r0, r3
 80044da:	f006 fdbd 	bl	800b058 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(powerstage->htim, TIM_CHANNEL_3);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2108      	movs	r1, #8
 80044e4:	4618      	mov	r0, r3
 80044e6:	f005 fcb9 	bl	8009e5c <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(powerstage->htim, TIM_CHANNEL_3);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2108      	movs	r1, #8
 80044f0:	4618      	mov	r0, r3
 80044f2:	f006 fdb1 	bl	800b058 <HAL_TIMEx_PWMN_Start>
}
 80044f6:	bf00      	nop
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <PowerStage_disable>:

uint8_t PowerStage_isEnabled(PowerStage *powerstage) {
  return READ_BITS(powerstage->htim->Instance->BDTR, TIM_BDTR_MOE) ? 1 : 0;
}

void PowerStage_disable(PowerStage *powerstage) {
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 0);
 8004508:	2200      	movs	r2, #0
 800450a:	2180      	movs	r1, #128	; 0x80
 800450c:	4808      	ldr	r0, [pc, #32]	; (8004530 <PowerStage_disable+0x30>)
 800450e:	f003 fd07 	bl	8007f20 <HAL_GPIO_WritePin>
  __HAL_TIM_MOE_DISABLE_UNCONDITIONALLY(powerstage->htim);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004524:	645a      	str	r2, [r3, #68]	; 0x44
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	48000400 	.word	0x48000400

08004534 <PowerStage_enable>:

void PowerStage_enable(PowerStage *powerstage) {
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  __HAL_TIM_MOE_ENABLE(powerstage->htim);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800454e:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, 1);
 8004550:	2201      	movs	r2, #1
 8004552:	2180      	movs	r1, #128	; 0x80
 8004554:	4803      	ldr	r0, [pc, #12]	; (8004564 <PowerStage_enable+0x30>)
 8004556:	f003 fce3 	bl	8007f20 <HAL_GPIO_WritePin>
}
 800455a:	bf00      	nop
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	48000400 	.word	0x48000400

08004568 <PowerStage_setBridgeOutput>:

void PowerStage_setBridgeOutput(PowerStage *powerstage, float v_a, float v_b, float v_c) {
 8004568:	b580      	push	{r7, lr}
 800456a:	b086      	sub	sp, #24
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	ed87 0a02 	vstr	s0, [r7, #8]
 8004574:	edc7 0a01 	vstr	s1, [r7, #4]
 8004578:	ed87 1a00 	vstr	s2, [r7]
  v_a = .5f * ((v_a / powerstage->bus_voltage_measured) + 1.f);  // normalize voltage to range 0 ~ 1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004582:	edd7 6a02 	vldr	s13, [r7, #8]
 8004586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800458a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800458e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004592:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800459a:	edc7 7a02 	vstr	s15, [r7, #8]
  v_b = .5f * ((v_b / powerstage->bus_voltage_measured) + 1.f);  // i.e. convert to PWM duty cycle.
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	ed93 7a08 	vldr	s14, [r3, #32]
 80045a4:	edd7 6a01 	vldr	s13, [r7, #4]
 80045a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045bc:	edc7 7a01 	vstr	s15, [r7, #4]
  v_c = .5f * ((v_c / powerstage->bus_voltage_measured) + 1.f);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	ed93 7a08 	vldr	s14, [r3, #32]
 80045c6:	edd7 6a00 	vldr	s13, [r7]
 80045ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80045da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045de:	edc7 7a00 	vstr	s15, [r7]

  v_a = clampf(v_a, 0.02f, 0.98f);  // prevent hi-side switching bootstrap circuit loses voltage
 80045e2:	ed9f 1a33 	vldr	s2, [pc, #204]	; 80046b0 <PowerStage_setBridgeOutput+0x148>
 80045e6:	eddf 0a33 	vldr	s1, [pc, #204]	; 80046b4 <PowerStage_setBridgeOutput+0x14c>
 80045ea:	ed97 0a02 	vldr	s0, [r7, #8]
 80045ee:	f7ff ff0f 	bl	8004410 <clampf>
 80045f2:	ed87 0a02 	vstr	s0, [r7, #8]
  v_b = clampf(v_b, 0.02f, 0.98f);  // and also allow current sampling to be functional
 80045f6:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 80046b0 <PowerStage_setBridgeOutput+0x148>
 80045fa:	eddf 0a2e 	vldr	s1, [pc, #184]	; 80046b4 <PowerStage_setBridgeOutput+0x14c>
 80045fe:	ed97 0a01 	vldr	s0, [r7, #4]
 8004602:	f7ff ff05 	bl	8004410 <clampf>
 8004606:	ed87 0a01 	vstr	s0, [r7, #4]
  v_c = clampf(v_c, 0.02f, 0.98f);
 800460a:	ed9f 1a29 	vldr	s2, [pc, #164]	; 80046b0 <PowerStage_setBridgeOutput+0x148>
 800460e:	eddf 0a29 	vldr	s1, [pc, #164]	; 80046b4 <PowerStage_setBridgeOutput+0x14c>
 8004612:	ed97 0a00 	vldr	s0, [r7]
 8004616:	f7ff fefb 	bl	8004410 <clampf>
 800461a:	ed87 0a00 	vstr	s0, [r7]

  uint16_t ccr_a = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_a);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004626:	3301      	adds	r3, #1
 8004628:	ee07 3a90 	vmov	s15, r3
 800462c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004630:	edd7 7a02 	vldr	s15, [r7, #8]
 8004634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463c:	ee17 3a90 	vmov	r3, s15
 8004640:	82fb      	strh	r3, [r7, #22]
  uint16_t ccr_b = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_b);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	3301      	adds	r3, #1
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004654:	edd7 7a01 	vldr	s15, [r7, #4]
 8004658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800465c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004660:	ee17 3a90 	vmov	r3, s15
 8004664:	82bb      	strh	r3, [r7, #20]
  uint16_t ccr_c = (uint16_t)((float)(__HAL_TIM_GET_AUTORELOAD(powerstage->htim)+1) * v_c);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	3301      	adds	r3, #1
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004678:	edd7 7a00 	vldr	s15, [r7]
 800467c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004684:	ee17 3a90 	vmov	r3, s15
 8004688:	827b      	strh	r3, [r7, #18]

  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_1, ccr_a);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	8afa      	ldrh	r2, [r7, #22]
 8004692:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_2, ccr_b);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	8aba      	ldrh	r2, [r7, #20]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(powerstage->htim, TIM_CHANNEL_3, ccr_c);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	8a7a      	ldrh	r2, [r7, #18]
 80046a6:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80046a8:	bf00      	nop
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	3f7ae148 	.word	0x3f7ae148
 80046b4:	3ca3d70a 	.word	0x3ca3d70a

080046b8 <PowerStage_calibratePhaseCurrentOffset>:


void PowerStage_calibratePhaseCurrentOffset(PowerStage *powerstage) {
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  powerstage->adc_reading_offset[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2109      	movs	r1, #9
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 fa98 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 80046cc:	4603      	mov	r3, r0
 80046ce:	b21a      	sxth	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	835a      	strh	r2, [r3, #26]
  powerstage->adc_reading_offset[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	2109      	movs	r1, #9
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fa8e 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 80046e0:	4603      	mov	r3, r0
 80046e2:	b21a      	sxth	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	839a      	strh	r2, [r3, #28]
  powerstage->adc_reading_offset[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f240 110f 	movw	r1, #271	; 0x10f
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fa83 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 80046f6:	4603      	mov	r3, r0
 80046f8:	b21a      	sxth	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	83da      	strh	r2, [r3, #30]

}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
	...

08004708 <PowerStage_getBusVoltage>:

void PowerStage_getBusVoltage(PowerStage *powerstage) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  powerstage->bus_voltage_measured = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_2) * ADC_BUS_VOLTAGE_COEFFICIENT;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f240 110f 	movw	r1, #271	; 0x10f
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fa6f 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 800471e:	4603      	mov	r3, r0
 8004720:	4618      	mov	r0, r3
 8004722:	f7fb ff17 	bl	8000554 <__aeabi_ui2d>
 8004726:	a30a      	add	r3, pc, #40	; (adr r3, 8004750 <PowerStage_getBusVoltage+0x48>)
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f7fb ff8c 	bl	8000648 <__aeabi_dmul>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4610      	mov	r0, r2
 8004736:	4619      	mov	r1, r3
 8004738:	f7fc fa5e 	bl	8000bf8 <__aeabi_d2f>
 800473c:	4602      	mov	r2, r0
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	621a      	str	r2, [r3, #32]
}
 8004742:	bf00      	nop
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	f3af 8000 	nop.w
 8004750:	99999999 	.word	0x99999999
 8004754:	3f92f999 	.word	0x3f92f999

08004758 <PowerStage_getPhaseCurrent>:

void PowerStage_getPhaseCurrent(PowerStage *powerstage, float *i_a, float *i_b, float *i_c) {
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	607a      	str	r2, [r7, #4]
 8004764:	603b      	str	r3, [r7, #0]
  powerstage->adc_reading_raw[0] = HAL_ADCEx_InjectedGetValue(powerstage->hadc1, ADC_INJECTED_RANK_1);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2109      	movs	r1, #9
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fa45 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 8004772:	4603      	mov	r3, r0
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	829a      	strh	r2, [r3, #20]
  powerstage->adc_reading_raw[1] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_1);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	2109      	movs	r1, #9
 8004780:	4618      	mov	r0, r3
 8004782:	f001 fa3b 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 8004786:	4603      	mov	r3, r0
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	82da      	strh	r2, [r3, #22]
  powerstage->adc_reading_raw[2] = HAL_ADCEx_InjectedGetValue(powerstage->hadc2, ADC_INJECTED_RANK_2);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f240 110f 	movw	r1, #271	; 0x10f
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fa30 	bl	8005bfc <HAL_ADCEx_InjectedGetValue>
 800479c:	4603      	mov	r3, r0
 800479e:	b29a      	uxth	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	831a      	strh	r2, [r3, #24]

  // positive is flow into phase
  // negative is flow out of phase
  *i_a = -(float)(powerstage->adc_reading_raw[0] - powerstage->adc_reading_offset[0]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8a9b      	ldrh	r3, [r3, #20]
 80047a8:	461a      	mov	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047ba:	eef1 7a67 	vneg.f32	s15, s15
 80047be:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004824 <PowerStage_getPhaseCurrent+0xcc>
 80047c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	edc3 7a00 	vstr	s15, [r3]
  *i_b = -(float)(powerstage->adc_reading_raw[1] - powerstage->adc_reading_offset[1]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8adb      	ldrh	r3, [r3, #22]
 80047d0:	461a      	mov	r2, r3
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80047e2:	eef1 7a67 	vneg.f32	s15, s15
 80047e6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004824 <PowerStage_getPhaseCurrent+0xcc>
 80047ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	edc3 7a00 	vstr	s15, [r3]
  *i_c = -(float)(powerstage->adc_reading_raw[2] - powerstage->adc_reading_offset[2]) * ADC_OPAMP_CURRENT_COEFFICIENT;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8b1b      	ldrh	r3, [r3, #24]
 80047f8:	461a      	mov	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800480a:	eef1 7a67 	vneg.f32	s15, s15
 800480e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004824 <PowerStage_getPhaseCurrent+0xcc>
 8004812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	edc3 7a00 	vstr	s15, [r3]
}
 800481c:	bf00      	nop
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	3c898000 	.word	0x3c898000

08004828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_MspInit+0x44>)
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <HAL_MspInit+0x44>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6613      	str	r3, [r2, #96]	; 0x60
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <HAL_MspInit+0x44>)
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_MspInit+0x44>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <HAL_MspInit+0x44>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6593      	str	r3, [r2, #88]	; 0x58
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_MspInit+0x44>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000

08004870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b09c      	sub	sp, #112	; 0x70
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004888:	f107 0318 	add.w	r3, r7, #24
 800488c:	2244      	movs	r2, #68	; 0x44
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f007 fcb7 	bl	800c204 <memset>
  if(hadc->Instance==ADC1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800489e:	d157      	bne.n	8004950 <HAL_ADC_MspInit+0xe0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80048a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80048a6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80048aa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048ac:	f107 0318 	add.w	r3, r7, #24
 80048b0:	4618      	mov	r0, r3
 80048b2:	f004 fa27 	bl	8008d04 <HAL_RCCEx_PeriphCLKConfig>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80048bc:	f7fd ffb8 	bl	8002830 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80048c0:	4b3a      	ldr	r3, [pc, #232]	; (80049ac <HAL_ADC_MspInit+0x13c>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3301      	adds	r3, #1
 80048c6:	4a39      	ldr	r2, [pc, #228]	; (80049ac <HAL_ADC_MspInit+0x13c>)
 80048c8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_ADC_MspInit+0x13c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d10b      	bne.n	80048ea <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80048d2:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	4a36      	ldr	r2, [pc, #216]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 80048d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048de:	4b34      	ldr	r3, [pc, #208]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 80048e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ea:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 80048ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ee:	4a30      	ldr	r2, [pc, #192]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048f6:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004902:	4b2b      	ldr	r3, [pc, #172]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004906:	4a2a      	ldr	r2, [pc, #168]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800490e:	4b28      	ldr	r3, [pc, #160]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 8004910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB1     ------> ADC1_IN12
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800491a:	2301      	movs	r3, #1
 800491c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491e:	2303      	movs	r3, #3
 8004920:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004926:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800492a:	4619      	mov	r1, r3
 800492c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004930:	f003 f95c 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_12;
 8004934:	f241 0302 	movw	r3, #4098	; 0x1002
 8004938:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800493a:	2303      	movs	r3, #3
 800493c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800493e:	2300      	movs	r3, #0
 8004940:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004942:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004946:	4619      	mov	r1, r3
 8004948:	481a      	ldr	r0, [pc, #104]	; (80049b4 <HAL_ADC_MspInit+0x144>)
 800494a:	f003 f94f 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800494e:	e029      	b.n	80049a4 <HAL_ADC_MspInit+0x134>
  else if(hadc->Instance==ADC2)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a18      	ldr	r2, [pc, #96]	; (80049b8 <HAL_ADC_MspInit+0x148>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d124      	bne.n	80049a4 <HAL_ADC_MspInit+0x134>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800495a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800495e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004960:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004964:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004966:	f107 0318 	add.w	r3, r7, #24
 800496a:	4618      	mov	r0, r3
 800496c:	f004 f9ca 	bl	8008d04 <HAL_RCCEx_PeriphCLKConfig>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d001      	beq.n	800497a <HAL_ADC_MspInit+0x10a>
      Error_Handler();
 8004976:	f7fd ff5b 	bl	8002830 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <HAL_ADC_MspInit+0x13c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <HAL_ADC_MspInit+0x13c>)
 8004982:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_ADC_MspInit+0x13c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10b      	bne.n	80049a4 <HAL_ADC_MspInit+0x134>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800498c:	4b08      	ldr	r3, [pc, #32]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 800498e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004990:	4a07      	ldr	r2, [pc, #28]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 8004992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004996:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_ADC_MspInit+0x140>)
 800499a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	68bb      	ldr	r3, [r7, #8]
}
 80049a4:	bf00      	nop
 80049a6:	3770      	adds	r7, #112	; 0x70
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	2000075c 	.word	0x2000075c
 80049b0:	40021000 	.word	0x40021000
 80049b4:	48000400 	.word	0x48000400
 80049b8:	50000100 	.word	0x50000100

080049bc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b09a      	sub	sp, #104	; 0x68
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049d4:	f107 0310 	add.w	r3, r7, #16
 80049d8:	2244      	movs	r2, #68	; 0x44
 80049da:	2100      	movs	r1, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	f007 fc11 	bl	800c204 <memset>
  if(hfdcan->Instance==FDCAN1)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <HAL_FDCAN_MspInit+0xcc>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d149      	bne.n	8004a80 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80049ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80049f0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80049f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049f6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f8:	f107 0310 	add.w	r3, r7, #16
 80049fc:	4618      	mov	r0, r3
 80049fe:	f004 f981 	bl	8008d04 <HAL_RCCEx_PeriphCLKConfig>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004a08:	f7fd ff12 	bl	8002830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a0c:	4b1f      	ldr	r3, [pc, #124]	; (8004a8c <HAL_FDCAN_MspInit+0xd0>)
 8004a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a10:	4a1e      	ldr	r2, [pc, #120]	; (8004a8c <HAL_FDCAN_MspInit+0xd0>)
 8004a12:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004a16:	6593      	str	r3, [r2, #88]	; 0x58
 8004a18:	4b1c      	ldr	r3, [pc, #112]	; (8004a8c <HAL_FDCAN_MspInit+0xd0>)
 8004a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <HAL_FDCAN_MspInit+0xd0>)
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	4a18      	ldr	r2, [pc, #96]	; (8004a8c <HAL_FDCAN_MspInit+0xd0>)
 8004a2a:	f043 0301 	orr.w	r3, r3, #1
 8004a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a30:	4b16      	ldr	r3, [pc, #88]	; (8004a8c <HAL_FDCAN_MspInit+0xd0>)
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	60bb      	str	r3, [r7, #8]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004a3c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004a40:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a42:	2302      	movs	r3, #2
 8004a44:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a4e:	2309      	movs	r3, #9
 8004a50:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a56:	4619      	mov	r1, r3
 8004a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a5c:	f003 f8c6 	bl	8007bec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 4, 0);
 8004a60:	2200      	movs	r2, #0
 8004a62:	2104      	movs	r1, #4
 8004a64:	2015      	movs	r0, #21
 8004a66:	f001 ff60 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004a6a:	2015      	movs	r0, #21
 8004a6c:	f001 ff77 	bl	800695e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 4, 0);
 8004a70:	2200      	movs	r2, #0
 8004a72:	2104      	movs	r1, #4
 8004a74:	2016      	movs	r0, #22
 8004a76:	f001 ff58 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004a7a:	2016      	movs	r0, #22
 8004a7c:	f001 ff6f 	bl	800695e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004a80:	bf00      	nop
 8004a82:	3768      	adds	r7, #104	; 0x68
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40006400 	.word	0x40006400
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08a      	sub	sp, #40	; 0x28
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a98:	f107 0314 	add.w	r3, r7, #20
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a2e      	ldr	r2, [pc, #184]	; (8004b68 <HAL_OPAMP_MspInit+0xd8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d119      	bne.n	8004ae6 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ab2:	4b2e      	ldr	r3, [pc, #184]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab6:	4a2d      	ldr	r2, [pc, #180]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004abe:	4b2b      	ldr	r3, [pc, #172]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004aca:	230a      	movs	r3, #10
 8004acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ad6:	f107 0314 	add.w	r3, r7, #20
 8004ada:	4619      	mov	r1, r3
 8004adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ae0:	f003 f884 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004ae4:	e03b      	b.n	8004b5e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a21      	ldr	r2, [pc, #132]	; (8004b70 <HAL_OPAMP_MspInit+0xe0>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d119      	bne.n	8004b24 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004af0:	4b1e      	ldr	r3, [pc, #120]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004af4:	4a1d      	ldr	r2, [pc, #116]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004af6:	f043 0301 	orr.w	r3, r3, #1
 8004afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004afc:	4b1b      	ldr	r3, [pc, #108]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	60fb      	str	r3, [r7, #12]
 8004b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004b08:	23a0      	movs	r3, #160	; 0xa0
 8004b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b14:	f107 0314 	add.w	r3, r7, #20
 8004b18:	4619      	mov	r1, r3
 8004b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b1e:	f003 f865 	bl	8007bec <HAL_GPIO_Init>
}
 8004b22:	e01c      	b.n	8004b5e <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a12      	ldr	r2, [pc, #72]	; (8004b74 <HAL_OPAMP_MspInit+0xe4>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d117      	bne.n	8004b5e <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004b34:	f043 0302 	orr.w	r3, r3, #2
 8004b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b3a:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_OPAMP_MspInit+0xdc>)
 8004b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004b46:	2305      	movs	r3, #5
 8004b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b52:	f107 0314 	add.w	r3, r7, #20
 8004b56:	4619      	mov	r1, r3
 8004b58:	4807      	ldr	r0, [pc, #28]	; (8004b78 <HAL_OPAMP_MspInit+0xe8>)
 8004b5a:	f003 f847 	bl	8007bec <HAL_GPIO_Init>
}
 8004b5e:	bf00      	nop
 8004b60:	3728      	adds	r7, #40	; 0x28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40010300 	.word	0x40010300
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	40010304 	.word	0x40010304
 8004b74:	40010308 	.word	0x40010308
 8004b78:	48000400 	.word	0x48000400

08004b7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b84:	f107 0314 	add.w	r3, r7, #20
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	609a      	str	r2, [r3, #8]
 8004b90:	60da      	str	r2, [r3, #12]
 8004b92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_SPI_MspInit+0x8c>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d12f      	bne.n	8004bfe <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b9e:	4b1b      	ldr	r3, [pc, #108]	; (8004c0c <HAL_SPI_MspInit+0x90>)
 8004ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ba2:	4a1a      	ldr	r2, [pc, #104]	; (8004c0c <HAL_SPI_MspInit+0x90>)
 8004ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ba8:	6613      	str	r3, [r2, #96]	; 0x60
 8004baa:	4b18      	ldr	r3, [pc, #96]	; (8004c0c <HAL_SPI_MspInit+0x90>)
 8004bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bb2:	613b      	str	r3, [r7, #16]
 8004bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb6:	4b15      	ldr	r3, [pc, #84]	; (8004c0c <HAL_SPI_MspInit+0x90>)
 8004bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bba:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <HAL_SPI_MspInit+0x90>)
 8004bbc:	f043 0302 	orr.w	r3, r3, #2
 8004bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <HAL_SPI_MspInit+0x90>)
 8004bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8004bce:	2338      	movs	r3, #56	; 0x38
 8004bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004bda:	2302      	movs	r3, #2
 8004bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004bde:	2305      	movs	r3, #5
 8004be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004be2:	f107 0314 	add.w	r3, r7, #20
 8004be6:	4619      	mov	r1, r3
 8004be8:	4809      	ldr	r0, [pc, #36]	; (8004c10 <HAL_SPI_MspInit+0x94>)
 8004bea:	f002 ffff 	bl	8007bec <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	2023      	movs	r0, #35	; 0x23
 8004bf4:	f001 fe99 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004bf8:	2023      	movs	r0, #35	; 0x23
 8004bfa:	f001 feb0 	bl	800695e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004bfe:	bf00      	nop
 8004c00:	3728      	adds	r7, #40	; 0x28
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40013000 	.word	0x40013000
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	48000400 	.word	0x48000400

08004c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a30      	ldr	r2, [pc, #192]	; (8004ce4 <HAL_TIM_Base_MspInit+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d114      	bne.n	8004c50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c26:	4b30      	ldr	r3, [pc, #192]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004c30:	6613      	str	r3, [r2, #96]	; 0x60
 8004c32:	4b2d      	ldr	r3, [pc, #180]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8004c3e:	2200      	movs	r2, #0
 8004c40:	2101      	movs	r1, #1
 8004c42:	2019      	movs	r0, #25
 8004c44:	f001 fe71 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004c48:	2019      	movs	r0, #25
 8004c4a:	f001 fe88 	bl	800695e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004c4e:	e044      	b.n	8004cda <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d114      	bne.n	8004c84 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c5a:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	4a22      	ldr	r2, [pc, #136]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6593      	str	r3, [r2, #88]	; 0x58
 8004c66:	4b20      	ldr	r3, [pc, #128]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c72:	2200      	movs	r2, #0
 8004c74:	2100      	movs	r1, #0
 8004c76:	201c      	movs	r0, #28
 8004c78:	f001 fe57 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c7c:	201c      	movs	r0, #28
 8004c7e:	f001 fe6e 	bl	800695e <HAL_NVIC_EnableIRQ>
}
 8004c82:	e02a      	b.n	8004cda <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM4)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <HAL_TIM_Base_MspInit+0xd8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d114      	bne.n	8004cb8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c8e:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c92:	4a15      	ldr	r2, [pc, #84]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c94:	f043 0304 	orr.w	r3, r3, #4
 8004c98:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2102      	movs	r1, #2
 8004caa:	201e      	movs	r0, #30
 8004cac:	f001 fe3d 	bl	800692a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004cb0:	201e      	movs	r0, #30
 8004cb2:	f001 fe54 	bl	800695e <HAL_NVIC_EnableIRQ>
}
 8004cb6:	e010      	b.n	8004cda <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a0c      	ldr	r2, [pc, #48]	; (8004cf0 <HAL_TIM_Base_MspInit+0xdc>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d10b      	bne.n	8004cda <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004cc2:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	4a08      	ldr	r2, [pc, #32]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004cc8:	f043 0310 	orr.w	r3, r3, #16
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <HAL_TIM_Base_MspInit+0xd4>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f003 0310 	and.w	r3, r3, #16
 8004cd6:	60bb      	str	r3, [r7, #8]
 8004cd8:	68bb      	ldr	r3, [r7, #8]
}
 8004cda:	bf00      	nop
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40012c00 	.word	0x40012c00
 8004ce8:	40021000 	.word	0x40021000
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40001000 	.word	0x40001000

08004cf4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b08a      	sub	sp, #40	; 0x28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	60da      	str	r2, [r3, #12]
 8004d0a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a29      	ldr	r2, [pc, #164]	; (8004db8 <HAL_TIM_MspPostInit+0xc4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d14b      	bne.n	8004dae <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_TIM_MspPostInit+0xc8>)
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	4a28      	ldr	r2, [pc, #160]	; (8004dbc <HAL_TIM_MspPostInit+0xc8>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d22:	4b26      	ldr	r3, [pc, #152]	; (8004dbc <HAL_TIM_MspPostInit+0xc8>)
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d2e:	4b23      	ldr	r3, [pc, #140]	; (8004dbc <HAL_TIM_MspPostInit+0xc8>)
 8004d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d32:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <HAL_TIM_MspPostInit+0xc8>)
 8004d34:	f043 0301 	orr.w	r3, r3, #1
 8004d38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <HAL_TIM_MspPostInit+0xc8>)
 8004d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d3e:	f003 0301 	and.w	r3, r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004d46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d54:	2300      	movs	r3, #0
 8004d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d58:	2306      	movs	r3, #6
 8004d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d5c:	f107 0314 	add.w	r3, r7, #20
 8004d60:	4619      	mov	r1, r3
 8004d62:	4817      	ldr	r0, [pc, #92]	; (8004dc0 <HAL_TIM_MspPostInit+0xcc>)
 8004d64:	f002 ff42 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004d68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d72:	2300      	movs	r3, #0
 8004d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d76:	2300      	movs	r3, #0
 8004d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7e:	f107 0314 	add.w	r3, r7, #20
 8004d82:	4619      	mov	r1, r3
 8004d84:	480e      	ldr	r0, [pc, #56]	; (8004dc0 <HAL_TIM_MspPostInit+0xcc>)
 8004d86:	f002 ff31 	bl	8007bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004d8a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004d8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d90:	2302      	movs	r3, #2
 8004d92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d94:	2300      	movs	r3, #0
 8004d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d9c:	2306      	movs	r3, #6
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004da0:	f107 0314 	add.w	r3, r7, #20
 8004da4:	4619      	mov	r1, r3
 8004da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004daa:	f002 ff1f 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004dae:	bf00      	nop
 8004db0:	3728      	adds	r7, #40	; 0x28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}
 8004db6:	bf00      	nop
 8004db8:	40012c00 	.word	0x40012c00
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	48000400 	.word	0x48000400

08004dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b09a      	sub	sp, #104	; 0x68
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	605a      	str	r2, [r3, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	60da      	str	r2, [r3, #12]
 8004dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	2244      	movs	r2, #68	; 0x44
 8004de2:	2100      	movs	r1, #0
 8004de4:	4618      	mov	r0, r3
 8004de6:	f007 fa0d 	bl	800c204 <memset>
  if(huart->Instance==USART3)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <HAL_UART_MspInit+0xa8>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d136      	bne.n	8004e62 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004df4:	2304      	movs	r3, #4
 8004df6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dfc:	f107 0310 	add.w	r3, r7, #16
 8004e00:	4618      	mov	r0, r3
 8004e02:	f003 ff7f 	bl	8008d04 <HAL_RCCEx_PeriphCLKConfig>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004e0c:	f7fd fd10 	bl	8002830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004e10:	4b17      	ldr	r3, [pc, #92]	; (8004e70 <HAL_UART_MspInit+0xac>)
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <HAL_UART_MspInit+0xac>)
 8004e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e1c:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_UART_MspInit+0xac>)
 8004e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e28:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <HAL_UART_MspInit+0xac>)
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2c:	4a10      	ldr	r2, [pc, #64]	; (8004e70 <HAL_UART_MspInit+0xac>)
 8004e2e:	f043 0302 	orr.w	r3, r3, #2
 8004e32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e34:	4b0e      	ldr	r3, [pc, #56]	; (8004e70 <HAL_UART_MspInit+0xac>)
 8004e36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e40:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e44:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e46:	2302      	movs	r3, #2
 8004e48:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004e52:	2307      	movs	r3, #7
 8004e54:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	4805      	ldr	r0, [pc, #20]	; (8004e74 <HAL_UART_MspInit+0xb0>)
 8004e5e:	f002 fec5 	bl	8007bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004e62:	bf00      	nop
 8004e64:	3768      	adds	r7, #104	; 0x68
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40004800 	.word	0x40004800
 8004e70:	40021000 	.word	0x40021000
 8004e74:	48000400 	.word	0x48000400

08004e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e7c:	e7fe      	b.n	8004e7c <NMI_Handler+0x4>

08004e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e82:	e7fe      	b.n	8004e82 <HardFault_Handler+0x4>

08004e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e88:	e7fe      	b.n	8004e88 <MemManage_Handler+0x4>

08004e8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e8e:	e7fe      	b.n	8004e8e <BusFault_Handler+0x4>

08004e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e90:	b480      	push	{r7}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e94:	e7fe      	b.n	8004e94 <UsageFault_Handler+0x4>

08004e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e96:	b480      	push	{r7}
 8004e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ea8:	bf00      	nop
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004eb6:	bf00      	nop
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ec4:	f000 f992 	bl	80051ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ec8:	bf00      	nop
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <FDCAN1_IT0_IRQHandler+0x10>)
 8004ed2:	f002 f9a5 	bl	8007220 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20000420 	.word	0x20000420

08004ee0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <FDCAN1_IT1_IRQHandler+0x10>)
 8004ee6:	f002 f99b 	bl	8007220 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000420 	.word	0x20000420

08004ef4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004efa:	f005 f8af 	bl	800a05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	2000059c 	.word	0x2000059c

08004f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <TIM2_IRQHandler+0x10>)
 8004f0e:	f005 f8a5 	bl	800a05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	200005e8 	.word	0x200005e8

08004f1c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <TIM4_IRQHandler+0x10>)
 8004f22:	f005 f89b 	bl	800a05c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	20000634 	.word	0x20000634

08004f30 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <SPI1_IRQHandler+0x10>)
 8004f36:	f004 fa31 	bl	800939c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000538 	.word	0x20000538

08004f44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f44:	b480      	push	{r7}
 8004f46:	af00      	add	r7, sp, #0
	return 1;
 8004f48:	2301      	movs	r3, #1
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <_kill>:

int _kill(int pid, int sig)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f5e:	f007 f927 	bl	800c1b0 <__errno>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2216      	movs	r2, #22
 8004f66:	601a      	str	r2, [r3, #0]
	return -1;
 8004f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <_exit>:

void _exit (int status)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7ff ffe7 	bl	8004f54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f86:	e7fe      	b.n	8004f86 <_exit+0x12>

08004f88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f94:	2300      	movs	r3, #0
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e00a      	b.n	8004fb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f9a:	f3af 8000 	nop.w
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	1c5a      	adds	r2, r3, #1
 8004fa4:	60ba      	str	r2, [r7, #8]
 8004fa6:	b2ca      	uxtb	r2, r1
 8004fa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	3301      	adds	r3, #1
 8004fae:	617b      	str	r3, [r7, #20]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	dbf0      	blt.n	8004f9a <_read+0x12>
	}

return len;
 8004fb8:	687b      	ldr	r3, [r7, #4]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b086      	sub	sp, #24
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	60f8      	str	r0, [r7, #12]
 8004fca:	60b9      	str	r1, [r7, #8]
 8004fcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
 8004fd2:	e009      	b.n	8004fe8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	60ba      	str	r2, [r7, #8]
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	3301      	adds	r3, #1
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	dbf1      	blt.n	8004fd4 <_write+0x12>
	}
	return len;
 8004ff0:	687b      	ldr	r3, [r7, #4]
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <_close>:

int _close(int file)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b083      	sub	sp, #12
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
	return -1;
 8005002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005006:	4618      	mov	r0, r3
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005022:	605a      	str	r2, [r3, #4]
	return 0;
 8005024:	2300      	movs	r3, #0
}
 8005026:	4618      	mov	r0, r3
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr

08005032 <_isatty>:

int _isatty(int file)
{
 8005032:	b480      	push	{r7}
 8005034:	b083      	sub	sp, #12
 8005036:	af00      	add	r7, sp, #0
 8005038:	6078      	str	r0, [r7, #4]
	return 1;
 800503a:	2301      	movs	r3, #1
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	return 0;
 8005054:	2300      	movs	r3, #0
}
 8005056:	4618      	mov	r0, r3
 8005058:	3714      	adds	r7, #20
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr
	...

08005064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b086      	sub	sp, #24
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800506c:	4a14      	ldr	r2, [pc, #80]	; (80050c0 <_sbrk+0x5c>)
 800506e:	4b15      	ldr	r3, [pc, #84]	; (80050c4 <_sbrk+0x60>)
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <_sbrk+0x64>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d102      	bne.n	8005086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005080:	4b11      	ldr	r3, [pc, #68]	; (80050c8 <_sbrk+0x64>)
 8005082:	4a12      	ldr	r2, [pc, #72]	; (80050cc <_sbrk+0x68>)
 8005084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <_sbrk+0x64>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	429a      	cmp	r2, r3
 8005092:	d207      	bcs.n	80050a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005094:	f007 f88c 	bl	800c1b0 <__errno>
 8005098:	4603      	mov	r3, r0
 800509a:	220c      	movs	r2, #12
 800509c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800509e:	f04f 33ff 	mov.w	r3, #4294967295
 80050a2:	e009      	b.n	80050b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <_sbrk+0x64>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050aa:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <_sbrk+0x64>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4413      	add	r3, r2
 80050b2:	4a05      	ldr	r2, [pc, #20]	; (80050c8 <_sbrk+0x64>)
 80050b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3718      	adds	r7, #24
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}
 80050c0:	20008000 	.word	0x20008000
 80050c4:	00000400 	.word	0x00000400
 80050c8:	20000760 	.word	0x20000760
 80050cc:	20000778 	.word	0x20000778

080050d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050d4:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <SystemInit+0x20>)
 80050d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050da:	4a05      	ldr	r2, [pc, #20]	; (80050f0 <SystemInit+0x20>)
 80050dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050e4:	bf00      	nop
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	e000ed00 	.word	0xe000ed00

080050f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80050f4:	480d      	ldr	r0, [pc, #52]	; (800512c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80050f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80050f8:	480d      	ldr	r0, [pc, #52]	; (8005130 <LoopForever+0x6>)
  ldr r1, =_edata
 80050fa:	490e      	ldr	r1, [pc, #56]	; (8005134 <LoopForever+0xa>)
  ldr r2, =_sidata
 80050fc:	4a0e      	ldr	r2, [pc, #56]	; (8005138 <LoopForever+0xe>)
  movs r3, #0
 80050fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005100:	e002      	b.n	8005108 <LoopCopyDataInit>

08005102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005106:	3304      	adds	r3, #4

08005108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800510a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800510c:	d3f9      	bcc.n	8005102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800510e:	4a0b      	ldr	r2, [pc, #44]	; (800513c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005110:	4c0b      	ldr	r4, [pc, #44]	; (8005140 <LoopForever+0x16>)
  movs r3, #0
 8005112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005114:	e001      	b.n	800511a <LoopFillZerobss>

08005116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005118:	3204      	adds	r2, #4

0800511a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800511a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800511c:	d3fb      	bcc.n	8005116 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800511e:	f7ff ffd7 	bl	80050d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005122:	f007 f84b 	bl	800c1bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005126:	f7fc fe31 	bl	8001d8c <main>

0800512a <LoopForever>:

LoopForever:
    b LoopForever
 800512a:	e7fe      	b.n	800512a <LoopForever>
  ldr   r0, =_estack
 800512c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005134:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8005138:	0801064c 	.word	0x0801064c
  ldr r2, =_sbss
 800513c:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8005140:	20000778 	.word	0x20000778

08005144 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005144:	e7fe      	b.n	8005144 <ADC1_2_IRQHandler>

08005146 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b082      	sub	sp, #8
 800514a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800514c:	2300      	movs	r3, #0
 800514e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005150:	2003      	movs	r0, #3
 8005152:	f001 fbdf 	bl	8006914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005156:	200f      	movs	r0, #15
 8005158:	f000 f80e 	bl	8005178 <HAL_InitTick>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	71fb      	strb	r3, [r7, #7]
 8005166:	e001      	b.n	800516c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005168:	f7ff fb5e 	bl	8004828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800516c:	79fb      	ldrb	r3, [r7, #7]

}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b084      	sub	sp, #16
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <HAL_InitTick+0x68>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d022      	beq.n	80051d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800518c:	4b15      	ldr	r3, [pc, #84]	; (80051e4 <HAL_InitTick+0x6c>)
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	4b13      	ldr	r3, [pc, #76]	; (80051e0 <HAL_InitTick+0x68>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005198:	fbb1 f3f3 	udiv	r3, r1, r3
 800519c:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fbea 	bl	800697a <HAL_SYSTICK_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10f      	bne.n	80051cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b0f      	cmp	r3, #15
 80051b0:	d809      	bhi.n	80051c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051b2:	2200      	movs	r2, #0
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ba:	f001 fbb6 	bl	800692a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <HAL_InitTick+0x70>)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6013      	str	r3, [r2, #0]
 80051c4:	e007      	b.n	80051d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	73fb      	strb	r3, [r7, #15]
 80051ca:	e004      	b.n	80051d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e001      	b.n	80051d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
 80051d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000008 	.word	0x20000008
 80051e4:	20000000 	.word	0x20000000
 80051e8:	20000004 	.word	0x20000004

080051ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051f0:	4b05      	ldr	r3, [pc, #20]	; (8005208 <HAL_IncTick+0x1c>)
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	4b05      	ldr	r3, [pc, #20]	; (800520c <HAL_IncTick+0x20>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4413      	add	r3, r2
 80051fa:	4a03      	ldr	r2, [pc, #12]	; (8005208 <HAL_IncTick+0x1c>)
 80051fc:	6013      	str	r3, [r2, #0]
}
 80051fe:	bf00      	nop
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr
 8005208:	20000764 	.word	0x20000764
 800520c:	20000008 	.word	0x20000008

08005210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
  return uwTick;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <HAL_GetTick+0x14>)
 8005216:	681b      	ldr	r3, [r3, #0]
}
 8005218:	4618      	mov	r0, r3
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000764 	.word	0x20000764

08005228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005230:	f7ff ffee 	bl	8005210 <HAL_GetTick>
 8005234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005240:	d004      	beq.n	800524c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005242:	4b09      	ldr	r3, [pc, #36]	; (8005268 <HAL_Delay+0x40>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800524c:	bf00      	nop
 800524e:	f7ff ffdf 	bl	8005210 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	429a      	cmp	r2, r3
 800525c:	d8f7      	bhi.n	800524e <HAL_Delay+0x26>
  {
  }
}
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}
 8005268:	20000008 	.word	0x20000008

0800526c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	431a      	orrs	r2, r3
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	609a      	str	r2, [r3, #8]
}
 8005286:	bf00      	nop
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80052a2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	6093      	str	r3, [r2, #8]
}
 80052aa:	bf00      	nop
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052ca:	d101      	bne.n	80052d0 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr

080052de <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80052ee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80052f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80052fa:	bf00      	nop
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005306:	b480      	push	{r7}
 8005308:	b083      	sub	sp, #12
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800531a:	d101      	bne.n	8005320 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800531c:	2301      	movs	r3, #1
 800531e:	e000      	b.n	8005322 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr

0800532e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800533e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800534a:	bf00      	nop
 800534c:	370c      	adds	r7, #12
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <LL_ADC_IsEnabled+0x18>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <LL_ADC_IsEnabled+0x1a>
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d101      	bne.n	8005394 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005390:	2301      	movs	r3, #1
 8005392:	e000      	b.n	8005396 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	370c      	adds	r7, #12
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr

080053a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d101      	bne.n	80053ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80053c8:	b590      	push	{r4, r7, lr}
 80053ca:	b089      	sub	sp, #36	; 0x24
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80053de:	2301      	movs	r3, #1
 80053e0:	e177      	b.n	80056d2 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7ff fa3d 	bl	8004870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ff54 	bl	80052b6 <LL_ADC_IsDeepPowerDownEnabled>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4618      	mov	r0, r3
 800541a:	f7ff ff3a 	bl	8005292 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f7ff ff6f 	bl	8005306 <LL_ADC_IsInternalRegulatorEnabled>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d115      	bne.n	800545a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f7ff ff53 	bl	80052de <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005438:	4b9c      	ldr	r3, [pc, #624]	; (80056ac <HAL_ADC_Init+0x2e4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	099b      	lsrs	r3, r3, #6
 800543e:	4a9c      	ldr	r2, [pc, #624]	; (80056b0 <HAL_ADC_Init+0x2e8>)
 8005440:	fba2 2303 	umull	r2, r3, r2, r3
 8005444:	099b      	lsrs	r3, r3, #6
 8005446:	3301      	adds	r3, #1
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800544c:	e002      	b.n	8005454 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3b01      	subs	r3, #1
 8005452:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d1f9      	bne.n	800544e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ff51 	bl	8005306 <LL_ADC_IsInternalRegulatorEnabled>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10d      	bne.n	8005486 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800546e:	f043 0210 	orr.w	r2, r3, #16
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800547a:	f043 0201 	orr.w	r2, r3, #1
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff76 	bl	800537c <LL_ADC_REG_IsConversionOngoing>
 8005490:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	f040 8110 	bne.w	80056c0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f040 810c 	bne.w	80056c0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054ac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80054b0:	f043 0202 	orr.w	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff4a 	bl	8005356 <LL_ADC_IsEnabled>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80054c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80054cc:	f7ff ff43 	bl	8005356 <LL_ADC_IsEnabled>
 80054d0:	4604      	mov	r4, r0
 80054d2:	4878      	ldr	r0, [pc, #480]	; (80056b4 <HAL_ADC_Init+0x2ec>)
 80054d4:	f7ff ff3f 	bl	8005356 <LL_ADC_IsEnabled>
 80054d8:	4603      	mov	r3, r0
 80054da:	4323      	orrs	r3, r4
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	4874      	ldr	r0, [pc, #464]	; (80056b8 <HAL_ADC_Init+0x2f0>)
 80054e8:	f7ff fec0 	bl	800526c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	7f5b      	ldrb	r3, [r3, #29]
 80054f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80054f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80054fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005502:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800550a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800550c:	4313      	orrs	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005516:	2b01      	cmp	r3, #1
 8005518:	d106      	bne.n	8005528 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	3b01      	subs	r3, #1
 8005520:	045b      	lsls	r3, r3, #17
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d009      	beq.n	8005544 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800553e:	69ba      	ldr	r2, [r7, #24]
 8005540:	4313      	orrs	r3, r2
 8005542:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	4b5c      	ldr	r3, [pc, #368]	; (80056bc <HAL_ADC_Init+0x2f4>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	69b9      	ldr	r1, [r7, #24]
 8005554:	430b      	orrs	r3, r1
 8005556:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	691b      	ldr	r3, [r3, #16]
 800555e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f7ff ff02 	bl	800537c <LL_ADC_REG_IsConversionOngoing>
 8005578:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4618      	mov	r0, r3
 8005580:	f7ff ff0f 	bl	80053a2 <LL_ADC_INJ_IsConversionOngoing>
 8005584:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d16d      	bne.n	8005668 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d16a      	bne.n	8005668 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005596:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800559e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ae:	f023 0302 	bic.w	r3, r3, #2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6812      	ldr	r2, [r2, #0]
 80055b6:	69b9      	ldr	r1, [r7, #24]
 80055b8:	430b      	orrs	r3, r1
 80055ba:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d017      	beq.n	80055f4 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80055dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80055e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055e4:	687a      	ldr	r2, [r7, #4]
 80055e6:	6911      	ldr	r1, [r2, #16]
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6812      	ldr	r2, [r2, #0]
 80055ec:	430b      	orrs	r3, r1
 80055ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80055f2:	e013      	b.n	800561c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	691a      	ldr	r2, [r3, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005602:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	6812      	ldr	r2, [r2, #0]
 8005610:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005614:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005618:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005622:	2b01      	cmp	r3, #1
 8005624:	d118      	bne.n	8005658 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005630:	f023 0304 	bic.w	r3, r3, #4
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800563c:	4311      	orrs	r1, r2
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005642:	4311      	orrs	r1, r2
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005648:	430a      	orrs	r2, r1
 800564a:	431a      	orrs	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f042 0201 	orr.w	r2, r2, #1
 8005654:	611a      	str	r2, [r3, #16]
 8005656:	e007      	b.n	8005668 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691a      	ldr	r2, [r3, #16]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0201 	bic.w	r2, r2, #1
 8005666:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d10c      	bne.n	800568a <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005676:	f023 010f 	bic.w	r1, r3, #15
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	1e5a      	subs	r2, r3, #1
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	631a      	str	r2, [r3, #48]	; 0x30
 8005688:	e007      	b.n	800569a <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 020f 	bic.w	r2, r2, #15
 8005698:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569e:	f023 0303 	bic.w	r3, r3, #3
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80056aa:	e011      	b.n	80056d0 <HAL_ADC_Init+0x308>
 80056ac:	20000000 	.word	0x20000000
 80056b0:	053e2d63 	.word	0x053e2d63
 80056b4:	50000100 	.word	0x50000100
 80056b8:	50000300 	.word	0x50000300
 80056bc:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	f043 0210 	orr.w	r2, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80056d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3724      	adds	r7, #36	; 0x24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}
 80056da:	bf00      	nop

080056dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7ff fe34 	bl	8005356 <LL_ADC_IsEnabled>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d14d      	bne.n	8005790 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689a      	ldr	r2, [r3, #8]
 80056fa:	4b28      	ldr	r3, [pc, #160]	; (800579c <ADC_Enable+0xc0>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005706:	f043 0210 	orr.w	r2, r3, #16
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005712:	f043 0201 	orr.w	r2, r3, #1
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e039      	b.n	8005792 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7ff fe03 	bl	800532e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005728:	f7ff fd72 	bl	8005210 <HAL_GetTick>
 800572c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800572e:	e028      	b.n	8005782 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fe0e 	bl	8005356 <LL_ADC_IsEnabled>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d104      	bne.n	800574a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff fdf2 	bl	800532e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800574a:	f7ff fd61 	bl	8005210 <HAL_GetTick>
 800574e:	4602      	mov	r2, r0
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	2b02      	cmp	r3, #2
 8005756:	d914      	bls.n	8005782 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 0301 	and.w	r3, r3, #1
 8005762:	2b01      	cmp	r3, #1
 8005764:	d00d      	beq.n	8005782 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576a:	f043 0210 	orr.w	r2, r3, #16
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e007      	b.n	8005792 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0301 	and.w	r3, r3, #1
 800578c:	2b01      	cmp	r3, #1
 800578e:	d1cf      	bne.n	8005730 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005790:	2300      	movs	r3, #0
}
 8005792:	4618      	mov	r0, r3
 8005794:	3710      	adds	r7, #16
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	8000003f 	.word	0x8000003f

080057a0 <LL_ADC_SetCommonPathInternalCh>:
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	431a      	orrs	r2, r3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	609a      	str	r2, [r3, #8]
}
 80057ba:	bf00      	nop
 80057bc:	370c      	adds	r7, #12
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr

080057c6 <LL_ADC_GetCommonPathInternalCh>:
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <LL_ADC_SetOffset>:
{
 80057e4:	b480      	push	{r7}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	60b9      	str	r1, [r7, #8]
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	3360      	adds	r3, #96	; 0x60
 80057f6:	461a      	mov	r2, r3
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	4413      	add	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	4b08      	ldr	r3, [pc, #32]	; (8005828 <LL_ADC_SetOffset+0x44>)
 8005806:	4013      	ands	r3, r2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	430a      	orrs	r2, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	601a      	str	r2, [r3, #0]
}
 800581c:	bf00      	nop
 800581e:	371c      	adds	r7, #28
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	03fff000 	.word	0x03fff000

0800582c <LL_ADC_GetOffsetChannel>:
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3360      	adds	r3, #96	; 0x60
 800583a:	461a      	mov	r2, r3
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	009b      	lsls	r3, r3, #2
 8005840:	4413      	add	r3, r2
 8005842:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800584c:	4618      	mov	r0, r3
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <LL_ADC_SetOffsetState>:
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3360      	adds	r3, #96	; 0x60
 8005868:	461a      	mov	r2, r3
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4413      	add	r3, r2
 8005870:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	431a      	orrs	r2, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	601a      	str	r2, [r3, #0]
}
 8005882:	bf00      	nop
 8005884:	371c      	adds	r7, #28
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <LL_ADC_SetOffsetSign>:
{
 800588e:	b480      	push	{r7}
 8005890:	b087      	sub	sp, #28
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	3360      	adds	r3, #96	; 0x60
 800589e:	461a      	mov	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	431a      	orrs	r2, r3
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	601a      	str	r2, [r3, #0]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <LL_ADC_SetOffsetSaturation>:
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3360      	adds	r3, #96	; 0x60
 80058d4:	461a      	mov	r2, r3
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	4413      	add	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	431a      	orrs	r2, r3
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	601a      	str	r2, [r3, #0]
}
 80058ee:	bf00      	nop
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	695b      	ldr	r3, [r3, #20]
 8005908:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	615a      	str	r2, [r3, #20]
}
 8005914:	bf00      	nop
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <LL_ADC_INJ_GetTrigAuto>:
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8005930:	4618      	mov	r0, r3
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <LL_ADC_SetChannelSamplingTime>:
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	3314      	adds	r3, #20
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	0e5b      	lsrs	r3, r3, #25
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	4413      	add	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	0d1b      	lsrs	r3, r3, #20
 8005964:	f003 031f 	and.w	r3, r3, #31
 8005968:	2107      	movs	r1, #7
 800596a:	fa01 f303 	lsl.w	r3, r1, r3
 800596e:	43db      	mvns	r3, r3
 8005970:	401a      	ands	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	0d1b      	lsrs	r3, r3, #20
 8005976:	f003 031f 	and.w	r3, r3, #31
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	fa01 f303 	lsl.w	r3, r1, r3
 8005980:	431a      	orrs	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	601a      	str	r2, [r3, #0]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
	...

08005994 <LL_ADC_SetChannelSingleDiff>:
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0f      	ldr	r2, [pc, #60]	; (80059e0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d10a      	bne.n	80059be <LL_ADC_SetChannelSingleDiff+0x2a>
    SET_BIT(ADCx->DIFSEL,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80059ae:	68bb      	ldr	r3, [r7, #8]
 80059b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059b4:	431a      	orrs	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80059bc:	e00a      	b.n	80059d4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059ca:	43db      	mvns	r3, r3
 80059cc:	401a      	ands	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80059d4:	bf00      	nop
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr
 80059e0:	407f0000 	.word	0x407f0000

080059e4 <LL_ADC_GetMultimode>:
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 031f 	and.w	r3, r3, #31
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_ADC_IsEnabled>:
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d101      	bne.n	8005a18 <LL_ADC_IsEnabled+0x18>
 8005a14:	2301      	movs	r3, #1
 8005a16:	e000      	b.n	8005a1a <LL_ADC_IsEnabled+0x1a>
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <LL_ADC_REG_IsConversionOngoing>:
{
 8005a26:	b480      	push	{r7}
 8005a28:	b083      	sub	sp, #12
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d101      	bne.n	8005a3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e000      	b.n	8005a40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <LL_ADC_INJ_StartConversion>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a60:	f043 0208 	orr.w	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	609a      	str	r2, [r3, #8]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <LL_ADC_INJ_IsConversionOngoing>:
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 0308 	and.w	r3, r3, #8
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d101      	bne.n	8005a8c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
	...

08005a9c <HAL_ADCEx_InjectedStart>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005aa4:	4853      	ldr	r0, [pc, #332]	; (8005bf4 <HAL_ADCEx_InjectedStart+0x158>)
 8005aa6:	f7ff ff9d 	bl	80059e4 <LL_ADC_GetMultimode>
 8005aaa:	6178      	str	r0, [r7, #20]
#endif

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f7ff ffdf 	bl	8005a74 <LL_ADC_INJ_IsConversionOngoing>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d001      	beq.n	8005ac0 <HAL_ADCEx_InjectedStart+0x24>
  {
    return HAL_BUSY;
 8005abc:	2302      	movs	r3, #2
 8005abe:	e094      	b.n	8005bea <HAL_ADCEx_InjectedStart+0x14e>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aca:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d10a      	bne.n	8005af0 <HAL_ADCEx_InjectedStart+0x54>
        && (tmp_config_injected_queue == 0UL)
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d107      	bne.n	8005af0 <HAL_ADCEx_InjectedStart+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ae4:	f043 0220 	orr.w	r2, r3, #32
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e07c      	b.n	8005bea <HAL_ADCEx_InjectedStart+0x14e>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005af6:	2b01      	cmp	r3, #1
 8005af8:	d101      	bne.n	8005afe <HAL_ADCEx_InjectedStart+0x62>
 8005afa:	2302      	movs	r3, #2
 8005afc:	e075      	b.n	8005bea <HAL_ADCEx_InjectedStart+0x14e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f7ff fde8 	bl	80056dc <ADC_Enable>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005b10:	7bfb      	ldrb	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d164      	bne.n	8005be0 <HAL_ADCEx_InjectedStart+0x144>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d006      	beq.n	8005b30 <HAL_ADCEx_InjectedStart+0x94>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b26:	f023 0208 	bic.w	r2, r3, #8
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	661a      	str	r2, [r3, #96]	; 0x60
 8005b2e:	e002      	b.n	8005b36 <HAL_ADCEx_InjectedStart+0x9a>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b3e:	f023 0301 	bic.w	r3, r3, #1
 8005b42:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2a      	ldr	r2, [pc, #168]	; (8005bf8 <HAL_ADCEx_InjectedStart+0x15c>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d002      	beq.n	8005b5a <HAL_ADCEx_InjectedStart+0xbe>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	e001      	b.n	8005b5e <HAL_ADCEx_InjectedStart+0xc2>
 8005b5a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6812      	ldr	r2, [r2, #0]
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d002      	beq.n	8005b6c <HAL_ADCEx_InjectedStart+0xd0>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d105      	bne.n	8005b78 <HAL_ADCEx_InjectedStart+0xdc>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b70:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2260      	movs	r2, #96	; 0x60
 8005b7e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1a      	ldr	r2, [pc, #104]	; (8005bf8 <HAL_ADCEx_InjectedStart+0x15c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d002      	beq.n	8005b98 <HAL_ADCEx_InjectedStart+0xfc>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	e001      	b.n	8005b9c <HAL_ADCEx_InjectedStart+0x100>
 8005b98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6812      	ldr	r2, [r2, #0]
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d008      	beq.n	8005bb6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b06      	cmp	r3, #6
 8005bae:	d002      	beq.n	8005bb6 <HAL_ADCEx_InjectedStart+0x11a>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b07      	cmp	r3, #7
 8005bb4:	d10d      	bne.n	8005bd2 <HAL_ADCEx_InjectedStart+0x136>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff feb0 	bl	8005920 <LL_ADC_INJ_GetTrigAuto>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d110      	bne.n	8005be8 <HAL_ADCEx_InjectedStart+0x14c>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ff3e 	bl	8005a4c <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8005bd0:	e00a      	b.n	8005be8 <HAL_ADCEx_InjectedStart+0x14c>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005bde:	e003      	b.n	8005be8 <HAL_ADCEx_InjectedStart+0x14c>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	50000300 	.word	0x50000300
 8005bf8:	50000100 	.word	0x50000100

08005bfc <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	f240 321b 	movw	r2, #795	; 0x31b
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_ADCEx_InjectedGetValue+0x32>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8005c16:	d21c      	bcs.n	8005c52 <HAL_ADCEx_InjectedGetValue+0x56>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	f240 120f 	movw	r2, #271	; 0x10f
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d011      	beq.n	8005c46 <HAL_ADCEx_InjectedGetValue+0x4a>
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	f240 2215 	movw	r2, #533	; 0x215
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d006      	beq.n	8005c3a <HAL_ADCEx_InjectedGetValue+0x3e>
 8005c2c:	e011      	b.n	8005c52 <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c36:	60fb      	str	r3, [r7, #12]
      break;
 8005c38:	e011      	b.n	8005c5e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	60fb      	str	r3, [r7, #12]
      break;
 8005c44:	e00b      	b.n	8005c5e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c4e:	60fb      	str	r3, [r7, #12]
      break;
 8005c50:	e005      	b.n	8005c5e <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c5a:	60fb      	str	r3, [r7, #12]
      break;
 8005c5c:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b0b6      	sub	sp, #216	; 0xd8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d102      	bne.n	8005c96 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8005c90:	2302      	movs	r3, #2
 8005c92:	f000 bcb5 	b.w	8006600 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d130      	bne.n	8005d10 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	2b09      	cmp	r3, #9
 8005cb4:	d179      	bne.n	8005daa <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d010      	beq.n	8005ce0 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	0e9b      	lsrs	r3, r3, #26
 8005cc4:	025b      	lsls	r3, r3, #9
 8005cc6:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cce:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005cd2:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cde:	e007      	b.n	8005cf0 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	0e9b      	lsrs	r3, r3, #26
 8005ce6:	025b      	lsls	r3, r3, #9
 8005ce8:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8005cec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005cf6:	4b84      	ldr	r3, [pc, #528]	; (8005f08 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8005d02:	430b      	orrs	r3, r1
 8005d04:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005d0e:	e04c      	b.n	8005daa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d11d      	bne.n	8005d54 <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6a1a      	ldr	r2, [r3, #32]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00d      	beq.n	8005d4a <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d38:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005d3c:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d48:	e004      	b.n	8005d54 <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	0e9b      	lsrs	r3, r3, #26
 8005d5a:	f003 021f 	and.w	r2, r3, #31
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f003 031f 	and.w	r3, r3, #31
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d78:	1e5a      	subs	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005d82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d9a:	4b5b      	ldr	r3, [pc, #364]	; (8005f08 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	6812      	ldr	r2, [r2, #0]
 8005da6:	430b      	orrs	r3, r1
 8005da8:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f7ff fe60 	bl	8005a74 <LL_ADC_INJ_IsConversionOngoing>
 8005db4:	4603      	mov	r3, r0
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d124      	bne.n	8005e04 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d112      	bne.n	8005dea <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005dd4:	055a      	lsls	r2, r3, #21
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005ddc:	051b      	lsls	r3, r3, #20
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	430a      	orrs	r2, r1
 8005de6:	60da      	str	r2, [r3, #12]
 8005de8:	e00c      	b.n	8005e04 <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005dfa:	055a      	lsls	r2, r3, #21
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7ff fe0c 	bl	8005a26 <LL_ADC_REG_IsConversionOngoing>
 8005e0e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7ff fe2c 	bl	8005a74 <LL_ADC_INJ_IsConversionOngoing>
 8005e1c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 822e 	bne.w	8006286 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f040 8229 	bne.w	8006286 <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d003      	beq.n	8005e44 <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d116      	bne.n	8005e72 <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d108      	bne.n	8005e60 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68da      	ldr	r2, [r3, #12]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8005e5c:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005e5e:	e01f      	b.n	8005ea0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005e6e:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005e70:	e016      	b.n	8005ea0 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e78:	2b01      	cmp	r3, #1
 8005e7a:	d109      	bne.n	8005e90 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e80:	f043 0220 	orr.w	r2, r3, #32
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8005e8e:	e007      	b.n	8005ea0 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005e9e:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d110      	bne.n	8005ecc <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	430b      	orrs	r3, r1
 8005ebe:	431a      	orrs	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f042 0202 	orr.w	r2, r2, #2
 8005ec8:	611a      	str	r2, [r3, #16]
 8005eca:	e007      	b.n	8005edc <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0202 	bic.w	r2, r2, #2
 8005eda:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	689b      	ldr	r3, [r3, #8]
 8005ee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ee4:	d112      	bne.n	8005f0c <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	f7ff fd23 	bl	800593c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005efe:	4618      	mov	r0, r3
 8005f00:	f7ff fcfb 	bl	80058fa <LL_ADC_SetSamplingTimeCommonConfig>
 8005f04:	e011      	b.n	8005f2a <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8005f06:	bf00      	nop
 8005f08:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6819      	ldr	r1, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	f7ff fd0f 	bl	800593c <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7ff fce8 	bl	80058fa <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695a      	ldr	r2, [r3, #20]
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	08db      	lsrs	r3, r3, #3
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691b      	ldr	r3, [r3, #16]
 8005f48:	2b04      	cmp	r3, #4
 8005f4a:	d022      	beq.n	8005f92 <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6818      	ldr	r0, [r3, #0]
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	6919      	ldr	r1, [r3, #16]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005f5c:	f7ff fc42 	bl	80057e4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6818      	ldr	r0, [r3, #0]
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	6919      	ldr	r1, [r3, #16]
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	f7ff fc8e 	bl	800588e <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d102      	bne.n	8005f88 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8005f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005f86:	e000      	b.n	8005f8a <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8005f88:	2300      	movs	r3, #0
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7ff fc9a 	bl	80058c4 <LL_ADC_SetOffsetSaturation>
 8005f90:	e179      	b.n	8006286 <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2100      	movs	r1, #0
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7ff fc47 	bl	800582c <LL_ADC_GetOffsetChannel>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <HAL_ADCEx_InjectedConfigChannel+0x352>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2100      	movs	r1, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f7ff fc3c 	bl	800582c <LL_ADC_GetOffsetChannel>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	0e9b      	lsrs	r3, r3, #26
 8005fb8:	f003 021f 	and.w	r2, r3, #31
 8005fbc:	e01e      	b.n	8005ffc <HAL_ADCEx_InjectedConfigChannel+0x390>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2100      	movs	r1, #0
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7ff fc31 	bl	800582c <LL_ADC_GetOffsetChannel>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fd0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fd4:	fa93 f3a3 	rbit	r3, r3
 8005fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005fdc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005fe4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <HAL_ADCEx_InjectedConfigChannel+0x384>
  {
    return 32U;
 8005fec:	2320      	movs	r3, #32
 8005fee:	e004      	b.n	8005ffa <HAL_ADCEx_InjectedConfigChannel+0x38e>
  }
  return __builtin_clz(value);
 8005ff0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ff4:	fab3 f383 	clz	r3, r3
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	0e9b      	lsrs	r3, r3, #26
 800600e:	f003 031f 	and.w	r3, r3, #31
 8006012:	e018      	b.n	8006046 <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800601c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006020:	fa93 f3a3 	rbit	r3, r3
 8006024:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8006028:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800602c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8006030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d101      	bne.n	800603c <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8006038:	2320      	movs	r3, #32
 800603a:	e004      	b.n	8006046 <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 800603c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006040:	fab3 f383 	clz	r3, r3
 8006044:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006046:	429a      	cmp	r2, r3
 8006048:	d106      	bne.n	8006058 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2200      	movs	r2, #0
 8006050:	2100      	movs	r1, #0
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff fc00 	bl	8005858 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2101      	movs	r1, #1
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff fbe4 	bl	800582c <LL_ADC_GetOffsetChannel>
 8006064:	4603      	mov	r3, r0
 8006066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <HAL_ADCEx_InjectedConfigChannel+0x418>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2101      	movs	r1, #1
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fbd9 	bl	800582c <LL_ADC_GetOffsetChannel>
 800607a:	4603      	mov	r3, r0
 800607c:	0e9b      	lsrs	r3, r3, #26
 800607e:	f003 021f 	and.w	r2, r3, #31
 8006082:	e01e      	b.n	80060c2 <HAL_ADCEx_InjectedConfigChannel+0x456>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2101      	movs	r1, #1
 800608a:	4618      	mov	r0, r3
 800608c:	f7ff fbce 	bl	800582c <LL_ADC_GetOffsetChannel>
 8006090:	4603      	mov	r3, r0
 8006092:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800609a:	fa93 f3a3 	rbit	r3, r3
 800609e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80060a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80060aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d101      	bne.n	80060b6 <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 80060b2:	2320      	movs	r3, #32
 80060b4:	e004      	b.n	80060c0 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 80060b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80060ba:	fab3 f383 	clz	r3, r3
 80060be:	b2db      	uxtb	r3, r3
 80060c0:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d105      	bne.n	80060da <HAL_ADCEx_InjectedConfigChannel+0x46e>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	0e9b      	lsrs	r3, r3, #26
 80060d4:	f003 031f 	and.w	r3, r3, #31
 80060d8:	e018      	b.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80060e6:	fa93 f3a3 	rbit	r3, r3
 80060ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80060ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80060f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d101      	bne.n	8006102 <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 80060fe:	2320      	movs	r3, #32
 8006100:	e004      	b.n	800610c <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8006102:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006106:	fab3 f383 	clz	r3, r3
 800610a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800610c:	429a      	cmp	r2, r3
 800610e:	d106      	bne.n	800611e <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2200      	movs	r2, #0
 8006116:	2101      	movs	r1, #1
 8006118:	4618      	mov	r0, r3
 800611a:	f7ff fb9d 	bl	8005858 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2102      	movs	r1, #2
 8006124:	4618      	mov	r0, r3
 8006126:	f7ff fb81 	bl	800582c <LL_ADC_GetOffsetChannel>
 800612a:	4603      	mov	r3, r0
 800612c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2102      	movs	r1, #2
 800613a:	4618      	mov	r0, r3
 800613c:	f7ff fb76 	bl	800582c <LL_ADC_GetOffsetChannel>
 8006140:	4603      	mov	r3, r0
 8006142:	0e9b      	lsrs	r3, r3, #26
 8006144:	f003 021f 	and.w	r2, r3, #31
 8006148:	e01e      	b.n	8006188 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2102      	movs	r1, #2
 8006150:	4618      	mov	r0, r3
 8006152:	f7ff fb6b 	bl	800582c <LL_ADC_GetOffsetChannel>
 8006156:	4603      	mov	r3, r0
 8006158:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006160:	fa93 f3a3 	rbit	r3, r3
 8006164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8006168:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800616c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8006170:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8006178:	2320      	movs	r3, #32
 800617a:	e004      	b.n	8006186 <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 800617c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006180:	fab3 f383 	clz	r3, r3
 8006184:	b2db      	uxtb	r3, r3
 8006186:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006190:	2b00      	cmp	r3, #0
 8006192:	d105      	bne.n	80061a0 <HAL_ADCEx_InjectedConfigChannel+0x534>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	0e9b      	lsrs	r3, r3, #26
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	e014      	b.n	80061ca <HAL_ADCEx_InjectedConfigChannel+0x55e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061a8:	fa93 f3a3 	rbit	r3, r3
 80061ac:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80061ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80061b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 80061bc:	2320      	movs	r3, #32
 80061be:	e004      	b.n	80061ca <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 80061c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80061c4:	fab3 f383 	clz	r3, r3
 80061c8:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d106      	bne.n	80061dc <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2200      	movs	r2, #0
 80061d4:	2102      	movs	r1, #2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fb3e 	bl	8005858 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2103      	movs	r1, #3
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fb22 	bl	800582c <LL_ADC_GetOffsetChannel>
 80061e8:	4603      	mov	r3, r0
 80061ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10a      	bne.n	8006208 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2103      	movs	r1, #3
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7ff fb17 	bl	800582c <LL_ADC_GetOffsetChannel>
 80061fe:	4603      	mov	r3, r0
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	f003 021f 	and.w	r2, r3, #31
 8006206:	e017      	b.n	8006238 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2103      	movs	r1, #3
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff fb0c 	bl	800582c <LL_ADC_GetOffsetChannel>
 8006214:	4603      	mov	r3, r0
 8006216:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006218:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800621a:	fa93 f3a3 	rbit	r3, r3
 800621e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8006224:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 800622a:	2320      	movs	r3, #32
 800622c:	e003      	b.n	8006236 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800622e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006230:	fab3 f383 	clz	r3, r3
 8006234:	b2db      	uxtb	r3, r3
 8006236:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006240:	2b00      	cmp	r3, #0
 8006242:	d105      	bne.n	8006250 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	0e9b      	lsrs	r3, r3, #26
 800624a:	f003 031f 	and.w	r3, r3, #31
 800624e:	e011      	b.n	8006274 <HAL_ADCEx_InjectedConfigChannel+0x608>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006258:	fa93 f3a3 	rbit	r3, r3
 800625c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800625e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006260:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8006262:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8006268:	2320      	movs	r3, #32
 800626a:	e003      	b.n	8006274 <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 800626c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800626e:	fab3 f383 	clz	r3, r3
 8006272:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006274:	429a      	cmp	r2, r3
 8006276:	d106      	bne.n	8006286 <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2200      	movs	r2, #0
 800627e:	2103      	movs	r1, #3
 8006280:	4618      	mov	r0, r3
 8006282:	f7ff fae9 	bl	8005858 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f7ff fbb8 	bl	8005a00 <LL_ADC_IsEnabled>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 8140 	bne.w	8006518 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	6819      	ldr	r1, [r3, #0]
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f7ff fb75 	bl	8005994 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	4a8f      	ldr	r2, [pc, #572]	; (80064ec <HAL_ADCEx_InjectedConfigChannel+0x880>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	f040 8131 	bne.w	8006518 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10b      	bne.n	80062de <HAL_ADCEx_InjectedConfigChannel+0x672>
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	0e9b      	lsrs	r3, r3, #26
 80062cc:	3301      	adds	r3, #1
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	2b09      	cmp	r3, #9
 80062d4:	bf94      	ite	ls
 80062d6:	2301      	movls	r3, #1
 80062d8:	2300      	movhi	r3, #0
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	e019      	b.n	8006312 <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80062e6:	fa93 f3a3 	rbit	r3, r3
 80062ea:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80062ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80062f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 80062f6:	2320      	movs	r3, #32
 80062f8:	e003      	b.n	8006302 <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80062fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062fc:	fab3 f383 	clz	r3, r3
 8006300:	b2db      	uxtb	r3, r3
 8006302:	3301      	adds	r3, #1
 8006304:	f003 031f 	and.w	r3, r3, #31
 8006308:	2b09      	cmp	r3, #9
 800630a:	bf94      	ite	ls
 800630c:	2301      	movls	r3, #1
 800630e:	2300      	movhi	r3, #0
 8006310:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006312:	2b00      	cmp	r3, #0
 8006314:	d079      	beq.n	800640a <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800631e:	2b00      	cmp	r3, #0
 8006320:	d107      	bne.n	8006332 <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	0e9b      	lsrs	r3, r3, #26
 8006328:	3301      	adds	r3, #1
 800632a:	069b      	lsls	r3, r3, #26
 800632c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006330:	e015      	b.n	800635e <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633a:	fa93 f3a3 	rbit	r3, r3
 800633e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8006344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006346:	2b00      	cmp	r3, #0
 8006348:	d101      	bne.n	800634e <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 800634a:	2320      	movs	r3, #32
 800634c:	e003      	b.n	8006356 <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 800634e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006350:	fab3 f383 	clz	r3, r3
 8006354:	b2db      	uxtb	r3, r3
 8006356:	3301      	adds	r3, #1
 8006358:	069b      	lsls	r3, r3, #26
 800635a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006366:	2b00      	cmp	r3, #0
 8006368:	d109      	bne.n	800637e <HAL_ADCEx_InjectedConfigChannel+0x712>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	0e9b      	lsrs	r3, r3, #26
 8006370:	3301      	adds	r3, #1
 8006372:	f003 031f 	and.w	r3, r3, #31
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	e017      	b.n	80063ae <HAL_ADCEx_InjectedConfigChannel+0x742>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006386:	fa93 f3a3 	rbit	r3, r3
 800638a:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800638c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800638e:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8006390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006392:	2b00      	cmp	r3, #0
 8006394:	d101      	bne.n	800639a <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 8006396:	2320      	movs	r3, #32
 8006398:	e003      	b.n	80063a2 <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 800639a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639c:	fab3 f383 	clz	r3, r3
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	3301      	adds	r3, #1
 80063a4:	f003 031f 	and.w	r3, r3, #31
 80063a8:	2101      	movs	r1, #1
 80063aa:	fa01 f303 	lsl.w	r3, r1, r3
 80063ae:	ea42 0103 	orr.w	r1, r2, r3
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10a      	bne.n	80063d4 <HAL_ADCEx_InjectedConfigChannel+0x768>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	0e9b      	lsrs	r3, r3, #26
 80063c4:	3301      	adds	r3, #1
 80063c6:	f003 021f 	and.w	r2, r3, #31
 80063ca:	4613      	mov	r3, r2
 80063cc:	005b      	lsls	r3, r3, #1
 80063ce:	4413      	add	r3, r2
 80063d0:	051b      	lsls	r3, r3, #20
 80063d2:	e018      	b.n	8006406 <HAL_ADCEx_InjectedConfigChannel+0x79a>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	fa93 f3a3 	rbit	r3, r3
 80063e0:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80063e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80063e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 80063ec:	2320      	movs	r3, #32
 80063ee:	e003      	b.n	80063f8 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 80063f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f2:	fab3 f383 	clz	r3, r3
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	3301      	adds	r3, #1
 80063fa:	f003 021f 	and.w	r2, r3, #31
 80063fe:	4613      	mov	r3, r2
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	4413      	add	r3, r2
 8006404:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006406:	430b      	orrs	r3, r1
 8006408:	e081      	b.n	800650e <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006412:	2b00      	cmp	r3, #0
 8006414:	d107      	bne.n	8006426 <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	0e9b      	lsrs	r3, r3, #26
 800641c:	3301      	adds	r3, #1
 800641e:	069b      	lsls	r3, r3, #26
 8006420:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006424:	e015      	b.n	8006452 <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800642e:	fa93 f3a3 	rbit	r3, r3
 8006432:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006436:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8006438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 800643e:	2320      	movs	r3, #32
 8006440:	e003      	b.n	800644a <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 8006442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006444:	fab3 f383 	clz	r3, r3
 8006448:	b2db      	uxtb	r3, r3
 800644a:	3301      	adds	r3, #1
 800644c:	069b      	lsls	r3, r3, #26
 800644e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <HAL_ADCEx_InjectedConfigChannel+0x806>
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	0e9b      	lsrs	r3, r3, #26
 8006464:	3301      	adds	r3, #1
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2101      	movs	r1, #1
 800646c:	fa01 f303 	lsl.w	r3, r1, r3
 8006470:	e017      	b.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x836>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	61bb      	str	r3, [r7, #24]
  return result;
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 800648a:	2320      	movs	r3, #32
 800648c:	e003      	b.n	8006496 <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3301      	adds	r3, #1
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	ea42 0103 	orr.w	r1, r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10d      	bne.n	80064ce <HAL_ADCEx_InjectedConfigChannel+0x862>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	0e9b      	lsrs	r3, r3, #26
 80064b8:	3301      	adds	r3, #1
 80064ba:	f003 021f 	and.w	r2, r3, #31
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	3b1e      	subs	r3, #30
 80064c6:	051b      	lsls	r3, r3, #20
 80064c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064cc:	e01e      	b.n	800650c <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	60fb      	str	r3, [r7, #12]
  return result;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 80064e6:	2320      	movs	r3, #32
 80064e8:	e006      	b.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 80064ea:	bf00      	nop
 80064ec:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	fab3 f383 	clz	r3, r3
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	3301      	adds	r3, #1
 80064fa:	f003 021f 	and.w	r2, r3, #31
 80064fe:	4613      	mov	r3, r2
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	4413      	add	r3, r2
 8006504:	3b1e      	subs	r3, #30
 8006506:	051b      	lsls	r3, r3, #20
 8006508:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800650c:	430b      	orrs	r3, r1
 800650e:	683a      	ldr	r2, [r7, #0]
 8006510:	6892      	ldr	r2, [r2, #8]
 8006512:	4619      	mov	r1, r3
 8006514:	f7ff fa12 	bl	800593c <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	4b3a      	ldr	r3, [pc, #232]	; (8006608 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 800651e:	4013      	ands	r3, r2
 8006520:	2b00      	cmp	r3, #0
 8006522:	d067      	beq.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006524:	4839      	ldr	r0, [pc, #228]	; (800660c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006526:	f7ff f94e 	bl	80057c6 <LL_ADC_GetCommonPathInternalCh>
 800652a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a37      	ldr	r2, [pc, #220]	; (8006610 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d004      	beq.n	8006542 <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a35      	ldr	r2, [pc, #212]	; (8006614 <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d127      	bne.n	8006592 <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006542:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d121      	bne.n	8006592 <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006556:	d14d      	bne.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006558:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800655c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006560:	4619      	mov	r1, r3
 8006562:	482a      	ldr	r0, [pc, #168]	; (800660c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8006564:	f7ff f91c 	bl	80057a0 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8006568:	4b2b      	ldr	r3, [pc, #172]	; (8006618 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	099b      	lsrs	r3, r3, #6
 800656e:	4a2b      	ldr	r2, [pc, #172]	; (800661c <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8006570:	fba2 2303 	umull	r2, r3, r2, r3
 8006574:	099a      	lsrs	r2, r3, #6
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3318      	adds	r3, #24
 8006580:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8006582:	e002      	b.n	800658a <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	3b01      	subs	r3, #1
 8006588:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d1f9      	bne.n	8006584 <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006590:	e030      	b.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a22      	ldr	r2, [pc, #136]	; (8006620 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d113      	bne.n	80065c4 <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800659c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10d      	bne.n	80065c4 <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1d      	ldr	r2, [pc, #116]	; (8006624 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d020      	beq.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065ba:	4619      	mov	r1, r3
 80065bc:	4813      	ldr	r0, [pc, #76]	; (800660c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80065be:	f7ff f8ef 	bl	80057a0 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065c2:	e017      	b.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a17      	ldr	r2, [pc, #92]	; (8006628 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d112      	bne.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80065ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10c      	bne.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a11      	ldr	r2, [pc, #68]	; (8006624 <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80065e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80065e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80065ec:	4619      	mov	r1, r3
 80065ee:	4807      	ldr	r0, [pc, #28]	; (800660c <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80065f0:	f7ff f8d6 	bl	80057a0 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80065fc:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006600:	4618      	mov	r0, r3
 8006602:	37d8      	adds	r7, #216	; 0xd8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	80080000 	.word	0x80080000
 800660c:	50000300 	.word	0x50000300
 8006610:	c3210000 	.word	0xc3210000
 8006614:	90c00010 	.word	0x90c00010
 8006618:	20000000 	.word	0x20000000
 800661c:	053e2d63 	.word	0x053e2d63
 8006620:	c7520000 	.word	0xc7520000
 8006624:	50000100 	.word	0x50000100
 8006628:	cb840000 	.word	0xcb840000

0800662c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800662c:	b590      	push	{r4, r7, lr}
 800662e:	b0a1      	sub	sp, #132	; 0x84
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006636:	2300      	movs	r3, #0
 8006638:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006642:	2b01      	cmp	r3, #1
 8006644:	d101      	bne.n	800664a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006646:	2302      	movs	r3, #2
 8006648:	e08b      	b.n	8006762 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006652:	2300      	movs	r3, #0
 8006654:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006656:	2300      	movs	r3, #0
 8006658:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006662:	d102      	bne.n	800666a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006664:	4b41      	ldr	r3, [pc, #260]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006666:	60bb      	str	r3, [r7, #8]
 8006668:	e001      	b.n	800666e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800666a:	2300      	movs	r3, #0
 800666c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d10b      	bne.n	800668c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e06a      	b.n	8006762 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	4618      	mov	r0, r3
 8006690:	f7ff f9c9 	bl	8005a26 <LL_ADC_REG_IsConversionOngoing>
 8006694:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7ff f9c3 	bl	8005a26 <LL_ADC_REG_IsConversionOngoing>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d14c      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80066a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d149      	bne.n	8006740 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80066ac:	4b30      	ldr	r3, [pc, #192]	; (8006770 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80066ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d028      	beq.n	800670a <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80066b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	6859      	ldr	r1, [r3, #4]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066ca:	035b      	lsls	r3, r3, #13
 80066cc:	430b      	orrs	r3, r1
 80066ce:	431a      	orrs	r2, r3
 80066d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80066d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80066d8:	f7ff f992 	bl	8005a00 <LL_ADC_IsEnabled>
 80066dc:	4604      	mov	r4, r0
 80066de:	4823      	ldr	r0, [pc, #140]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80066e0:	f7ff f98e 	bl	8005a00 <LL_ADC_IsEnabled>
 80066e4:	4603      	mov	r3, r0
 80066e6:	4323      	orrs	r3, r4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d133      	bne.n	8006754 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80066ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80066f4:	f023 030f 	bic.w	r3, r3, #15
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	6811      	ldr	r1, [r2, #0]
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	6892      	ldr	r2, [r2, #8]
 8006700:	430a      	orrs	r2, r1
 8006702:	431a      	orrs	r2, r3
 8006704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006706:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006708:	e024      	b.n	8006754 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800670a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006714:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006716:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800671a:	f7ff f971 	bl	8005a00 <LL_ADC_IsEnabled>
 800671e:	4604      	mov	r4, r0
 8006720:	4812      	ldr	r0, [pc, #72]	; (800676c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006722:	f7ff f96d 	bl	8005a00 <LL_ADC_IsEnabled>
 8006726:	4603      	mov	r3, r0
 8006728:	4323      	orrs	r3, r4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d112      	bne.n	8006754 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800672e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006736:	f023 030f 	bic.w	r3, r3, #15
 800673a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800673c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800673e:	e009      	b.n	8006754 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006752:	e000      	b.n	8006756 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006754:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800675e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006762:	4618      	mov	r0, r3
 8006764:	3784      	adds	r7, #132	; 0x84
 8006766:	46bd      	mov	sp, r7
 8006768:	bd90      	pop	{r4, r7, pc}
 800676a:	bf00      	nop
 800676c:	50000100 	.word	0x50000100
 8006770:	50000300 	.word	0x50000300

08006774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f003 0307 	and.w	r3, r3, #7
 8006782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006784:	4b0c      	ldr	r3, [pc, #48]	; (80067b8 <__NVIC_SetPriorityGrouping+0x44>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006790:	4013      	ands	r3, r2
 8006792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800679c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067a6:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <__NVIC_SetPriorityGrouping+0x44>)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	60d3      	str	r3, [r2, #12]
}
 80067ac:	bf00      	nop
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr
 80067b8:	e000ed00 	.word	0xe000ed00

080067bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067bc:	b480      	push	{r7}
 80067be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067c0:	4b04      	ldr	r3, [pc, #16]	; (80067d4 <__NVIC_GetPriorityGrouping+0x18>)
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	0a1b      	lsrs	r3, r3, #8
 80067c6:	f003 0307 	and.w	r3, r3, #7
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	e000ed00 	.word	0xe000ed00

080067d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80067e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	db0b      	blt.n	8006802 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80067ea:	79fb      	ldrb	r3, [r7, #7]
 80067ec:	f003 021f 	and.w	r2, r3, #31
 80067f0:	4907      	ldr	r1, [pc, #28]	; (8006810 <__NVIC_EnableIRQ+0x38>)
 80067f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f6:	095b      	lsrs	r3, r3, #5
 80067f8:	2001      	movs	r0, #1
 80067fa:	fa00 f202 	lsl.w	r2, r0, r2
 80067fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006802:	bf00      	nop
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	e000e100 	.word	0xe000e100

08006814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	6039      	str	r1, [r7, #0]
 800681e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006824:	2b00      	cmp	r3, #0
 8006826:	db0a      	blt.n	800683e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	490c      	ldr	r1, [pc, #48]	; (8006860 <__NVIC_SetPriority+0x4c>)
 800682e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006832:	0112      	lsls	r2, r2, #4
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	440b      	add	r3, r1
 8006838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800683c:	e00a      	b.n	8006854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	b2da      	uxtb	r2, r3
 8006842:	4908      	ldr	r1, [pc, #32]	; (8006864 <__NVIC_SetPriority+0x50>)
 8006844:	79fb      	ldrb	r3, [r7, #7]
 8006846:	f003 030f 	and.w	r3, r3, #15
 800684a:	3b04      	subs	r3, #4
 800684c:	0112      	lsls	r2, r2, #4
 800684e:	b2d2      	uxtb	r2, r2
 8006850:	440b      	add	r3, r1
 8006852:	761a      	strb	r2, [r3, #24]
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	e000e100 	.word	0xe000e100
 8006864:	e000ed00 	.word	0xe000ed00

08006868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	; 0x24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f003 0307 	and.w	r3, r3, #7
 800687a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800687c:	69fb      	ldr	r3, [r7, #28]
 800687e:	f1c3 0307 	rsb	r3, r3, #7
 8006882:	2b04      	cmp	r3, #4
 8006884:	bf28      	it	cs
 8006886:	2304      	movcs	r3, #4
 8006888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3304      	adds	r3, #4
 800688e:	2b06      	cmp	r3, #6
 8006890:	d902      	bls.n	8006898 <NVIC_EncodePriority+0x30>
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	3b03      	subs	r3, #3
 8006896:	e000      	b.n	800689a <NVIC_EncodePriority+0x32>
 8006898:	2300      	movs	r3, #0
 800689a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800689c:	f04f 32ff 	mov.w	r2, #4294967295
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	fa02 f303 	lsl.w	r3, r2, r3
 80068a6:	43da      	mvns	r2, r3
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	401a      	ands	r2, r3
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068b0:	f04f 31ff 	mov.w	r1, #4294967295
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	fa01 f303 	lsl.w	r3, r1, r3
 80068ba:	43d9      	mvns	r1, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068c0:	4313      	orrs	r3, r2
         );
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3724      	adds	r7, #36	; 0x24
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
	...

080068d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	3b01      	subs	r3, #1
 80068dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e0:	d301      	bcc.n	80068e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068e2:	2301      	movs	r3, #1
 80068e4:	e00f      	b.n	8006906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <SysTick_Config+0x40>)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068ee:	210f      	movs	r1, #15
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	f7ff ff8e 	bl	8006814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068f8:	4b05      	ldr	r3, [pc, #20]	; (8006910 <SysTick_Config+0x40>)
 80068fa:	2200      	movs	r2, #0
 80068fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068fe:	4b04      	ldr	r3, [pc, #16]	; (8006910 <SysTick_Config+0x40>)
 8006900:	2207      	movs	r2, #7
 8006902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	e000e010 	.word	0xe000e010

08006914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7ff ff29 	bl	8006774 <__NVIC_SetPriorityGrouping>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af00      	add	r7, sp, #0
 8006930:	4603      	mov	r3, r0
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006938:	f7ff ff40 	bl	80067bc <__NVIC_GetPriorityGrouping>
 800693c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	6978      	ldr	r0, [r7, #20]
 8006944:	f7ff ff90 	bl	8006868 <NVIC_EncodePriority>
 8006948:	4602      	mov	r2, r0
 800694a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694e:	4611      	mov	r1, r2
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff ff5f 	bl	8006814 <__NVIC_SetPriority>
}
 8006956:	bf00      	nop
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800695e:	b580      	push	{r7, lr}
 8006960:	b082      	sub	sp, #8
 8006962:	af00      	add	r7, sp, #0
 8006964:	4603      	mov	r3, r0
 8006966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800696c:	4618      	mov	r0, r3
 800696e:	f7ff ff33 	bl	80067d8 <__NVIC_EnableIRQ>
}
 8006972:	bf00      	nop
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b082      	sub	sp, #8
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f7ff ffa4 	bl	80068d0 <SysTick_Config>
 8006988:	4603      	mov	r3, r0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}

08006992 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006992:	b580      	push	{r7, lr}
 8006994:	b084      	sub	sp, #16
 8006996:	af00      	add	r7, sp, #0
 8006998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d00d      	beq.n	80069c6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2204      	movs	r2, #4
 80069ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	73fb      	strb	r3, [r7, #15]
 80069c4:	e047      	b.n	8006a56 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 020e 	bic.w	r2, r2, #14
 80069d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0201 	bic.w	r2, r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fa:	f003 021f 	and.w	r2, r3, #31
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	2101      	movs	r1, #1
 8006a04:	fa01 f202 	lsl.w	r2, r1, r2
 8006a08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00c      	beq.n	8006a36 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006a34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
    }
  }
  return status;
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3710      	adds	r7, #16
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e147      	b.n	8006d02 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fd ff98 	bl	80049bc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f022 0210 	bic.w	r2, r2, #16
 8006a9a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a9c:	f7fe fbb8 	bl	8005210 <HAL_GetTick>
 8006aa0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006aa2:	e012      	b.n	8006aca <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006aa4:	f7fe fbb4 	bl	8005210 <HAL_GetTick>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1ad3      	subs	r3, r2, r3
 8006aae:	2b0a      	cmp	r3, #10
 8006ab0:	d90b      	bls.n	8006aca <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab6:	f043 0201 	orr.w	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	e11b      	b.n	8006d02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699b      	ldr	r3, [r3, #24]
 8006ad0:	f003 0308 	and.w	r3, r3, #8
 8006ad4:	2b08      	cmp	r3, #8
 8006ad6:	d0e5      	beq.n	8006aa4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699a      	ldr	r2, [r3, #24]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ae8:	f7fe fb92 	bl	8005210 <HAL_GetTick>
 8006aec:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006aee:	e012      	b.n	8006b16 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006af0:	f7fe fb8e 	bl	8005210 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b0a      	cmp	r3, #10
 8006afc:	d90b      	bls.n	8006b16 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b02:	f043 0201 	orr.w	r2, r3, #1
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2203      	movs	r2, #3
 8006b0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e0f5      	b.n	8006d02 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	f003 0301 	and.w	r3, r3, #1
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0e5      	beq.n	8006af0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	699a      	ldr	r2, [r3, #24]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f042 0202 	orr.w	r2, r2, #2
 8006b32:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4a74      	ldr	r2, [pc, #464]	; (8006d0c <HAL_FDCAN_Init+0x2ac>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d103      	bne.n	8006b46 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006b3e:	4a74      	ldr	r2, [pc, #464]	; (8006d10 <HAL_FDCAN_Init+0x2b0>)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	7c1b      	ldrb	r3, [r3, #16]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d108      	bne.n	8006b60 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	699a      	ldr	r2, [r3, #24]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b5c:	619a      	str	r2, [r3, #24]
 8006b5e:	e007      	b.n	8006b70 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	699a      	ldr	r2, [r3, #24]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b6e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7c5b      	ldrb	r3, [r3, #17]
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d108      	bne.n	8006b8a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699a      	ldr	r2, [r3, #24]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b86:	619a      	str	r2, [r3, #24]
 8006b88:	e007      	b.n	8006b9a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006b98:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	7c9b      	ldrb	r3, [r3, #18]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d108      	bne.n	8006bb4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	699a      	ldr	r2, [r3, #24]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006bb0:	619a      	str	r2, [r3, #24]
 8006bb2:	e007      	b.n	8006bc4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bc2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689a      	ldr	r2, [r3, #8]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	699a      	ldr	r2, [r3, #24]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006be8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	691a      	ldr	r2, [r3, #16]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f022 0210 	bic.w	r2, r2, #16
 8006bf8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d108      	bne.n	8006c14 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	699a      	ldr	r2, [r3, #24]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f042 0204 	orr.w	r2, r2, #4
 8006c10:	619a      	str	r2, [r3, #24]
 8006c12:	e02c      	b.n	8006c6e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d028      	beq.n	8006c6e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d01c      	beq.n	8006c5e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699a      	ldr	r2, [r3, #24]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c32:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0210 	orr.w	r2, r2, #16
 8006c42:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d110      	bne.n	8006c6e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f042 0220 	orr.w	r2, r2, #32
 8006c5a:	619a      	str	r2, [r3, #24]
 8006c5c:	e007      	b.n	8006c6e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f042 0220 	orr.w	r2, r2, #32
 8006c6c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c7e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006c86:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c96:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c98:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d115      	bne.n	8006cd0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cb2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006cbc:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006ccc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006cce:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fc3c 	bl	8007564 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	40006400 	.word	0x40006400
 8006d10:	40006500 	.word	0x40006500

08006d14 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006d24:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006d26:	7dfb      	ldrb	r3, [r7, #23]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d002      	beq.n	8006d32 <HAL_FDCAN_ConfigFilter+0x1e>
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d13d      	bne.n	8006dae <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d119      	bne.n	8006d6e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d46:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8006d4e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006d54:	4313      	orrs	r3, r2
 8006d56:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	e01d      	b.n	8006daa <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	68db      	ldr	r3, [r3, #12]
 8006d72:	075a      	lsls	r2, r3, #29
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	079a      	lsls	r2, r3, #30
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	695b      	ldr	r3, [r3, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	3304      	adds	r3, #4
 8006da2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	68fa      	ldr	r2, [r7, #12]
 8006da8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e006      	b.n	8006dbc <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	f043 0202 	orr.w	r2, r3, #2
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
  }
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	371c      	adds	r7, #28
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d110      	bne.n	8006dfe <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	699a      	ldr	r2, [r3, #24]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e006      	b.n	8006e0c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e02:	f043 0204 	orr.w	r2, r3, #4
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
  }
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d12c      	bne.n	8006e8a <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e023      	b.n	8006e98 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006e58:	0c1b      	lsrs	r3, r3, #16
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68b9      	ldr	r1, [r7, #8]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f000 fbd2 	bl	8007610 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	2101      	movs	r1, #1
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	fa01 f202 	lsl.w	r2, r1, r2
 8006e78:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	409a      	lsls	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006e86:	2300      	movs	r3, #0
 8006e88:	e006      	b.n	8006e98 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8e:	f043 0208 	orr.w	r2, r3, #8
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b08b      	sub	sp, #44	; 0x2c
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
 8006eac:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006eb4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006eb6:	7efb      	ldrb	r3, [r7, #27]
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	f040 80bc 	bne.w	8007036 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	d121      	bne.n	8006f08 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d107      	bne.n	8006ee4 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ed8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0af      	b.n	8007044 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eec:	0a1b      	lsrs	r3, r3, #8
 8006eee:	f003 0303 	and.w	r3, r3, #3
 8006ef2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006ef8:	69fa      	ldr	r2, [r7, #28]
 8006efa:	4613      	mov	r3, r2
 8006efc:	00db      	lsls	r3, r3, #3
 8006efe:	4413      	add	r3, r2
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	440b      	add	r3, r1
 8006f04:	627b      	str	r3, [r7, #36]	; 0x24
 8006f06:	e020      	b.n	8006f4a <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d107      	bne.n	8006f28 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f1c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e08d      	b.n	8007044 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f30:	0a1b      	lsrs	r3, r3, #8
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006f3c:	69fa      	ldr	r2, [r7, #28]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	00db      	lsls	r3, r3, #3
 8006f42:	4413      	add	r3, r2
 8006f44:	00db      	lsls	r3, r3, #3
 8006f46:	440b      	add	r3, r1
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	0c9b      	lsrs	r3, r3, #18
 8006f64:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	e005      	b.n	8006f7a <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f94:	3304      	adds	r3, #4
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	0e1b      	lsrs	r3, r3, #24
 8006fcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	0fda      	lsrs	r2, r3, #31
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe0:	3304      	adds	r3, #4
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006fe8:	2300      	movs	r3, #0
 8006fea:	623b      	str	r3, [r7, #32]
 8006fec:	e00a      	b.n	8007004 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	441a      	add	r2, r3
 8006ff4:	6839      	ldr	r1, [r7, #0]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	440b      	add	r3, r1
 8006ffa:	7812      	ldrb	r2, [r2, #0]
 8006ffc:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	3301      	adds	r3, #1
 8007002:	623b      	str	r3, [r7, #32]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	0c1b      	lsrs	r3, r3, #16
 800700a:	4a11      	ldr	r2, [pc, #68]	; (8007050 <HAL_FDCAN_GetRxMessage+0x1b0>)
 800700c:	5cd3      	ldrb	r3, [r2, r3]
 800700e:	461a      	mov	r2, r3
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	4293      	cmp	r3, r2
 8007014:	d3eb      	bcc.n	8006fee <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b40      	cmp	r3, #64	; 0x40
 800701a:	d105      	bne.n	8007028 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007026:	e004      	b.n	8007032 <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	69fa      	ldr	r2, [r7, #28]
 800702e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007032:	2300      	movs	r3, #0
 8007034:	e006      	b.n	8007044 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800703a:	f043 0208 	orr.w	r2, r3, #8
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
  }
}
 8007044:	4618      	mov	r0, r3
 8007046:	372c      	adds	r7, #44	; 0x2c
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	0800fe50 	.word	0x0800fe50

08007054 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007054:	b480      	push	{r7}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60f8      	str	r0, [r7, #12]
 800705c:	60b9      	str	r1, [r7, #8]
 800705e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007066:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007068:	7dfb      	ldrb	r3, [r7, #23]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d003      	beq.n	8007076 <HAL_FDCAN_ActivateNotification+0x22>
 800706e:	7dfb      	ldrb	r3, [r7, #23]
 8007070:	2b02      	cmp	r3, #2
 8007072:	f040 80c8 	bne.w	8007206 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800707c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	f003 0307 	and.w	r3, r3, #7
 8007084:	2b00      	cmp	r3, #0
 8007086:	d004      	beq.n	8007092 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d03b      	beq.n	800710a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007098:	2b00      	cmp	r3, #0
 800709a:	d004      	beq.n	80070a6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f003 0302 	and.w	r3, r3, #2
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d031      	beq.n	800710a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d004      	beq.n	80070ba <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f003 0304 	and.w	r3, r3, #4
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d027      	beq.n	800710a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	f003 0308 	and.w	r3, r3, #8
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d01d      	beq.n	800710a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d004      	beq.n	80070e2 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f003 0310 	and.w	r3, r3, #16
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d013      	beq.n	800710a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d004      	beq.n	80070f6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f003 0320 	and.w	r3, r3, #32
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d009      	beq.n	800710a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00c      	beq.n	800711a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f042 0201 	orr.w	r2, r2, #1
 8007118:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	2b00      	cmp	r3, #0
 8007122:	d004      	beq.n	800712e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f003 0301 	and.w	r3, r3, #1
 800712a:	2b00      	cmp	r3, #0
 800712c:	d13b      	bne.n	80071a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007134:	2b00      	cmp	r3, #0
 8007136:	d004      	beq.n	8007142 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d131      	bne.n	80071a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007148:	2b00      	cmp	r3, #0
 800714a:	d004      	beq.n	8007156 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d127      	bne.n	80071a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800715c:	2b00      	cmp	r3, #0
 800715e:	d004      	beq.n	800716a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007160:	693b      	ldr	r3, [r7, #16]
 8007162:	f003 0308 	and.w	r3, r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d11d      	bne.n	80071a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007170:	2b00      	cmp	r3, #0
 8007172:	d004      	beq.n	800717e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f003 0310 	and.w	r3, r3, #16
 800717a:	2b00      	cmp	r3, #0
 800717c:	d113      	bne.n	80071a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007184:	2b00      	cmp	r3, #0
 8007186:	d004      	beq.n	8007192 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d109      	bne.n	80071a6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00c      	beq.n	80071b6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d007      	beq.n	80071b6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f042 0202 	orr.w	r2, r2, #2
 80071b4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d009      	beq.n	80071f2 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	430a      	orrs	r2, r1
 80071ee:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	430a      	orrs	r2, r1
 8007200:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8007202:	2300      	movs	r3, #0
 8007204:	e006      	b.n	8007214 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720a:	f043 0202 	orr.w	r2, r3, #2
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007212:	2301      	movs	r3, #1
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	371c      	adds	r7, #28
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08a      	sub	sp, #40	; 0x28
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800722e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8007232:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800723c:	4013      	ands	r3, r2
 800723e:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007252:	6a3a      	ldr	r2, [r7, #32]
 8007254:	4013      	ands	r3, r2
 8007256:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800725e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007262:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	4013      	ands	r3, r2
 800726e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007276:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800727a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4013      	ands	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800728e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8007292:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729a:	697a      	ldr	r2, [r7, #20]
 800729c:	4013      	ands	r3, r2
 800729e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00d      	beq.n	80072ca <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d006      	beq.n	80072ca <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2240      	movs	r2, #64	; 0x40
 80072c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f92e 	bl	8007526 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01b      	beq.n	8007310 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d014      	beq.n	8007310 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80072ee:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	4013      	ands	r3, r2
 80072fc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007306:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007308:	6939      	ldr	r1, [r7, #16]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f8ec 	bl	80074e8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800731e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f8b6 	bl	8007492 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007326:	6a3b      	ldr	r3, [r7, #32]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d007      	beq.n	800733c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6a3a      	ldr	r2, [r7, #32]
 8007332:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007334:	6a39      	ldr	r1, [r7, #32]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7f9 fe30 	bl	8000f9c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d007      	beq.n	8007352 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800734a:	69f9      	ldr	r1, [r7, #28]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f8ab 	bl	80074a8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007358:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800735c:	2b00      	cmp	r3, #0
 800735e:	d00e      	beq.n	800737e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007366:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800736a:	2b00      	cmp	r3, #0
 800736c:	d007      	beq.n	800737e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007376:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 f8a0 	bl	80074be <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007388:	2b00      	cmp	r3, #0
 800738a:	d01a      	beq.n	80073c2 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007396:	2b00      	cmp	r3, #0
 8007398:	d013      	beq.n	80073c2 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80073a2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	4013      	ands	r3, r2
 80073b0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2280      	movs	r2, #128	; 0x80
 80073b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80073ba:	68f9      	ldr	r1, [r7, #12]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 f888 	bl	80074d2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d007      	beq.n	80073ee <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 f888 	bl	80074fe <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00e      	beq.n	800741a <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007412:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f87c 	bl	8007512 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007420:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d011      	beq.n	800744c <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800742e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00a      	beq.n	800744c <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800743e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007444:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800745a:	6979      	ldr	r1, [r7, #20]
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f876 	bl	800754e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d009      	beq.n	800747c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007474:	69bb      	ldr	r3, [r7, #24]
 8007476:	431a      	orrs	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007480:	2b00      	cmp	r3, #0
 8007482:	d002      	beq.n	800748a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f858 	bl	800753a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800748a:	bf00      	nop
 800748c:	3728      	adds	r7, #40	; 0x28
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}

08007492 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007492:	b480      	push	{r7}
 8007494:	b083      	sub	sp, #12
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
 800749a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074be:	b480      	push	{r7}
 80074c0:	b083      	sub	sp, #12
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80074c6:	bf00      	nop
 80074c8:	370c      	adds	r7, #12
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80074dc:	bf00      	nop
 80074de:	370c      	adds	r7, #12
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80074f2:	bf00      	nop
 80074f4:	370c      	adds	r7, #12
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr

080074fe <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007506:	bf00      	nop
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr

08007512 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007512:	b480      	push	{r7}
 8007514:	b083      	sub	sp, #12
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800751a:	bf00      	nop
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007526:	b480      	push	{r7}
 8007528:	b083      	sub	sp, #12
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800752e:	bf00      	nop
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr

0800753a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
 8007556:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007564:	b480      	push	{r7}
 8007566:	b085      	sub	sp, #20
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 800756c:	4b27      	ldr	r3, [pc, #156]	; (800760c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800756e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800757e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007586:	041a      	lsls	r2, r3, #16
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	430a      	orrs	r2, r1
 800758e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	061a      	lsls	r2, r3, #24
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	e005      	b.n	80075f2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	3304      	adds	r3, #4
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d3f3      	bcc.n	80075e6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	3714      	adds	r7, #20
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	4000a400 	.word	0x4000a400

08007610 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
 800761c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10a      	bne.n	800763c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800762e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007636:	4313      	orrs	r3, r2
 8007638:	61fb      	str	r3, [r7, #28]
 800763a:	e00a      	b.n	8007652 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007644:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800764a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800764c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007650:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800765c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007662:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007668:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800766e:	4313      	orrs	r3, r2
 8007670:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4413      	add	r3, r2
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	440b      	add	r3, r1
 8007682:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3304      	adds	r3, #4
 800768e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007690:	69bb      	ldr	r3, [r7, #24]
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	3304      	adds	r3, #4
 800769a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]
 80076a0:	e020      	b.n	80076e4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	3303      	adds	r3, #3
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	4413      	add	r3, r2
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	3302      	adds	r3, #2
 80076b2:	6879      	ldr	r1, [r7, #4]
 80076b4:	440b      	add	r3, r1
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80076ba:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	3301      	adds	r3, #1
 80076c0:	6879      	ldr	r1, [r7, #4]
 80076c2:	440b      	add	r3, r1
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80076c8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	440a      	add	r2, r1
 80076d0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80076d2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	3304      	adds	r3, #4
 80076dc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	3304      	adds	r3, #4
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	68db      	ldr	r3, [r3, #12]
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	4a06      	ldr	r2, [pc, #24]	; (8007704 <FDCAN_CopyMessageToRAM+0xf4>)
 80076ec:	5cd3      	ldrb	r3, [r2, r3]
 80076ee:	461a      	mov	r2, r3
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d3d5      	bcc.n	80076a2 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	3724      	adds	r7, #36	; 0x24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	0800fe50 	.word	0x0800fe50

08007708 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8007716:	2300      	movs	r3, #0
 8007718:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800771a:	4b24      	ldr	r3, [pc, #144]	; (80077ac <HAL_FLASH_Program+0xa4>)
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	2b01      	cmp	r3, #1
 8007720:	d101      	bne.n	8007726 <HAL_FLASH_Program+0x1e>
 8007722:	2302      	movs	r3, #2
 8007724:	e03e      	b.n	80077a4 <HAL_FLASH_Program+0x9c>
 8007726:	4b21      	ldr	r3, [pc, #132]	; (80077ac <HAL_FLASH_Program+0xa4>)
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800772c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007730:	f000 f888 	bl	8007844 <FLASH_WaitForLastOperation>
 8007734:	4603      	mov	r3, r0
 8007736:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d12e      	bne.n	800779c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800773e:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <HAL_FLASH_Program+0xa4>)
 8007740:	2200      	movs	r2, #0
 8007742:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d107      	bne.n	800775a <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800774a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800774e:	68b8      	ldr	r0, [r7, #8]
 8007750:	f000 f8cc 	bl	80078ec <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007754:	2301      	movs	r3, #1
 8007756:	613b      	str	r3, [r7, #16]
 8007758:	e010      	b.n	800777c <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b01      	cmp	r3, #1
 800775e:	d002      	beq.n	8007766 <HAL_FLASH_Program+0x5e>
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2b02      	cmp	r3, #2
 8007764:	d10a      	bne.n	800777c <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	4619      	mov	r1, r3
 800776a:	68b8      	ldr	r0, [r7, #8]
 800776c:	f000 f8e4 	bl	8007938 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2b02      	cmp	r3, #2
 8007774:	d102      	bne.n	800777c <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007776:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800777a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800777c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007780:	f000 f860 	bl	8007844 <FLASH_WaitForLastOperation>
 8007784:	4603      	mov	r3, r0
 8007786:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d006      	beq.n	800779c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800778e:	4b08      	ldr	r3, [pc, #32]	; (80077b0 <HAL_FLASH_Program+0xa8>)
 8007790:	695a      	ldr	r2, [r3, #20]
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	43db      	mvns	r3, r3
 8007796:	4906      	ldr	r1, [pc, #24]	; (80077b0 <HAL_FLASH_Program+0xa8>)
 8007798:	4013      	ands	r3, r2
 800779a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800779c:	4b03      	ldr	r3, [pc, #12]	; (80077ac <HAL_FLASH_Program+0xa4>)
 800779e:	2200      	movs	r2, #0
 80077a0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80077a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	2000000c 	.word	0x2000000c
 80077b0:	40022000 	.word	0x40022000

080077b4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80077ba:	2300      	movs	r3, #0
 80077bc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80077be:	4b0b      	ldr	r3, [pc, #44]	; (80077ec <HAL_FLASH_Unlock+0x38>)
 80077c0:	695b      	ldr	r3, [r3, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	da0b      	bge.n	80077de <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <HAL_FLASH_Unlock+0x38>)
 80077c8:	4a09      	ldr	r2, [pc, #36]	; (80077f0 <HAL_FLASH_Unlock+0x3c>)
 80077ca:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80077cc:	4b07      	ldr	r3, [pc, #28]	; (80077ec <HAL_FLASH_Unlock+0x38>)
 80077ce:	4a09      	ldr	r2, [pc, #36]	; (80077f4 <HAL_FLASH_Unlock+0x40>)
 80077d0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80077d2:	4b06      	ldr	r3, [pc, #24]	; (80077ec <HAL_FLASH_Unlock+0x38>)
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	da01      	bge.n	80077de <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80077de:	79fb      	ldrb	r3, [r7, #7]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	40022000 	.word	0x40022000
 80077f0:	45670123 	.word	0x45670123
 80077f4:	cdef89ab 	.word	0xcdef89ab

080077f8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007802:	4b09      	ldr	r3, [pc, #36]	; (8007828 <HAL_FLASH_Lock+0x30>)
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	4a08      	ldr	r2, [pc, #32]	; (8007828 <HAL_FLASH_Lock+0x30>)
 8007808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800780c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <HAL_FLASH_Lock+0x30>)
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	2b00      	cmp	r3, #0
 8007814:	da01      	bge.n	800781a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800781a:	79fb      	ldrb	r3, [r7, #7]
}
 800781c:	4618      	mov	r0, r3
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr
 8007828:	40022000 	.word	0x40022000

0800782c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 800782c:	b480      	push	{r7}
 800782e:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007830:	4b03      	ldr	r3, [pc, #12]	; (8007840 <HAL_FLASH_GetError+0x14>)
 8007832:	685b      	ldr	r3, [r3, #4]
}
 8007834:	4618      	mov	r0, r3
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr
 800783e:	bf00      	nop
 8007840:	2000000c 	.word	0x2000000c

08007844 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800784c:	f7fd fce0 	bl	8005210 <HAL_GetTick>
 8007850:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007852:	e009      	b.n	8007868 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007854:	f7fd fcdc 	bl	8005210 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	429a      	cmp	r2, r3
 8007862:	d201      	bcs.n	8007868 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007864:	2303      	movs	r3, #3
 8007866:	e038      	b.n	80078da <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007868:	4b1e      	ldr	r3, [pc, #120]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007874:	d0ee      	beq.n	8007854 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007876:	4b1b      	ldr	r3, [pc, #108]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800787e:	4013      	ands	r3, r2
 8007880:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01e      	beq.n	80078c6 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007888:	4b17      	ldr	r3, [pc, #92]	; (80078e8 <FLASH_WaitForLastOperation+0xa4>)
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4313      	orrs	r3, r2
 8007890:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <FLASH_WaitForLastOperation+0xa4>)
 8007892:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d007      	beq.n	80078ae <FLASH_WaitForLastOperation+0x6a>
 800789e:	4b11      	ldr	r3, [pc, #68]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 80078a0:	699a      	ldr	r2, [r3, #24]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80078a8:	490e      	ldr	r1, [pc, #56]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	618b      	str	r3, [r1, #24]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d004      	beq.n	80078c2 <FLASH_WaitForLastOperation+0x7e>
 80078b8:	4a0a      	ldr	r2, [pc, #40]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80078c0:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e009      	b.n	80078da <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80078c6:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d102      	bne.n	80078d8 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80078d2:	4b04      	ldr	r3, [pc, #16]	; (80078e4 <FLASH_WaitForLastOperation+0xa0>)
 80078d4:	2201      	movs	r2, #1
 80078d6:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40022000 	.word	0x40022000
 80078e8:	2000000c 	.word	0x2000000c

080078ec <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80078f8:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <FLASH_Program_DoubleWord+0x48>)
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	4a0d      	ldr	r2, [pc, #52]	; (8007934 <FLASH_Program_DoubleWord+0x48>)
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	683a      	ldr	r2, [r7, #0]
 8007908:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800790a:	f3bf 8f6f 	isb	sy
}
 800790e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007910:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007914:	f04f 0200 	mov.w	r2, #0
 8007918:	f04f 0300 	mov.w	r3, #0
 800791c:	000a      	movs	r2, r1
 800791e:	2300      	movs	r3, #0
 8007920:	68f9      	ldr	r1, [r7, #12]
 8007922:	3104      	adds	r1, #4
 8007924:	4613      	mov	r3, r2
 8007926:	600b      	str	r3, [r1, #0]
}
 8007928:	bf00      	nop
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	40022000 	.word	0x40022000

08007938 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007938:	b480      	push	{r7}
 800793a:	b089      	sub	sp, #36	; 0x24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007942:	2340      	movs	r3, #64	; 0x40
 8007944:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800794e:	4b14      	ldr	r3, [pc, #80]	; (80079a0 <FLASH_Program_Fast+0x68>)
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	4a13      	ldr	r2, [pc, #76]	; (80079a0 <FLASH_Program_Fast+0x68>)
 8007954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007958:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800795a:	f3ef 8310 	mrs	r3, PRIMASK
 800795e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007960:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007962:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007964:	b672      	cpsid	i
}
 8007966:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007970:	69bb      	ldr	r3, [r7, #24]
 8007972:	3304      	adds	r3, #4
 8007974:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	3304      	adds	r3, #4
 800797a:	617b      	str	r3, [r7, #20]
    row_index--;
 800797c:	7ffb      	ldrb	r3, [r7, #31]
 800797e:	3b01      	subs	r3, #1
 8007980:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007982:	7ffb      	ldrb	r3, [r7, #31]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d1ef      	bne.n	8007968 <FLASH_Program_Fast+0x30>
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f383 8810 	msr	PRIMASK, r3
}
 8007992:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007994:	bf00      	nop
 8007996:	3724      	adds	r7, #36	; 0x24
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	40022000 	.word	0x40022000

080079a4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80079ae:	4b47      	ldr	r3, [pc, #284]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 80079b0:	781b      	ldrb	r3, [r3, #0]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d101      	bne.n	80079ba <HAL_FLASHEx_Erase+0x16>
 80079b6:	2302      	movs	r3, #2
 80079b8:	e083      	b.n	8007ac2 <HAL_FLASHEx_Erase+0x11e>
 80079ba:	4b44      	ldr	r3, [pc, #272]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 80079bc:	2201      	movs	r2, #1
 80079be:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80079c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80079c4:	f7ff ff3e 	bl	8007844 <FLASH_WaitForLastOperation>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d173      	bne.n	8007aba <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80079d2:	4b3e      	ldr	r3, [pc, #248]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80079d8:	4b3d      	ldr	r3, [pc, #244]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d013      	beq.n	8007a0c <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80079e4:	4b3a      	ldr	r3, [pc, #232]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d009      	beq.n	8007a04 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80079f0:	4b37      	ldr	r3, [pc, #220]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a36      	ldr	r2, [pc, #216]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 80079f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80079fa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80079fc:	4b33      	ldr	r3, [pc, #204]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 80079fe:	2203      	movs	r2, #3
 8007a00:	771a      	strb	r2, [r3, #28]
 8007a02:	e016      	b.n	8007a32 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007a04:	4b31      	ldr	r3, [pc, #196]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	771a      	strb	r2, [r3, #28]
 8007a0a:	e012      	b.n	8007a32 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007a0c:	4b30      	ldr	r3, [pc, #192]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007a18:	4b2d      	ldr	r3, [pc, #180]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2c      	ldr	r2, [pc, #176]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a22:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007a24:	4b29      	ldr	r3, [pc, #164]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 8007a26:	2202      	movs	r2, #2
 8007a28:	771a      	strb	r2, [r3, #28]
 8007a2a:	e002      	b.n	8007a32 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007a2c:	4b27      	ldr	r3, [pc, #156]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d111      	bne.n	8007a5e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f848 	bl	8007ad4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a48:	f7ff fefc 	bl	8007844 <FLASH_WaitForLastOperation>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007a50:	4b1f      	ldr	r3, [pc, #124]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	4a1e      	ldr	r2, [pc, #120]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a56:	f023 0304 	bic.w	r3, r3, #4
 8007a5a:	6153      	str	r3, [r2, #20]
 8007a5c:	e02b      	b.n	8007ab6 <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295
 8007a64:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	689b      	ldr	r3, [r3, #8]
 8007a6a:	60bb      	str	r3, [r7, #8]
 8007a6c:	e01b      	b.n	8007aa6 <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	4619      	mov	r1, r3
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f000 f84b 	bl	8007b10 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007a7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a7e:	f7ff fee1 	bl	8007844 <FLASH_WaitForLastOperation>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007a86:	4b12      	ldr	r3, [pc, #72]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a88:	695b      	ldr	r3, [r3, #20]
 8007a8a:	4a11      	ldr	r2, [pc, #68]	; (8007ad0 <HAL_FLASHEx_Erase+0x12c>)
 8007a8c:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007a90:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007a92:	7bfb      	ldrb	r3, [r7, #15]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	601a      	str	r2, [r3, #0]
          break;
 8007a9e:	e00a      	b.n	8007ab6 <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60bb      	str	r3, [r7, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	689a      	ldr	r2, [r3, #8]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d3db      	bcc.n	8007a6e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007ab6:	f000 f84f 	bl	8007b58 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007aba:	4b04      	ldr	r3, [pc, #16]	; (8007acc <HAL_FLASHEx_Erase+0x128>)
 8007abc:	2200      	movs	r2, #0
 8007abe:	701a      	strb	r2, [r3, #0]

  return status;
 8007ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	2000000c 	.word	0x2000000c
 8007ad0:	40022000 	.word	0x40022000

08007ad4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f003 0301 	and.w	r3, r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d005      	beq.n	8007af2 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007ae6:	4b09      	ldr	r3, [pc, #36]	; (8007b0c <FLASH_MassErase+0x38>)
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	4a08      	ldr	r2, [pc, #32]	; (8007b0c <FLASH_MassErase+0x38>)
 8007aec:	f043 0304 	orr.w	r3, r3, #4
 8007af0:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007af2:	4b06      	ldr	r3, [pc, #24]	; (8007b0c <FLASH_MassErase+0x38>)
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	4a05      	ldr	r2, [pc, #20]	; (8007b0c <FLASH_MassErase+0x38>)
 8007af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007afc:	6153      	str	r3, [r2, #20]
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	40022000 	.word	0x40022000

08007b10 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007b1a:	4b0e      	ldr	r3, [pc, #56]	; (8007b54 <FLASH_PageErase+0x44>)
 8007b1c:	695b      	ldr	r3, [r3, #20]
 8007b1e:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	00db      	lsls	r3, r3, #3
 8007b26:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007b2a:	490a      	ldr	r1, [pc, #40]	; (8007b54 <FLASH_PageErase+0x44>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007b30:	4b08      	ldr	r3, [pc, #32]	; (8007b54 <FLASH_PageErase+0x44>)
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	4a07      	ldr	r2, [pc, #28]	; (8007b54 <FLASH_PageErase+0x44>)
 8007b36:	f043 0302 	orr.w	r3, r3, #2
 8007b3a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007b3c:	4b05      	ldr	r3, [pc, #20]	; (8007b54 <FLASH_PageErase+0x44>)
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	4a04      	ldr	r2, [pc, #16]	; (8007b54 <FLASH_PageErase+0x44>)
 8007b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b46:	6153      	str	r3, [r2, #20]
}
 8007b48:	bf00      	nop
 8007b4a:	370c      	adds	r7, #12
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b52:	4770      	bx	lr
 8007b54:	40022000 	.word	0x40022000

08007b58 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b083      	sub	sp, #12
 8007b5c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007b5e:	4b21      	ldr	r3, [pc, #132]	; (8007be4 <FLASH_FlushCaches+0x8c>)
 8007b60:	7f1b      	ldrb	r3, [r3, #28]
 8007b62:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007b64:	79fb      	ldrb	r3, [r7, #7]
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	d002      	beq.n	8007b70 <FLASH_FlushCaches+0x18>
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	2b03      	cmp	r3, #3
 8007b6e:	d117      	bne.n	8007ba0 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007b70:	4b1d      	ldr	r3, [pc, #116]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a1c      	ldr	r2, [pc, #112]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b76:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b7a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a19      	ldr	r2, [pc, #100]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4b17      	ldr	r3, [pc, #92]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b92:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007b94:	4b14      	ldr	r3, [pc, #80]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a13      	ldr	r2, [pc, #76]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007b9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007b9e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d002      	beq.n	8007bac <FLASH_FlushCaches+0x54>
 8007ba6:	79fb      	ldrb	r3, [r7, #7]
 8007ba8:	2b03      	cmp	r3, #3
 8007baa:	d111      	bne.n	8007bd0 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007bac:	4b0e      	ldr	r3, [pc, #56]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a0d      	ldr	r2, [pc, #52]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007bb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007bb6:	6013      	str	r3, [r2, #0]
 8007bb8:	4b0b      	ldr	r3, [pc, #44]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a0a      	ldr	r2, [pc, #40]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007bbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bc2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007bc4:	4b08      	ldr	r3, [pc, #32]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a07      	ldr	r2, [pc, #28]	; (8007be8 <FLASH_FlushCaches+0x90>)
 8007bca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007bce:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007bd0:	4b04      	ldr	r3, [pc, #16]	; (8007be4 <FLASH_FlushCaches+0x8c>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	771a      	strb	r2, [r3, #28]
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	2000000c 	.word	0x2000000c
 8007be8:	40022000 	.word	0x40022000

08007bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b087      	sub	sp, #28
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007bfa:	e15a      	b.n	8007eb2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	2101      	movs	r1, #1
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	fa01 f303 	lsl.w	r3, r1, r3
 8007c08:	4013      	ands	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 814c 	beq.w	8007eac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	f003 0303 	and.w	r3, r3, #3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d005      	beq.n	8007c2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d130      	bne.n	8007c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	2203      	movs	r2, #3
 8007c38:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3c:	43db      	mvns	r3, r3
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	4013      	ands	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	68da      	ldr	r2, [r3, #12]
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	005b      	lsls	r3, r3, #1
 8007c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c62:	2201      	movs	r2, #1
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	fa02 f303 	lsl.w	r3, r2, r3
 8007c6a:	43db      	mvns	r3, r3
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4013      	ands	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	091b      	lsrs	r3, r3, #4
 8007c78:	f003 0201 	and.w	r2, r3, #1
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	f003 0303 	and.w	r3, r3, #3
 8007c96:	2b03      	cmp	r3, #3
 8007c98:	d017      	beq.n	8007cca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	68db      	ldr	r3, [r3, #12]
 8007c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	005b      	lsls	r3, r3, #1
 8007ca4:	2203      	movs	r2, #3
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43db      	mvns	r3, r3
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	689a      	ldr	r2, [r3, #8]
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbe:	693a      	ldr	r2, [r7, #16]
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	2b02      	cmp	r3, #2
 8007cd4:	d123      	bne.n	8007d1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	08da      	lsrs	r2, r3, #3
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3208      	adds	r2, #8
 8007cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	f003 0307 	and.w	r3, r3, #7
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	220f      	movs	r2, #15
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	43db      	mvns	r3, r3
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	691a      	ldr	r2, [r3, #16]
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f003 0307 	and.w	r3, r3, #7
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	fa02 f303 	lsl.w	r3, r2, r3
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4313      	orrs	r3, r2
 8007d0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	08da      	lsrs	r2, r3, #3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	3208      	adds	r2, #8
 8007d18:	6939      	ldr	r1, [r7, #16]
 8007d1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	005b      	lsls	r3, r3, #1
 8007d28:	2203      	movs	r2, #3
 8007d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	693a      	ldr	r2, [r7, #16]
 8007d32:	4013      	ands	r3, r2
 8007d34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	f003 0203 	and.w	r2, r3, #3
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	005b      	lsls	r3, r3, #1
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	693a      	ldr	r2, [r7, #16]
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	f000 80a6 	beq.w	8007eac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d60:	4b5b      	ldr	r3, [pc, #364]	; (8007ed0 <HAL_GPIO_Init+0x2e4>)
 8007d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d64:	4a5a      	ldr	r2, [pc, #360]	; (8007ed0 <HAL_GPIO_Init+0x2e4>)
 8007d66:	f043 0301 	orr.w	r3, r3, #1
 8007d6a:	6613      	str	r3, [r2, #96]	; 0x60
 8007d6c:	4b58      	ldr	r3, [pc, #352]	; (8007ed0 <HAL_GPIO_Init+0x2e4>)
 8007d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d70:	f003 0301 	and.w	r3, r3, #1
 8007d74:	60bb      	str	r3, [r7, #8]
 8007d76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d78:	4a56      	ldr	r2, [pc, #344]	; (8007ed4 <HAL_GPIO_Init+0x2e8>)
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	089b      	lsrs	r3, r3, #2
 8007d7e:	3302      	adds	r3, #2
 8007d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f003 0303 	and.w	r3, r3, #3
 8007d8c:	009b      	lsls	r3, r3, #2
 8007d8e:	220f      	movs	r2, #15
 8007d90:	fa02 f303 	lsl.w	r3, r2, r3
 8007d94:	43db      	mvns	r3, r3
 8007d96:	693a      	ldr	r2, [r7, #16]
 8007d98:	4013      	ands	r3, r2
 8007d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007da2:	d01f      	beq.n	8007de4 <HAL_GPIO_Init+0x1f8>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a4c      	ldr	r2, [pc, #304]	; (8007ed8 <HAL_GPIO_Init+0x2ec>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d019      	beq.n	8007de0 <HAL_GPIO_Init+0x1f4>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a4b      	ldr	r2, [pc, #300]	; (8007edc <HAL_GPIO_Init+0x2f0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d013      	beq.n	8007ddc <HAL_GPIO_Init+0x1f0>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a4a      	ldr	r2, [pc, #296]	; (8007ee0 <HAL_GPIO_Init+0x2f4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d00d      	beq.n	8007dd8 <HAL_GPIO_Init+0x1ec>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a49      	ldr	r2, [pc, #292]	; (8007ee4 <HAL_GPIO_Init+0x2f8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d007      	beq.n	8007dd4 <HAL_GPIO_Init+0x1e8>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a48      	ldr	r2, [pc, #288]	; (8007ee8 <HAL_GPIO_Init+0x2fc>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d101      	bne.n	8007dd0 <HAL_GPIO_Init+0x1e4>
 8007dcc:	2305      	movs	r3, #5
 8007dce:	e00a      	b.n	8007de6 <HAL_GPIO_Init+0x1fa>
 8007dd0:	2306      	movs	r3, #6
 8007dd2:	e008      	b.n	8007de6 <HAL_GPIO_Init+0x1fa>
 8007dd4:	2304      	movs	r3, #4
 8007dd6:	e006      	b.n	8007de6 <HAL_GPIO_Init+0x1fa>
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e004      	b.n	8007de6 <HAL_GPIO_Init+0x1fa>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e002      	b.n	8007de6 <HAL_GPIO_Init+0x1fa>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e000      	b.n	8007de6 <HAL_GPIO_Init+0x1fa>
 8007de4:	2300      	movs	r3, #0
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	f002 0203 	and.w	r2, r2, #3
 8007dec:	0092      	lsls	r2, r2, #2
 8007dee:	4093      	lsls	r3, r2
 8007df0:	693a      	ldr	r2, [r7, #16]
 8007df2:	4313      	orrs	r3, r2
 8007df4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007df6:	4937      	ldr	r1, [pc, #220]	; (8007ed4 <HAL_GPIO_Init+0x2e8>)
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	089b      	lsrs	r3, r3, #2
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e04:	4b39      	ldr	r3, [pc, #228]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	43db      	mvns	r3, r3
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4013      	ands	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	685b      	ldr	r3, [r3, #4]
 8007e18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007e20:	693a      	ldr	r2, [r7, #16]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4313      	orrs	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007e28:	4a30      	ldr	r2, [pc, #192]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007e2e:	4b2f      	ldr	r3, [pc, #188]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	43db      	mvns	r3, r3
 8007e38:	693a      	ldr	r2, [r7, #16]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007e4a:	693a      	ldr	r2, [r7, #16]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007e52:	4a26      	ldr	r2, [pc, #152]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007e58:	4b24      	ldr	r3, [pc, #144]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	43db      	mvns	r3, r3
 8007e62:	693a      	ldr	r2, [r7, #16]
 8007e64:	4013      	ands	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	685b      	ldr	r3, [r3, #4]
 8007e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d003      	beq.n	8007e7c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007e74:	693a      	ldr	r2, [r7, #16]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007e82:	4b1a      	ldr	r3, [pc, #104]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007e9e:	693a      	ldr	r2, [r7, #16]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007ea6:	4a11      	ldr	r2, [pc, #68]	; (8007eec <HAL_GPIO_Init+0x300>)
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	3301      	adds	r3, #1
 8007eb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f47f ae9d 	bne.w	8007bfc <HAL_GPIO_Init+0x10>
  }
}
 8007ec2:	bf00      	nop
 8007ec4:	bf00      	nop
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr
 8007ed0:	40021000 	.word	0x40021000
 8007ed4:	40010000 	.word	0x40010000
 8007ed8:	48000400 	.word	0x48000400
 8007edc:	48000800 	.word	0x48000800
 8007ee0:	48000c00 	.word	0x48000c00
 8007ee4:	48001000 	.word	0x48001000
 8007ee8:	48001400 	.word	0x48001400
 8007eec:	40010400 	.word	0x40010400

08007ef0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	691a      	ldr	r2, [r3, #16]
 8007f00:	887b      	ldrh	r3, [r7, #2]
 8007f02:	4013      	ands	r3, r2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d002      	beq.n	8007f0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	73fb      	strb	r3, [r7, #15]
 8007f0c:	e001      	b.n	8007f12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3714      	adds	r7, #20
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	460b      	mov	r3, r1
 8007f2a:	807b      	strh	r3, [r7, #2]
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f30:	787b      	ldrb	r3, [r7, #1]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d003      	beq.n	8007f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007f36:	887a      	ldrh	r2, [r7, #2]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007f3c:	e002      	b.n	8007f44 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007f3e:	887a      	ldrh	r2, [r7, #2]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d101      	bne.n	8007f66 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e0bb      	b.n	80080de <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	d101      	bne.n	8007f76 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e0b3      	b.n	80080de <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d101      	bne.n	8007f86 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e0ab      	b.n	80080de <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f86:	4b58      	ldr	r3, [pc, #352]	; (80080e8 <HAL_OPAMP_Init+0x198>)
 8007f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f8a:	4a57      	ldr	r2, [pc, #348]	; (80080e8 <HAL_OPAMP_Init+0x198>)
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	6613      	str	r3, [r2, #96]	; 0x60
 8007f92:	4b55      	ldr	r3, [pc, #340]	; (80080e8 <HAL_OPAMP_Init+0x198>)
 8007f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	60bb      	str	r3, [r7, #8]
 8007f9c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d103      	bne.n	8007fb2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fc fd6c 	bl	8004a90 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	2b40      	cmp	r3, #64	; 0x40
 8007fbe:	d003      	beq.n	8007fc8 <HAL_OPAMP_Init+0x78>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	2b60      	cmp	r3, #96	; 0x60
 8007fc6:	d133      	bne.n	8008030 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f023 0110 	bic.w	r1, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	4b41      	ldr	r3, [pc, #260]	; (80080ec <HAL_OPAMP_Init+0x19c>)
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	6851      	ldr	r1, [r2, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	6892      	ldr	r2, [r2, #8]
 8007ff0:	4311      	orrs	r1, r2
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6912      	ldr	r2, [r2, #16]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	7d09      	ldrb	r1, [r1, #20]
 8007ffc:	2901      	cmp	r1, #1
 8007ffe:	d102      	bne.n	8008006 <HAL_OPAMP_Init+0xb6>
 8008000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008004:	e000      	b.n	8008008 <HAL_OPAMP_Init+0xb8>
 8008006:	2100      	movs	r1, #0
 8008008:	4311      	orrs	r1, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800800e:	4311      	orrs	r1, r2
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008014:	4311      	orrs	r1, r2
 8008016:	687a      	ldr	r2, [r7, #4]
 8008018:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800801a:	04d2      	lsls	r2, r2, #19
 800801c:	4311      	orrs	r1, r2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008022:	0612      	lsls	r2, r2, #24
 8008024:	4311      	orrs	r1, r2
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	6812      	ldr	r2, [r2, #0]
 800802a:	430b      	orrs	r3, r1
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	e035      	b.n	800809c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f023 0110 	bic.w	r1, r3, #16
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	430a      	orrs	r2, r1
 8008044:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b27      	ldr	r3, [pc, #156]	; (80080ec <HAL_OPAMP_Init+0x19c>)
 800804e:	4013      	ands	r3, r2
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	6851      	ldr	r1, [r2, #4]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6892      	ldr	r2, [r2, #8]
 8008058:	4311      	orrs	r1, r2
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	68d2      	ldr	r2, [r2, #12]
 800805e:	4311      	orrs	r1, r2
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6912      	ldr	r2, [r2, #16]
 8008064:	430a      	orrs	r2, r1
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	7d09      	ldrb	r1, [r1, #20]
 800806a:	2901      	cmp	r1, #1
 800806c:	d102      	bne.n	8008074 <HAL_OPAMP_Init+0x124>
 800806e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008072:	e000      	b.n	8008076 <HAL_OPAMP_Init+0x126>
 8008074:	2100      	movs	r1, #0
 8008076:	4311      	orrs	r1, r2
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800807c:	4311      	orrs	r1, r2
 800807e:	687a      	ldr	r2, [r7, #4]
 8008080:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008082:	4311      	orrs	r1, r2
 8008084:	687a      	ldr	r2, [r7, #4]
 8008086:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008088:	04d2      	lsls	r2, r2, #19
 800808a:	4311      	orrs	r1, r2
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008090:	0612      	lsls	r2, r2, #24
 8008092:	4311      	orrs	r1, r2
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6812      	ldr	r2, [r2, #0]
 8008098:	430b      	orrs	r3, r1
 800809a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	db10      	blt.n	80080c8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a1b      	ldr	r3, [r3, #32]
 80080be:	431a      	orrs	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	430a      	orrs	r2, r1
 80080c6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80080ce:	b2db      	uxtb	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d103      	bne.n	80080dc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
 80080e6:	bf00      	nop
 80080e8:	40021000 	.word	0x40021000
 80080ec:	e0003e11 	.word	0xe0003e11

080080f0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 80080f0:	b480      	push	{r7}
 80080f2:	b085      	sub	sp, #20
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d102      	bne.n	8008108 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	73fb      	strb	r3, [r7, #15]
 8008106:	e01d      	b.n	8008144 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b05      	cmp	r3, #5
 8008112:	d102      	bne.n	800811a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
 8008118:	e014      	b.n	8008144 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008120:	b2db      	uxtb	r3, r3
 8008122:	2b01      	cmp	r3, #1
 8008124:	d10c      	bne.n	8008140 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0201 	orr.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2204      	movs	r2, #4
 800813a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800813e:	e001      	b.n	8008144 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
	...

08008154 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008154:	b480      	push	{r7}
 8008156:	b085      	sub	sp, #20
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d141      	bne.n	80081e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008162:	4b4b      	ldr	r3, [pc, #300]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800816a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800816e:	d131      	bne.n	80081d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008170:	4b47      	ldr	r3, [pc, #284]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008176:	4a46      	ldr	r2, [pc, #280]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800817c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008180:	4b43      	ldr	r3, [pc, #268]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008188:	4a41      	ldr	r2, [pc, #260]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800818a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800818e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008190:	4b40      	ldr	r3, [pc, #256]	; (8008294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	2232      	movs	r2, #50	; 0x32
 8008196:	fb02 f303 	mul.w	r3, r2, r3
 800819a:	4a3f      	ldr	r2, [pc, #252]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800819c:	fba2 2303 	umull	r2, r3, r2, r3
 80081a0:	0c9b      	lsrs	r3, r3, #18
 80081a2:	3301      	adds	r3, #1
 80081a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081a6:	e002      	b.n	80081ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80081ae:	4b38      	ldr	r3, [pc, #224]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ba:	d102      	bne.n	80081c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1f2      	bne.n	80081a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80081c2:	4b33      	ldr	r3, [pc, #204]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081c4:	695b      	ldr	r3, [r3, #20]
 80081c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ce:	d158      	bne.n	8008282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e057      	b.n	8008284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081d4:	4b2e      	ldr	r3, [pc, #184]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081da:	4a2d      	ldr	r2, [pc, #180]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80081e4:	e04d      	b.n	8008282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081ec:	d141      	bne.n	8008272 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80081ee:	4b28      	ldr	r3, [pc, #160]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80081f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081fa:	d131      	bne.n	8008260 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80081fc:	4b24      	ldr	r3, [pc, #144]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80081fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008202:	4a23      	ldr	r2, [pc, #140]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008208:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800820c:	4b20      	ldr	r3, [pc, #128]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008214:	4a1e      	ldr	r2, [pc, #120]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800821a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800821c:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2232      	movs	r2, #50	; 0x32
 8008222:	fb02 f303 	mul.w	r3, r2, r3
 8008226:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008228:	fba2 2303 	umull	r2, r3, r2, r3
 800822c:	0c9b      	lsrs	r3, r3, #18
 800822e:	3301      	adds	r3, #1
 8008230:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008232:	e002      	b.n	800823a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3b01      	subs	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800823a:	4b15      	ldr	r3, [pc, #84]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800823c:	695b      	ldr	r3, [r3, #20]
 800823e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008246:	d102      	bne.n	800824e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1f2      	bne.n	8008234 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800824e:	4b10      	ldr	r3, [pc, #64]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008250:	695b      	ldr	r3, [r3, #20]
 8008252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800825a:	d112      	bne.n	8008282 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800825c:	2303      	movs	r3, #3
 800825e:	e011      	b.n	8008284 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008262:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008266:	4a0a      	ldr	r2, [pc, #40]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008268:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800826c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008270:	e007      	b.n	8008282 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008272:	4b07      	ldr	r3, [pc, #28]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800827a:	4a05      	ldr	r2, [pc, #20]	; (8008290 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800827c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008280:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	40007000 	.word	0x40007000
 8008294:	20000000 	.word	0x20000000
 8008298:	431bde83 	.word	0x431bde83

0800829c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	e306      	b.n	80088bc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d075      	beq.n	80083a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082ba:	4b97      	ldr	r3, [pc, #604]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f003 030c 	and.w	r3, r3, #12
 80082c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082c4:	4b94      	ldr	r3, [pc, #592]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	f003 0303 	and.w	r3, r3, #3
 80082cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b0c      	cmp	r3, #12
 80082d2:	d102      	bne.n	80082da <HAL_RCC_OscConfig+0x3e>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2b03      	cmp	r3, #3
 80082d8:	d002      	beq.n	80082e0 <HAL_RCC_OscConfig+0x44>
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	2b08      	cmp	r3, #8
 80082de:	d10b      	bne.n	80082f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082e0:	4b8d      	ldr	r3, [pc, #564]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d05b      	beq.n	80083a4 <HAL_RCC_OscConfig+0x108>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d157      	bne.n	80083a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e2e1      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008300:	d106      	bne.n	8008310 <HAL_RCC_OscConfig+0x74>
 8008302:	4b85      	ldr	r3, [pc, #532]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a84      	ldr	r2, [pc, #528]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	e01d      	b.n	800834c <HAL_RCC_OscConfig+0xb0>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008318:	d10c      	bne.n	8008334 <HAL_RCC_OscConfig+0x98>
 800831a:	4b7f      	ldr	r3, [pc, #508]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a7e      	ldr	r2, [pc, #504]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	4b7c      	ldr	r3, [pc, #496]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4a7b      	ldr	r2, [pc, #492]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 800832c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008330:	6013      	str	r3, [r2, #0]
 8008332:	e00b      	b.n	800834c <HAL_RCC_OscConfig+0xb0>
 8008334:	4b78      	ldr	r3, [pc, #480]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a77      	ldr	r2, [pc, #476]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 800833a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800833e:	6013      	str	r3, [r2, #0]
 8008340:	4b75      	ldr	r3, [pc, #468]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a74      	ldr	r2, [pc, #464]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800834a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d013      	beq.n	800837c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008354:	f7fc ff5c 	bl	8005210 <HAL_GetTick>
 8008358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800835a:	e008      	b.n	800836e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800835c:	f7fc ff58 	bl	8005210 <HAL_GetTick>
 8008360:	4602      	mov	r2, r0
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	1ad3      	subs	r3, r2, r3
 8008366:	2b64      	cmp	r3, #100	; 0x64
 8008368:	d901      	bls.n	800836e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e2a6      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800836e:	4b6a      	ldr	r3, [pc, #424]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d0f0      	beq.n	800835c <HAL_RCC_OscConfig+0xc0>
 800837a:	e014      	b.n	80083a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800837c:	f7fc ff48 	bl	8005210 <HAL_GetTick>
 8008380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008382:	e008      	b.n	8008396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008384:	f7fc ff44 	bl	8005210 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	1ad3      	subs	r3, r2, r3
 800838e:	2b64      	cmp	r3, #100	; 0x64
 8008390:	d901      	bls.n	8008396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008392:	2303      	movs	r3, #3
 8008394:	e292      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008396:	4b60      	ldr	r3, [pc, #384]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d1f0      	bne.n	8008384 <HAL_RCC_OscConfig+0xe8>
 80083a2:	e000      	b.n	80083a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d075      	beq.n	800849e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80083b2:	4b59      	ldr	r3, [pc, #356]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	f003 030c 	and.w	r3, r3, #12
 80083ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083bc:	4b56      	ldr	r3, [pc, #344]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2b0c      	cmp	r3, #12
 80083ca:	d102      	bne.n	80083d2 <HAL_RCC_OscConfig+0x136>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	2b02      	cmp	r3, #2
 80083d0:	d002      	beq.n	80083d8 <HAL_RCC_OscConfig+0x13c>
 80083d2:	69bb      	ldr	r3, [r7, #24]
 80083d4:	2b04      	cmp	r3, #4
 80083d6:	d11f      	bne.n	8008418 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80083d8:	4b4f      	ldr	r3, [pc, #316]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d005      	beq.n	80083f0 <HAL_RCC_OscConfig+0x154>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	68db      	ldr	r3, [r3, #12]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e265      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f0:	4b49      	ldr	r3, [pc, #292]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	4946      	ldr	r1, [pc, #280]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008400:	4313      	orrs	r3, r2
 8008402:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008404:	4b45      	ldr	r3, [pc, #276]	; (800851c <HAL_RCC_OscConfig+0x280>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4618      	mov	r0, r3
 800840a:	f7fc feb5 	bl	8005178 <HAL_InitTick>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d043      	beq.n	800849c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e251      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68db      	ldr	r3, [r3, #12]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d023      	beq.n	8008468 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008420:	4b3d      	ldr	r3, [pc, #244]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a3c      	ldr	r2, [pc, #240]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800842a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842c:	f7fc fef0 	bl	8005210 <HAL_GetTick>
 8008430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008432:	e008      	b.n	8008446 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008434:	f7fc feec 	bl	8005210 <HAL_GetTick>
 8008438:	4602      	mov	r2, r0
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	1ad3      	subs	r3, r2, r3
 800843e:	2b02      	cmp	r3, #2
 8008440:	d901      	bls.n	8008446 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e23a      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008446:	4b34      	ldr	r3, [pc, #208]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800844e:	2b00      	cmp	r3, #0
 8008450:	d0f0      	beq.n	8008434 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008452:	4b31      	ldr	r3, [pc, #196]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	691b      	ldr	r3, [r3, #16]
 800845e:	061b      	lsls	r3, r3, #24
 8008460:	492d      	ldr	r1, [pc, #180]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008462:	4313      	orrs	r3, r2
 8008464:	604b      	str	r3, [r1, #4]
 8008466:	e01a      	b.n	800849e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008468:	4b2b      	ldr	r3, [pc, #172]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a2a      	ldr	r2, [pc, #168]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 800846e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008474:	f7fc fecc 	bl	8005210 <HAL_GetTick>
 8008478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800847a:	e008      	b.n	800848e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800847c:	f7fc fec8 	bl	8005210 <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	1ad3      	subs	r3, r2, r3
 8008486:	2b02      	cmp	r3, #2
 8008488:	d901      	bls.n	800848e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e216      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800848e:	4b22      	ldr	r3, [pc, #136]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008496:	2b00      	cmp	r3, #0
 8008498:	d1f0      	bne.n	800847c <HAL_RCC_OscConfig+0x1e0>
 800849a:	e000      	b.n	800849e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800849c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0308 	and.w	r3, r3, #8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d041      	beq.n	800852e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d01c      	beq.n	80084ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80084b2:	4b19      	ldr	r3, [pc, #100]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80084b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084b8:	4a17      	ldr	r2, [pc, #92]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80084ba:	f043 0301 	orr.w	r3, r3, #1
 80084be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084c2:	f7fc fea5 	bl	8005210 <HAL_GetTick>
 80084c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084c8:	e008      	b.n	80084dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084ca:	f7fc fea1 	bl	8005210 <HAL_GetTick>
 80084ce:	4602      	mov	r2, r0
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	1ad3      	subs	r3, r2, r3
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d901      	bls.n	80084dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80084d8:	2303      	movs	r3, #3
 80084da:	e1ef      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80084dc:	4b0e      	ldr	r3, [pc, #56]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80084de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084e2:	f003 0302 	and.w	r3, r3, #2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0ef      	beq.n	80084ca <HAL_RCC_OscConfig+0x22e>
 80084ea:	e020      	b.n	800852e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084ec:	4b0a      	ldr	r3, [pc, #40]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80084ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80084f2:	4a09      	ldr	r2, [pc, #36]	; (8008518 <HAL_RCC_OscConfig+0x27c>)
 80084f4:	f023 0301 	bic.w	r3, r3, #1
 80084f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084fc:	f7fc fe88 	bl	8005210 <HAL_GetTick>
 8008500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008502:	e00d      	b.n	8008520 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008504:	f7fc fe84 	bl	8005210 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	2b02      	cmp	r3, #2
 8008510:	d906      	bls.n	8008520 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008512:	2303      	movs	r3, #3
 8008514:	e1d2      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
 8008516:	bf00      	nop
 8008518:	40021000 	.word	0x40021000
 800851c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008520:	4b8c      	ldr	r3, [pc, #560]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008522:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1ea      	bne.n	8008504 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0304 	and.w	r3, r3, #4
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80a6 	beq.w	8008688 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800853c:	2300      	movs	r3, #0
 800853e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008540:	4b84      	ldr	r3, [pc, #528]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d101      	bne.n	8008550 <HAL_RCC_OscConfig+0x2b4>
 800854c:	2301      	movs	r3, #1
 800854e:	e000      	b.n	8008552 <HAL_RCC_OscConfig+0x2b6>
 8008550:	2300      	movs	r3, #0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008556:	4b7f      	ldr	r3, [pc, #508]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800855a:	4a7e      	ldr	r2, [pc, #504]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800855c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008560:	6593      	str	r3, [r2, #88]	; 0x58
 8008562:	4b7c      	ldr	r3, [pc, #496]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800856a:	60fb      	str	r3, [r7, #12]
 800856c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800856e:	2301      	movs	r3, #1
 8008570:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008572:	4b79      	ldr	r3, [pc, #484]	; (8008758 <HAL_RCC_OscConfig+0x4bc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800857a:	2b00      	cmp	r3, #0
 800857c:	d118      	bne.n	80085b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800857e:	4b76      	ldr	r3, [pc, #472]	; (8008758 <HAL_RCC_OscConfig+0x4bc>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a75      	ldr	r2, [pc, #468]	; (8008758 <HAL_RCC_OscConfig+0x4bc>)
 8008584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800858a:	f7fc fe41 	bl	8005210 <HAL_GetTick>
 800858e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008590:	e008      	b.n	80085a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008592:	f7fc fe3d 	bl	8005210 <HAL_GetTick>
 8008596:	4602      	mov	r2, r0
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	1ad3      	subs	r3, r2, r3
 800859c:	2b02      	cmp	r3, #2
 800859e:	d901      	bls.n	80085a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80085a0:	2303      	movs	r3, #3
 80085a2:	e18b      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085a4:	4b6c      	ldr	r3, [pc, #432]	; (8008758 <HAL_RCC_OscConfig+0x4bc>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0f0      	beq.n	8008592 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	689b      	ldr	r3, [r3, #8]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d108      	bne.n	80085ca <HAL_RCC_OscConfig+0x32e>
 80085b8:	4b66      	ldr	r3, [pc, #408]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	4a65      	ldr	r2, [pc, #404]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085c0:	f043 0301 	orr.w	r3, r3, #1
 80085c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085c8:	e024      	b.n	8008614 <HAL_RCC_OscConfig+0x378>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d110      	bne.n	80085f4 <HAL_RCC_OscConfig+0x358>
 80085d2:	4b60      	ldr	r3, [pc, #384]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d8:	4a5e      	ldr	r2, [pc, #376]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085da:	f043 0304 	orr.w	r3, r3, #4
 80085de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085e2:	4b5c      	ldr	r3, [pc, #368]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085e8:	4a5a      	ldr	r2, [pc, #360]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085ea:	f043 0301 	orr.w	r3, r3, #1
 80085ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80085f2:	e00f      	b.n	8008614 <HAL_RCC_OscConfig+0x378>
 80085f4:	4b57      	ldr	r3, [pc, #348]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fa:	4a56      	ldr	r2, [pc, #344]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80085fc:	f023 0301 	bic.w	r3, r3, #1
 8008600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008604:	4b53      	ldr	r3, [pc, #332]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800860a:	4a52      	ldr	r2, [pc, #328]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800860c:	f023 0304 	bic.w	r3, r3, #4
 8008610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d016      	beq.n	800864a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800861c:	f7fc fdf8 	bl	8005210 <HAL_GetTick>
 8008620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008622:	e00a      	b.n	800863a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008624:	f7fc fdf4 	bl	8005210 <HAL_GetTick>
 8008628:	4602      	mov	r2, r0
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	1ad3      	subs	r3, r2, r3
 800862e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008632:	4293      	cmp	r3, r2
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e140      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800863a:	4b46      	ldr	r3, [pc, #280]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800863c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008640:	f003 0302 	and.w	r3, r3, #2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d0ed      	beq.n	8008624 <HAL_RCC_OscConfig+0x388>
 8008648:	e015      	b.n	8008676 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800864a:	f7fc fde1 	bl	8005210 <HAL_GetTick>
 800864e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008650:	e00a      	b.n	8008668 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008652:	f7fc fddd 	bl	8005210 <HAL_GetTick>
 8008656:	4602      	mov	r2, r0
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008660:	4293      	cmp	r3, r2
 8008662:	d901      	bls.n	8008668 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008664:	2303      	movs	r3, #3
 8008666:	e129      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008668:	4b3a      	ldr	r3, [pc, #232]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800866a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866e:	f003 0302 	and.w	r3, r3, #2
 8008672:	2b00      	cmp	r3, #0
 8008674:	d1ed      	bne.n	8008652 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008676:	7ffb      	ldrb	r3, [r7, #31]
 8008678:	2b01      	cmp	r3, #1
 800867a:	d105      	bne.n	8008688 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800867c:	4b35      	ldr	r3, [pc, #212]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800867e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008680:	4a34      	ldr	r2, [pc, #208]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008686:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0320 	and.w	r3, r3, #32
 8008690:	2b00      	cmp	r3, #0
 8008692:	d03c      	beq.n	800870e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	699b      	ldr	r3, [r3, #24]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d01c      	beq.n	80086d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800869c:	4b2d      	ldr	r3, [pc, #180]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800869e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086a2:	4a2c      	ldr	r2, [pc, #176]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80086a4:	f043 0301 	orr.w	r3, r3, #1
 80086a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086ac:	f7fc fdb0 	bl	8005210 <HAL_GetTick>
 80086b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086b2:	e008      	b.n	80086c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086b4:	f7fc fdac 	bl	8005210 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	693b      	ldr	r3, [r7, #16]
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e0fa      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80086c6:	4b23      	ldr	r3, [pc, #140]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80086c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086cc:	f003 0302 	and.w	r3, r3, #2
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d0ef      	beq.n	80086b4 <HAL_RCC_OscConfig+0x418>
 80086d4:	e01b      	b.n	800870e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80086d6:	4b1f      	ldr	r3, [pc, #124]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80086d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80086dc:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 80086de:	f023 0301 	bic.w	r3, r3, #1
 80086e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086e6:	f7fc fd93 	bl	8005210 <HAL_GetTick>
 80086ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80086ec:	e008      	b.n	8008700 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80086ee:	f7fc fd8f 	bl	8005210 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e0dd      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008700:	4b14      	ldr	r3, [pc, #80]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008702:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008706:	f003 0302 	and.w	r3, r3, #2
 800870a:	2b00      	cmp	r3, #0
 800870c:	d1ef      	bne.n	80086ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	2b00      	cmp	r3, #0
 8008714:	f000 80d1 	beq.w	80088ba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008718:	4b0e      	ldr	r3, [pc, #56]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 030c 	and.w	r3, r3, #12
 8008720:	2b0c      	cmp	r3, #12
 8008722:	f000 808b 	beq.w	800883c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d15e      	bne.n	80087ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800872e:	4b09      	ldr	r3, [pc, #36]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a08      	ldr	r2, [pc, #32]	; (8008754 <HAL_RCC_OscConfig+0x4b8>)
 8008734:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008738:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800873a:	f7fc fd69 	bl	8005210 <HAL_GetTick>
 800873e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008740:	e00c      	b.n	800875c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008742:	f7fc fd65 	bl	8005210 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	2b02      	cmp	r3, #2
 800874e:	d905      	bls.n	800875c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e0b3      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
 8008754:	40021000 	.word	0x40021000
 8008758:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800875c:	4b59      	ldr	r3, [pc, #356]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d1ec      	bne.n	8008742 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008768:	4b56      	ldr	r3, [pc, #344]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	4b56      	ldr	r3, [pc, #344]	; (80088c8 <HAL_RCC_OscConfig+0x62c>)
 800876e:	4013      	ands	r3, r2
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	6a11      	ldr	r1, [r2, #32]
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008778:	3a01      	subs	r2, #1
 800877a:	0112      	lsls	r2, r2, #4
 800877c:	4311      	orrs	r1, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008782:	0212      	lsls	r2, r2, #8
 8008784:	4311      	orrs	r1, r2
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800878a:	0852      	lsrs	r2, r2, #1
 800878c:	3a01      	subs	r2, #1
 800878e:	0552      	lsls	r2, r2, #21
 8008790:	4311      	orrs	r1, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008796:	0852      	lsrs	r2, r2, #1
 8008798:	3a01      	subs	r2, #1
 800879a:	0652      	lsls	r2, r2, #25
 800879c:	4311      	orrs	r1, r2
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80087a2:	06d2      	lsls	r2, r2, #27
 80087a4:	430a      	orrs	r2, r1
 80087a6:	4947      	ldr	r1, [pc, #284]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087ac:	4b45      	ldr	r3, [pc, #276]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a44      	ldr	r2, [pc, #272]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80087b8:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	4a41      	ldr	r2, [pc, #260]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80087c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087c4:	f7fc fd24 	bl	8005210 <HAL_GetTick>
 80087c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087ca:	e008      	b.n	80087de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087cc:	f7fc fd20 	bl	8005210 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d901      	bls.n	80087de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80087da:	2303      	movs	r3, #3
 80087dc:	e06e      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80087de:	4b39      	ldr	r3, [pc, #228]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d0f0      	beq.n	80087cc <HAL_RCC_OscConfig+0x530>
 80087ea:	e066      	b.n	80088ba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80087ec:	4b35      	ldr	r3, [pc, #212]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a34      	ldr	r2, [pc, #208]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80087f8:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	4a31      	ldr	r2, [pc, #196]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 80087fe:	f023 0303 	bic.w	r3, r3, #3
 8008802:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008804:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	4a2e      	ldr	r2, [pc, #184]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 800880a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800880e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008812:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008814:	f7fc fcfc 	bl	8005210 <HAL_GetTick>
 8008818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800881a:	e008      	b.n	800882e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800881c:	f7fc fcf8 	bl	8005210 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e046      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800882e:	4b25      	ldr	r3, [pc, #148]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d1f0      	bne.n	800881c <HAL_RCC_OscConfig+0x580>
 800883a:	e03e      	b.n	80088ba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	69db      	ldr	r3, [r3, #28]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e039      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <HAL_RCC_OscConfig+0x628>)
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f003 0203 	and.w	r2, r3, #3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	429a      	cmp	r2, r3
 800885a:	d12c      	bne.n	80088b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008866:	3b01      	subs	r3, #1
 8008868:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800886a:	429a      	cmp	r2, r3
 800886c:	d123      	bne.n	80088b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008878:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800887a:	429a      	cmp	r2, r3
 800887c:	d11b      	bne.n	80088b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008888:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800888a:	429a      	cmp	r2, r3
 800888c:	d113      	bne.n	80088b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008898:	085b      	lsrs	r3, r3, #1
 800889a:	3b01      	subs	r3, #1
 800889c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800889e:	429a      	cmp	r2, r3
 80088a0:	d109      	bne.n	80088b6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ac:	085b      	lsrs	r3, r3, #1
 80088ae:	3b01      	subs	r3, #1
 80088b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80088b2:	429a      	cmp	r2, r3
 80088b4:	d001      	beq.n	80088ba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e000      	b.n	80088bc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3720      	adds	r7, #32
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	40021000 	.word	0x40021000
 80088c8:	019f800c 	.word	0x019f800c

080088cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80088d6:	2300      	movs	r3, #0
 80088d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d101      	bne.n	80088e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	e11e      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088e4:	4b91      	ldr	r3, [pc, #580]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d910      	bls.n	8008914 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088f2:	4b8e      	ldr	r3, [pc, #568]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f023 020f 	bic.w	r2, r3, #15
 80088fa:	498c      	ldr	r1, [pc, #560]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	4313      	orrs	r3, r2
 8008900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008902:	4b8a      	ldr	r3, [pc, #552]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 030f 	and.w	r3, r3, #15
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d001      	beq.n	8008914 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e106      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d073      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b03      	cmp	r3, #3
 8008926:	d129      	bne.n	800897c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008928:	4b81      	ldr	r3, [pc, #516]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e0f4      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008938:	f000 f99e 	bl	8008c78 <RCC_GetSysClockFreqFromPLLSource>
 800893c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	4a7c      	ldr	r2, [pc, #496]	; (8008b34 <HAL_RCC_ClockConfig+0x268>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d93f      	bls.n	80089c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008946:	4b7a      	ldr	r3, [pc, #488]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800895a:	2b00      	cmp	r3, #0
 800895c:	d033      	beq.n	80089c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008962:	2b00      	cmp	r3, #0
 8008964:	d12f      	bne.n	80089c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008966:	4b72      	ldr	r3, [pc, #456]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800896e:	4a70      	ldr	r2, [pc, #448]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008974:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008976:	2380      	movs	r3, #128	; 0x80
 8008978:	617b      	str	r3, [r7, #20]
 800897a:	e024      	b.n	80089c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	2b02      	cmp	r3, #2
 8008982:	d107      	bne.n	8008994 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008984:	4b6a      	ldr	r3, [pc, #424]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d109      	bne.n	80089a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008990:	2301      	movs	r3, #1
 8008992:	e0c6      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008994:	4b66      	ldr	r3, [pc, #408]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	e0be      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80089a4:	f000 f8ce 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 80089a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	4a61      	ldr	r2, [pc, #388]	; (8008b34 <HAL_RCC_ClockConfig+0x268>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d909      	bls.n	80089c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80089b2:	4b5f      	ldr	r3, [pc, #380]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80089ba:	4a5d      	ldr	r2, [pc, #372]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 80089bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80089c2:	2380      	movs	r3, #128	; 0x80
 80089c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80089c6:	4b5a      	ldr	r3, [pc, #360]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f023 0203 	bic.w	r2, r3, #3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	4957      	ldr	r1, [pc, #348]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 80089d4:	4313      	orrs	r3, r2
 80089d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089d8:	f7fc fc1a 	bl	8005210 <HAL_GetTick>
 80089dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089de:	e00a      	b.n	80089f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089e0:	f7fc fc16 	bl	8005210 <HAL_GetTick>
 80089e4:	4602      	mov	r2, r0
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d901      	bls.n	80089f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80089f2:	2303      	movs	r3, #3
 80089f4:	e095      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089f6:	4b4e      	ldr	r3, [pc, #312]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f003 020c 	and.w	r2, r3, #12
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d1eb      	bne.n	80089e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d023      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 0304 	and.w	r3, r3, #4
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a20:	4b43      	ldr	r3, [pc, #268]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	4a42      	ldr	r2, [pc, #264]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a2a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f003 0308 	and.w	r3, r3, #8
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008a38:	4b3d      	ldr	r3, [pc, #244]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008a40:	4a3b      	ldr	r2, [pc, #236]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a48:	4b39      	ldr	r3, [pc, #228]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	689b      	ldr	r3, [r3, #8]
 8008a54:	4936      	ldr	r1, [pc, #216]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a56:	4313      	orrs	r3, r2
 8008a58:	608b      	str	r3, [r1, #8]
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2b80      	cmp	r3, #128	; 0x80
 8008a60:	d105      	bne.n	8008a6e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008a62:	4b33      	ldr	r3, [pc, #204]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	4a32      	ldr	r2, [pc, #200]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008a68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a6c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008a6e:	4b2f      	ldr	r3, [pc, #188]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f003 030f 	and.w	r3, r3, #15
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d21d      	bcs.n	8008ab8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f023 020f 	bic.w	r2, r3, #15
 8008a84:	4929      	ldr	r1, [pc, #164]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008a8c:	f7fc fbc0 	bl	8005210 <HAL_GetTick>
 8008a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a92:	e00a      	b.n	8008aaa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a94:	f7fc fbbc 	bl	8005210 <HAL_GetTick>
 8008a98:	4602      	mov	r2, r0
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d901      	bls.n	8008aaa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e03b      	b.n	8008b22 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008aaa:	4b20      	ldr	r3, [pc, #128]	; (8008b2c <HAL_RCC_ClockConfig+0x260>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	683a      	ldr	r2, [r7, #0]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d1ed      	bne.n	8008a94 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 0304 	and.w	r3, r3, #4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ac4:	4b1a      	ldr	r3, [pc, #104]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008ac6:	689b      	ldr	r3, [r3, #8]
 8008ac8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	68db      	ldr	r3, [r3, #12]
 8008ad0:	4917      	ldr	r1, [pc, #92]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0308 	and.w	r3, r3, #8
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d009      	beq.n	8008af6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ae2:	4b13      	ldr	r3, [pc, #76]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	00db      	lsls	r3, r3, #3
 8008af0:	490f      	ldr	r1, [pc, #60]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008af2:	4313      	orrs	r3, r2
 8008af4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008af6:	f000 f825 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b0c      	ldr	r3, [pc, #48]	; (8008b30 <HAL_RCC_ClockConfig+0x264>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	091b      	lsrs	r3, r3, #4
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	490c      	ldr	r1, [pc, #48]	; (8008b38 <HAL_RCC_ClockConfig+0x26c>)
 8008b08:	5ccb      	ldrb	r3, [r1, r3]
 8008b0a:	f003 031f 	and.w	r3, r3, #31
 8008b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8008b12:	4a0a      	ldr	r2, [pc, #40]	; (8008b3c <HAL_RCC_ClockConfig+0x270>)
 8008b14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008b16:	4b0a      	ldr	r3, [pc, #40]	; (8008b40 <HAL_RCC_ClockConfig+0x274>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7fc fb2c 	bl	8005178 <HAL_InitTick>
 8008b20:	4603      	mov	r3, r0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3718      	adds	r7, #24
 8008b26:	46bd      	mov	sp, r7
 8008b28:	bd80      	pop	{r7, pc}
 8008b2a:	bf00      	nop
 8008b2c:	40022000 	.word	0x40022000
 8008b30:	40021000 	.word	0x40021000
 8008b34:	04c4b400 	.word	0x04c4b400
 8008b38:	0800fe38 	.word	0x0800fe38
 8008b3c:	20000000 	.word	0x20000000
 8008b40:	20000004 	.word	0x20000004

08008b44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008b4a:	4b2c      	ldr	r3, [pc, #176]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b4c:	689b      	ldr	r3, [r3, #8]
 8008b4e:	f003 030c 	and.w	r3, r3, #12
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d102      	bne.n	8008b5c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008b56:	4b2a      	ldr	r3, [pc, #168]	; (8008c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008b58:	613b      	str	r3, [r7, #16]
 8008b5a:	e047      	b.n	8008bec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008b5c:	4b27      	ldr	r3, [pc, #156]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f003 030c 	and.w	r3, r3, #12
 8008b64:	2b08      	cmp	r3, #8
 8008b66:	d102      	bne.n	8008b6e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008b68:	4b26      	ldr	r3, [pc, #152]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b6a:	613b      	str	r3, [r7, #16]
 8008b6c:	e03e      	b.n	8008bec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008b6e:	4b23      	ldr	r3, [pc, #140]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b70:	689b      	ldr	r3, [r3, #8]
 8008b72:	f003 030c 	and.w	r3, r3, #12
 8008b76:	2b0c      	cmp	r3, #12
 8008b78:	d136      	bne.n	8008be8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008b7a:	4b20      	ldr	r3, [pc, #128]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b7c:	68db      	ldr	r3, [r3, #12]
 8008b7e:	f003 0303 	and.w	r3, r3, #3
 8008b82:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008b84:	4b1d      	ldr	r3, [pc, #116]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	091b      	lsrs	r3, r3, #4
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	3301      	adds	r3, #1
 8008b90:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b03      	cmp	r3, #3
 8008b96:	d10c      	bne.n	8008bb2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008b98:	4a1a      	ldr	r2, [pc, #104]	; (8008c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ba0:	4a16      	ldr	r2, [pc, #88]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ba2:	68d2      	ldr	r2, [r2, #12]
 8008ba4:	0a12      	lsrs	r2, r2, #8
 8008ba6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008baa:	fb02 f303 	mul.w	r3, r2, r3
 8008bae:	617b      	str	r3, [r7, #20]
      break;
 8008bb0:	e00c      	b.n	8008bcc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008bb2:	4a13      	ldr	r2, [pc, #76]	; (8008c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bba:	4a10      	ldr	r2, [pc, #64]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bbc:	68d2      	ldr	r2, [r2, #12]
 8008bbe:	0a12      	lsrs	r2, r2, #8
 8008bc0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008bc4:	fb02 f303 	mul.w	r3, r2, r3
 8008bc8:	617b      	str	r3, [r7, #20]
      break;
 8008bca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008bcc:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	0e5b      	lsrs	r3, r3, #25
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	e001      	b.n	8008bec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008bec:	693b      	ldr	r3, [r7, #16]
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	371c      	adds	r7, #28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	00f42400 	.word	0x00f42400
 8008c04:	007a1200 	.word	0x007a1200

08008c08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c0c:	4b03      	ldr	r3, [pc, #12]	; (8008c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	20000000 	.word	0x20000000

08008c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008c24:	f7ff fff0 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 8008c28:	4602      	mov	r2, r0
 8008c2a:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c2c:	689b      	ldr	r3, [r3, #8]
 8008c2e:	0a1b      	lsrs	r3, r3, #8
 8008c30:	f003 0307 	and.w	r3, r3, #7
 8008c34:	4904      	ldr	r1, [pc, #16]	; (8008c48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008c36:	5ccb      	ldrb	r3, [r1, r3]
 8008c38:	f003 031f 	and.w	r3, r3, #31
 8008c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	40021000 	.word	0x40021000
 8008c48:	0800fe48 	.word	0x0800fe48

08008c4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008c50:	f7ff ffda 	bl	8008c08 <HAL_RCC_GetHCLKFreq>
 8008c54:	4602      	mov	r2, r0
 8008c56:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	0adb      	lsrs	r3, r3, #11
 8008c5c:	f003 0307 	and.w	r3, r3, #7
 8008c60:	4904      	ldr	r1, [pc, #16]	; (8008c74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008c62:	5ccb      	ldrb	r3, [r1, r3]
 8008c64:	f003 031f 	and.w	r3, r3, #31
 8008c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	40021000 	.word	0x40021000
 8008c74:	0800fe48 	.word	0x0800fe48

08008c78 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b087      	sub	sp, #28
 8008c7c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c7e:	4b1e      	ldr	r3, [pc, #120]	; (8008cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0303 	and.w	r3, r3, #3
 8008c86:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c88:	4b1b      	ldr	r3, [pc, #108]	; (8008cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	091b      	lsrs	r3, r3, #4
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	3301      	adds	r3, #1
 8008c94:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d10c      	bne.n	8008cb6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c9c:	4a17      	ldr	r2, [pc, #92]	; (8008cfc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ca4:	4a14      	ldr	r2, [pc, #80]	; (8008cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008ca6:	68d2      	ldr	r2, [r2, #12]
 8008ca8:	0a12      	lsrs	r2, r2, #8
 8008caa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cae:	fb02 f303 	mul.w	r3, r2, r3
 8008cb2:	617b      	str	r3, [r7, #20]
    break;
 8008cb4:	e00c      	b.n	8008cd0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008cb6:	4a12      	ldr	r2, [pc, #72]	; (8008d00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cbe:	4a0e      	ldr	r2, [pc, #56]	; (8008cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cc0:	68d2      	ldr	r2, [r2, #12]
 8008cc2:	0a12      	lsrs	r2, r2, #8
 8008cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008cc8:	fb02 f303 	mul.w	r3, r2, r3
 8008ccc:	617b      	str	r3, [r7, #20]
    break;
 8008cce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008cd0:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	0e5b      	lsrs	r3, r3, #25
 8008cd6:	f003 0303 	and.w	r3, r3, #3
 8008cda:	3301      	adds	r3, #1
 8008cdc:	005b      	lsls	r3, r3, #1
 8008cde:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ce8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008cea:	687b      	ldr	r3, [r7, #4]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	371c      	adds	r7, #28
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	40021000 	.word	0x40021000
 8008cfc:	007a1200 	.word	0x007a1200
 8008d00:	00f42400 	.word	0x00f42400

08008d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b086      	sub	sp, #24
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d10:	2300      	movs	r3, #0
 8008d12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 8098 	beq.w	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008d22:	2300      	movs	r3, #0
 8008d24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d26:	4b43      	ldr	r3, [pc, #268]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10d      	bne.n	8008d4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d32:	4b40      	ldr	r3, [pc, #256]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d36:	4a3f      	ldr	r2, [pc, #252]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d3c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d3e:	4b3d      	ldr	r3, [pc, #244]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d46:	60bb      	str	r3, [r7, #8]
 8008d48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d4e:	4b3a      	ldr	r3, [pc, #232]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4a39      	ldr	r2, [pc, #228]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d5a:	f7fc fa59 	bl	8005210 <HAL_GetTick>
 8008d5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d60:	e009      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d62:	f7fc fa55 	bl	8005210 <HAL_GetTick>
 8008d66:	4602      	mov	r2, r0
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	1ad3      	subs	r3, r2, r3
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d902      	bls.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	74fb      	strb	r3, [r7, #19]
        break;
 8008d74:	e005      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d76:	4b30      	ldr	r3, [pc, #192]	; (8008e38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0ef      	beq.n	8008d62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008d82:	7cfb      	ldrb	r3, [r7, #19]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d159      	bne.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008d88:	4b2a      	ldr	r3, [pc, #168]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d01e      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d019      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008da4:	4b23      	ldr	r3, [pc, #140]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008db0:	4b20      	ldr	r3, [pc, #128]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008db6:	4a1f      	ldr	r2, [pc, #124]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dc0:	4b1c      	ldr	r3, [pc, #112]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008dc6:	4a1b      	ldr	r2, [pc, #108]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008dd0:	4a18      	ldr	r2, [pc, #96]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d016      	beq.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de2:	f7fc fa15 	bl	8005210 <HAL_GetTick>
 8008de6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008de8:	e00b      	b.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dea:	f7fc fa11 	bl	8005210 <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d902      	bls.n	8008e02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	74fb      	strb	r3, [r7, #19]
            break;
 8008e00:	e006      	b.n	8008e10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e02:	4b0c      	ldr	r3, [pc, #48]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e08:	f003 0302 	and.w	r3, r3, #2
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0ec      	beq.n	8008dea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e10:	7cfb      	ldrb	r3, [r7, #19]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d10b      	bne.n	8008e2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e16:	4b07      	ldr	r3, [pc, #28]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e1c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e24:	4903      	ldr	r1, [pc, #12]	; (8008e34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e26:	4313      	orrs	r3, r2
 8008e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008e2c:	e008      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e2e:	7cfb      	ldrb	r3, [r7, #19]
 8008e30:	74bb      	strb	r3, [r7, #18]
 8008e32:	e005      	b.n	8008e40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008e34:	40021000 	.word	0x40021000
 8008e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3c:	7cfb      	ldrb	r3, [r7, #19]
 8008e3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008e40:	7c7b      	ldrb	r3, [r7, #17]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d105      	bne.n	8008e52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008e46:	4ba6      	ldr	r3, [pc, #664]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4a:	4aa5      	ldr	r2, [pc, #660]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008e50:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d00a      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e5e:	4ba0      	ldr	r3, [pc, #640]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e64:	f023 0203 	bic.w	r2, r3, #3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	499c      	ldr	r1, [pc, #624]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f003 0302 	and.w	r3, r3, #2
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008e80:	4b97      	ldr	r3, [pc, #604]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e86:	f023 020c 	bic.w	r2, r3, #12
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	689b      	ldr	r3, [r3, #8]
 8008e8e:	4994      	ldr	r1, [pc, #592]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008e90:	4313      	orrs	r3, r2
 8008e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f003 0304 	and.w	r3, r3, #4
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00a      	beq.n	8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ea2:	4b8f      	ldr	r3, [pc, #572]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ea8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	68db      	ldr	r3, [r3, #12]
 8008eb0:	498b      	ldr	r1, [pc, #556]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0308 	and.w	r3, r3, #8
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00a      	beq.n	8008eda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ec4:	4b86      	ldr	r3, [pc, #536]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	691b      	ldr	r3, [r3, #16]
 8008ed2:	4983      	ldr	r1, [pc, #524]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f003 0320 	and.w	r3, r3, #32
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00a      	beq.n	8008efc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008ee6:	4b7e      	ldr	r3, [pc, #504]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	695b      	ldr	r3, [r3, #20]
 8008ef4:	497a      	ldr	r1, [pc, #488]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d00a      	beq.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f08:	4b75      	ldr	r3, [pc, #468]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	4972      	ldr	r1, [pc, #456]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f18:	4313      	orrs	r3, r2
 8008f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f2a:	4b6d      	ldr	r3, [pc, #436]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f30:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	69db      	ldr	r3, [r3, #28]
 8008f38:	4969      	ldr	r1, [pc, #420]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d00a      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f4c:	4b64      	ldr	r3, [pc, #400]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	4961      	ldr	r1, [pc, #388]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00a      	beq.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008f6e:	4b5c      	ldr	r3, [pc, #368]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	4958      	ldr	r1, [pc, #352]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d015      	beq.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f90:	4b53      	ldr	r3, [pc, #332]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f9e:	4950      	ldr	r1, [pc, #320]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fae:	d105      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fb0:	4b4b      	ldr	r3, [pc, #300]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fb2:	68db      	ldr	r3, [r3, #12]
 8008fb4:	4a4a      	ldr	r2, [pc, #296]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d015      	beq.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008fc8:	4b45      	ldr	r3, [pc, #276]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd6:	4942      	ldr	r1, [pc, #264]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fe6:	d105      	bne.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008fe8:	4b3d      	ldr	r3, [pc, #244]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4a3c      	ldr	r2, [pc, #240]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008fee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ff2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d015      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009000:	4b37      	ldr	r3, [pc, #220]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009006:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900e:	4934      	ldr	r1, [pc, #208]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009010:	4313      	orrs	r3, r2
 8009012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800901a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800901e:	d105      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009020:	4b2f      	ldr	r3, [pc, #188]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	4a2e      	ldr	r2, [pc, #184]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009026:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800902a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d015      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009038:	4b29      	ldr	r3, [pc, #164]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800903a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009046:	4926      	ldr	r1, [pc, #152]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009048:	4313      	orrs	r3, r2
 800904a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009052:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009056:	d105      	bne.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009058:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	4a20      	ldr	r2, [pc, #128]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800905e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009062:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d015      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009070:	4b1b      	ldr	r3, [pc, #108]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009076:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800907e:	4918      	ldr	r1, [pc, #96]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009080:	4313      	orrs	r3, r2
 8009082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800908e:	d105      	bne.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009090:	4b13      	ldr	r3, [pc, #76]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	4a12      	ldr	r2, [pc, #72]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009096:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800909a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d015      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80090a8:	4b0d      	ldr	r3, [pc, #52]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b6:	490a      	ldr	r1, [pc, #40]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c6:	d105      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80090c8:	4b05      	ldr	r3, [pc, #20]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	4a04      	ldr	r2, [pc, #16]	; (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80090ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80090d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	40021000 	.word	0x40021000

080090e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80090f2:	2301      	movs	r3, #1
 80090f4:	e09d      	b.n	8009232 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d108      	bne.n	8009110 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009106:	d009      	beq.n	800911c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	61da      	str	r2, [r3, #28]
 800910e:	e005      	b.n	800911c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2200      	movs	r2, #0
 8009114:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d106      	bne.n	800913c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f7fb fd20 	bl	8004b7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2202      	movs	r2, #2
 8009140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009152:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68db      	ldr	r3, [r3, #12]
 8009158:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800915c:	d902      	bls.n	8009164 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800915e:	2300      	movs	r3, #0
 8009160:	60fb      	str	r3, [r7, #12]
 8009162:	e002      	b.n	800916a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009168:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009172:	d007      	beq.n	8009184 <HAL_SPI_Init+0xa0>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800917c:	d002      	beq.n	8009184 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	689b      	ldr	r3, [r3, #8]
 8009190:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009194:	431a      	orrs	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	691b      	ldr	r3, [r3, #16]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	431a      	orrs	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80091b2:	431a      	orrs	r2, r3
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	69db      	ldr	r3, [r3, #28]
 80091b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a1b      	ldr	r3, [r3, #32]
 80091c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091c6:	ea42 0103 	orr.w	r1, r2, r3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	430a      	orrs	r2, r1
 80091d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	0c1b      	lsrs	r3, r3, #16
 80091e0:	f003 0204 	and.w	r2, r3, #4
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	431a      	orrs	r2, r3
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	431a      	orrs	r2, r3
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009200:	ea42 0103 	orr.w	r1, r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	430a      	orrs	r2, r1
 8009210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69da      	ldr	r2, [r3, #28]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009230:	2300      	movs	r3, #0
}
 8009232:	4618      	mov	r0, r3
 8009234:	3710      	adds	r7, #16
 8009236:	46bd      	mov	sp, r7
 8009238:	bd80      	pop	{r7, pc}
	...

0800923c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800923c:	b480      	push	{r7}
 800923e:	b087      	sub	sp, #28
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
 8009248:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_SPI_TransmitReceive_IT+0x20>
 8009258:	2302      	movs	r3, #2
 800925a:	e091      	b.n	8009380 <HAL_SPI_TransmitReceive_IT+0x144>
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800926a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009272:	7dbb      	ldrb	r3, [r7, #22]
 8009274:	2b01      	cmp	r3, #1
 8009276:	d00d      	beq.n	8009294 <HAL_SPI_TransmitReceive_IT+0x58>
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800927e:	d106      	bne.n	800928e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d102      	bne.n	800928e <HAL_SPI_TransmitReceive_IT+0x52>
 8009288:	7dbb      	ldrb	r3, [r7, #22]
 800928a:	2b04      	cmp	r3, #4
 800928c:	d002      	beq.n	8009294 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800928e:	2302      	movs	r3, #2
 8009290:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009292:	e070      	b.n	8009376 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d005      	beq.n	80092a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d002      	beq.n	80092a6 <HAL_SPI_TransmitReceive_IT+0x6a>
 80092a0:	887b      	ldrh	r3, [r7, #2]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d102      	bne.n	80092ac <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092aa:	e064      	b.n	8009376 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	2b04      	cmp	r3, #4
 80092b6:	d003      	beq.n	80092c0 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2205      	movs	r2, #5
 80092bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2200      	movs	r2, #0
 80092c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	887a      	ldrh	r2, [r7, #2]
 80092d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	887a      	ldrh	r2, [r7, #2]
 80092d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	687a      	ldr	r2, [r7, #4]
 80092dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	887a      	ldrh	r2, [r7, #2]
 80092e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	887a      	ldrh	r2, [r7, #2]
 80092ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092f6:	d906      	bls.n	8009306 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4a24      	ldr	r2, [pc, #144]	; (800938c <HAL_SPI_TransmitReceive_IT+0x150>)
 80092fc:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	4a23      	ldr	r2, [pc, #140]	; (8009390 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009302:	651a      	str	r2, [r3, #80]	; 0x50
 8009304:	e005      	b.n	8009312 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	4a22      	ldr	r2, [pc, #136]	; (8009394 <HAL_SPI_TransmitReceive_IT+0x158>)
 800930a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	4a22      	ldr	r2, [pc, #136]	; (8009398 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8009310:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800931a:	d802      	bhi.n	8009322 <HAL_SPI_TransmitReceive_IT+0xe6>
 800931c:	887b      	ldrh	r3, [r7, #2]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d908      	bls.n	8009334 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	685a      	ldr	r2, [r3, #4]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009330:	605a      	str	r2, [r3, #4]
 8009332:	e007      	b.n	8009344 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685a      	ldr	r2, [r3, #4]
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009342:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009352:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935e:	2b40      	cmp	r3, #64	; 0x40
 8009360:	d008      	beq.n	8009374 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009370:	601a      	str	r2, [r3, #0]
 8009372:	e000      	b.n	8009376 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009374:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800937e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009380:	4618      	mov	r0, r3
 8009382:	371c      	adds	r7, #28
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr
 800938c:	0800973f 	.word	0x0800973f
 8009390:	080097a5 	.word	0x080097a5
 8009394:	080095ef 	.word	0x080095ef
 8009398:	080096ad 	.word	0x080096ad

0800939c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b088      	sub	sp, #32
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093b4:	69bb      	ldr	r3, [r7, #24]
 80093b6:	099b      	lsrs	r3, r3, #6
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10f      	bne.n	80093e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d00a      	beq.n	80093e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80093ca:	69fb      	ldr	r3, [r7, #28]
 80093cc:	099b      	lsrs	r3, r3, #6
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d004      	beq.n	80093e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	4798      	blx	r3
    return;
 80093de:	e0d7      	b.n	8009590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	085b      	lsrs	r3, r3, #1
 80093e4:	f003 0301 	and.w	r3, r3, #1
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00a      	beq.n	8009402 <HAL_SPI_IRQHandler+0x66>
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	09db      	lsrs	r3, r3, #7
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d004      	beq.n	8009402 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	4798      	blx	r3
    return;
 8009400:	e0c6      	b.n	8009590 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	095b      	lsrs	r3, r3, #5
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d10c      	bne.n	8009428 <HAL_SPI_IRQHandler+0x8c>
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	099b      	lsrs	r3, r3, #6
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b00      	cmp	r3, #0
 8009418:	d106      	bne.n	8009428 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	0a1b      	lsrs	r3, r3, #8
 800941e:	f003 0301 	and.w	r3, r3, #1
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 80b4 	beq.w	8009590 <HAL_SPI_IRQHandler+0x1f4>
 8009428:	69fb      	ldr	r3, [r7, #28]
 800942a:	095b      	lsrs	r3, r3, #5
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 80ad 	beq.w	8009590 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	099b      	lsrs	r3, r3, #6
 800943a:	f003 0301 	and.w	r3, r3, #1
 800943e:	2b00      	cmp	r3, #0
 8009440:	d023      	beq.n	800948a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009448:	b2db      	uxtb	r3, r3
 800944a:	2b03      	cmp	r3, #3
 800944c:	d011      	beq.n	8009472 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009452:	f043 0204 	orr.w	r2, r3, #4
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800945a:	2300      	movs	r3, #0
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	68db      	ldr	r3, [r3, #12]
 8009464:	617b      	str	r3, [r7, #20]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	617b      	str	r3, [r7, #20]
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	e00b      	b.n	800948a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009472:	2300      	movs	r3, #0
 8009474:	613b      	str	r3, [r7, #16]
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68db      	ldr	r3, [r3, #12]
 800947c:	613b      	str	r3, [r7, #16]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	613b      	str	r3, [r7, #16]
 8009486:	693b      	ldr	r3, [r7, #16]
        return;
 8009488:	e082      	b.n	8009590 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800948a:	69bb      	ldr	r3, [r7, #24]
 800948c:	095b      	lsrs	r3, r3, #5
 800948e:	f003 0301 	and.w	r3, r3, #1
 8009492:	2b00      	cmp	r3, #0
 8009494:	d014      	beq.n	80094c0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800949a:	f043 0201 	orr.w	r2, r3, #1
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094a2:	2300      	movs	r3, #0
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80094bc:	601a      	str	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00c      	beq.n	80094e6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094d0:	f043 0208 	orr.w	r2, r3, #8
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80094d8:	2300      	movs	r3, #0
 80094da:	60bb      	str	r3, [r7, #8]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	60bb      	str	r3, [r7, #8]
 80094e4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d04f      	beq.n	800958e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	685a      	ldr	r2, [r3, #4]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80094fc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2201      	movs	r2, #1
 8009502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8009506:	69fb      	ldr	r3, [r7, #28]
 8009508:	f003 0302 	and.w	r3, r3, #2
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <HAL_SPI_IRQHandler+0x17e>
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b00      	cmp	r3, #0
 8009518:	d034      	beq.n	8009584 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	685a      	ldr	r2, [r3, #4]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0203 	bic.w	r2, r2, #3
 8009528:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800952e:	2b00      	cmp	r3, #0
 8009530:	d011      	beq.n	8009556 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009536:	4a18      	ldr	r2, [pc, #96]	; (8009598 <HAL_SPI_IRQHandler+0x1fc>)
 8009538:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800953e:	4618      	mov	r0, r3
 8009540:	f7fd fa27 	bl	8006992 <HAL_DMA_Abort_IT>
 8009544:	4603      	mov	r3, r0
 8009546:	2b00      	cmp	r3, #0
 8009548:	d005      	beq.n	8009556 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800954e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800955a:	2b00      	cmp	r3, #0
 800955c:	d016      	beq.n	800958c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009562:	4a0d      	ldr	r2, [pc, #52]	; (8009598 <HAL_SPI_IRQHandler+0x1fc>)
 8009564:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800956a:	4618      	mov	r0, r3
 800956c:	f7fd fa11 	bl	8006992 <HAL_DMA_Abort_IT>
 8009570:	4603      	mov	r3, r0
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800957a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8009582:	e003      	b.n	800958c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 f813 	bl	80095b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800958a:	e000      	b.n	800958e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800958c:	bf00      	nop
    return;
 800958e:	bf00      	nop
  }
}
 8009590:	3720      	adds	r7, #32
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	080095c5 	.word	0x080095c5

0800959c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2200      	movs	r2, #0
 80095de:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f7ff ffe5 	bl	80095b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d923      	bls.n	800964a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	68da      	ldr	r2, [r3, #12]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960c:	b292      	uxth	r2, r2
 800960e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	1c9a      	adds	r2, r3, #2
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009620:	b29b      	uxth	r3, r3
 8009622:	3b02      	subs	r3, #2
 8009624:	b29a      	uxth	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d11f      	bne.n	8009678 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	685a      	ldr	r2, [r3, #4]
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009646:	605a      	str	r2, [r3, #4]
 8009648:	e016      	b.n	8009678 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f103 020c 	add.w	r2, r3, #12
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009656:	7812      	ldrb	r2, [r2, #0]
 8009658:	b2d2      	uxtb	r2, r2
 800965a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009660:	1c5a      	adds	r2, r3, #1
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	b29a      	uxth	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800967e:	b29b      	uxth	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10f      	bne.n	80096a4 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685a      	ldr	r2, [r3, #4]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009692:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009698:	b29b      	uxth	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d102      	bne.n	80096a4 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 fa14 	bl	8009acc <SPI_CloseRxTx_ISR>
    }
  }
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d912      	bls.n	80096e4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c2:	881a      	ldrh	r2, [r3, #0]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096ce:	1c9a      	adds	r2, r3, #2
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80096d8:	b29b      	uxth	r3, r3
 80096da:	3b02      	subs	r3, #2
 80096dc:	b29a      	uxth	r2, r3
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80096e2:	e012      	b.n	800970a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	330c      	adds	r3, #12
 80096ee:	7812      	ldrb	r2, [r2, #0]
 80096f0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f6:	1c5a      	adds	r2, r3, #1
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009700:	b29b      	uxth	r3, r3
 8009702:	3b01      	subs	r3, #1
 8009704:	b29a      	uxth	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800970e:	b29b      	uxth	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	d110      	bne.n	8009736 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	685a      	ldr	r2, [r3, #4]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009722:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800972a:	b29b      	uxth	r3, r3
 800972c:	2b00      	cmp	r3, #0
 800972e:	d102      	bne.n	8009736 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9cb 	bl	8009acc <SPI_CloseRxTx_ISR>
    }
  }
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b082      	sub	sp, #8
 8009742:	af00      	add	r7, sp, #0
 8009744:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68da      	ldr	r2, [r3, #12]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009750:	b292      	uxth	r2, r2
 8009752:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009758:	1c9a      	adds	r2, r3, #2
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009776:	b29b      	uxth	r3, r3
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10f      	bne.n	800979c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	685a      	ldr	r2, [r3, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009790:	b29b      	uxth	r3, r3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d102      	bne.n	800979c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 f998 	bl	8009acc <SPI_CloseRxTx_ISR>
    }
  }
}
 800979c:	bf00      	nop
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b0:	881a      	ldrh	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	1c9a      	adds	r2, r3, #2
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	3b01      	subs	r3, #1
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d110      	bne.n	80097fc <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	685a      	ldr	r2, [r3, #4]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097e8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097f0:	b29b      	uxth	r3, r3
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d102      	bne.n	80097fc <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 f968 	bl	8009acc <SPI_CloseRxTx_ISR>
    }
  }
}
 80097fc:	bf00      	nop
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}

08009804 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b088      	sub	sp, #32
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	603b      	str	r3, [r7, #0]
 8009810:	4613      	mov	r3, r2
 8009812:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009814:	f7fb fcfc 	bl	8005210 <HAL_GetTick>
 8009818:	4602      	mov	r2, r0
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	683a      	ldr	r2, [r7, #0]
 8009820:	4413      	add	r3, r2
 8009822:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009824:	f7fb fcf4 	bl	8005210 <HAL_GetTick>
 8009828:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800982a:	4b39      	ldr	r3, [pc, #228]	; (8009910 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	015b      	lsls	r3, r3, #5
 8009830:	0d1b      	lsrs	r3, r3, #20
 8009832:	69fa      	ldr	r2, [r7, #28]
 8009834:	fb02 f303 	mul.w	r3, r2, r3
 8009838:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800983a:	e054      	b.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d050      	beq.n	80098e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009844:	f7fb fce4 	bl	8005210 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	429a      	cmp	r2, r3
 8009852:	d902      	bls.n	800985a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d13d      	bne.n	80098d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	685a      	ldr	r2, [r3, #4]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009868:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009872:	d111      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987c:	d004      	beq.n	8009888 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009886:	d107      	bne.n	8009898 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009896:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80098a0:	d10f      	bne.n	80098c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	681a      	ldr	r2, [r3, #0]
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80098b0:	601a      	str	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e017      	b.n	8009906 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80098dc:	2300      	movs	r3, #0
 80098de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	3b01      	subs	r3, #1
 80098e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	689a      	ldr	r2, [r3, #8]
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	4013      	ands	r3, r2
 80098f0:	68ba      	ldr	r2, [r7, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	bf0c      	ite	eq
 80098f6:	2301      	moveq	r3, #1
 80098f8:	2300      	movne	r3, #0
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	461a      	mov	r2, r3
 80098fe:	79fb      	ldrb	r3, [r7, #7]
 8009900:	429a      	cmp	r2, r3
 8009902:	d19b      	bne.n	800983c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000000 	.word	0x20000000

08009914 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08a      	sub	sp, #40	; 0x28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	607a      	str	r2, [r7, #4]
 8009920:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009926:	f7fb fc73 	bl	8005210 <HAL_GetTick>
 800992a:	4602      	mov	r2, r0
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	1a9b      	subs	r3, r3, r2
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	4413      	add	r3, r2
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009936:	f7fb fc6b 	bl	8005210 <HAL_GetTick>
 800993a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	330c      	adds	r3, #12
 8009942:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009944:	4b3d      	ldr	r3, [pc, #244]	; (8009a3c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	4613      	mov	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	4413      	add	r3, r2
 800994e:	00da      	lsls	r2, r3, #3
 8009950:	1ad3      	subs	r3, r2, r3
 8009952:	0d1b      	lsrs	r3, r3, #20
 8009954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009956:	fb02 f303 	mul.w	r3, r2, r3
 800995a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800995c:	e060      	b.n	8009a20 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009964:	d107      	bne.n	8009976 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d104      	bne.n	8009976 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	b2db      	uxtb	r3, r3
 8009972:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009974:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997c:	d050      	beq.n	8009a20 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800997e:	f7fb fc47 	bl	8005210 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	6a3b      	ldr	r3, [r7, #32]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	429a      	cmp	r2, r3
 800998c:	d902      	bls.n	8009994 <SPI_WaitFifoStateUntilTimeout+0x80>
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d13d      	bne.n	8009a10 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099a2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	685b      	ldr	r3, [r3, #4]
 80099a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099ac:	d111      	bne.n	80099d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099b6:	d004      	beq.n	80099c2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	689b      	ldr	r3, [r3, #8]
 80099bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099c0:	d107      	bne.n	80099d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681a      	ldr	r2, [r3, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099da:	d10f      	bne.n	80099fc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80099fa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e010      	b.n	8009a32 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a10:	69bb      	ldr	r3, [r7, #24]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009a16:	2300      	movs	r3, #0
 8009a18:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009a1a:	69bb      	ldr	r3, [r7, #24]
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689a      	ldr	r2, [r3, #8]
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	4013      	ands	r3, r2
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d196      	bne.n	800995e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3728      	adds	r7, #40	; 0x28
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20000000 	.word	0x20000000

08009a40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b086      	sub	sp, #24
 8009a44:	af02      	add	r7, sp, #8
 8009a46:	60f8      	str	r0, [r7, #12]
 8009a48:	60b9      	str	r1, [r7, #8]
 8009a4a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	9300      	str	r3, [sp, #0]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f7ff ff5b 	bl	8009914 <SPI_WaitFifoStateUntilTimeout>
 8009a5e:	4603      	mov	r3, r0
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d007      	beq.n	8009a74 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a68:	f043 0220 	orr.w	r2, r3, #32
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e027      	b.n	8009ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	9300      	str	r3, [sp, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	2180      	movs	r1, #128	; 0x80
 8009a7e:	68f8      	ldr	r0, [r7, #12]
 8009a80:	f7ff fec0 	bl	8009804 <SPI_WaitFlagStateUntilTimeout>
 8009a84:	4603      	mov	r3, r0
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d007      	beq.n	8009a9a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a8e:	f043 0220 	orr.w	r2, r3, #32
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009a96:	2303      	movs	r3, #3
 8009a98:	e014      	b.n	8009ac4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009aa6:	68f8      	ldr	r0, [r7, #12]
 8009aa8:	f7ff ff34 	bl	8009914 <SPI_WaitFifoStateUntilTimeout>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d007      	beq.n	8009ac2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ab6:	f043 0220 	orr.w	r2, r3, #32
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009abe:	2303      	movs	r3, #3
 8009ac0:	e000      	b.n	8009ac4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009ad4:	f7fb fb9c 	bl	8005210 <HAL_GetTick>
 8009ad8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	685a      	ldr	r2, [r3, #4]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0220 	bic.w	r2, r2, #32
 8009ae8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009aea:	68fa      	ldr	r2, [r7, #12]
 8009aec:	2164      	movs	r1, #100	; 0x64
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f7ff ffa6 	bl	8009a40 <SPI_EndRxTxTransaction>
 8009af4:	4603      	mov	r3, r0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009afe:	f043 0220 	orr.w	r2, r3, #32
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d115      	bne.n	8009b3a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b04      	cmp	r3, #4
 8009b18:	d107      	bne.n	8009b2a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff fd3a 	bl	800959c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009b28:	e00e      	b.n	8009b48 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f7f7 fa86 	bl	8001044 <HAL_SPI_TxRxCpltCallback>
}
 8009b38:	e006      	b.n	8009b48 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	f7ff fd34 	bl	80095b0 <HAL_SPI_ErrorCallback>
}
 8009b48:	bf00      	nop
 8009b4a:	3710      	adds	r7, #16
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	bd80      	pop	{r7, pc}

08009b50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b082      	sub	sp, #8
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e049      	b.n	8009bf6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d106      	bne.n	8009b7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2200      	movs	r2, #0
 8009b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f7fb f84c 	bl	8004c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2202      	movs	r2, #2
 8009b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	3304      	adds	r3, #4
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	4610      	mov	r0, r2
 8009b90:	f000 fe1a 	bl	800a7c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2201      	movs	r2, #1
 8009bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2201      	movs	r2, #1
 8009be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
	...

08009c00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d001      	beq.n	8009c18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009c14:	2301      	movs	r3, #1
 8009c16:	e042      	b.n	8009c9e <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a21      	ldr	r2, [pc, #132]	; (8009cac <HAL_TIM_Base_Start+0xac>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d018      	beq.n	8009c5c <HAL_TIM_Base_Start+0x5c>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c32:	d013      	beq.n	8009c5c <HAL_TIM_Base_Start+0x5c>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a1d      	ldr	r2, [pc, #116]	; (8009cb0 <HAL_TIM_Base_Start+0xb0>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d00e      	beq.n	8009c5c <HAL_TIM_Base_Start+0x5c>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a1c      	ldr	r2, [pc, #112]	; (8009cb4 <HAL_TIM_Base_Start+0xb4>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d009      	beq.n	8009c5c <HAL_TIM_Base_Start+0x5c>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a1a      	ldr	r2, [pc, #104]	; (8009cb8 <HAL_TIM_Base_Start+0xb8>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d004      	beq.n	8009c5c <HAL_TIM_Base_Start+0x5c>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a19      	ldr	r2, [pc, #100]	; (8009cbc <HAL_TIM_Base_Start+0xbc>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d115      	bne.n	8009c88 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	689a      	ldr	r2, [r3, #8]
 8009c62:	4b17      	ldr	r3, [pc, #92]	; (8009cc0 <HAL_TIM_Base_Start+0xc0>)
 8009c64:	4013      	ands	r3, r2
 8009c66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2b06      	cmp	r3, #6
 8009c6c:	d015      	beq.n	8009c9a <HAL_TIM_Base_Start+0x9a>
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c74:	d011      	beq.n	8009c9a <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f042 0201 	orr.w	r2, r2, #1
 8009c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c86:	e008      	b.n	8009c9a <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f042 0201 	orr.w	r2, r2, #1
 8009c96:	601a      	str	r2, [r3, #0]
 8009c98:	e000      	b.n	8009c9c <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c9c:	2300      	movs	r3, #0
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3714      	adds	r7, #20
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	40012c00 	.word	0x40012c00
 8009cb0:	40000400 	.word	0x40000400
 8009cb4:	40000800 	.word	0x40000800
 8009cb8:	40013400 	.word	0x40013400
 8009cbc:	40014000 	.word	0x40014000
 8009cc0:	00010007 	.word	0x00010007

08009cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b085      	sub	sp, #20
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d001      	beq.n	8009cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cd8:	2301      	movs	r3, #1
 8009cda:	e04a      	b.n	8009d72 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2202      	movs	r2, #2
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	68da      	ldr	r2, [r3, #12]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	4a21      	ldr	r2, [pc, #132]	; (8009d80 <HAL_TIM_Base_Start_IT+0xbc>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d018      	beq.n	8009d30 <HAL_TIM_Base_Start_IT+0x6c>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d06:	d013      	beq.n	8009d30 <HAL_TIM_Base_Start_IT+0x6c>
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a1d      	ldr	r2, [pc, #116]	; (8009d84 <HAL_TIM_Base_Start_IT+0xc0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d00e      	beq.n	8009d30 <HAL_TIM_Base_Start_IT+0x6c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a1c      	ldr	r2, [pc, #112]	; (8009d88 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d009      	beq.n	8009d30 <HAL_TIM_Base_Start_IT+0x6c>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a1a      	ldr	r2, [pc, #104]	; (8009d8c <HAL_TIM_Base_Start_IT+0xc8>)
 8009d22:	4293      	cmp	r3, r2
 8009d24:	d004      	beq.n	8009d30 <HAL_TIM_Base_Start_IT+0x6c>
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a19      	ldr	r2, [pc, #100]	; (8009d90 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d115      	bne.n	8009d5c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	689a      	ldr	r2, [r3, #8]
 8009d36:	4b17      	ldr	r3, [pc, #92]	; (8009d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8009d38:	4013      	ands	r3, r2
 8009d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2b06      	cmp	r3, #6
 8009d40:	d015      	beq.n	8009d6e <HAL_TIM_Base_Start_IT+0xaa>
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d48:	d011      	beq.n	8009d6e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f042 0201 	orr.w	r2, r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d5a:	e008      	b.n	8009d6e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	f042 0201 	orr.w	r2, r2, #1
 8009d6a:	601a      	str	r2, [r3, #0]
 8009d6c:	e000      	b.n	8009d70 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d70:	2300      	movs	r3, #0
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40012c00 	.word	0x40012c00
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	40013400 	.word	0x40013400
 8009d90:	40014000 	.word	0x40014000
 8009d94:	00010007 	.word	0x00010007

08009d98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e049      	b.n	8009e3e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d106      	bne.n	8009dc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f841 	bl	8009e46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	3304      	adds	r3, #4
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4610      	mov	r0, r2
 8009dd8:	f000 fcf6 	bl	800a7c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2201      	movs	r2, #1
 8009e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2201      	movs	r2, #1
 8009e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3708      	adds	r7, #8
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e4e:	bf00      	nop
 8009e50:	370c      	adds	r7, #12
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
	...

08009e5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d109      	bne.n	8009e80 <HAL_TIM_PWM_Start+0x24>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e72:	b2db      	uxtb	r3, r3
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	bf14      	ite	ne
 8009e78:	2301      	movne	r3, #1
 8009e7a:	2300      	moveq	r3, #0
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	e03c      	b.n	8009efa <HAL_TIM_PWM_Start+0x9e>
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	2b04      	cmp	r3, #4
 8009e84:	d109      	bne.n	8009e9a <HAL_TIM_PWM_Start+0x3e>
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009e8c:	b2db      	uxtb	r3, r3
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	bf14      	ite	ne
 8009e92:	2301      	movne	r3, #1
 8009e94:	2300      	moveq	r3, #0
 8009e96:	b2db      	uxtb	r3, r3
 8009e98:	e02f      	b.n	8009efa <HAL_TIM_PWM_Start+0x9e>
 8009e9a:	683b      	ldr	r3, [r7, #0]
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d109      	bne.n	8009eb4 <HAL_TIM_PWM_Start+0x58>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009ea6:	b2db      	uxtb	r3, r3
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	bf14      	ite	ne
 8009eac:	2301      	movne	r3, #1
 8009eae:	2300      	moveq	r3, #0
 8009eb0:	b2db      	uxtb	r3, r3
 8009eb2:	e022      	b.n	8009efa <HAL_TIM_PWM_Start+0x9e>
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	2b0c      	cmp	r3, #12
 8009eb8:	d109      	bne.n	8009ece <HAL_TIM_PWM_Start+0x72>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ec0:	b2db      	uxtb	r3, r3
 8009ec2:	2b01      	cmp	r3, #1
 8009ec4:	bf14      	ite	ne
 8009ec6:	2301      	movne	r3, #1
 8009ec8:	2300      	moveq	r3, #0
 8009eca:	b2db      	uxtb	r3, r3
 8009ecc:	e015      	b.n	8009efa <HAL_TIM_PWM_Start+0x9e>
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	d109      	bne.n	8009ee8 <HAL_TIM_PWM_Start+0x8c>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	bf14      	ite	ne
 8009ee0:	2301      	movne	r3, #1
 8009ee2:	2300      	moveq	r3, #0
 8009ee4:	b2db      	uxtb	r3, r3
 8009ee6:	e008      	b.n	8009efa <HAL_TIM_PWM_Start+0x9e>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009eee:	b2db      	uxtb	r3, r3
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	bf14      	ite	ne
 8009ef4:	2301      	movne	r3, #1
 8009ef6:	2300      	moveq	r3, #0
 8009ef8:	b2db      	uxtb	r3, r3
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e097      	b.n	800a032 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d104      	bne.n	8009f12 <HAL_TIM_PWM_Start+0xb6>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009f10:	e023      	b.n	8009f5a <HAL_TIM_PWM_Start+0xfe>
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	2b04      	cmp	r3, #4
 8009f16:	d104      	bne.n	8009f22 <HAL_TIM_PWM_Start+0xc6>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009f20:	e01b      	b.n	8009f5a <HAL_TIM_PWM_Start+0xfe>
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d104      	bne.n	8009f32 <HAL_TIM_PWM_Start+0xd6>
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009f30:	e013      	b.n	8009f5a <HAL_TIM_PWM_Start+0xfe>
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	2b0c      	cmp	r3, #12
 8009f36:	d104      	bne.n	8009f42 <HAL_TIM_PWM_Start+0xe6>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009f40:	e00b      	b.n	8009f5a <HAL_TIM_PWM_Start+0xfe>
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	2b10      	cmp	r3, #16
 8009f46:	d104      	bne.n	8009f52 <HAL_TIM_PWM_Start+0xf6>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2202      	movs	r2, #2
 8009f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f50:	e003      	b.n	8009f5a <HAL_TIM_PWM_Start+0xfe>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f001 f852 	bl	800b00c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a33      	ldr	r2, [pc, #204]	; (800a03c <HAL_TIM_PWM_Start+0x1e0>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d013      	beq.n	8009f9a <HAL_TIM_PWM_Start+0x13e>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a32      	ldr	r2, [pc, #200]	; (800a040 <HAL_TIM_PWM_Start+0x1e4>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d00e      	beq.n	8009f9a <HAL_TIM_PWM_Start+0x13e>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a30      	ldr	r2, [pc, #192]	; (800a044 <HAL_TIM_PWM_Start+0x1e8>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d009      	beq.n	8009f9a <HAL_TIM_PWM_Start+0x13e>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a2f      	ldr	r2, [pc, #188]	; (800a048 <HAL_TIM_PWM_Start+0x1ec>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d004      	beq.n	8009f9a <HAL_TIM_PWM_Start+0x13e>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a2d      	ldr	r2, [pc, #180]	; (800a04c <HAL_TIM_PWM_Start+0x1f0>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d101      	bne.n	8009f9e <HAL_TIM_PWM_Start+0x142>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	e000      	b.n	8009fa0 <HAL_TIM_PWM_Start+0x144>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d007      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009fb2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	4a20      	ldr	r2, [pc, #128]	; (800a03c <HAL_TIM_PWM_Start+0x1e0>)
 8009fba:	4293      	cmp	r3, r2
 8009fbc:	d018      	beq.n	8009ff0 <HAL_TIM_PWM_Start+0x194>
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009fc6:	d013      	beq.n	8009ff0 <HAL_TIM_PWM_Start+0x194>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a20      	ldr	r2, [pc, #128]	; (800a050 <HAL_TIM_PWM_Start+0x1f4>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d00e      	beq.n	8009ff0 <HAL_TIM_PWM_Start+0x194>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a1f      	ldr	r2, [pc, #124]	; (800a054 <HAL_TIM_PWM_Start+0x1f8>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d009      	beq.n	8009ff0 <HAL_TIM_PWM_Start+0x194>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a17      	ldr	r2, [pc, #92]	; (800a040 <HAL_TIM_PWM_Start+0x1e4>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d004      	beq.n	8009ff0 <HAL_TIM_PWM_Start+0x194>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4a16      	ldr	r2, [pc, #88]	; (800a044 <HAL_TIM_PWM_Start+0x1e8>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d115      	bne.n	800a01c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689a      	ldr	r2, [r3, #8]
 8009ff6:	4b18      	ldr	r3, [pc, #96]	; (800a058 <HAL_TIM_PWM_Start+0x1fc>)
 8009ff8:	4013      	ands	r3, r2
 8009ffa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b06      	cmp	r3, #6
 800a000:	d015      	beq.n	800a02e <HAL_TIM_PWM_Start+0x1d2>
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a008:	d011      	beq.n	800a02e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	681a      	ldr	r2, [r3, #0]
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f042 0201 	orr.w	r2, r2, #1
 800a018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a01a:	e008      	b.n	800a02e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	681a      	ldr	r2, [r3, #0]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f042 0201 	orr.w	r2, r2, #1
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	e000      	b.n	800a030 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a02e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	3710      	adds	r7, #16
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	40012c00 	.word	0x40012c00
 800a040:	40013400 	.word	0x40013400
 800a044:	40014000 	.word	0x40014000
 800a048:	40014400 	.word	0x40014400
 800a04c:	40014800 	.word	0x40014800
 800a050:	40000400 	.word	0x40000400
 800a054:	40000800 	.word	0x40000800
 800a058:	00010007 	.word	0x00010007

0800a05c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b082      	sub	sp, #8
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f003 0302 	and.w	r3, r3, #2
 800a06e:	2b02      	cmp	r3, #2
 800a070:	d122      	bne.n	800a0b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d11b      	bne.n	800a0b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0202 	mvn.w	r2, #2
 800a088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2201      	movs	r2, #1
 800a08e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	f003 0303 	and.w	r3, r3, #3
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d003      	beq.n	800a0a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 fb74 	bl	800a78c <HAL_TIM_IC_CaptureCallback>
 800a0a4:	e005      	b.n	800a0b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 fb66 	bl	800a778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fb77 	bl	800a7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	691b      	ldr	r3, [r3, #16]
 800a0be:	f003 0304 	and.w	r3, r3, #4
 800a0c2:	2b04      	cmp	r3, #4
 800a0c4:	d122      	bne.n	800a10c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	68db      	ldr	r3, [r3, #12]
 800a0cc:	f003 0304 	and.w	r3, r3, #4
 800a0d0:	2b04      	cmp	r3, #4
 800a0d2:	d11b      	bne.n	800a10c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f06f 0204 	mvn.w	r2, #4
 800a0dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2202      	movs	r2, #2
 800a0e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	699b      	ldr	r3, [r3, #24]
 800a0ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d003      	beq.n	800a0fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 fb4a 	bl	800a78c <HAL_TIM_IC_CaptureCallback>
 800a0f8:	e005      	b.n	800a106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 fb3c 	bl	800a778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 fb4d 	bl	800a7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	f003 0308 	and.w	r3, r3, #8
 800a116:	2b08      	cmp	r3, #8
 800a118:	d122      	bne.n	800a160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b08      	cmp	r3, #8
 800a126:	d11b      	bne.n	800a160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f06f 0208 	mvn.w	r2, #8
 800a130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2204      	movs	r2, #4
 800a136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d003      	beq.n	800a14e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 fb20 	bl	800a78c <HAL_TIM_IC_CaptureCallback>
 800a14c:	e005      	b.n	800a15a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 fb12 	bl	800a778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a154:	6878      	ldr	r0, [r7, #4]
 800a156:	f000 fb23 	bl	800a7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	691b      	ldr	r3, [r3, #16]
 800a166:	f003 0310 	and.w	r3, r3, #16
 800a16a:	2b10      	cmp	r3, #16
 800a16c:	d122      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	f003 0310 	and.w	r3, r3, #16
 800a178:	2b10      	cmp	r3, #16
 800a17a:	d11b      	bne.n	800a1b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f06f 0210 	mvn.w	r2, #16
 800a184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2208      	movs	r2, #8
 800a18a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	69db      	ldr	r3, [r3, #28]
 800a192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a196:	2b00      	cmp	r3, #0
 800a198:	d003      	beq.n	800a1a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f000 faf6 	bl	800a78c <HAL_TIM_IC_CaptureCallback>
 800a1a0:	e005      	b.n	800a1ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 fae8 	bl	800a778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 faf9 	bl	800a7a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	691b      	ldr	r3, [r3, #16]
 800a1ba:	f003 0301 	and.w	r3, r3, #1
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d10e      	bne.n	800a1e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	f003 0301 	and.w	r3, r3, #1
 800a1cc:	2b01      	cmp	r3, #1
 800a1ce:	d107      	bne.n	800a1e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	f06f 0201 	mvn.w	r2, #1
 800a1d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f7f6 fef8 	bl	8000fd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ea:	2b80      	cmp	r3, #128	; 0x80
 800a1ec:	d10e      	bne.n	800a20c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	68db      	ldr	r3, [r3, #12]
 800a1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1f8:	2b80      	cmp	r3, #128	; 0x80
 800a1fa:	d107      	bne.n	800a20c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a206:	6878      	ldr	r0, [r7, #4]
 800a208:	f001 f906 	bl	800b418 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21a:	d10e      	bne.n	800a23a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a226:	2b80      	cmp	r3, #128	; 0x80
 800a228:	d107      	bne.n	800a23a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f001 f8f9 	bl	800b42c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a244:	2b40      	cmp	r3, #64	; 0x40
 800a246:	d10e      	bne.n	800a266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a252:	2b40      	cmp	r3, #64	; 0x40
 800a254:	d107      	bne.n	800a266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a25e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a260:	6878      	ldr	r0, [r7, #4]
 800a262:	f000 faa7 	bl	800a7b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b20      	cmp	r3, #32
 800a272:	d10e      	bne.n	800a292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d107      	bne.n	800a292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f06f 0220 	mvn.w	r2, #32
 800a28a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 f8b9 	bl	800b404 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a29c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2a0:	d10f      	bne.n	800a2c2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b0:	d107      	bne.n	800a2c2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a2ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f001 f8bf 	bl	800b440 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	691b      	ldr	r3, [r3, #16]
 800a2c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2d0:	d10f      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a2e0:	d107      	bne.n	800a2f2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a2ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f001 f8b1 	bl	800b454 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a300:	d10f      	bne.n	800a322 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a30c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a310:	d107      	bne.n	800a322 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a31a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 f8a3 	bl	800b468 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a32c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a330:	d10f      	bne.n	800a352 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68db      	ldr	r3, [r3, #12]
 800a338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a33c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a340:	d107      	bne.n	800a352 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a34a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f001 f895 	bl	800b47c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a352:	bf00      	nop
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b086      	sub	sp, #24
 800a360:	af00      	add	r7, sp, #0
 800a362:	60f8      	str	r0, [r7, #12]
 800a364:	60b9      	str	r1, [r7, #8]
 800a366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a368:	2300      	movs	r3, #0
 800a36a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a372:	2b01      	cmp	r3, #1
 800a374:	d101      	bne.n	800a37a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a376:	2302      	movs	r3, #2
 800a378:	e0ff      	b.n	800a57a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	2201      	movs	r2, #1
 800a37e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b14      	cmp	r3, #20
 800a386:	f200 80f0 	bhi.w	800a56a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a38a:	a201      	add	r2, pc, #4	; (adr r2, 800a390 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a390:	0800a3e5 	.word	0x0800a3e5
 800a394:	0800a56b 	.word	0x0800a56b
 800a398:	0800a56b 	.word	0x0800a56b
 800a39c:	0800a56b 	.word	0x0800a56b
 800a3a0:	0800a425 	.word	0x0800a425
 800a3a4:	0800a56b 	.word	0x0800a56b
 800a3a8:	0800a56b 	.word	0x0800a56b
 800a3ac:	0800a56b 	.word	0x0800a56b
 800a3b0:	0800a467 	.word	0x0800a467
 800a3b4:	0800a56b 	.word	0x0800a56b
 800a3b8:	0800a56b 	.word	0x0800a56b
 800a3bc:	0800a56b 	.word	0x0800a56b
 800a3c0:	0800a4a7 	.word	0x0800a4a7
 800a3c4:	0800a56b 	.word	0x0800a56b
 800a3c8:	0800a56b 	.word	0x0800a56b
 800a3cc:	0800a56b 	.word	0x0800a56b
 800a3d0:	0800a4e9 	.word	0x0800a4e9
 800a3d4:	0800a56b 	.word	0x0800a56b
 800a3d8:	0800a56b 	.word	0x0800a56b
 800a3dc:	0800a56b 	.word	0x0800a56b
 800a3e0:	0800a529 	.word	0x0800a529
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	68b9      	ldr	r1, [r7, #8]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fa7c 	bl	800a8e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f042 0208 	orr.w	r2, r2, #8
 800a3fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	699a      	ldr	r2, [r3, #24]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0204 	bic.w	r2, r2, #4
 800a40e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6999      	ldr	r1, [r3, #24]
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	691a      	ldr	r2, [r3, #16]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	430a      	orrs	r2, r1
 800a420:	619a      	str	r2, [r3, #24]
      break;
 800a422:	e0a5      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68b9      	ldr	r1, [r7, #8]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 faec 	bl	800aa08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	699a      	ldr	r2, [r3, #24]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a43e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	699a      	ldr	r2, [r3, #24]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a44e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	6999      	ldr	r1, [r3, #24]
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	691b      	ldr	r3, [r3, #16]
 800a45a:	021a      	lsls	r2, r3, #8
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	619a      	str	r2, [r3, #24]
      break;
 800a464:	e084      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68b9      	ldr	r1, [r7, #8]
 800a46c:	4618      	mov	r0, r3
 800a46e:	f000 fb55 	bl	800ab1c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69da      	ldr	r2, [r3, #28]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f042 0208 	orr.w	r2, r2, #8
 800a480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69da      	ldr	r2, [r3, #28]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f022 0204 	bic.w	r2, r2, #4
 800a490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	69d9      	ldr	r1, [r3, #28]
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	691a      	ldr	r2, [r3, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	61da      	str	r2, [r3, #28]
      break;
 800a4a4:	e064      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68b9      	ldr	r1, [r7, #8]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f000 fbbd 	bl	800ac2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	69da      	ldr	r2, [r3, #28]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	69da      	ldr	r2, [r3, #28]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	69d9      	ldr	r1, [r3, #28]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	021a      	lsls	r2, r3, #8
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	430a      	orrs	r2, r1
 800a4e4:	61da      	str	r2, [r3, #28]
      break;
 800a4e6:	e043      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fc26 	bl	800ad40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f042 0208 	orr.w	r2, r2, #8
 800a502:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f022 0204 	bic.w	r2, r2, #4
 800a512:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	691a      	ldr	r2, [r3, #16]
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	430a      	orrs	r2, r1
 800a524:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a526:	e023      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	68b9      	ldr	r1, [r7, #8]
 800a52e:	4618      	mov	r0, r3
 800a530:	f000 fc6a 	bl	800ae08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a542:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a552:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	691b      	ldr	r3, [r3, #16]
 800a55e:	021a      	lsls	r2, r3, #8
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	430a      	orrs	r2, r1
 800a566:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a568:	e002      	b.n	800a570 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a56a:	2301      	movs	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]
      break;
 800a56e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	2200      	movs	r2, #0
 800a574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a578:	7dfb      	ldrb	r3, [r7, #23]
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3718      	adds	r7, #24
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop

0800a584 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a58e:	2300      	movs	r3, #0
 800a590:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d101      	bne.n	800a5a0 <HAL_TIM_ConfigClockSource+0x1c>
 800a59c:	2302      	movs	r3, #2
 800a59e:	e0de      	b.n	800a75e <HAL_TIM_ConfigClockSource+0x1da>
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2201      	movs	r2, #1
 800a5a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a5be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a5c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a63      	ldr	r2, [pc, #396]	; (800a768 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	f000 80a9 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a5e0:	4a61      	ldr	r2, [pc, #388]	; (800a768 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	f200 80ae 	bhi.w	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a5e8:	4a60      	ldr	r2, [pc, #384]	; (800a76c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	f000 80a1 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a5f0:	4a5e      	ldr	r2, [pc, #376]	; (800a76c <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	f200 80a6 	bhi.w	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a5f8:	4a5d      	ldr	r2, [pc, #372]	; (800a770 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	f000 8099 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a600:	4a5b      	ldr	r2, [pc, #364]	; (800a770 <HAL_TIM_ConfigClockSource+0x1ec>)
 800a602:	4293      	cmp	r3, r2
 800a604:	f200 809e 	bhi.w	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a608:	4a5a      	ldr	r2, [pc, #360]	; (800a774 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	f000 8091 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a610:	4a58      	ldr	r2, [pc, #352]	; (800a774 <HAL_TIM_ConfigClockSource+0x1f0>)
 800a612:	4293      	cmp	r3, r2
 800a614:	f200 8096 	bhi.w	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a618:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a61c:	f000 8089 	beq.w	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a620:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a624:	f200 808e 	bhi.w	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a62c:	d03e      	beq.n	800a6ac <HAL_TIM_ConfigClockSource+0x128>
 800a62e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a632:	f200 8087 	bhi.w	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a63a:	f000 8086 	beq.w	800a74a <HAL_TIM_ConfigClockSource+0x1c6>
 800a63e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a642:	d87f      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a644:	2b70      	cmp	r3, #112	; 0x70
 800a646:	d01a      	beq.n	800a67e <HAL_TIM_ConfigClockSource+0xfa>
 800a648:	2b70      	cmp	r3, #112	; 0x70
 800a64a:	d87b      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a64c:	2b60      	cmp	r3, #96	; 0x60
 800a64e:	d050      	beq.n	800a6f2 <HAL_TIM_ConfigClockSource+0x16e>
 800a650:	2b60      	cmp	r3, #96	; 0x60
 800a652:	d877      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a654:	2b50      	cmp	r3, #80	; 0x50
 800a656:	d03c      	beq.n	800a6d2 <HAL_TIM_ConfigClockSource+0x14e>
 800a658:	2b50      	cmp	r3, #80	; 0x50
 800a65a:	d873      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a65c:	2b40      	cmp	r3, #64	; 0x40
 800a65e:	d058      	beq.n	800a712 <HAL_TIM_ConfigClockSource+0x18e>
 800a660:	2b40      	cmp	r3, #64	; 0x40
 800a662:	d86f      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a664:	2b30      	cmp	r3, #48	; 0x30
 800a666:	d064      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a668:	2b30      	cmp	r3, #48	; 0x30
 800a66a:	d86b      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a66c:	2b20      	cmp	r3, #32
 800a66e:	d060      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a670:	2b20      	cmp	r3, #32
 800a672:	d867      	bhi.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
 800a674:	2b00      	cmp	r3, #0
 800a676:	d05c      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a678:	2b10      	cmp	r3, #16
 800a67a:	d05a      	beq.n	800a732 <HAL_TIM_ConfigClockSource+0x1ae>
 800a67c:	e062      	b.n	800a744 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6818      	ldr	r0, [r3, #0]
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	6899      	ldr	r1, [r3, #8]
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	685a      	ldr	r2, [r3, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f000 fc9d 	bl	800afcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a6a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68ba      	ldr	r2, [r7, #8]
 800a6a8:	609a      	str	r2, [r3, #8]
      break;
 800a6aa:	e04f      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6818      	ldr	r0, [r3, #0]
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	6899      	ldr	r1, [r3, #8]
 800a6b4:	683b      	ldr	r3, [r7, #0]
 800a6b6:	685a      	ldr	r2, [r3, #4]
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	f000 fc86 	bl	800afcc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	689a      	ldr	r2, [r3, #8]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a6ce:	609a      	str	r2, [r3, #8]
      break;
 800a6d0:	e03c      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6818      	ldr	r0, [r3, #0]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	6859      	ldr	r1, [r3, #4]
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	68db      	ldr	r3, [r3, #12]
 800a6de:	461a      	mov	r2, r3
 800a6e0:	f000 fbf8 	bl	800aed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	2150      	movs	r1, #80	; 0x50
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 fc51 	bl	800af92 <TIM_ITRx_SetConfig>
      break;
 800a6f0:	e02c      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	6859      	ldr	r1, [r3, #4]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	461a      	mov	r2, r3
 800a700:	f000 fc17 	bl	800af32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	2160      	movs	r1, #96	; 0x60
 800a70a:	4618      	mov	r0, r3
 800a70c:	f000 fc41 	bl	800af92 <TIM_ITRx_SetConfig>
      break;
 800a710:	e01c      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	6859      	ldr	r1, [r3, #4]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	461a      	mov	r2, r3
 800a720:	f000 fbd8 	bl	800aed4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	2140      	movs	r1, #64	; 0x40
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 fc31 	bl	800af92 <TIM_ITRx_SetConfig>
      break;
 800a730:	e00c      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4619      	mov	r1, r3
 800a73c:	4610      	mov	r0, r2
 800a73e:	f000 fc28 	bl	800af92 <TIM_ITRx_SetConfig>
      break;
 800a742:	e003      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	73fb      	strb	r3, [r7, #15]
      break;
 800a748:	e000      	b.n	800a74c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800a74a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2200      	movs	r2, #0
 800a758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	00100070 	.word	0x00100070
 800a76c:	00100040 	.word	0x00100040
 800a770:	00100030 	.word	0x00100030
 800a774:	00100020 	.word	0x00100020

0800a778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a78c:	b480      	push	{r7}
 800a78e:	b083      	sub	sp, #12
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a794:	bf00      	nop
 800a796:	370c      	adds	r7, #12
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a7a8:	bf00      	nop
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a7bc:	bf00      	nop
 800a7be:	370c      	adds	r7, #12
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr

0800a7c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a3c      	ldr	r2, [pc, #240]	; (800a8cc <TIM_Base_SetConfig+0x104>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00f      	beq.n	800a800 <TIM_Base_SetConfig+0x38>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e6:	d00b      	beq.n	800a800 <TIM_Base_SetConfig+0x38>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a39      	ldr	r2, [pc, #228]	; (800a8d0 <TIM_Base_SetConfig+0x108>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d007      	beq.n	800a800 <TIM_Base_SetConfig+0x38>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a38      	ldr	r2, [pc, #224]	; (800a8d4 <TIM_Base_SetConfig+0x10c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d003      	beq.n	800a800 <TIM_Base_SetConfig+0x38>
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a37      	ldr	r2, [pc, #220]	; (800a8d8 <TIM_Base_SetConfig+0x110>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d108      	bne.n	800a812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	4313      	orrs	r3, r2
 800a810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2d      	ldr	r2, [pc, #180]	; (800a8cc <TIM_Base_SetConfig+0x104>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d01b      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a820:	d017      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a2a      	ldr	r2, [pc, #168]	; (800a8d0 <TIM_Base_SetConfig+0x108>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d013      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a29      	ldr	r2, [pc, #164]	; (800a8d4 <TIM_Base_SetConfig+0x10c>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d00f      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a28      	ldr	r2, [pc, #160]	; (800a8d8 <TIM_Base_SetConfig+0x110>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d00b      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a27      	ldr	r2, [pc, #156]	; (800a8dc <TIM_Base_SetConfig+0x114>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d007      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a26      	ldr	r2, [pc, #152]	; (800a8e0 <TIM_Base_SetConfig+0x118>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d003      	beq.n	800a852 <TIM_Base_SetConfig+0x8a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a25      	ldr	r2, [pc, #148]	; (800a8e4 <TIM_Base_SetConfig+0x11c>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d108      	bne.n	800a864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	4313      	orrs	r3, r2
 800a862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	689a      	ldr	r2, [r3, #8]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	681a      	ldr	r2, [r3, #0]
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a10      	ldr	r2, [pc, #64]	; (800a8cc <TIM_Base_SetConfig+0x104>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00f      	beq.n	800a8b0 <TIM_Base_SetConfig+0xe8>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	4a11      	ldr	r2, [pc, #68]	; (800a8d8 <TIM_Base_SetConfig+0x110>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d00b      	beq.n	800a8b0 <TIM_Base_SetConfig+0xe8>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	4a10      	ldr	r2, [pc, #64]	; (800a8dc <TIM_Base_SetConfig+0x114>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d007      	beq.n	800a8b0 <TIM_Base_SetConfig+0xe8>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	4a0f      	ldr	r2, [pc, #60]	; (800a8e0 <TIM_Base_SetConfig+0x118>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	d003      	beq.n	800a8b0 <TIM_Base_SetConfig+0xe8>
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a0e      	ldr	r2, [pc, #56]	; (800a8e4 <TIM_Base_SetConfig+0x11c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d103      	bne.n	800a8b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	615a      	str	r2, [r3, #20]
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	40012c00 	.word	0x40012c00
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40013400 	.word	0x40013400
 800a8dc:	40014000 	.word	0x40014000
 800a8e0:	40014400 	.word	0x40014400
 800a8e4:	40014800 	.word	0x40014800

0800a8e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	f023 0201 	bic.w	r2, r3, #1
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a91a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f023 0303 	bic.w	r3, r3, #3
 800a922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	f023 0302 	bic.w	r3, r3, #2
 800a934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	689b      	ldr	r3, [r3, #8]
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	4313      	orrs	r3, r2
 800a93e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a2c      	ldr	r2, [pc, #176]	; (800a9f4 <TIM_OC1_SetConfig+0x10c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d00f      	beq.n	800a968 <TIM_OC1_SetConfig+0x80>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	4a2b      	ldr	r2, [pc, #172]	; (800a9f8 <TIM_OC1_SetConfig+0x110>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d00b      	beq.n	800a968 <TIM_OC1_SetConfig+0x80>
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4a2a      	ldr	r2, [pc, #168]	; (800a9fc <TIM_OC1_SetConfig+0x114>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d007      	beq.n	800a968 <TIM_OC1_SetConfig+0x80>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	4a29      	ldr	r2, [pc, #164]	; (800aa00 <TIM_OC1_SetConfig+0x118>)
 800a95c:	4293      	cmp	r3, r2
 800a95e:	d003      	beq.n	800a968 <TIM_OC1_SetConfig+0x80>
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	4a28      	ldr	r2, [pc, #160]	; (800aa04 <TIM_OC1_SetConfig+0x11c>)
 800a964:	4293      	cmp	r3, r2
 800a966:	d10c      	bne.n	800a982 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	f023 0308 	bic.w	r3, r3, #8
 800a96e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	4313      	orrs	r3, r2
 800a978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f023 0304 	bic.w	r3, r3, #4
 800a980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a1b      	ldr	r2, [pc, #108]	; (800a9f4 <TIM_OC1_SetConfig+0x10c>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d00f      	beq.n	800a9aa <TIM_OC1_SetConfig+0xc2>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a1a      	ldr	r2, [pc, #104]	; (800a9f8 <TIM_OC1_SetConfig+0x110>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d00b      	beq.n	800a9aa <TIM_OC1_SetConfig+0xc2>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a19      	ldr	r2, [pc, #100]	; (800a9fc <TIM_OC1_SetConfig+0x114>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d007      	beq.n	800a9aa <TIM_OC1_SetConfig+0xc2>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a18      	ldr	r2, [pc, #96]	; (800aa00 <TIM_OC1_SetConfig+0x118>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d003      	beq.n	800a9aa <TIM_OC1_SetConfig+0xc2>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a17      	ldr	r2, [pc, #92]	; (800aa04 <TIM_OC1_SetConfig+0x11c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d111      	bne.n	800a9ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	695b      	ldr	r3, [r3, #20]
 800a9be:	693a      	ldr	r2, [r7, #16]
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	699b      	ldr	r3, [r3, #24]
 800a9c8:	693a      	ldr	r2, [r7, #16]
 800a9ca:	4313      	orrs	r3, r2
 800a9cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	693a      	ldr	r2, [r7, #16]
 800a9d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	685a      	ldr	r2, [r3, #4]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	621a      	str	r2, [r3, #32]
}
 800a9e8:	bf00      	nop
 800a9ea:	371c      	adds	r7, #28
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr
 800a9f4:	40012c00 	.word	0x40012c00
 800a9f8:	40013400 	.word	0x40013400
 800a9fc:	40014000 	.word	0x40014000
 800aa00:	40014400 	.word	0x40014400
 800aa04:	40014800 	.word	0x40014800

0800aa08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6a1b      	ldr	r3, [r3, #32]
 800aa16:	f023 0210 	bic.w	r2, r3, #16
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aa36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	021b      	lsls	r3, r3, #8
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f023 0320 	bic.w	r3, r3, #32
 800aa56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	689b      	ldr	r3, [r3, #8]
 800aa5c:	011b      	lsls	r3, r3, #4
 800aa5e:	697a      	ldr	r2, [r7, #20]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a28      	ldr	r2, [pc, #160]	; (800ab08 <TIM_OC2_SetConfig+0x100>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d003      	beq.n	800aa74 <TIM_OC2_SetConfig+0x6c>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a27      	ldr	r2, [pc, #156]	; (800ab0c <TIM_OC2_SetConfig+0x104>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d10d      	bne.n	800aa90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	011b      	lsls	r3, r3, #4
 800aa82:	697a      	ldr	r2, [r7, #20]
 800aa84:	4313      	orrs	r3, r2
 800aa86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	4a1d      	ldr	r2, [pc, #116]	; (800ab08 <TIM_OC2_SetConfig+0x100>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d00f      	beq.n	800aab8 <TIM_OC2_SetConfig+0xb0>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	4a1c      	ldr	r2, [pc, #112]	; (800ab0c <TIM_OC2_SetConfig+0x104>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d00b      	beq.n	800aab8 <TIM_OC2_SetConfig+0xb0>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	4a1b      	ldr	r2, [pc, #108]	; (800ab10 <TIM_OC2_SetConfig+0x108>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d007      	beq.n	800aab8 <TIM_OC2_SetConfig+0xb0>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	4a1a      	ldr	r2, [pc, #104]	; (800ab14 <TIM_OC2_SetConfig+0x10c>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d003      	beq.n	800aab8 <TIM_OC2_SetConfig+0xb0>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	4a19      	ldr	r2, [pc, #100]	; (800ab18 <TIM_OC2_SetConfig+0x110>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d113      	bne.n	800aae0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aabe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aac6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	695b      	ldr	r3, [r3, #20]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	4313      	orrs	r3, r2
 800aad2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	699b      	ldr	r3, [r3, #24]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	693a      	ldr	r2, [r7, #16]
 800aadc:	4313      	orrs	r3, r2
 800aade:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	693a      	ldr	r2, [r7, #16]
 800aae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	68fa      	ldr	r2, [r7, #12]
 800aaea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	685a      	ldr	r2, [r3, #4]
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	697a      	ldr	r2, [r7, #20]
 800aaf8:	621a      	str	r2, [r3, #32]
}
 800aafa:	bf00      	nop
 800aafc:	371c      	adds	r7, #28
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	40012c00 	.word	0x40012c00
 800ab0c:	40013400 	.word	0x40013400
 800ab10:	40014000 	.word	0x40014000
 800ab14:	40014400 	.word	0x40014400
 800ab18:	40014800 	.word	0x40014800

0800ab1c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b087      	sub	sp, #28
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6a1b      	ldr	r3, [r3, #32]
 800ab2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	69db      	ldr	r3, [r3, #28]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f023 0303 	bic.w	r3, r3, #3
 800ab56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ab68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	021b      	lsls	r3, r3, #8
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	4a27      	ldr	r2, [pc, #156]	; (800ac18 <TIM_OC3_SetConfig+0xfc>)
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d003      	beq.n	800ab86 <TIM_OC3_SetConfig+0x6a>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	4a26      	ldr	r2, [pc, #152]	; (800ac1c <TIM_OC3_SetConfig+0x100>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d10d      	bne.n	800aba2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ab8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	021b      	lsls	r3, r3, #8
 800ab94:	697a      	ldr	r2, [r7, #20]
 800ab96:	4313      	orrs	r3, r2
 800ab98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a1c      	ldr	r2, [pc, #112]	; (800ac18 <TIM_OC3_SetConfig+0xfc>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d00f      	beq.n	800abca <TIM_OC3_SetConfig+0xae>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a1b      	ldr	r2, [pc, #108]	; (800ac1c <TIM_OC3_SetConfig+0x100>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d00b      	beq.n	800abca <TIM_OC3_SetConfig+0xae>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	4a1a      	ldr	r2, [pc, #104]	; (800ac20 <TIM_OC3_SetConfig+0x104>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d007      	beq.n	800abca <TIM_OC3_SetConfig+0xae>
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4a19      	ldr	r2, [pc, #100]	; (800ac24 <TIM_OC3_SetConfig+0x108>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d003      	beq.n	800abca <TIM_OC3_SetConfig+0xae>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4a18      	ldr	r2, [pc, #96]	; (800ac28 <TIM_OC3_SetConfig+0x10c>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d113      	bne.n	800abf2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800abd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	693a      	ldr	r2, [r7, #16]
 800abe2:	4313      	orrs	r3, r2
 800abe4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	011b      	lsls	r3, r3, #4
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4313      	orrs	r3, r2
 800abf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	685a      	ldr	r2, [r3, #4]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	697a      	ldr	r2, [r7, #20]
 800ac0a:	621a      	str	r2, [r3, #32]
}
 800ac0c:	bf00      	nop
 800ac0e:	371c      	adds	r7, #28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	40012c00 	.word	0x40012c00
 800ac1c:	40013400 	.word	0x40013400
 800ac20:	40014000 	.word	0x40014000
 800ac24:	40014400 	.word	0x40014400
 800ac28:	40014800 	.word	0x40014800

0800ac2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b087      	sub	sp, #28
 800ac30:	af00      	add	r7, sp, #0
 800ac32:	6078      	str	r0, [r7, #4]
 800ac34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a1b      	ldr	r3, [r3, #32]
 800ac46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	69db      	ldr	r3, [r3, #28]
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	021b      	lsls	r3, r3, #8
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ac7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	031b      	lsls	r3, r3, #12
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	4a28      	ldr	r2, [pc, #160]	; (800ad2c <TIM_OC4_SetConfig+0x100>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d003      	beq.n	800ac98 <TIM_OC4_SetConfig+0x6c>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	4a27      	ldr	r2, [pc, #156]	; (800ad30 <TIM_OC4_SetConfig+0x104>)
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d10d      	bne.n	800acb4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ac98:	697b      	ldr	r3, [r7, #20]
 800ac9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ac9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	031b      	lsls	r3, r3, #12
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4313      	orrs	r3, r2
 800acaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	4a1d      	ldr	r2, [pc, #116]	; (800ad2c <TIM_OC4_SetConfig+0x100>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d00f      	beq.n	800acdc <TIM_OC4_SetConfig+0xb0>
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	4a1c      	ldr	r2, [pc, #112]	; (800ad30 <TIM_OC4_SetConfig+0x104>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d00b      	beq.n	800acdc <TIM_OC4_SetConfig+0xb0>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a1b      	ldr	r2, [pc, #108]	; (800ad34 <TIM_OC4_SetConfig+0x108>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d007      	beq.n	800acdc <TIM_OC4_SetConfig+0xb0>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a1a      	ldr	r2, [pc, #104]	; (800ad38 <TIM_OC4_SetConfig+0x10c>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d003      	beq.n	800acdc <TIM_OC4_SetConfig+0xb0>
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	4a19      	ldr	r2, [pc, #100]	; (800ad3c <TIM_OC4_SetConfig+0x110>)
 800acd8:	4293      	cmp	r3, r2
 800acda:	d113      	bne.n	800ad04 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ace2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800acea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	019b      	lsls	r3, r3, #6
 800acf2:	693a      	ldr	r2, [r7, #16]
 800acf4:	4313      	orrs	r3, r2
 800acf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	699b      	ldr	r3, [r3, #24]
 800acfc:	019b      	lsls	r3, r3, #6
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	4313      	orrs	r3, r2
 800ad02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	693a      	ldr	r2, [r7, #16]
 800ad08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	685a      	ldr	r2, [r3, #4]
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	697a      	ldr	r2, [r7, #20]
 800ad1c:	621a      	str	r2, [r3, #32]
}
 800ad1e:	bf00      	nop
 800ad20:	371c      	adds	r7, #28
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40012c00 	.word	0x40012c00
 800ad30:	40013400 	.word	0x40013400
 800ad34:	40014000 	.word	0x40014000
 800ad38:	40014400 	.word	0x40014400
 800ad3c:	40014800 	.word	0x40014800

0800ad40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a1b      	ldr	r3, [r3, #32]
 800ad5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ad84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	041b      	lsls	r3, r3, #16
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a17      	ldr	r2, [pc, #92]	; (800adf4 <TIM_OC5_SetConfig+0xb4>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00f      	beq.n	800adba <TIM_OC5_SetConfig+0x7a>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <TIM_OC5_SetConfig+0xb8>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00b      	beq.n	800adba <TIM_OC5_SetConfig+0x7a>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a15      	ldr	r2, [pc, #84]	; (800adfc <TIM_OC5_SetConfig+0xbc>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d007      	beq.n	800adba <TIM_OC5_SetConfig+0x7a>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a14      	ldr	r2, [pc, #80]	; (800ae00 <TIM_OC5_SetConfig+0xc0>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d003      	beq.n	800adba <TIM_OC5_SetConfig+0x7a>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a13      	ldr	r2, [pc, #76]	; (800ae04 <TIM_OC5_SetConfig+0xc4>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d109      	bne.n	800adce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800adc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	695b      	ldr	r3, [r3, #20]
 800adc6:	021b      	lsls	r3, r3, #8
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	4313      	orrs	r3, r2
 800adcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	685a      	ldr	r2, [r3, #4]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	621a      	str	r2, [r3, #32]
}
 800ade8:	bf00      	nop
 800adea:	371c      	adds	r7, #28
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40012c00 	.word	0x40012c00
 800adf8:	40013400 	.word	0x40013400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40014400 	.word	0x40014400
 800ae04:	40014800 	.word	0x40014800

0800ae08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	6a1b      	ldr	r3, [r3, #32]
 800ae16:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ae36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ae3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	021b      	lsls	r3, r3, #8
 800ae42:	68fa      	ldr	r2, [r7, #12]
 800ae44:	4313      	orrs	r3, r2
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ae4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	051b      	lsls	r3, r3, #20
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	4a18      	ldr	r2, [pc, #96]	; (800aec0 <TIM_OC6_SetConfig+0xb8>)
 800ae60:	4293      	cmp	r3, r2
 800ae62:	d00f      	beq.n	800ae84 <TIM_OC6_SetConfig+0x7c>
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	4a17      	ldr	r2, [pc, #92]	; (800aec4 <TIM_OC6_SetConfig+0xbc>)
 800ae68:	4293      	cmp	r3, r2
 800ae6a:	d00b      	beq.n	800ae84 <TIM_OC6_SetConfig+0x7c>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4a16      	ldr	r2, [pc, #88]	; (800aec8 <TIM_OC6_SetConfig+0xc0>)
 800ae70:	4293      	cmp	r3, r2
 800ae72:	d007      	beq.n	800ae84 <TIM_OC6_SetConfig+0x7c>
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4a15      	ldr	r2, [pc, #84]	; (800aecc <TIM_OC6_SetConfig+0xc4>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d003      	beq.n	800ae84 <TIM_OC6_SetConfig+0x7c>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4a14      	ldr	r2, [pc, #80]	; (800aed0 <TIM_OC6_SetConfig+0xc8>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d109      	bne.n	800ae98 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae8a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	695b      	ldr	r3, [r3, #20]
 800ae90:	029b      	lsls	r3, r3, #10
 800ae92:	697a      	ldr	r2, [r7, #20]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	697a      	ldr	r2, [r7, #20]
 800ae9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	685a      	ldr	r2, [r3, #4]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	693a      	ldr	r2, [r7, #16]
 800aeb0:	621a      	str	r2, [r3, #32]
}
 800aeb2:	bf00      	nop
 800aeb4:	371c      	adds	r7, #28
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40012c00 	.word	0x40012c00
 800aec4:	40013400 	.word	0x40013400
 800aec8:	40014000 	.word	0x40014000
 800aecc:	40014400 	.word	0x40014400
 800aed0:	40014800 	.word	0x40014800

0800aed4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b087      	sub	sp, #28
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	6a1b      	ldr	r3, [r3, #32]
 800aee4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a1b      	ldr	r3, [r3, #32]
 800aeea:	f023 0201 	bic.w	r2, r3, #1
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	699b      	ldr	r3, [r3, #24]
 800aef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aefe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	011b      	lsls	r3, r3, #4
 800af04:	693a      	ldr	r2, [r7, #16]
 800af06:	4313      	orrs	r3, r2
 800af08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	f023 030a 	bic.w	r3, r3, #10
 800af10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af12:	697a      	ldr	r2, [r7, #20]
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	4313      	orrs	r3, r2
 800af18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	697a      	ldr	r2, [r7, #20]
 800af24:	621a      	str	r2, [r3, #32]
}
 800af26:	bf00      	nop
 800af28:	371c      	adds	r7, #28
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr

0800af32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af32:	b480      	push	{r7}
 800af34:	b087      	sub	sp, #28
 800af36:	af00      	add	r7, sp, #0
 800af38:	60f8      	str	r0, [r7, #12]
 800af3a:	60b9      	str	r1, [r7, #8]
 800af3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6a1b      	ldr	r3, [r3, #32]
 800af42:	f023 0210 	bic.w	r2, r3, #16
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6a1b      	ldr	r3, [r3, #32]
 800af54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800af5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	031b      	lsls	r3, r3, #12
 800af62:	697a      	ldr	r2, [r7, #20]
 800af64:	4313      	orrs	r3, r2
 800af66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800af6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	011b      	lsls	r3, r3, #4
 800af74:	693a      	ldr	r2, [r7, #16]
 800af76:	4313      	orrs	r3, r2
 800af78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	693a      	ldr	r2, [r7, #16]
 800af84:	621a      	str	r2, [r3, #32]
}
 800af86:	bf00      	nop
 800af88:	371c      	adds	r7, #28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800af92:	b480      	push	{r7}
 800af94:	b085      	sub	sp, #20
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	689b      	ldr	r3, [r3, #8]
 800afa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800afa8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afae:	683a      	ldr	r2, [r7, #0]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	4313      	orrs	r3, r2
 800afb4:	f043 0307 	orr.w	r3, r3, #7
 800afb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	609a      	str	r2, [r3, #8]
}
 800afc0:	bf00      	nop
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afcc:	b480      	push	{r7}
 800afce:	b087      	sub	sp, #28
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	60f8      	str	r0, [r7, #12]
 800afd4:	60b9      	str	r1, [r7, #8]
 800afd6:	607a      	str	r2, [r7, #4]
 800afd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	689b      	ldr	r3, [r3, #8]
 800afde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800afe0:	697b      	ldr	r3, [r7, #20]
 800afe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800afe6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	021a      	lsls	r2, r3, #8
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	431a      	orrs	r2, r3
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	697a      	ldr	r2, [r7, #20]
 800aff6:	4313      	orrs	r3, r2
 800aff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	697a      	ldr	r2, [r7, #20]
 800affe:	609a      	str	r2, [r3, #8]
}
 800b000:	bf00      	nop
 800b002:	371c      	adds	r7, #28
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b087      	sub	sp, #28
 800b010:	af00      	add	r7, sp, #0
 800b012:	60f8      	str	r0, [r7, #12]
 800b014:	60b9      	str	r1, [r7, #8]
 800b016:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	f003 031f 	and.w	r3, r3, #31
 800b01e:	2201      	movs	r2, #1
 800b020:	fa02 f303 	lsl.w	r3, r2, r3
 800b024:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	6a1a      	ldr	r2, [r3, #32]
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	43db      	mvns	r3, r3
 800b02e:	401a      	ands	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	6a1a      	ldr	r2, [r3, #32]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	f003 031f 	and.w	r3, r3, #31
 800b03e:	6879      	ldr	r1, [r7, #4]
 800b040:	fa01 f303 	lsl.w	r3, r1, r3
 800b044:	431a      	orrs	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	621a      	str	r2, [r3, #32]
}
 800b04a:	bf00      	nop
 800b04c:	371c      	adds	r7, #28
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr
	...

0800b058 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
 800b060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d109      	bne.n	800b07c <HAL_TIMEx_PWMN_Start+0x24>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b06e:	b2db      	uxtb	r3, r3
 800b070:	2b01      	cmp	r3, #1
 800b072:	bf14      	ite	ne
 800b074:	2301      	movne	r3, #1
 800b076:	2300      	moveq	r3, #0
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	e022      	b.n	800b0c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2b04      	cmp	r3, #4
 800b080:	d109      	bne.n	800b096 <HAL_TIMEx_PWMN_Start+0x3e>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b088:	b2db      	uxtb	r3, r3
 800b08a:	2b01      	cmp	r3, #1
 800b08c:	bf14      	ite	ne
 800b08e:	2301      	movne	r3, #1
 800b090:	2300      	moveq	r3, #0
 800b092:	b2db      	uxtb	r3, r3
 800b094:	e015      	b.n	800b0c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d109      	bne.n	800b0b0 <HAL_TIMEx_PWMN_Start+0x58>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	2b01      	cmp	r3, #1
 800b0a6:	bf14      	ite	ne
 800b0a8:	2301      	movne	r3, #1
 800b0aa:	2300      	moveq	r3, #0
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	e008      	b.n	800b0c2 <HAL_TIMEx_PWMN_Start+0x6a>
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	bf14      	ite	ne
 800b0bc:	2301      	movne	r3, #1
 800b0be:	2300      	moveq	r3, #0
 800b0c0:	b2db      	uxtb	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e069      	b.n	800b19e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d104      	bne.n	800b0da <HAL_TIMEx_PWMN_Start+0x82>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	2202      	movs	r2, #2
 800b0d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0d8:	e013      	b.n	800b102 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d104      	bne.n	800b0ea <HAL_TIMEx_PWMN_Start+0x92>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2202      	movs	r2, #2
 800b0e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0e8:	e00b      	b.n	800b102 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	2b08      	cmp	r3, #8
 800b0ee:	d104      	bne.n	800b0fa <HAL_TIMEx_PWMN_Start+0xa2>
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	2202      	movs	r2, #2
 800b0f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b0f8:	e003      	b.n	800b102 <HAL_TIMEx_PWMN_Start+0xaa>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2202      	movs	r2, #2
 800b0fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2204      	movs	r2, #4
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f000 f9c0 	bl	800b490 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b11e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a20      	ldr	r2, [pc, #128]	; (800b1a8 <HAL_TIMEx_PWMN_Start+0x150>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d018      	beq.n	800b15c <HAL_TIMEx_PWMN_Start+0x104>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b132:	d013      	beq.n	800b15c <HAL_TIMEx_PWMN_Start+0x104>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a1c      	ldr	r2, [pc, #112]	; (800b1ac <HAL_TIMEx_PWMN_Start+0x154>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d00e      	beq.n	800b15c <HAL_TIMEx_PWMN_Start+0x104>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a1b      	ldr	r2, [pc, #108]	; (800b1b0 <HAL_TIMEx_PWMN_Start+0x158>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d009      	beq.n	800b15c <HAL_TIMEx_PWMN_Start+0x104>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a19      	ldr	r2, [pc, #100]	; (800b1b4 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d004      	beq.n	800b15c <HAL_TIMEx_PWMN_Start+0x104>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	4a18      	ldr	r2, [pc, #96]	; (800b1b8 <HAL_TIMEx_PWMN_Start+0x160>)
 800b158:	4293      	cmp	r3, r2
 800b15a:	d115      	bne.n	800b188 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689a      	ldr	r2, [r3, #8]
 800b162:	4b16      	ldr	r3, [pc, #88]	; (800b1bc <HAL_TIMEx_PWMN_Start+0x164>)
 800b164:	4013      	ands	r3, r2
 800b166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2b06      	cmp	r3, #6
 800b16c:	d015      	beq.n	800b19a <HAL_TIMEx_PWMN_Start+0x142>
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b174:	d011      	beq.n	800b19a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	681a      	ldr	r2, [r3, #0]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f042 0201 	orr.w	r2, r2, #1
 800b184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b186:	e008      	b.n	800b19a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681a      	ldr	r2, [r3, #0]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f042 0201 	orr.w	r2, r2, #1
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e000      	b.n	800b19c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b19a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b19c:	2300      	movs	r3, #0
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3710      	adds	r7, #16
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	40012c00 	.word	0x40012c00
 800b1ac:	40000400 	.word	0x40000400
 800b1b0:	40000800 	.word	0x40000800
 800b1b4:	40013400 	.word	0x40013400
 800b1b8:	40014000 	.word	0x40014000
 800b1bc:	00010007 	.word	0x00010007

0800b1c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]
 800b1c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d101      	bne.n	800b1d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b1d4:	2302      	movs	r3, #2
 800b1d6:	e065      	b.n	800b2a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2202      	movs	r2, #2
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a2c      	ldr	r2, [pc, #176]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d004      	beq.n	800b20c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a2b      	ldr	r2, [pc, #172]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d108      	bne.n	800b21e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b212:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b228:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	4313      	orrs	r3, r2
 800b232:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68fa      	ldr	r2, [r7, #12]
 800b23a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a1b      	ldr	r2, [pc, #108]	; (800b2b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d018      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b24e:	d013      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a18      	ldr	r2, [pc, #96]	; (800b2b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b256:	4293      	cmp	r3, r2
 800b258:	d00e      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4a17      	ldr	r2, [pc, #92]	; (800b2bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d009      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a12      	ldr	r2, [pc, #72]	; (800b2b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d004      	beq.n	800b278 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a13      	ldr	r2, [pc, #76]	; (800b2c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d10c      	bne.n	800b292 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b27e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	4313      	orrs	r3, r2
 800b288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	68ba      	ldr	r2, [r7, #8]
 800b290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2201      	movs	r2, #1
 800b296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2200      	movs	r2, #0
 800b29e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2a2:	2300      	movs	r3, #0
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	40012c00 	.word	0x40012c00
 800b2b4:	40013400 	.word	0x40013400
 800b2b8:	40000400 	.word	0x40000400
 800b2bc:	40000800 	.word	0x40000800
 800b2c0:	40014000 	.word	0x40014000

0800b2c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b085      	sub	sp, #20
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	6078      	str	r0, [r7, #4]
 800b2cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d101      	bne.n	800b2e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b2dc:	2302      	movs	r3, #2
 800b2de:	e087      	b.n	800b3f0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b2ee:	683b      	ldr	r3, [r7, #0]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	689b      	ldr	r3, [r3, #8]
 800b300:	4313      	orrs	r3, r2
 800b302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	4313      	orrs	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4313      	orrs	r3, r2
 800b31e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	4313      	orrs	r3, r2
 800b32c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	695b      	ldr	r3, [r3, #20]
 800b338:	4313      	orrs	r3, r2
 800b33a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b346:	4313      	orrs	r3, r2
 800b348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	699b      	ldr	r3, [r3, #24]
 800b354:	041b      	lsls	r3, r3, #16
 800b356:	4313      	orrs	r3, r2
 800b358:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a27      	ldr	r2, [pc, #156]	; (800b3fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d004      	beq.n	800b36e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a25      	ldr	r2, [pc, #148]	; (800b400 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d106      	bne.n	800b37c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	69db      	ldr	r3, [r3, #28]
 800b378:	4313      	orrs	r3, r2
 800b37a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	4a1e      	ldr	r2, [pc, #120]	; (800b3fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b382:	4293      	cmp	r3, r2
 800b384:	d004      	beq.n	800b390 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	4a1d      	ldr	r2, [pc, #116]	; (800b400 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b38c:	4293      	cmp	r3, r2
 800b38e:	d126      	bne.n	800b3de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b39a:	051b      	lsls	r3, r3, #20
 800b39c:	4313      	orrs	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	6a1b      	ldr	r3, [r3, #32]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a0e      	ldr	r2, [pc, #56]	; (800b3fc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d004      	beq.n	800b3d0 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4a0d      	ldr	r2, [pc, #52]	; (800b400 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d106      	bne.n	800b3de <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68fa      	ldr	r2, [r7, #12]
 800b3e4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3714      	adds	r7, #20
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr
 800b3fc:	40012c00 	.word	0x40012c00
 800b400:	40013400 	.word	0x40013400

0800b404 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b40c:	bf00      	nop
 800b40e:	370c      	adds	r7, #12
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b418:	b480      	push	{r7}
 800b41a:	b083      	sub	sp, #12
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b420:	bf00      	nop
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr

0800b42c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b434:	bf00      	nop
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b448:	bf00      	nop
 800b44a:	370c      	adds	r7, #12
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b454:	b480      	push	{r7}
 800b456:	b083      	sub	sp, #12
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b083      	sub	sp, #12
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b484:	bf00      	nop
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b490:	b480      	push	{r7}
 800b492:	b087      	sub	sp, #28
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	f003 031f 	and.w	r3, r3, #31
 800b4a2:	2204      	movs	r2, #4
 800b4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6a1a      	ldr	r2, [r3, #32]
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	43db      	mvns	r3, r3
 800b4b2:	401a      	ands	r2, r3
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	6a1a      	ldr	r2, [r3, #32]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	f003 031f 	and.w	r3, r3, #31
 800b4c2:	6879      	ldr	r1, [r7, #4]
 800b4c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b4c8:	431a      	orrs	r2, r3
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	621a      	str	r2, [r3, #32]
}
 800b4ce:	bf00      	nop
 800b4d0:	371c      	adds	r7, #28
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr

0800b4da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b4da:	b580      	push	{r7, lr}
 800b4dc:	b082      	sub	sp, #8
 800b4de:	af00      	add	r7, sp, #0
 800b4e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d101      	bne.n	800b4ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e042      	b.n	800b572 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d106      	bne.n	800b504 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f7f9 fc60 	bl	8004dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2224      	movs	r2, #36	; 0x24
 800b508:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f022 0201 	bic.w	r2, r2, #1
 800b51a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 f8c3 	bl	800b6a8 <UART_SetConfig>
 800b522:	4603      	mov	r3, r0
 800b524:	2b01      	cmp	r3, #1
 800b526:	d101      	bne.n	800b52c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e022      	b.n	800b572 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f000 fb83 	bl	800bc40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	685a      	ldr	r2, [r3, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b548:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689a      	ldr	r2, [r3, #8]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b558:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f042 0201 	orr.w	r2, r2, #1
 800b568:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fc0a 	bl	800bd84 <UART_CheckIdleState>
 800b570:	4603      	mov	r3, r0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}

0800b57a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b57a:	b580      	push	{r7, lr}
 800b57c:	b08a      	sub	sp, #40	; 0x28
 800b57e:	af02      	add	r7, sp, #8
 800b580:	60f8      	str	r0, [r7, #12]
 800b582:	60b9      	str	r1, [r7, #8]
 800b584:	603b      	str	r3, [r7, #0]
 800b586:	4613      	mov	r3, r2
 800b588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b590:	2b20      	cmp	r3, #32
 800b592:	f040 8083 	bne.w	800b69c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d002      	beq.n	800b5a2 <HAL_UART_Transmit+0x28>
 800b59c:	88fb      	ldrh	r3, [r7, #6]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d101      	bne.n	800b5a6 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e07b      	b.n	800b69e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d101      	bne.n	800b5b4 <HAL_UART_Transmit+0x3a>
 800b5b0:	2302      	movs	r3, #2
 800b5b2:	e074      	b.n	800b69e <HAL_UART_Transmit+0x124>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2221      	movs	r2, #33	; 0x21
 800b5c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b5cc:	f7f9 fe20 	bl	8005210 <HAL_GetTick>
 800b5d0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	88fa      	ldrh	r2, [r7, #6]
 800b5d6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	88fa      	ldrh	r2, [r7, #6]
 800b5de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5ea:	d108      	bne.n	800b5fe <HAL_UART_Transmit+0x84>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d104      	bne.n	800b5fe <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	61bb      	str	r3, [r7, #24]
 800b5fc:	e003      	b.n	800b606 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b602:	2300      	movs	r3, #0
 800b604:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b60e:	e02c      	b.n	800b66a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	9300      	str	r3, [sp, #0]
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	2200      	movs	r2, #0
 800b618:	2180      	movs	r1, #128	; 0x80
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f000 fbfd 	bl	800be1a <UART_WaitOnFlagUntilTimeout>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	d001      	beq.n	800b62a <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b626:	2303      	movs	r3, #3
 800b628:	e039      	b.n	800b69e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b62a:	69fb      	ldr	r3, [r7, #28]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d10b      	bne.n	800b648 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b630:	69bb      	ldr	r3, [r7, #24]
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	461a      	mov	r2, r3
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b63e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b640:	69bb      	ldr	r3, [r7, #24]
 800b642:	3302      	adds	r3, #2
 800b644:	61bb      	str	r3, [r7, #24]
 800b646:	e007      	b.n	800b658 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	781a      	ldrb	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	3301      	adds	r3, #1
 800b656:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b65e:	b29b      	uxth	r3, r3
 800b660:	3b01      	subs	r3, #1
 800b662:	b29a      	uxth	r2, r3
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b670:	b29b      	uxth	r3, r3
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1cc      	bne.n	800b610 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	9300      	str	r3, [sp, #0]
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2200      	movs	r2, #0
 800b67e:	2140      	movs	r1, #64	; 0x40
 800b680:	68f8      	ldr	r0, [r7, #12]
 800b682:	f000 fbca 	bl	800be1a <UART_WaitOnFlagUntilTimeout>
 800b686:	4603      	mov	r3, r0
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d001      	beq.n	800b690 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e006      	b.n	800b69e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2220      	movs	r2, #32
 800b694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b698:	2300      	movs	r3, #0
 800b69a:	e000      	b.n	800b69e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b69c:	2302      	movs	r3, #2
  }
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3720      	adds	r7, #32
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}
	...

0800b6a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b6a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6ac:	b08c      	sub	sp, #48	; 0x30
 800b6ae:	af00      	add	r7, sp, #0
 800b6b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	689a      	ldr	r2, [r3, #8]
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	691b      	ldr	r3, [r3, #16]
 800b6c0:	431a      	orrs	r2, r3
 800b6c2:	697b      	ldr	r3, [r7, #20]
 800b6c4:	695b      	ldr	r3, [r3, #20]
 800b6c6:	431a      	orrs	r2, r3
 800b6c8:	697b      	ldr	r3, [r7, #20]
 800b6ca:	69db      	ldr	r3, [r3, #28]
 800b6cc:	4313      	orrs	r3, r2
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681a      	ldr	r2, [r3, #0]
 800b6d6:	4bab      	ldr	r3, [pc, #684]	; (800b984 <UART_SetConfig+0x2dc>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	6812      	ldr	r2, [r2, #0]
 800b6de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b6e0:	430b      	orrs	r3, r1
 800b6e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	68da      	ldr	r2, [r3, #12]
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	430a      	orrs	r2, r1
 800b6f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4aa0      	ldr	r2, [pc, #640]	; (800b988 <UART_SetConfig+0x2e0>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d004      	beq.n	800b714 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	6a1b      	ldr	r3, [r3, #32]
 800b70e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b710:	4313      	orrs	r3, r2
 800b712:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	689b      	ldr	r3, [r3, #8]
 800b71a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800b71e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800b722:	697a      	ldr	r2, [r7, #20]
 800b724:	6812      	ldr	r2, [r2, #0]
 800b726:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b728:	430b      	orrs	r3, r1
 800b72a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b72c:	697b      	ldr	r3, [r7, #20]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b732:	f023 010f 	bic.w	r1, r3, #15
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	430a      	orrs	r2, r1
 800b740:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a91      	ldr	r2, [pc, #580]	; (800b98c <UART_SetConfig+0x2e4>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d125      	bne.n	800b798 <UART_SetConfig+0xf0>
 800b74c:	4b90      	ldr	r3, [pc, #576]	; (800b990 <UART_SetConfig+0x2e8>)
 800b74e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b752:	f003 0303 	and.w	r3, r3, #3
 800b756:	2b03      	cmp	r3, #3
 800b758:	d81a      	bhi.n	800b790 <UART_SetConfig+0xe8>
 800b75a:	a201      	add	r2, pc, #4	; (adr r2, 800b760 <UART_SetConfig+0xb8>)
 800b75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b760:	0800b771 	.word	0x0800b771
 800b764:	0800b781 	.word	0x0800b781
 800b768:	0800b779 	.word	0x0800b779
 800b76c:	0800b789 	.word	0x0800b789
 800b770:	2301      	movs	r3, #1
 800b772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b776:	e0d6      	b.n	800b926 <UART_SetConfig+0x27e>
 800b778:	2302      	movs	r3, #2
 800b77a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b77e:	e0d2      	b.n	800b926 <UART_SetConfig+0x27e>
 800b780:	2304      	movs	r3, #4
 800b782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b786:	e0ce      	b.n	800b926 <UART_SetConfig+0x27e>
 800b788:	2308      	movs	r3, #8
 800b78a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b78e:	e0ca      	b.n	800b926 <UART_SetConfig+0x27e>
 800b790:	2310      	movs	r3, #16
 800b792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b796:	e0c6      	b.n	800b926 <UART_SetConfig+0x27e>
 800b798:	697b      	ldr	r3, [r7, #20]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a7d      	ldr	r2, [pc, #500]	; (800b994 <UART_SetConfig+0x2ec>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d138      	bne.n	800b814 <UART_SetConfig+0x16c>
 800b7a2:	4b7b      	ldr	r3, [pc, #492]	; (800b990 <UART_SetConfig+0x2e8>)
 800b7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a8:	f003 030c 	and.w	r3, r3, #12
 800b7ac:	2b0c      	cmp	r3, #12
 800b7ae:	d82d      	bhi.n	800b80c <UART_SetConfig+0x164>
 800b7b0:	a201      	add	r2, pc, #4	; (adr r2, 800b7b8 <UART_SetConfig+0x110>)
 800b7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7b6:	bf00      	nop
 800b7b8:	0800b7ed 	.word	0x0800b7ed
 800b7bc:	0800b80d 	.word	0x0800b80d
 800b7c0:	0800b80d 	.word	0x0800b80d
 800b7c4:	0800b80d 	.word	0x0800b80d
 800b7c8:	0800b7fd 	.word	0x0800b7fd
 800b7cc:	0800b80d 	.word	0x0800b80d
 800b7d0:	0800b80d 	.word	0x0800b80d
 800b7d4:	0800b80d 	.word	0x0800b80d
 800b7d8:	0800b7f5 	.word	0x0800b7f5
 800b7dc:	0800b80d 	.word	0x0800b80d
 800b7e0:	0800b80d 	.word	0x0800b80d
 800b7e4:	0800b80d 	.word	0x0800b80d
 800b7e8:	0800b805 	.word	0x0800b805
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7f2:	e098      	b.n	800b926 <UART_SetConfig+0x27e>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b7fa:	e094      	b.n	800b926 <UART_SetConfig+0x27e>
 800b7fc:	2304      	movs	r3, #4
 800b7fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b802:	e090      	b.n	800b926 <UART_SetConfig+0x27e>
 800b804:	2308      	movs	r3, #8
 800b806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b80a:	e08c      	b.n	800b926 <UART_SetConfig+0x27e>
 800b80c:	2310      	movs	r3, #16
 800b80e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b812:	e088      	b.n	800b926 <UART_SetConfig+0x27e>
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a5f      	ldr	r2, [pc, #380]	; (800b998 <UART_SetConfig+0x2f0>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d125      	bne.n	800b86a <UART_SetConfig+0x1c2>
 800b81e:	4b5c      	ldr	r3, [pc, #368]	; (800b990 <UART_SetConfig+0x2e8>)
 800b820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b824:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800b828:	2b30      	cmp	r3, #48	; 0x30
 800b82a:	d016      	beq.n	800b85a <UART_SetConfig+0x1b2>
 800b82c:	2b30      	cmp	r3, #48	; 0x30
 800b82e:	d818      	bhi.n	800b862 <UART_SetConfig+0x1ba>
 800b830:	2b20      	cmp	r3, #32
 800b832:	d00a      	beq.n	800b84a <UART_SetConfig+0x1a2>
 800b834:	2b20      	cmp	r3, #32
 800b836:	d814      	bhi.n	800b862 <UART_SetConfig+0x1ba>
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d002      	beq.n	800b842 <UART_SetConfig+0x19a>
 800b83c:	2b10      	cmp	r3, #16
 800b83e:	d008      	beq.n	800b852 <UART_SetConfig+0x1aa>
 800b840:	e00f      	b.n	800b862 <UART_SetConfig+0x1ba>
 800b842:	2300      	movs	r3, #0
 800b844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b848:	e06d      	b.n	800b926 <UART_SetConfig+0x27e>
 800b84a:	2302      	movs	r3, #2
 800b84c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b850:	e069      	b.n	800b926 <UART_SetConfig+0x27e>
 800b852:	2304      	movs	r3, #4
 800b854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b858:	e065      	b.n	800b926 <UART_SetConfig+0x27e>
 800b85a:	2308      	movs	r3, #8
 800b85c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b860:	e061      	b.n	800b926 <UART_SetConfig+0x27e>
 800b862:	2310      	movs	r3, #16
 800b864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b868:	e05d      	b.n	800b926 <UART_SetConfig+0x27e>
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a4b      	ldr	r2, [pc, #300]	; (800b99c <UART_SetConfig+0x2f4>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d125      	bne.n	800b8c0 <UART_SetConfig+0x218>
 800b874:	4b46      	ldr	r3, [pc, #280]	; (800b990 <UART_SetConfig+0x2e8>)
 800b876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b87a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800b87e:	2bc0      	cmp	r3, #192	; 0xc0
 800b880:	d016      	beq.n	800b8b0 <UART_SetConfig+0x208>
 800b882:	2bc0      	cmp	r3, #192	; 0xc0
 800b884:	d818      	bhi.n	800b8b8 <UART_SetConfig+0x210>
 800b886:	2b80      	cmp	r3, #128	; 0x80
 800b888:	d00a      	beq.n	800b8a0 <UART_SetConfig+0x1f8>
 800b88a:	2b80      	cmp	r3, #128	; 0x80
 800b88c:	d814      	bhi.n	800b8b8 <UART_SetConfig+0x210>
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d002      	beq.n	800b898 <UART_SetConfig+0x1f0>
 800b892:	2b40      	cmp	r3, #64	; 0x40
 800b894:	d008      	beq.n	800b8a8 <UART_SetConfig+0x200>
 800b896:	e00f      	b.n	800b8b8 <UART_SetConfig+0x210>
 800b898:	2300      	movs	r3, #0
 800b89a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b89e:	e042      	b.n	800b926 <UART_SetConfig+0x27e>
 800b8a0:	2302      	movs	r3, #2
 800b8a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8a6:	e03e      	b.n	800b926 <UART_SetConfig+0x27e>
 800b8a8:	2304      	movs	r3, #4
 800b8aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8ae:	e03a      	b.n	800b926 <UART_SetConfig+0x27e>
 800b8b0:	2308      	movs	r3, #8
 800b8b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8b6:	e036      	b.n	800b926 <UART_SetConfig+0x27e>
 800b8b8:	2310      	movs	r3, #16
 800b8ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8be:	e032      	b.n	800b926 <UART_SetConfig+0x27e>
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a30      	ldr	r2, [pc, #192]	; (800b988 <UART_SetConfig+0x2e0>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d12a      	bne.n	800b920 <UART_SetConfig+0x278>
 800b8ca:	4b31      	ldr	r3, [pc, #196]	; (800b990 <UART_SetConfig+0x2e8>)
 800b8cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b8d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8d8:	d01a      	beq.n	800b910 <UART_SetConfig+0x268>
 800b8da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8de:	d81b      	bhi.n	800b918 <UART_SetConfig+0x270>
 800b8e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8e4:	d00c      	beq.n	800b900 <UART_SetConfig+0x258>
 800b8e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ea:	d815      	bhi.n	800b918 <UART_SetConfig+0x270>
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d003      	beq.n	800b8f8 <UART_SetConfig+0x250>
 800b8f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f4:	d008      	beq.n	800b908 <UART_SetConfig+0x260>
 800b8f6:	e00f      	b.n	800b918 <UART_SetConfig+0x270>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b8fe:	e012      	b.n	800b926 <UART_SetConfig+0x27e>
 800b900:	2302      	movs	r3, #2
 800b902:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b906:	e00e      	b.n	800b926 <UART_SetConfig+0x27e>
 800b908:	2304      	movs	r3, #4
 800b90a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b90e:	e00a      	b.n	800b926 <UART_SetConfig+0x27e>
 800b910:	2308      	movs	r3, #8
 800b912:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b916:	e006      	b.n	800b926 <UART_SetConfig+0x27e>
 800b918:	2310      	movs	r3, #16
 800b91a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800b91e:	e002      	b.n	800b926 <UART_SetConfig+0x27e>
 800b920:	2310      	movs	r3, #16
 800b922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a17      	ldr	r2, [pc, #92]	; (800b988 <UART_SetConfig+0x2e0>)
 800b92c:	4293      	cmp	r3, r2
 800b92e:	f040 80a8 	bne.w	800ba82 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b936:	2b08      	cmp	r3, #8
 800b938:	d834      	bhi.n	800b9a4 <UART_SetConfig+0x2fc>
 800b93a:	a201      	add	r2, pc, #4	; (adr r2, 800b940 <UART_SetConfig+0x298>)
 800b93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b940:	0800b965 	.word	0x0800b965
 800b944:	0800b9a5 	.word	0x0800b9a5
 800b948:	0800b96d 	.word	0x0800b96d
 800b94c:	0800b9a5 	.word	0x0800b9a5
 800b950:	0800b973 	.word	0x0800b973
 800b954:	0800b9a5 	.word	0x0800b9a5
 800b958:	0800b9a5 	.word	0x0800b9a5
 800b95c:	0800b9a5 	.word	0x0800b9a5
 800b960:	0800b97b 	.word	0x0800b97b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b964:	f7fd f95c 	bl	8008c20 <HAL_RCC_GetPCLK1Freq>
 800b968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b96a:	e021      	b.n	800b9b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b96c:	4b0c      	ldr	r3, [pc, #48]	; (800b9a0 <UART_SetConfig+0x2f8>)
 800b96e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b970:	e01e      	b.n	800b9b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b972:	f7fd f8e7 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 800b976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800b978:	e01a      	b.n	800b9b0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b97a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b97e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800b980:	e016      	b.n	800b9b0 <UART_SetConfig+0x308>
 800b982:	bf00      	nop
 800b984:	cfff69f3 	.word	0xcfff69f3
 800b988:	40008000 	.word	0x40008000
 800b98c:	40013800 	.word	0x40013800
 800b990:	40021000 	.word	0x40021000
 800b994:	40004400 	.word	0x40004400
 800b998:	40004800 	.word	0x40004800
 800b99c:	40004c00 	.word	0x40004c00
 800b9a0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800b9a4:	2300      	movs	r3, #0
 800b9a6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800b9ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	f000 812a 	beq.w	800bc0c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9bc:	4a9e      	ldr	r2, [pc, #632]	; (800bc38 <UART_SetConfig+0x590>)
 800b9be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9ca:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	685a      	ldr	r2, [r3, #4]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	4413      	add	r3, r2
 800b9d6:	69ba      	ldr	r2, [r7, #24]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d305      	bcc.n	800b9e8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	685b      	ldr	r3, [r3, #4]
 800b9e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b9e2:	69ba      	ldr	r2, [r7, #24]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d903      	bls.n	800b9f0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800b9ee:	e10d      	b.n	800bc0c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	60bb      	str	r3, [r7, #8]
 800b9f6:	60fa      	str	r2, [r7, #12]
 800b9f8:	697b      	ldr	r3, [r7, #20]
 800b9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9fc:	4a8e      	ldr	r2, [pc, #568]	; (800bc38 <UART_SetConfig+0x590>)
 800b9fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	2200      	movs	r2, #0
 800ba06:	603b      	str	r3, [r7, #0]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ba12:	f7f5 f941 	bl	8000c98 <__aeabi_uldivmod>
 800ba16:	4602      	mov	r2, r0
 800ba18:	460b      	mov	r3, r1
 800ba1a:	4610      	mov	r0, r2
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f04f 0200 	mov.w	r2, #0
 800ba22:	f04f 0300 	mov.w	r3, #0
 800ba26:	020b      	lsls	r3, r1, #8
 800ba28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ba2c:	0202      	lsls	r2, r0, #8
 800ba2e:	6979      	ldr	r1, [r7, #20]
 800ba30:	6849      	ldr	r1, [r1, #4]
 800ba32:	0849      	lsrs	r1, r1, #1
 800ba34:	2000      	movs	r0, #0
 800ba36:	460c      	mov	r4, r1
 800ba38:	4605      	mov	r5, r0
 800ba3a:	eb12 0804 	adds.w	r8, r2, r4
 800ba3e:	eb43 0905 	adc.w	r9, r3, r5
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	685b      	ldr	r3, [r3, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	469a      	mov	sl, r3
 800ba4a:	4693      	mov	fp, r2
 800ba4c:	4652      	mov	r2, sl
 800ba4e:	465b      	mov	r3, fp
 800ba50:	4640      	mov	r0, r8
 800ba52:	4649      	mov	r1, r9
 800ba54:	f7f5 f920 	bl	8000c98 <__aeabi_uldivmod>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4613      	mov	r3, r2
 800ba5e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba66:	d308      	bcc.n	800ba7a <UART_SetConfig+0x3d2>
 800ba68:	6a3b      	ldr	r3, [r7, #32]
 800ba6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba6e:	d204      	bcs.n	800ba7a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	6a3a      	ldr	r2, [r7, #32]
 800ba76:	60da      	str	r2, [r3, #12]
 800ba78:	e0c8      	b.n	800bc0c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800ba7a:	2301      	movs	r3, #1
 800ba7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ba80:	e0c4      	b.n	800bc0c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	69db      	ldr	r3, [r3, #28]
 800ba86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8a:	d167      	bne.n	800bb5c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800ba8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ba90:	2b08      	cmp	r3, #8
 800ba92:	d828      	bhi.n	800bae6 <UART_SetConfig+0x43e>
 800ba94:	a201      	add	r2, pc, #4	; (adr r2, 800ba9c <UART_SetConfig+0x3f4>)
 800ba96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba9a:	bf00      	nop
 800ba9c:	0800bac1 	.word	0x0800bac1
 800baa0:	0800bac9 	.word	0x0800bac9
 800baa4:	0800bad1 	.word	0x0800bad1
 800baa8:	0800bae7 	.word	0x0800bae7
 800baac:	0800bad7 	.word	0x0800bad7
 800bab0:	0800bae7 	.word	0x0800bae7
 800bab4:	0800bae7 	.word	0x0800bae7
 800bab8:	0800bae7 	.word	0x0800bae7
 800babc:	0800badf 	.word	0x0800badf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bac0:	f7fd f8ae 	bl	8008c20 <HAL_RCC_GetPCLK1Freq>
 800bac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bac6:	e014      	b.n	800baf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bac8:	f7fd f8c0 	bl	8008c4c <HAL_RCC_GetPCLK2Freq>
 800bacc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bace:	e010      	b.n	800baf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bad0:	4b5a      	ldr	r3, [pc, #360]	; (800bc3c <UART_SetConfig+0x594>)
 800bad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bad4:	e00d      	b.n	800baf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bad6:	f7fd f835 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 800bada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800badc:	e009      	b.n	800baf2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bae4:	e005      	b.n	800baf2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bae6:	2300      	movs	r3, #0
 800bae8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800baf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	f000 8089 	beq.w	800bc0c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bafe:	4a4e      	ldr	r2, [pc, #312]	; (800bc38 <UART_SetConfig+0x590>)
 800bb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bb04:	461a      	mov	r2, r3
 800bb06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb08:	fbb3 f3f2 	udiv	r3, r3, r2
 800bb0c:	005a      	lsls	r2, r3, #1
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	085b      	lsrs	r3, r3, #1
 800bb14:	441a      	add	r2, r3
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bb1e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bb20:	6a3b      	ldr	r3, [r7, #32]
 800bb22:	2b0f      	cmp	r3, #15
 800bb24:	d916      	bls.n	800bb54 <UART_SetConfig+0x4ac>
 800bb26:	6a3b      	ldr	r3, [r7, #32]
 800bb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb2c:	d212      	bcs.n	800bb54 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bb2e:	6a3b      	ldr	r3, [r7, #32]
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	f023 030f 	bic.w	r3, r3, #15
 800bb36:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bb38:	6a3b      	ldr	r3, [r7, #32]
 800bb3a:	085b      	lsrs	r3, r3, #1
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	f003 0307 	and.w	r3, r3, #7
 800bb42:	b29a      	uxth	r2, r3
 800bb44:	8bfb      	ldrh	r3, [r7, #30]
 800bb46:	4313      	orrs	r3, r2
 800bb48:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	8bfa      	ldrh	r2, [r7, #30]
 800bb50:	60da      	str	r2, [r3, #12]
 800bb52:	e05b      	b.n	800bc0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bb5a:	e057      	b.n	800bc0c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bb5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb60:	2b08      	cmp	r3, #8
 800bb62:	d828      	bhi.n	800bbb6 <UART_SetConfig+0x50e>
 800bb64:	a201      	add	r2, pc, #4	; (adr r2, 800bb6c <UART_SetConfig+0x4c4>)
 800bb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb6a:	bf00      	nop
 800bb6c:	0800bb91 	.word	0x0800bb91
 800bb70:	0800bb99 	.word	0x0800bb99
 800bb74:	0800bba1 	.word	0x0800bba1
 800bb78:	0800bbb7 	.word	0x0800bbb7
 800bb7c:	0800bba7 	.word	0x0800bba7
 800bb80:	0800bbb7 	.word	0x0800bbb7
 800bb84:	0800bbb7 	.word	0x0800bbb7
 800bb88:	0800bbb7 	.word	0x0800bbb7
 800bb8c:	0800bbaf 	.word	0x0800bbaf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bb90:	f7fd f846 	bl	8008c20 <HAL_RCC_GetPCLK1Freq>
 800bb94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb96:	e014      	b.n	800bbc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bb98:	f7fd f858 	bl	8008c4c <HAL_RCC_GetPCLK2Freq>
 800bb9c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bb9e:	e010      	b.n	800bbc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bba0:	4b26      	ldr	r3, [pc, #152]	; (800bc3c <UART_SetConfig+0x594>)
 800bba2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bba4:	e00d      	b.n	800bbc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bba6:	f7fc ffcd 	bl	8008b44 <HAL_RCC_GetSysClockFreq>
 800bbaa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbac:	e009      	b.n	800bbc2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bbb4:	e005      	b.n	800bbc2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bbba:	2301      	movs	r3, #1
 800bbbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bbc0:	bf00      	nop
    }

    if (pclk != 0U)
 800bbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d021      	beq.n	800bc0c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbc8:	697b      	ldr	r3, [r7, #20]
 800bbca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbcc:	4a1a      	ldr	r2, [pc, #104]	; (800bc38 <UART_SetConfig+0x590>)
 800bbce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	fbb3 f2f2 	udiv	r2, r3, r2
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	085b      	lsrs	r3, r3, #1
 800bbe0:	441a      	add	r2, r3
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bbea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	2b0f      	cmp	r3, #15
 800bbf0:	d909      	bls.n	800bc06 <UART_SetConfig+0x55e>
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bbf8:	d205      	bcs.n	800bc06 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bbfa:	6a3b      	ldr	r3, [r7, #32]
 800bbfc:	b29a      	uxth	r2, r3
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	60da      	str	r2, [r3, #12]
 800bc04:	e002      	b.n	800bc0c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bc0c:	697b      	ldr	r3, [r7, #20]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	2201      	movs	r2, #1
 800bc18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	2200      	movs	r2, #0
 800bc20:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bc22:	697b      	ldr	r3, [r7, #20]
 800bc24:	2200      	movs	r2, #0
 800bc26:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bc28:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3730      	adds	r7, #48	; 0x30
 800bc30:	46bd      	mov	sp, r7
 800bc32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc36:	bf00      	nop
 800bc38:	0800fe60 	.word	0x0800fe60
 800bc3c:	00f42400 	.word	0x00f42400

0800bc40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b083      	sub	sp, #12
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc4c:	f003 0301 	and.w	r3, r3, #1
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d00a      	beq.n	800bc6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	685b      	ldr	r3, [r3, #4]
 800bc5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	430a      	orrs	r2, r1
 800bc68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc6e:	f003 0302 	and.w	r3, r3, #2
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	430a      	orrs	r2, r1
 800bc8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc90:	f003 0304 	and.w	r3, r3, #4
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d00a      	beq.n	800bcae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	685b      	ldr	r3, [r3, #4]
 800bc9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	430a      	orrs	r2, r1
 800bcac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcb2:	f003 0308 	and.w	r3, r3, #8
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d00a      	beq.n	800bcd0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	430a      	orrs	r2, r1
 800bcce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd4:	f003 0310 	and.w	r3, r3, #16
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d00a      	beq.n	800bcf2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	430a      	orrs	r2, r1
 800bcf0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcf6:	f003 0320 	and.w	r3, r3, #32
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00a      	beq.n	800bd14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	689b      	ldr	r3, [r3, #8]
 800bd04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	430a      	orrs	r2, r1
 800bd12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d01a      	beq.n	800bd56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	430a      	orrs	r2, r1
 800bd34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd3e:	d10a      	bne.n	800bd56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	685b      	ldr	r3, [r3, #4]
 800bd46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	430a      	orrs	r2, r1
 800bd54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00a      	beq.n	800bd78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	430a      	orrs	r2, r1
 800bd76:	605a      	str	r2, [r3, #4]
  }
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b086      	sub	sp, #24
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bd94:	f7f9 fa3c 	bl	8005210 <HAL_GetTick>
 800bd98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	f003 0308 	and.w	r3, r3, #8
 800bda4:	2b08      	cmp	r3, #8
 800bda6:	d10e      	bne.n	800bdc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bda8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bdb6:	6878      	ldr	r0, [r7, #4]
 800bdb8:	f000 f82f 	bl	800be1a <UART_WaitOnFlagUntilTimeout>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d001      	beq.n	800bdc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e025      	b.n	800be12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b04      	cmp	r3, #4
 800bdd2:	d10e      	bne.n	800bdf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bdd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2200      	movs	r2, #0
 800bdde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f819 	bl	800be1a <UART_WaitOnFlagUntilTimeout>
 800bde8:	4603      	mov	r3, r0
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d001      	beq.n	800bdf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bdee:	2303      	movs	r3, #3
 800bdf0:	e00f      	b.n	800be12 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2220      	movs	r2, #32
 800bdf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2220      	movs	r2, #32
 800bdfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	2200      	movs	r2, #0
 800be06:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2200      	movs	r2, #0
 800be0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b09c      	sub	sp, #112	; 0x70
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	603b      	str	r3, [r7, #0]
 800be26:	4613      	mov	r3, r2
 800be28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800be2a:	e0a9      	b.n	800bf80 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be32:	f000 80a5 	beq.w	800bf80 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be36:	f7f9 f9eb 	bl	8005210 <HAL_GetTick>
 800be3a:	4602      	mov	r2, r0
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	1ad3      	subs	r3, r2, r3
 800be40:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800be42:	429a      	cmp	r2, r3
 800be44:	d302      	bcc.n	800be4c <UART_WaitOnFlagUntilTimeout+0x32>
 800be46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d140      	bne.n	800bece <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800be5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800be60:	667b      	str	r3, [r7, #100]	; 0x64
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	461a      	mov	r2, r3
 800be68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be6c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800be78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e6      	bne.n	800be4c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	3308      	adds	r3, #8
 800be84:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be88:	e853 3f00 	ldrex	r3, [r3]
 800be8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800be8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be90:	f023 0301 	bic.w	r3, r3, #1
 800be94:	663b      	str	r3, [r7, #96]	; 0x60
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	3308      	adds	r3, #8
 800be9c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800be9e:	64ba      	str	r2, [r7, #72]	; 0x48
 800bea0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bea6:	e841 2300 	strex	r3, r2, [r1]
 800beaa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800beac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d1e5      	bne.n	800be7e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2220      	movs	r2, #32
 800beb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2220      	movs	r2, #32
 800bebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800beca:	2303      	movs	r3, #3
 800becc:	e069      	b.n	800bfa2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	f003 0304 	and.w	r3, r3, #4
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d051      	beq.n	800bf80 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	69db      	ldr	r3, [r3, #28]
 800bee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beea:	d149      	bne.n	800bf80 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bef4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	e853 3f00 	ldrex	r3, [r3]
 800bf02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bf0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	461a      	mov	r2, r3
 800bf12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf14:	637b      	str	r3, [r7, #52]	; 0x34
 800bf16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bf1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bf1c:	e841 2300 	strex	r3, r2, [r1]
 800bf20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bf22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1e6      	bne.n	800bef6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3308      	adds	r3, #8
 800bf2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	e853 3f00 	ldrex	r3, [r3]
 800bf36:	613b      	str	r3, [r7, #16]
   return(result);
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	f023 0301 	bic.w	r3, r3, #1
 800bf3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	3308      	adds	r3, #8
 800bf46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bf48:	623a      	str	r2, [r7, #32]
 800bf4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4c:	69f9      	ldr	r1, [r7, #28]
 800bf4e:	6a3a      	ldr	r2, [r7, #32]
 800bf50:	e841 2300 	strex	r3, r2, [r1]
 800bf54:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf56:	69bb      	ldr	r3, [r7, #24]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1e5      	bne.n	800bf28 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2220      	movs	r2, #32
 800bf60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2220      	movs	r2, #32
 800bf68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2220      	movs	r2, #32
 800bf70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bf7c:	2303      	movs	r3, #3
 800bf7e:	e010      	b.n	800bfa2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	69da      	ldr	r2, [r3, #28]
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	4013      	ands	r3, r2
 800bf8a:	68ba      	ldr	r2, [r7, #8]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	bf0c      	ite	eq
 800bf90:	2301      	moveq	r3, #1
 800bf92:	2300      	movne	r3, #0
 800bf94:	b2db      	uxtb	r3, r3
 800bf96:	461a      	mov	r2, r3
 800bf98:	79fb      	ldrb	r3, [r7, #7]
 800bf9a:	429a      	cmp	r2, r3
 800bf9c:	f43f af46 	beq.w	800be2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bfa0:	2300      	movs	r3, #0
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	3770      	adds	r7, #112	; 0x70
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b085      	sub	sp, #20
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfb8:	2b01      	cmp	r3, #1
 800bfba:	d101      	bne.n	800bfc0 <HAL_UARTEx_DisableFifoMode+0x16>
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	e027      	b.n	800c010 <HAL_UARTEx_DisableFifoMode+0x66>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2224      	movs	r2, #36	; 0x24
 800bfcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f022 0201 	bic.w	r2, r2, #1
 800bfe6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2200      	movs	r2, #0
 800bff4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2220      	movs	r2, #32
 800c002:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2200      	movs	r2, #0
 800c00a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c00e:	2300      	movs	r3, #0
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	d101      	bne.n	800c034 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c030:	2302      	movs	r3, #2
 800c032:	e02d      	b.n	800c090 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2201      	movs	r2, #1
 800c038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2224      	movs	r2, #36	; 0x24
 800c040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f022 0201 	bic.w	r2, r2, #1
 800c05a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	430a      	orrs	r2, r1
 800c06e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 f84f 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68fa      	ldr	r2, [r7, #12]
 800c07c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3710      	adds	r7, #16
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d101      	bne.n	800c0b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c0ac:	2302      	movs	r3, #2
 800c0ae:	e02d      	b.n	800c10c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2224      	movs	r2, #36	; 0x24
 800c0bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0201 	bic.w	r2, r2, #1
 800c0d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	689b      	ldr	r3, [r3, #8]
 800c0de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	683a      	ldr	r2, [r7, #0]
 800c0e8:	430a      	orrs	r2, r1
 800c0ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f000 f811 	bl	800c114 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2220      	movs	r2, #32
 800c0fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c10a:	2300      	movs	r3, #0
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	3710      	adds	r7, #16
 800c110:	46bd      	mov	sp, r7
 800c112:	bd80      	pop	{r7, pc}

0800c114 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c120:	2b00      	cmp	r3, #0
 800c122:	d108      	bne.n	800c136 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2201      	movs	r2, #1
 800c128:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c134:	e031      	b.n	800c19a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c136:	2308      	movs	r3, #8
 800c138:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c13a:	2308      	movs	r3, #8
 800c13c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	0e5b      	lsrs	r3, r3, #25
 800c146:	b2db      	uxtb	r3, r3
 800c148:	f003 0307 	and.w	r3, r3, #7
 800c14c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	689b      	ldr	r3, [r3, #8]
 800c154:	0f5b      	lsrs	r3, r3, #29
 800c156:	b2db      	uxtb	r3, r3
 800c158:	f003 0307 	and.w	r3, r3, #7
 800c15c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c15e:	7bbb      	ldrb	r3, [r7, #14]
 800c160:	7b3a      	ldrb	r2, [r7, #12]
 800c162:	4911      	ldr	r1, [pc, #68]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c164:	5c8a      	ldrb	r2, [r1, r2]
 800c166:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c16a:	7b3a      	ldrb	r2, [r7, #12]
 800c16c:	490f      	ldr	r1, [pc, #60]	; (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c16e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c170:	fb93 f3f2 	sdiv	r3, r3, r2
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c17c:	7bfb      	ldrb	r3, [r7, #15]
 800c17e:	7b7a      	ldrb	r2, [r7, #13]
 800c180:	4909      	ldr	r1, [pc, #36]	; (800c1a8 <UARTEx_SetNbDataToProcess+0x94>)
 800c182:	5c8a      	ldrb	r2, [r1, r2]
 800c184:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c188:	7b7a      	ldrb	r2, [r7, #13]
 800c18a:	4908      	ldr	r1, [pc, #32]	; (800c1ac <UARTEx_SetNbDataToProcess+0x98>)
 800c18c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c18e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c192:	b29a      	uxth	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c19a:	bf00      	nop
 800c19c:	3714      	adds	r7, #20
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a4:	4770      	bx	lr
 800c1a6:	bf00      	nop
 800c1a8:	0800fe78 	.word	0x0800fe78
 800c1ac:	0800fe80 	.word	0x0800fe80

0800c1b0 <__errno>:
 800c1b0:	4b01      	ldr	r3, [pc, #4]	; (800c1b8 <__errno+0x8>)
 800c1b2:	6818      	ldr	r0, [r3, #0]
 800c1b4:	4770      	bx	lr
 800c1b6:	bf00      	nop
 800c1b8:	2000002c 	.word	0x2000002c

0800c1bc <__libc_init_array>:
 800c1bc:	b570      	push	{r4, r5, r6, lr}
 800c1be:	4d0d      	ldr	r5, [pc, #52]	; (800c1f4 <__libc_init_array+0x38>)
 800c1c0:	4c0d      	ldr	r4, [pc, #52]	; (800c1f8 <__libc_init_array+0x3c>)
 800c1c2:	1b64      	subs	r4, r4, r5
 800c1c4:	10a4      	asrs	r4, r4, #2
 800c1c6:	2600      	movs	r6, #0
 800c1c8:	42a6      	cmp	r6, r4
 800c1ca:	d109      	bne.n	800c1e0 <__libc_init_array+0x24>
 800c1cc:	4d0b      	ldr	r5, [pc, #44]	; (800c1fc <__libc_init_array+0x40>)
 800c1ce:	4c0c      	ldr	r4, [pc, #48]	; (800c200 <__libc_init_array+0x44>)
 800c1d0:	f003 fdb8 	bl	800fd44 <_init>
 800c1d4:	1b64      	subs	r4, r4, r5
 800c1d6:	10a4      	asrs	r4, r4, #2
 800c1d8:	2600      	movs	r6, #0
 800c1da:	42a6      	cmp	r6, r4
 800c1dc:	d105      	bne.n	800c1ea <__libc_init_array+0x2e>
 800c1de:	bd70      	pop	{r4, r5, r6, pc}
 800c1e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1e4:	4798      	blx	r3
 800c1e6:	3601      	adds	r6, #1
 800c1e8:	e7ee      	b.n	800c1c8 <__libc_init_array+0xc>
 800c1ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ee:	4798      	blx	r3
 800c1f0:	3601      	adds	r6, #1
 800c1f2:	e7f2      	b.n	800c1da <__libc_init_array+0x1e>
 800c1f4:	08010644 	.word	0x08010644
 800c1f8:	08010644 	.word	0x08010644
 800c1fc:	08010644 	.word	0x08010644
 800c200:	08010648 	.word	0x08010648

0800c204 <memset>:
 800c204:	4402      	add	r2, r0
 800c206:	4603      	mov	r3, r0
 800c208:	4293      	cmp	r3, r2
 800c20a:	d100      	bne.n	800c20e <memset+0xa>
 800c20c:	4770      	bx	lr
 800c20e:	f803 1b01 	strb.w	r1, [r3], #1
 800c212:	e7f9      	b.n	800c208 <memset+0x4>

0800c214 <__cvt>:
 800c214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c218:	ec55 4b10 	vmov	r4, r5, d0
 800c21c:	2d00      	cmp	r5, #0
 800c21e:	460e      	mov	r6, r1
 800c220:	4619      	mov	r1, r3
 800c222:	462b      	mov	r3, r5
 800c224:	bfbb      	ittet	lt
 800c226:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c22a:	461d      	movlt	r5, r3
 800c22c:	2300      	movge	r3, #0
 800c22e:	232d      	movlt	r3, #45	; 0x2d
 800c230:	700b      	strb	r3, [r1, #0]
 800c232:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c234:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c238:	4691      	mov	r9, r2
 800c23a:	f023 0820 	bic.w	r8, r3, #32
 800c23e:	bfbc      	itt	lt
 800c240:	4622      	movlt	r2, r4
 800c242:	4614      	movlt	r4, r2
 800c244:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c248:	d005      	beq.n	800c256 <__cvt+0x42>
 800c24a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c24e:	d100      	bne.n	800c252 <__cvt+0x3e>
 800c250:	3601      	adds	r6, #1
 800c252:	2102      	movs	r1, #2
 800c254:	e000      	b.n	800c258 <__cvt+0x44>
 800c256:	2103      	movs	r1, #3
 800c258:	ab03      	add	r3, sp, #12
 800c25a:	9301      	str	r3, [sp, #4]
 800c25c:	ab02      	add	r3, sp, #8
 800c25e:	9300      	str	r3, [sp, #0]
 800c260:	ec45 4b10 	vmov	d0, r4, r5
 800c264:	4653      	mov	r3, sl
 800c266:	4632      	mov	r2, r6
 800c268:	f000 fcea 	bl	800cc40 <_dtoa_r>
 800c26c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c270:	4607      	mov	r7, r0
 800c272:	d102      	bne.n	800c27a <__cvt+0x66>
 800c274:	f019 0f01 	tst.w	r9, #1
 800c278:	d022      	beq.n	800c2c0 <__cvt+0xac>
 800c27a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c27e:	eb07 0906 	add.w	r9, r7, r6
 800c282:	d110      	bne.n	800c2a6 <__cvt+0x92>
 800c284:	783b      	ldrb	r3, [r7, #0]
 800c286:	2b30      	cmp	r3, #48	; 0x30
 800c288:	d10a      	bne.n	800c2a0 <__cvt+0x8c>
 800c28a:	2200      	movs	r2, #0
 800c28c:	2300      	movs	r3, #0
 800c28e:	4620      	mov	r0, r4
 800c290:	4629      	mov	r1, r5
 800c292:	f7f4 fc41 	bl	8000b18 <__aeabi_dcmpeq>
 800c296:	b918      	cbnz	r0, 800c2a0 <__cvt+0x8c>
 800c298:	f1c6 0601 	rsb	r6, r6, #1
 800c29c:	f8ca 6000 	str.w	r6, [sl]
 800c2a0:	f8da 3000 	ldr.w	r3, [sl]
 800c2a4:	4499      	add	r9, r3
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	f7f4 fc33 	bl	8000b18 <__aeabi_dcmpeq>
 800c2b2:	b108      	cbz	r0, 800c2b8 <__cvt+0xa4>
 800c2b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2b8:	2230      	movs	r2, #48	; 0x30
 800c2ba:	9b03      	ldr	r3, [sp, #12]
 800c2bc:	454b      	cmp	r3, r9
 800c2be:	d307      	bcc.n	800c2d0 <__cvt+0xbc>
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2c4:	1bdb      	subs	r3, r3, r7
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	b004      	add	sp, #16
 800c2cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d0:	1c59      	adds	r1, r3, #1
 800c2d2:	9103      	str	r1, [sp, #12]
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	e7f0      	b.n	800c2ba <__cvt+0xa6>

0800c2d8 <__exponent>:
 800c2d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2da:	4603      	mov	r3, r0
 800c2dc:	2900      	cmp	r1, #0
 800c2de:	bfb8      	it	lt
 800c2e0:	4249      	neglt	r1, r1
 800c2e2:	f803 2b02 	strb.w	r2, [r3], #2
 800c2e6:	bfb4      	ite	lt
 800c2e8:	222d      	movlt	r2, #45	; 0x2d
 800c2ea:	222b      	movge	r2, #43	; 0x2b
 800c2ec:	2909      	cmp	r1, #9
 800c2ee:	7042      	strb	r2, [r0, #1]
 800c2f0:	dd2a      	ble.n	800c348 <__exponent+0x70>
 800c2f2:	f10d 0407 	add.w	r4, sp, #7
 800c2f6:	46a4      	mov	ip, r4
 800c2f8:	270a      	movs	r7, #10
 800c2fa:	46a6      	mov	lr, r4
 800c2fc:	460a      	mov	r2, r1
 800c2fe:	fb91 f6f7 	sdiv	r6, r1, r7
 800c302:	fb07 1516 	mls	r5, r7, r6, r1
 800c306:	3530      	adds	r5, #48	; 0x30
 800c308:	2a63      	cmp	r2, #99	; 0x63
 800c30a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c30e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c312:	4631      	mov	r1, r6
 800c314:	dcf1      	bgt.n	800c2fa <__exponent+0x22>
 800c316:	3130      	adds	r1, #48	; 0x30
 800c318:	f1ae 0502 	sub.w	r5, lr, #2
 800c31c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c320:	1c44      	adds	r4, r0, #1
 800c322:	4629      	mov	r1, r5
 800c324:	4561      	cmp	r1, ip
 800c326:	d30a      	bcc.n	800c33e <__exponent+0x66>
 800c328:	f10d 0209 	add.w	r2, sp, #9
 800c32c:	eba2 020e 	sub.w	r2, r2, lr
 800c330:	4565      	cmp	r5, ip
 800c332:	bf88      	it	hi
 800c334:	2200      	movhi	r2, #0
 800c336:	4413      	add	r3, r2
 800c338:	1a18      	subs	r0, r3, r0
 800c33a:	b003      	add	sp, #12
 800c33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c33e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c342:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c346:	e7ed      	b.n	800c324 <__exponent+0x4c>
 800c348:	2330      	movs	r3, #48	; 0x30
 800c34a:	3130      	adds	r1, #48	; 0x30
 800c34c:	7083      	strb	r3, [r0, #2]
 800c34e:	70c1      	strb	r1, [r0, #3]
 800c350:	1d03      	adds	r3, r0, #4
 800c352:	e7f1      	b.n	800c338 <__exponent+0x60>

0800c354 <_printf_float>:
 800c354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c358:	ed2d 8b02 	vpush	{d8}
 800c35c:	b08d      	sub	sp, #52	; 0x34
 800c35e:	460c      	mov	r4, r1
 800c360:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c364:	4616      	mov	r6, r2
 800c366:	461f      	mov	r7, r3
 800c368:	4605      	mov	r5, r0
 800c36a:	f001 fa57 	bl	800d81c <_localeconv_r>
 800c36e:	f8d0 a000 	ldr.w	sl, [r0]
 800c372:	4650      	mov	r0, sl
 800c374:	f7f3 ff54 	bl	8000220 <strlen>
 800c378:	2300      	movs	r3, #0
 800c37a:	930a      	str	r3, [sp, #40]	; 0x28
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	f8d8 3000 	ldr.w	r3, [r8]
 800c384:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c388:	3307      	adds	r3, #7
 800c38a:	f023 0307 	bic.w	r3, r3, #7
 800c38e:	f103 0208 	add.w	r2, r3, #8
 800c392:	f8c8 2000 	str.w	r2, [r8]
 800c396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c39e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c3a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c3a6:	9307      	str	r3, [sp, #28]
 800c3a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c3ac:	ee08 0a10 	vmov	s16, r0
 800c3b0:	4b9f      	ldr	r3, [pc, #636]	; (800c630 <_printf_float+0x2dc>)
 800c3b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3b6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ba:	f7f4 fbdf 	bl	8000b7c <__aeabi_dcmpun>
 800c3be:	bb88      	cbnz	r0, 800c424 <_printf_float+0xd0>
 800c3c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3c4:	4b9a      	ldr	r3, [pc, #616]	; (800c630 <_printf_float+0x2dc>)
 800c3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ca:	f7f4 fbb9 	bl	8000b40 <__aeabi_dcmple>
 800c3ce:	bb48      	cbnz	r0, 800c424 <_printf_float+0xd0>
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	4640      	mov	r0, r8
 800c3d6:	4649      	mov	r1, r9
 800c3d8:	f7f4 fba8 	bl	8000b2c <__aeabi_dcmplt>
 800c3dc:	b110      	cbz	r0, 800c3e4 <_printf_float+0x90>
 800c3de:	232d      	movs	r3, #45	; 0x2d
 800c3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3e4:	4b93      	ldr	r3, [pc, #588]	; (800c634 <_printf_float+0x2e0>)
 800c3e6:	4894      	ldr	r0, [pc, #592]	; (800c638 <_printf_float+0x2e4>)
 800c3e8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c3ec:	bf94      	ite	ls
 800c3ee:	4698      	movls	r8, r3
 800c3f0:	4680      	movhi	r8, r0
 800c3f2:	2303      	movs	r3, #3
 800c3f4:	6123      	str	r3, [r4, #16]
 800c3f6:	9b05      	ldr	r3, [sp, #20]
 800c3f8:	f023 0204 	bic.w	r2, r3, #4
 800c3fc:	6022      	str	r2, [r4, #0]
 800c3fe:	f04f 0900 	mov.w	r9, #0
 800c402:	9700      	str	r7, [sp, #0]
 800c404:	4633      	mov	r3, r6
 800c406:	aa0b      	add	r2, sp, #44	; 0x2c
 800c408:	4621      	mov	r1, r4
 800c40a:	4628      	mov	r0, r5
 800c40c:	f000 f9d8 	bl	800c7c0 <_printf_common>
 800c410:	3001      	adds	r0, #1
 800c412:	f040 8090 	bne.w	800c536 <_printf_float+0x1e2>
 800c416:	f04f 30ff 	mov.w	r0, #4294967295
 800c41a:	b00d      	add	sp, #52	; 0x34
 800c41c:	ecbd 8b02 	vpop	{d8}
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c424:	4642      	mov	r2, r8
 800c426:	464b      	mov	r3, r9
 800c428:	4640      	mov	r0, r8
 800c42a:	4649      	mov	r1, r9
 800c42c:	f7f4 fba6 	bl	8000b7c <__aeabi_dcmpun>
 800c430:	b140      	cbz	r0, 800c444 <_printf_float+0xf0>
 800c432:	464b      	mov	r3, r9
 800c434:	2b00      	cmp	r3, #0
 800c436:	bfbc      	itt	lt
 800c438:	232d      	movlt	r3, #45	; 0x2d
 800c43a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c43e:	487f      	ldr	r0, [pc, #508]	; (800c63c <_printf_float+0x2e8>)
 800c440:	4b7f      	ldr	r3, [pc, #508]	; (800c640 <_printf_float+0x2ec>)
 800c442:	e7d1      	b.n	800c3e8 <_printf_float+0x94>
 800c444:	6863      	ldr	r3, [r4, #4]
 800c446:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c44a:	9206      	str	r2, [sp, #24]
 800c44c:	1c5a      	adds	r2, r3, #1
 800c44e:	d13f      	bne.n	800c4d0 <_printf_float+0x17c>
 800c450:	2306      	movs	r3, #6
 800c452:	6063      	str	r3, [r4, #4]
 800c454:	9b05      	ldr	r3, [sp, #20]
 800c456:	6861      	ldr	r1, [r4, #4]
 800c458:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c45c:	2300      	movs	r3, #0
 800c45e:	9303      	str	r3, [sp, #12]
 800c460:	ab0a      	add	r3, sp, #40	; 0x28
 800c462:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c466:	ab09      	add	r3, sp, #36	; 0x24
 800c468:	ec49 8b10 	vmov	d0, r8, r9
 800c46c:	9300      	str	r3, [sp, #0]
 800c46e:	6022      	str	r2, [r4, #0]
 800c470:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c474:	4628      	mov	r0, r5
 800c476:	f7ff fecd 	bl	800c214 <__cvt>
 800c47a:	9b06      	ldr	r3, [sp, #24]
 800c47c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c47e:	2b47      	cmp	r3, #71	; 0x47
 800c480:	4680      	mov	r8, r0
 800c482:	d108      	bne.n	800c496 <_printf_float+0x142>
 800c484:	1cc8      	adds	r0, r1, #3
 800c486:	db02      	blt.n	800c48e <_printf_float+0x13a>
 800c488:	6863      	ldr	r3, [r4, #4]
 800c48a:	4299      	cmp	r1, r3
 800c48c:	dd41      	ble.n	800c512 <_printf_float+0x1be>
 800c48e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c492:	fa5f fb8b 	uxtb.w	fp, fp
 800c496:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c49a:	d820      	bhi.n	800c4de <_printf_float+0x18a>
 800c49c:	3901      	subs	r1, #1
 800c49e:	465a      	mov	r2, fp
 800c4a0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c4a4:	9109      	str	r1, [sp, #36]	; 0x24
 800c4a6:	f7ff ff17 	bl	800c2d8 <__exponent>
 800c4aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4ac:	1813      	adds	r3, r2, r0
 800c4ae:	2a01      	cmp	r2, #1
 800c4b0:	4681      	mov	r9, r0
 800c4b2:	6123      	str	r3, [r4, #16]
 800c4b4:	dc02      	bgt.n	800c4bc <_printf_float+0x168>
 800c4b6:	6822      	ldr	r2, [r4, #0]
 800c4b8:	07d2      	lsls	r2, r2, #31
 800c4ba:	d501      	bpl.n	800c4c0 <_printf_float+0x16c>
 800c4bc:	3301      	adds	r3, #1
 800c4be:	6123      	str	r3, [r4, #16]
 800c4c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d09c      	beq.n	800c402 <_printf_float+0xae>
 800c4c8:	232d      	movs	r3, #45	; 0x2d
 800c4ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4ce:	e798      	b.n	800c402 <_printf_float+0xae>
 800c4d0:	9a06      	ldr	r2, [sp, #24]
 800c4d2:	2a47      	cmp	r2, #71	; 0x47
 800c4d4:	d1be      	bne.n	800c454 <_printf_float+0x100>
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1bc      	bne.n	800c454 <_printf_float+0x100>
 800c4da:	2301      	movs	r3, #1
 800c4dc:	e7b9      	b.n	800c452 <_printf_float+0xfe>
 800c4de:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c4e2:	d118      	bne.n	800c516 <_printf_float+0x1c2>
 800c4e4:	2900      	cmp	r1, #0
 800c4e6:	6863      	ldr	r3, [r4, #4]
 800c4e8:	dd0b      	ble.n	800c502 <_printf_float+0x1ae>
 800c4ea:	6121      	str	r1, [r4, #16]
 800c4ec:	b913      	cbnz	r3, 800c4f4 <_printf_float+0x1a0>
 800c4ee:	6822      	ldr	r2, [r4, #0]
 800c4f0:	07d0      	lsls	r0, r2, #31
 800c4f2:	d502      	bpl.n	800c4fa <_printf_float+0x1a6>
 800c4f4:	3301      	adds	r3, #1
 800c4f6:	440b      	add	r3, r1
 800c4f8:	6123      	str	r3, [r4, #16]
 800c4fa:	65a1      	str	r1, [r4, #88]	; 0x58
 800c4fc:	f04f 0900 	mov.w	r9, #0
 800c500:	e7de      	b.n	800c4c0 <_printf_float+0x16c>
 800c502:	b913      	cbnz	r3, 800c50a <_printf_float+0x1b6>
 800c504:	6822      	ldr	r2, [r4, #0]
 800c506:	07d2      	lsls	r2, r2, #31
 800c508:	d501      	bpl.n	800c50e <_printf_float+0x1ba>
 800c50a:	3302      	adds	r3, #2
 800c50c:	e7f4      	b.n	800c4f8 <_printf_float+0x1a4>
 800c50e:	2301      	movs	r3, #1
 800c510:	e7f2      	b.n	800c4f8 <_printf_float+0x1a4>
 800c512:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c518:	4299      	cmp	r1, r3
 800c51a:	db05      	blt.n	800c528 <_printf_float+0x1d4>
 800c51c:	6823      	ldr	r3, [r4, #0]
 800c51e:	6121      	str	r1, [r4, #16]
 800c520:	07d8      	lsls	r0, r3, #31
 800c522:	d5ea      	bpl.n	800c4fa <_printf_float+0x1a6>
 800c524:	1c4b      	adds	r3, r1, #1
 800c526:	e7e7      	b.n	800c4f8 <_printf_float+0x1a4>
 800c528:	2900      	cmp	r1, #0
 800c52a:	bfd4      	ite	le
 800c52c:	f1c1 0202 	rsble	r2, r1, #2
 800c530:	2201      	movgt	r2, #1
 800c532:	4413      	add	r3, r2
 800c534:	e7e0      	b.n	800c4f8 <_printf_float+0x1a4>
 800c536:	6823      	ldr	r3, [r4, #0]
 800c538:	055a      	lsls	r2, r3, #21
 800c53a:	d407      	bmi.n	800c54c <_printf_float+0x1f8>
 800c53c:	6923      	ldr	r3, [r4, #16]
 800c53e:	4642      	mov	r2, r8
 800c540:	4631      	mov	r1, r6
 800c542:	4628      	mov	r0, r5
 800c544:	47b8      	blx	r7
 800c546:	3001      	adds	r0, #1
 800c548:	d12c      	bne.n	800c5a4 <_printf_float+0x250>
 800c54a:	e764      	b.n	800c416 <_printf_float+0xc2>
 800c54c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c550:	f240 80e0 	bls.w	800c714 <_printf_float+0x3c0>
 800c554:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c558:	2200      	movs	r2, #0
 800c55a:	2300      	movs	r3, #0
 800c55c:	f7f4 fadc 	bl	8000b18 <__aeabi_dcmpeq>
 800c560:	2800      	cmp	r0, #0
 800c562:	d034      	beq.n	800c5ce <_printf_float+0x27a>
 800c564:	4a37      	ldr	r2, [pc, #220]	; (800c644 <_printf_float+0x2f0>)
 800c566:	2301      	movs	r3, #1
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	f43f af51 	beq.w	800c416 <_printf_float+0xc2>
 800c574:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c578:	429a      	cmp	r2, r3
 800c57a:	db02      	blt.n	800c582 <_printf_float+0x22e>
 800c57c:	6823      	ldr	r3, [r4, #0]
 800c57e:	07d8      	lsls	r0, r3, #31
 800c580:	d510      	bpl.n	800c5a4 <_printf_float+0x250>
 800c582:	ee18 3a10 	vmov	r3, s16
 800c586:	4652      	mov	r2, sl
 800c588:	4631      	mov	r1, r6
 800c58a:	4628      	mov	r0, r5
 800c58c:	47b8      	blx	r7
 800c58e:	3001      	adds	r0, #1
 800c590:	f43f af41 	beq.w	800c416 <_printf_float+0xc2>
 800c594:	f04f 0800 	mov.w	r8, #0
 800c598:	f104 091a 	add.w	r9, r4, #26
 800c59c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	4543      	cmp	r3, r8
 800c5a2:	dc09      	bgt.n	800c5b8 <_printf_float+0x264>
 800c5a4:	6823      	ldr	r3, [r4, #0]
 800c5a6:	079b      	lsls	r3, r3, #30
 800c5a8:	f100 8105 	bmi.w	800c7b6 <_printf_float+0x462>
 800c5ac:	68e0      	ldr	r0, [r4, #12]
 800c5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b0:	4298      	cmp	r0, r3
 800c5b2:	bfb8      	it	lt
 800c5b4:	4618      	movlt	r0, r3
 800c5b6:	e730      	b.n	800c41a <_printf_float+0xc6>
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	464a      	mov	r2, r9
 800c5bc:	4631      	mov	r1, r6
 800c5be:	4628      	mov	r0, r5
 800c5c0:	47b8      	blx	r7
 800c5c2:	3001      	adds	r0, #1
 800c5c4:	f43f af27 	beq.w	800c416 <_printf_float+0xc2>
 800c5c8:	f108 0801 	add.w	r8, r8, #1
 800c5cc:	e7e6      	b.n	800c59c <_printf_float+0x248>
 800c5ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	dc39      	bgt.n	800c648 <_printf_float+0x2f4>
 800c5d4:	4a1b      	ldr	r2, [pc, #108]	; (800c644 <_printf_float+0x2f0>)
 800c5d6:	2301      	movs	r3, #1
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f af19 	beq.w	800c416 <_printf_float+0xc2>
 800c5e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5e8:	4313      	orrs	r3, r2
 800c5ea:	d102      	bne.n	800c5f2 <_printf_float+0x29e>
 800c5ec:	6823      	ldr	r3, [r4, #0]
 800c5ee:	07d9      	lsls	r1, r3, #31
 800c5f0:	d5d8      	bpl.n	800c5a4 <_printf_float+0x250>
 800c5f2:	ee18 3a10 	vmov	r3, s16
 800c5f6:	4652      	mov	r2, sl
 800c5f8:	4631      	mov	r1, r6
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	47b8      	blx	r7
 800c5fe:	3001      	adds	r0, #1
 800c600:	f43f af09 	beq.w	800c416 <_printf_float+0xc2>
 800c604:	f04f 0900 	mov.w	r9, #0
 800c608:	f104 0a1a 	add.w	sl, r4, #26
 800c60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60e:	425b      	negs	r3, r3
 800c610:	454b      	cmp	r3, r9
 800c612:	dc01      	bgt.n	800c618 <_printf_float+0x2c4>
 800c614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c616:	e792      	b.n	800c53e <_printf_float+0x1ea>
 800c618:	2301      	movs	r3, #1
 800c61a:	4652      	mov	r2, sl
 800c61c:	4631      	mov	r1, r6
 800c61e:	4628      	mov	r0, r5
 800c620:	47b8      	blx	r7
 800c622:	3001      	adds	r0, #1
 800c624:	f43f aef7 	beq.w	800c416 <_printf_float+0xc2>
 800c628:	f109 0901 	add.w	r9, r9, #1
 800c62c:	e7ee      	b.n	800c60c <_printf_float+0x2b8>
 800c62e:	bf00      	nop
 800c630:	7fefffff 	.word	0x7fefffff
 800c634:	0800fe8c 	.word	0x0800fe8c
 800c638:	0800fe90 	.word	0x0800fe90
 800c63c:	0800fe98 	.word	0x0800fe98
 800c640:	0800fe94 	.word	0x0800fe94
 800c644:	0800fe9c 	.word	0x0800fe9c
 800c648:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c64a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c64c:	429a      	cmp	r2, r3
 800c64e:	bfa8      	it	ge
 800c650:	461a      	movge	r2, r3
 800c652:	2a00      	cmp	r2, #0
 800c654:	4691      	mov	r9, r2
 800c656:	dc37      	bgt.n	800c6c8 <_printf_float+0x374>
 800c658:	f04f 0b00 	mov.w	fp, #0
 800c65c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c660:	f104 021a 	add.w	r2, r4, #26
 800c664:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c666:	9305      	str	r3, [sp, #20]
 800c668:	eba3 0309 	sub.w	r3, r3, r9
 800c66c:	455b      	cmp	r3, fp
 800c66e:	dc33      	bgt.n	800c6d8 <_printf_float+0x384>
 800c670:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c674:	429a      	cmp	r2, r3
 800c676:	db3b      	blt.n	800c6f0 <_printf_float+0x39c>
 800c678:	6823      	ldr	r3, [r4, #0]
 800c67a:	07da      	lsls	r2, r3, #31
 800c67c:	d438      	bmi.n	800c6f0 <_printf_float+0x39c>
 800c67e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c680:	9a05      	ldr	r2, [sp, #20]
 800c682:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c684:	1a9a      	subs	r2, r3, r2
 800c686:	eba3 0901 	sub.w	r9, r3, r1
 800c68a:	4591      	cmp	r9, r2
 800c68c:	bfa8      	it	ge
 800c68e:	4691      	movge	r9, r2
 800c690:	f1b9 0f00 	cmp.w	r9, #0
 800c694:	dc35      	bgt.n	800c702 <_printf_float+0x3ae>
 800c696:	f04f 0800 	mov.w	r8, #0
 800c69a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c69e:	f104 0a1a 	add.w	sl, r4, #26
 800c6a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c6a6:	1a9b      	subs	r3, r3, r2
 800c6a8:	eba3 0309 	sub.w	r3, r3, r9
 800c6ac:	4543      	cmp	r3, r8
 800c6ae:	f77f af79 	ble.w	800c5a4 <_printf_float+0x250>
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	4652      	mov	r2, sl
 800c6b6:	4631      	mov	r1, r6
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	47b8      	blx	r7
 800c6bc:	3001      	adds	r0, #1
 800c6be:	f43f aeaa 	beq.w	800c416 <_printf_float+0xc2>
 800c6c2:	f108 0801 	add.w	r8, r8, #1
 800c6c6:	e7ec      	b.n	800c6a2 <_printf_float+0x34e>
 800c6c8:	4613      	mov	r3, r2
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	47b8      	blx	r7
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	d1c0      	bne.n	800c658 <_printf_float+0x304>
 800c6d6:	e69e      	b.n	800c416 <_printf_float+0xc2>
 800c6d8:	2301      	movs	r3, #1
 800c6da:	4631      	mov	r1, r6
 800c6dc:	4628      	mov	r0, r5
 800c6de:	9205      	str	r2, [sp, #20]
 800c6e0:	47b8      	blx	r7
 800c6e2:	3001      	adds	r0, #1
 800c6e4:	f43f ae97 	beq.w	800c416 <_printf_float+0xc2>
 800c6e8:	9a05      	ldr	r2, [sp, #20]
 800c6ea:	f10b 0b01 	add.w	fp, fp, #1
 800c6ee:	e7b9      	b.n	800c664 <_printf_float+0x310>
 800c6f0:	ee18 3a10 	vmov	r3, s16
 800c6f4:	4652      	mov	r2, sl
 800c6f6:	4631      	mov	r1, r6
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b8      	blx	r7
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d1be      	bne.n	800c67e <_printf_float+0x32a>
 800c700:	e689      	b.n	800c416 <_printf_float+0xc2>
 800c702:	9a05      	ldr	r2, [sp, #20]
 800c704:	464b      	mov	r3, r9
 800c706:	4442      	add	r2, r8
 800c708:	4631      	mov	r1, r6
 800c70a:	4628      	mov	r0, r5
 800c70c:	47b8      	blx	r7
 800c70e:	3001      	adds	r0, #1
 800c710:	d1c1      	bne.n	800c696 <_printf_float+0x342>
 800c712:	e680      	b.n	800c416 <_printf_float+0xc2>
 800c714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c716:	2a01      	cmp	r2, #1
 800c718:	dc01      	bgt.n	800c71e <_printf_float+0x3ca>
 800c71a:	07db      	lsls	r3, r3, #31
 800c71c:	d538      	bpl.n	800c790 <_printf_float+0x43c>
 800c71e:	2301      	movs	r3, #1
 800c720:	4642      	mov	r2, r8
 800c722:	4631      	mov	r1, r6
 800c724:	4628      	mov	r0, r5
 800c726:	47b8      	blx	r7
 800c728:	3001      	adds	r0, #1
 800c72a:	f43f ae74 	beq.w	800c416 <_printf_float+0xc2>
 800c72e:	ee18 3a10 	vmov	r3, s16
 800c732:	4652      	mov	r2, sl
 800c734:	4631      	mov	r1, r6
 800c736:	4628      	mov	r0, r5
 800c738:	47b8      	blx	r7
 800c73a:	3001      	adds	r0, #1
 800c73c:	f43f ae6b 	beq.w	800c416 <_printf_float+0xc2>
 800c740:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c744:	2200      	movs	r2, #0
 800c746:	2300      	movs	r3, #0
 800c748:	f7f4 f9e6 	bl	8000b18 <__aeabi_dcmpeq>
 800c74c:	b9d8      	cbnz	r0, 800c786 <_printf_float+0x432>
 800c74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c750:	f108 0201 	add.w	r2, r8, #1
 800c754:	3b01      	subs	r3, #1
 800c756:	4631      	mov	r1, r6
 800c758:	4628      	mov	r0, r5
 800c75a:	47b8      	blx	r7
 800c75c:	3001      	adds	r0, #1
 800c75e:	d10e      	bne.n	800c77e <_printf_float+0x42a>
 800c760:	e659      	b.n	800c416 <_printf_float+0xc2>
 800c762:	2301      	movs	r3, #1
 800c764:	4652      	mov	r2, sl
 800c766:	4631      	mov	r1, r6
 800c768:	4628      	mov	r0, r5
 800c76a:	47b8      	blx	r7
 800c76c:	3001      	adds	r0, #1
 800c76e:	f43f ae52 	beq.w	800c416 <_printf_float+0xc2>
 800c772:	f108 0801 	add.w	r8, r8, #1
 800c776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c778:	3b01      	subs	r3, #1
 800c77a:	4543      	cmp	r3, r8
 800c77c:	dcf1      	bgt.n	800c762 <_printf_float+0x40e>
 800c77e:	464b      	mov	r3, r9
 800c780:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c784:	e6dc      	b.n	800c540 <_printf_float+0x1ec>
 800c786:	f04f 0800 	mov.w	r8, #0
 800c78a:	f104 0a1a 	add.w	sl, r4, #26
 800c78e:	e7f2      	b.n	800c776 <_printf_float+0x422>
 800c790:	2301      	movs	r3, #1
 800c792:	4642      	mov	r2, r8
 800c794:	e7df      	b.n	800c756 <_printf_float+0x402>
 800c796:	2301      	movs	r3, #1
 800c798:	464a      	mov	r2, r9
 800c79a:	4631      	mov	r1, r6
 800c79c:	4628      	mov	r0, r5
 800c79e:	47b8      	blx	r7
 800c7a0:	3001      	adds	r0, #1
 800c7a2:	f43f ae38 	beq.w	800c416 <_printf_float+0xc2>
 800c7a6:	f108 0801 	add.w	r8, r8, #1
 800c7aa:	68e3      	ldr	r3, [r4, #12]
 800c7ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c7ae:	1a5b      	subs	r3, r3, r1
 800c7b0:	4543      	cmp	r3, r8
 800c7b2:	dcf0      	bgt.n	800c796 <_printf_float+0x442>
 800c7b4:	e6fa      	b.n	800c5ac <_printf_float+0x258>
 800c7b6:	f04f 0800 	mov.w	r8, #0
 800c7ba:	f104 0919 	add.w	r9, r4, #25
 800c7be:	e7f4      	b.n	800c7aa <_printf_float+0x456>

0800c7c0 <_printf_common>:
 800c7c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7c4:	4616      	mov	r6, r2
 800c7c6:	4699      	mov	r9, r3
 800c7c8:	688a      	ldr	r2, [r1, #8]
 800c7ca:	690b      	ldr	r3, [r1, #16]
 800c7cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7d0:	4293      	cmp	r3, r2
 800c7d2:	bfb8      	it	lt
 800c7d4:	4613      	movlt	r3, r2
 800c7d6:	6033      	str	r3, [r6, #0]
 800c7d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c7dc:	4607      	mov	r7, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	b10a      	cbz	r2, 800c7e6 <_printf_common+0x26>
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	6033      	str	r3, [r6, #0]
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	0699      	lsls	r1, r3, #26
 800c7ea:	bf42      	ittt	mi
 800c7ec:	6833      	ldrmi	r3, [r6, #0]
 800c7ee:	3302      	addmi	r3, #2
 800c7f0:	6033      	strmi	r3, [r6, #0]
 800c7f2:	6825      	ldr	r5, [r4, #0]
 800c7f4:	f015 0506 	ands.w	r5, r5, #6
 800c7f8:	d106      	bne.n	800c808 <_printf_common+0x48>
 800c7fa:	f104 0a19 	add.w	sl, r4, #25
 800c7fe:	68e3      	ldr	r3, [r4, #12]
 800c800:	6832      	ldr	r2, [r6, #0]
 800c802:	1a9b      	subs	r3, r3, r2
 800c804:	42ab      	cmp	r3, r5
 800c806:	dc26      	bgt.n	800c856 <_printf_common+0x96>
 800c808:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c80c:	1e13      	subs	r3, r2, #0
 800c80e:	6822      	ldr	r2, [r4, #0]
 800c810:	bf18      	it	ne
 800c812:	2301      	movne	r3, #1
 800c814:	0692      	lsls	r2, r2, #26
 800c816:	d42b      	bmi.n	800c870 <_printf_common+0xb0>
 800c818:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c81c:	4649      	mov	r1, r9
 800c81e:	4638      	mov	r0, r7
 800c820:	47c0      	blx	r8
 800c822:	3001      	adds	r0, #1
 800c824:	d01e      	beq.n	800c864 <_printf_common+0xa4>
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	68e5      	ldr	r5, [r4, #12]
 800c82a:	6832      	ldr	r2, [r6, #0]
 800c82c:	f003 0306 	and.w	r3, r3, #6
 800c830:	2b04      	cmp	r3, #4
 800c832:	bf08      	it	eq
 800c834:	1aad      	subeq	r5, r5, r2
 800c836:	68a3      	ldr	r3, [r4, #8]
 800c838:	6922      	ldr	r2, [r4, #16]
 800c83a:	bf0c      	ite	eq
 800c83c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c840:	2500      	movne	r5, #0
 800c842:	4293      	cmp	r3, r2
 800c844:	bfc4      	itt	gt
 800c846:	1a9b      	subgt	r3, r3, r2
 800c848:	18ed      	addgt	r5, r5, r3
 800c84a:	2600      	movs	r6, #0
 800c84c:	341a      	adds	r4, #26
 800c84e:	42b5      	cmp	r5, r6
 800c850:	d11a      	bne.n	800c888 <_printf_common+0xc8>
 800c852:	2000      	movs	r0, #0
 800c854:	e008      	b.n	800c868 <_printf_common+0xa8>
 800c856:	2301      	movs	r3, #1
 800c858:	4652      	mov	r2, sl
 800c85a:	4649      	mov	r1, r9
 800c85c:	4638      	mov	r0, r7
 800c85e:	47c0      	blx	r8
 800c860:	3001      	adds	r0, #1
 800c862:	d103      	bne.n	800c86c <_printf_common+0xac>
 800c864:	f04f 30ff 	mov.w	r0, #4294967295
 800c868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86c:	3501      	adds	r5, #1
 800c86e:	e7c6      	b.n	800c7fe <_printf_common+0x3e>
 800c870:	18e1      	adds	r1, r4, r3
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	2030      	movs	r0, #48	; 0x30
 800c876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c87a:	4422      	add	r2, r4
 800c87c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c884:	3302      	adds	r3, #2
 800c886:	e7c7      	b.n	800c818 <_printf_common+0x58>
 800c888:	2301      	movs	r3, #1
 800c88a:	4622      	mov	r2, r4
 800c88c:	4649      	mov	r1, r9
 800c88e:	4638      	mov	r0, r7
 800c890:	47c0      	blx	r8
 800c892:	3001      	adds	r0, #1
 800c894:	d0e6      	beq.n	800c864 <_printf_common+0xa4>
 800c896:	3601      	adds	r6, #1
 800c898:	e7d9      	b.n	800c84e <_printf_common+0x8e>
	...

0800c89c <_printf_i>:
 800c89c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a0:	7e0f      	ldrb	r7, [r1, #24]
 800c8a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8a4:	2f78      	cmp	r7, #120	; 0x78
 800c8a6:	4691      	mov	r9, r2
 800c8a8:	4680      	mov	r8, r0
 800c8aa:	460c      	mov	r4, r1
 800c8ac:	469a      	mov	sl, r3
 800c8ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8b2:	d807      	bhi.n	800c8c4 <_printf_i+0x28>
 800c8b4:	2f62      	cmp	r7, #98	; 0x62
 800c8b6:	d80a      	bhi.n	800c8ce <_printf_i+0x32>
 800c8b8:	2f00      	cmp	r7, #0
 800c8ba:	f000 80d8 	beq.w	800ca6e <_printf_i+0x1d2>
 800c8be:	2f58      	cmp	r7, #88	; 0x58
 800c8c0:	f000 80a3 	beq.w	800ca0a <_printf_i+0x16e>
 800c8c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8cc:	e03a      	b.n	800c944 <_printf_i+0xa8>
 800c8ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8d2:	2b15      	cmp	r3, #21
 800c8d4:	d8f6      	bhi.n	800c8c4 <_printf_i+0x28>
 800c8d6:	a101      	add	r1, pc, #4	; (adr r1, 800c8dc <_printf_i+0x40>)
 800c8d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c8dc:	0800c935 	.word	0x0800c935
 800c8e0:	0800c949 	.word	0x0800c949
 800c8e4:	0800c8c5 	.word	0x0800c8c5
 800c8e8:	0800c8c5 	.word	0x0800c8c5
 800c8ec:	0800c8c5 	.word	0x0800c8c5
 800c8f0:	0800c8c5 	.word	0x0800c8c5
 800c8f4:	0800c949 	.word	0x0800c949
 800c8f8:	0800c8c5 	.word	0x0800c8c5
 800c8fc:	0800c8c5 	.word	0x0800c8c5
 800c900:	0800c8c5 	.word	0x0800c8c5
 800c904:	0800c8c5 	.word	0x0800c8c5
 800c908:	0800ca55 	.word	0x0800ca55
 800c90c:	0800c979 	.word	0x0800c979
 800c910:	0800ca37 	.word	0x0800ca37
 800c914:	0800c8c5 	.word	0x0800c8c5
 800c918:	0800c8c5 	.word	0x0800c8c5
 800c91c:	0800ca77 	.word	0x0800ca77
 800c920:	0800c8c5 	.word	0x0800c8c5
 800c924:	0800c979 	.word	0x0800c979
 800c928:	0800c8c5 	.word	0x0800c8c5
 800c92c:	0800c8c5 	.word	0x0800c8c5
 800c930:	0800ca3f 	.word	0x0800ca3f
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	1d1a      	adds	r2, r3, #4
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	602a      	str	r2, [r5, #0]
 800c93c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c940:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c944:	2301      	movs	r3, #1
 800c946:	e0a3      	b.n	800ca90 <_printf_i+0x1f4>
 800c948:	6820      	ldr	r0, [r4, #0]
 800c94a:	6829      	ldr	r1, [r5, #0]
 800c94c:	0606      	lsls	r6, r0, #24
 800c94e:	f101 0304 	add.w	r3, r1, #4
 800c952:	d50a      	bpl.n	800c96a <_printf_i+0xce>
 800c954:	680e      	ldr	r6, [r1, #0]
 800c956:	602b      	str	r3, [r5, #0]
 800c958:	2e00      	cmp	r6, #0
 800c95a:	da03      	bge.n	800c964 <_printf_i+0xc8>
 800c95c:	232d      	movs	r3, #45	; 0x2d
 800c95e:	4276      	negs	r6, r6
 800c960:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c964:	485e      	ldr	r0, [pc, #376]	; (800cae0 <_printf_i+0x244>)
 800c966:	230a      	movs	r3, #10
 800c968:	e019      	b.n	800c99e <_printf_i+0x102>
 800c96a:	680e      	ldr	r6, [r1, #0]
 800c96c:	602b      	str	r3, [r5, #0]
 800c96e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c972:	bf18      	it	ne
 800c974:	b236      	sxthne	r6, r6
 800c976:	e7ef      	b.n	800c958 <_printf_i+0xbc>
 800c978:	682b      	ldr	r3, [r5, #0]
 800c97a:	6820      	ldr	r0, [r4, #0]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	6029      	str	r1, [r5, #0]
 800c980:	0601      	lsls	r1, r0, #24
 800c982:	d501      	bpl.n	800c988 <_printf_i+0xec>
 800c984:	681e      	ldr	r6, [r3, #0]
 800c986:	e002      	b.n	800c98e <_printf_i+0xf2>
 800c988:	0646      	lsls	r6, r0, #25
 800c98a:	d5fb      	bpl.n	800c984 <_printf_i+0xe8>
 800c98c:	881e      	ldrh	r6, [r3, #0]
 800c98e:	4854      	ldr	r0, [pc, #336]	; (800cae0 <_printf_i+0x244>)
 800c990:	2f6f      	cmp	r7, #111	; 0x6f
 800c992:	bf0c      	ite	eq
 800c994:	2308      	moveq	r3, #8
 800c996:	230a      	movne	r3, #10
 800c998:	2100      	movs	r1, #0
 800c99a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c99e:	6865      	ldr	r5, [r4, #4]
 800c9a0:	60a5      	str	r5, [r4, #8]
 800c9a2:	2d00      	cmp	r5, #0
 800c9a4:	bfa2      	ittt	ge
 800c9a6:	6821      	ldrge	r1, [r4, #0]
 800c9a8:	f021 0104 	bicge.w	r1, r1, #4
 800c9ac:	6021      	strge	r1, [r4, #0]
 800c9ae:	b90e      	cbnz	r6, 800c9b4 <_printf_i+0x118>
 800c9b0:	2d00      	cmp	r5, #0
 800c9b2:	d04d      	beq.n	800ca50 <_printf_i+0x1b4>
 800c9b4:	4615      	mov	r5, r2
 800c9b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9ba:	fb03 6711 	mls	r7, r3, r1, r6
 800c9be:	5dc7      	ldrb	r7, [r0, r7]
 800c9c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	42bb      	cmp	r3, r7
 800c9c8:	460e      	mov	r6, r1
 800c9ca:	d9f4      	bls.n	800c9b6 <_printf_i+0x11a>
 800c9cc:	2b08      	cmp	r3, #8
 800c9ce:	d10b      	bne.n	800c9e8 <_printf_i+0x14c>
 800c9d0:	6823      	ldr	r3, [r4, #0]
 800c9d2:	07de      	lsls	r6, r3, #31
 800c9d4:	d508      	bpl.n	800c9e8 <_printf_i+0x14c>
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	6861      	ldr	r1, [r4, #4]
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	bfde      	ittt	le
 800c9de:	2330      	movle	r3, #48	; 0x30
 800c9e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9e8:	1b52      	subs	r2, r2, r5
 800c9ea:	6122      	str	r2, [r4, #16]
 800c9ec:	f8cd a000 	str.w	sl, [sp]
 800c9f0:	464b      	mov	r3, r9
 800c9f2:	aa03      	add	r2, sp, #12
 800c9f4:	4621      	mov	r1, r4
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	f7ff fee2 	bl	800c7c0 <_printf_common>
 800c9fc:	3001      	adds	r0, #1
 800c9fe:	d14c      	bne.n	800ca9a <_printf_i+0x1fe>
 800ca00:	f04f 30ff 	mov.w	r0, #4294967295
 800ca04:	b004      	add	sp, #16
 800ca06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0a:	4835      	ldr	r0, [pc, #212]	; (800cae0 <_printf_i+0x244>)
 800ca0c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ca10:	6829      	ldr	r1, [r5, #0]
 800ca12:	6823      	ldr	r3, [r4, #0]
 800ca14:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca18:	6029      	str	r1, [r5, #0]
 800ca1a:	061d      	lsls	r5, r3, #24
 800ca1c:	d514      	bpl.n	800ca48 <_printf_i+0x1ac>
 800ca1e:	07df      	lsls	r7, r3, #31
 800ca20:	bf44      	itt	mi
 800ca22:	f043 0320 	orrmi.w	r3, r3, #32
 800ca26:	6023      	strmi	r3, [r4, #0]
 800ca28:	b91e      	cbnz	r6, 800ca32 <_printf_i+0x196>
 800ca2a:	6823      	ldr	r3, [r4, #0]
 800ca2c:	f023 0320 	bic.w	r3, r3, #32
 800ca30:	6023      	str	r3, [r4, #0]
 800ca32:	2310      	movs	r3, #16
 800ca34:	e7b0      	b.n	800c998 <_printf_i+0xfc>
 800ca36:	6823      	ldr	r3, [r4, #0]
 800ca38:	f043 0320 	orr.w	r3, r3, #32
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	2378      	movs	r3, #120	; 0x78
 800ca40:	4828      	ldr	r0, [pc, #160]	; (800cae4 <_printf_i+0x248>)
 800ca42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ca46:	e7e3      	b.n	800ca10 <_printf_i+0x174>
 800ca48:	0659      	lsls	r1, r3, #25
 800ca4a:	bf48      	it	mi
 800ca4c:	b2b6      	uxthmi	r6, r6
 800ca4e:	e7e6      	b.n	800ca1e <_printf_i+0x182>
 800ca50:	4615      	mov	r5, r2
 800ca52:	e7bb      	b.n	800c9cc <_printf_i+0x130>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	6826      	ldr	r6, [r4, #0]
 800ca58:	6961      	ldr	r1, [r4, #20]
 800ca5a:	1d18      	adds	r0, r3, #4
 800ca5c:	6028      	str	r0, [r5, #0]
 800ca5e:	0635      	lsls	r5, r6, #24
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	d501      	bpl.n	800ca68 <_printf_i+0x1cc>
 800ca64:	6019      	str	r1, [r3, #0]
 800ca66:	e002      	b.n	800ca6e <_printf_i+0x1d2>
 800ca68:	0670      	lsls	r0, r6, #25
 800ca6a:	d5fb      	bpl.n	800ca64 <_printf_i+0x1c8>
 800ca6c:	8019      	strh	r1, [r3, #0]
 800ca6e:	2300      	movs	r3, #0
 800ca70:	6123      	str	r3, [r4, #16]
 800ca72:	4615      	mov	r5, r2
 800ca74:	e7ba      	b.n	800c9ec <_printf_i+0x150>
 800ca76:	682b      	ldr	r3, [r5, #0]
 800ca78:	1d1a      	adds	r2, r3, #4
 800ca7a:	602a      	str	r2, [r5, #0]
 800ca7c:	681d      	ldr	r5, [r3, #0]
 800ca7e:	6862      	ldr	r2, [r4, #4]
 800ca80:	2100      	movs	r1, #0
 800ca82:	4628      	mov	r0, r5
 800ca84:	f7f3 fbd4 	bl	8000230 <memchr>
 800ca88:	b108      	cbz	r0, 800ca8e <_printf_i+0x1f2>
 800ca8a:	1b40      	subs	r0, r0, r5
 800ca8c:	6060      	str	r0, [r4, #4]
 800ca8e:	6863      	ldr	r3, [r4, #4]
 800ca90:	6123      	str	r3, [r4, #16]
 800ca92:	2300      	movs	r3, #0
 800ca94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca98:	e7a8      	b.n	800c9ec <_printf_i+0x150>
 800ca9a:	6923      	ldr	r3, [r4, #16]
 800ca9c:	462a      	mov	r2, r5
 800ca9e:	4649      	mov	r1, r9
 800caa0:	4640      	mov	r0, r8
 800caa2:	47d0      	blx	sl
 800caa4:	3001      	adds	r0, #1
 800caa6:	d0ab      	beq.n	800ca00 <_printf_i+0x164>
 800caa8:	6823      	ldr	r3, [r4, #0]
 800caaa:	079b      	lsls	r3, r3, #30
 800caac:	d413      	bmi.n	800cad6 <_printf_i+0x23a>
 800caae:	68e0      	ldr	r0, [r4, #12]
 800cab0:	9b03      	ldr	r3, [sp, #12]
 800cab2:	4298      	cmp	r0, r3
 800cab4:	bfb8      	it	lt
 800cab6:	4618      	movlt	r0, r3
 800cab8:	e7a4      	b.n	800ca04 <_printf_i+0x168>
 800caba:	2301      	movs	r3, #1
 800cabc:	4632      	mov	r2, r6
 800cabe:	4649      	mov	r1, r9
 800cac0:	4640      	mov	r0, r8
 800cac2:	47d0      	blx	sl
 800cac4:	3001      	adds	r0, #1
 800cac6:	d09b      	beq.n	800ca00 <_printf_i+0x164>
 800cac8:	3501      	adds	r5, #1
 800caca:	68e3      	ldr	r3, [r4, #12]
 800cacc:	9903      	ldr	r1, [sp, #12]
 800cace:	1a5b      	subs	r3, r3, r1
 800cad0:	42ab      	cmp	r3, r5
 800cad2:	dcf2      	bgt.n	800caba <_printf_i+0x21e>
 800cad4:	e7eb      	b.n	800caae <_printf_i+0x212>
 800cad6:	2500      	movs	r5, #0
 800cad8:	f104 0619 	add.w	r6, r4, #25
 800cadc:	e7f5      	b.n	800caca <_printf_i+0x22e>
 800cade:	bf00      	nop
 800cae0:	0800fe9e 	.word	0x0800fe9e
 800cae4:	0800feaf 	.word	0x0800feaf

0800cae8 <siprintf>:
 800cae8:	b40e      	push	{r1, r2, r3}
 800caea:	b500      	push	{lr}
 800caec:	b09c      	sub	sp, #112	; 0x70
 800caee:	ab1d      	add	r3, sp, #116	; 0x74
 800caf0:	9002      	str	r0, [sp, #8]
 800caf2:	9006      	str	r0, [sp, #24]
 800caf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800caf8:	4809      	ldr	r0, [pc, #36]	; (800cb20 <siprintf+0x38>)
 800cafa:	9107      	str	r1, [sp, #28]
 800cafc:	9104      	str	r1, [sp, #16]
 800cafe:	4909      	ldr	r1, [pc, #36]	; (800cb24 <siprintf+0x3c>)
 800cb00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb04:	9105      	str	r1, [sp, #20]
 800cb06:	6800      	ldr	r0, [r0, #0]
 800cb08:	9301      	str	r3, [sp, #4]
 800cb0a:	a902      	add	r1, sp, #8
 800cb0c:	f001 fb76 	bl	800e1fc <_svfiprintf_r>
 800cb10:	9b02      	ldr	r3, [sp, #8]
 800cb12:	2200      	movs	r2, #0
 800cb14:	701a      	strb	r2, [r3, #0]
 800cb16:	b01c      	add	sp, #112	; 0x70
 800cb18:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb1c:	b003      	add	sp, #12
 800cb1e:	4770      	bx	lr
 800cb20:	2000002c 	.word	0x2000002c
 800cb24:	ffff0208 	.word	0xffff0208

0800cb28 <quorem>:
 800cb28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2c:	6903      	ldr	r3, [r0, #16]
 800cb2e:	690c      	ldr	r4, [r1, #16]
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	4607      	mov	r7, r0
 800cb34:	f2c0 8081 	blt.w	800cc3a <quorem+0x112>
 800cb38:	3c01      	subs	r4, #1
 800cb3a:	f101 0814 	add.w	r8, r1, #20
 800cb3e:	f100 0514 	add.w	r5, r0, #20
 800cb42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb46:	9301      	str	r3, [sp, #4]
 800cb48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb50:	3301      	adds	r3, #1
 800cb52:	429a      	cmp	r2, r3
 800cb54:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cb58:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cb5c:	fbb2 f6f3 	udiv	r6, r2, r3
 800cb60:	d331      	bcc.n	800cbc6 <quorem+0x9e>
 800cb62:	f04f 0e00 	mov.w	lr, #0
 800cb66:	4640      	mov	r0, r8
 800cb68:	46ac      	mov	ip, r5
 800cb6a:	46f2      	mov	sl, lr
 800cb6c:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb70:	b293      	uxth	r3, r2
 800cb72:	fb06 e303 	mla	r3, r6, r3, lr
 800cb76:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cb7a:	b29b      	uxth	r3, r3
 800cb7c:	ebaa 0303 	sub.w	r3, sl, r3
 800cb80:	f8dc a000 	ldr.w	sl, [ip]
 800cb84:	0c12      	lsrs	r2, r2, #16
 800cb86:	fa13 f38a 	uxtah	r3, r3, sl
 800cb8a:	fb06 e202 	mla	r2, r6, r2, lr
 800cb8e:	9300      	str	r3, [sp, #0]
 800cb90:	9b00      	ldr	r3, [sp, #0]
 800cb92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb96:	b292      	uxth	r2, r2
 800cb98:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cba0:	f8bd 3000 	ldrh.w	r3, [sp]
 800cba4:	4581      	cmp	r9, r0
 800cba6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbaa:	f84c 3b04 	str.w	r3, [ip], #4
 800cbae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cbb2:	d2db      	bcs.n	800cb6c <quorem+0x44>
 800cbb4:	f855 300b 	ldr.w	r3, [r5, fp]
 800cbb8:	b92b      	cbnz	r3, 800cbc6 <quorem+0x9e>
 800cbba:	9b01      	ldr	r3, [sp, #4]
 800cbbc:	3b04      	subs	r3, #4
 800cbbe:	429d      	cmp	r5, r3
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	d32e      	bcc.n	800cc22 <quorem+0xfa>
 800cbc4:	613c      	str	r4, [r7, #16]
 800cbc6:	4638      	mov	r0, r7
 800cbc8:	f001 f8c4 	bl	800dd54 <__mcmp>
 800cbcc:	2800      	cmp	r0, #0
 800cbce:	db24      	blt.n	800cc1a <quorem+0xf2>
 800cbd0:	3601      	adds	r6, #1
 800cbd2:	4628      	mov	r0, r5
 800cbd4:	f04f 0c00 	mov.w	ip, #0
 800cbd8:	f858 2b04 	ldr.w	r2, [r8], #4
 800cbdc:	f8d0 e000 	ldr.w	lr, [r0]
 800cbe0:	b293      	uxth	r3, r2
 800cbe2:	ebac 0303 	sub.w	r3, ip, r3
 800cbe6:	0c12      	lsrs	r2, r2, #16
 800cbe8:	fa13 f38e 	uxtah	r3, r3, lr
 800cbec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cbf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbf4:	b29b      	uxth	r3, r3
 800cbf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbfa:	45c1      	cmp	r9, r8
 800cbfc:	f840 3b04 	str.w	r3, [r0], #4
 800cc00:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc04:	d2e8      	bcs.n	800cbd8 <quorem+0xb0>
 800cc06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc0e:	b922      	cbnz	r2, 800cc1a <quorem+0xf2>
 800cc10:	3b04      	subs	r3, #4
 800cc12:	429d      	cmp	r5, r3
 800cc14:	461a      	mov	r2, r3
 800cc16:	d30a      	bcc.n	800cc2e <quorem+0x106>
 800cc18:	613c      	str	r4, [r7, #16]
 800cc1a:	4630      	mov	r0, r6
 800cc1c:	b003      	add	sp, #12
 800cc1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc22:	6812      	ldr	r2, [r2, #0]
 800cc24:	3b04      	subs	r3, #4
 800cc26:	2a00      	cmp	r2, #0
 800cc28:	d1cc      	bne.n	800cbc4 <quorem+0x9c>
 800cc2a:	3c01      	subs	r4, #1
 800cc2c:	e7c7      	b.n	800cbbe <quorem+0x96>
 800cc2e:	6812      	ldr	r2, [r2, #0]
 800cc30:	3b04      	subs	r3, #4
 800cc32:	2a00      	cmp	r2, #0
 800cc34:	d1f0      	bne.n	800cc18 <quorem+0xf0>
 800cc36:	3c01      	subs	r4, #1
 800cc38:	e7eb      	b.n	800cc12 <quorem+0xea>
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	e7ee      	b.n	800cc1c <quorem+0xf4>
	...

0800cc40 <_dtoa_r>:
 800cc40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc44:	ed2d 8b04 	vpush	{d8-d9}
 800cc48:	ec57 6b10 	vmov	r6, r7, d0
 800cc4c:	b093      	sub	sp, #76	; 0x4c
 800cc4e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cc50:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cc54:	9106      	str	r1, [sp, #24]
 800cc56:	ee10 aa10 	vmov	sl, s0
 800cc5a:	4604      	mov	r4, r0
 800cc5c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc5e:	930c      	str	r3, [sp, #48]	; 0x30
 800cc60:	46bb      	mov	fp, r7
 800cc62:	b975      	cbnz	r5, 800cc82 <_dtoa_r+0x42>
 800cc64:	2010      	movs	r0, #16
 800cc66:	f000 fddd 	bl	800d824 <malloc>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	6260      	str	r0, [r4, #36]	; 0x24
 800cc6e:	b920      	cbnz	r0, 800cc7a <_dtoa_r+0x3a>
 800cc70:	4ba7      	ldr	r3, [pc, #668]	; (800cf10 <_dtoa_r+0x2d0>)
 800cc72:	21ea      	movs	r1, #234	; 0xea
 800cc74:	48a7      	ldr	r0, [pc, #668]	; (800cf14 <_dtoa_r+0x2d4>)
 800cc76:	f001 fbd1 	bl	800e41c <__assert_func>
 800cc7a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc7e:	6005      	str	r5, [r0, #0]
 800cc80:	60c5      	str	r5, [r0, #12]
 800cc82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc84:	6819      	ldr	r1, [r3, #0]
 800cc86:	b151      	cbz	r1, 800cc9e <_dtoa_r+0x5e>
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	604a      	str	r2, [r1, #4]
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	4093      	lsls	r3, r2
 800cc90:	608b      	str	r3, [r1, #8]
 800cc92:	4620      	mov	r0, r4
 800cc94:	f000 fe1c 	bl	800d8d0 <_Bfree>
 800cc98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	1e3b      	subs	r3, r7, #0
 800cca0:	bfaa      	itet	ge
 800cca2:	2300      	movge	r3, #0
 800cca4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cca8:	f8c8 3000 	strge.w	r3, [r8]
 800ccac:	4b9a      	ldr	r3, [pc, #616]	; (800cf18 <_dtoa_r+0x2d8>)
 800ccae:	bfbc      	itt	lt
 800ccb0:	2201      	movlt	r2, #1
 800ccb2:	f8c8 2000 	strlt.w	r2, [r8]
 800ccb6:	ea33 030b 	bics.w	r3, r3, fp
 800ccba:	d11b      	bne.n	800ccf4 <_dtoa_r+0xb4>
 800ccbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ccbe:	f242 730f 	movw	r3, #9999	; 0x270f
 800ccc2:	6013      	str	r3, [r2, #0]
 800ccc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ccc8:	4333      	orrs	r3, r6
 800ccca:	f000 8592 	beq.w	800d7f2 <_dtoa_r+0xbb2>
 800ccce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccd0:	b963      	cbnz	r3, 800ccec <_dtoa_r+0xac>
 800ccd2:	4b92      	ldr	r3, [pc, #584]	; (800cf1c <_dtoa_r+0x2dc>)
 800ccd4:	e022      	b.n	800cd1c <_dtoa_r+0xdc>
 800ccd6:	4b92      	ldr	r3, [pc, #584]	; (800cf20 <_dtoa_r+0x2e0>)
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	3308      	adds	r3, #8
 800ccdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccde:	6013      	str	r3, [r2, #0]
 800cce0:	9801      	ldr	r0, [sp, #4]
 800cce2:	b013      	add	sp, #76	; 0x4c
 800cce4:	ecbd 8b04 	vpop	{d8-d9}
 800cce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccec:	4b8b      	ldr	r3, [pc, #556]	; (800cf1c <_dtoa_r+0x2dc>)
 800ccee:	9301      	str	r3, [sp, #4]
 800ccf0:	3303      	adds	r3, #3
 800ccf2:	e7f3      	b.n	800ccdc <_dtoa_r+0x9c>
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	4650      	mov	r0, sl
 800ccfa:	4659      	mov	r1, fp
 800ccfc:	f7f3 ff0c 	bl	8000b18 <__aeabi_dcmpeq>
 800cd00:	ec4b ab19 	vmov	d9, sl, fp
 800cd04:	4680      	mov	r8, r0
 800cd06:	b158      	cbz	r0, 800cd20 <_dtoa_r+0xe0>
 800cd08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	6013      	str	r3, [r2, #0]
 800cd0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f000 856b 	beq.w	800d7ec <_dtoa_r+0xbac>
 800cd16:	4883      	ldr	r0, [pc, #524]	; (800cf24 <_dtoa_r+0x2e4>)
 800cd18:	6018      	str	r0, [r3, #0]
 800cd1a:	1e43      	subs	r3, r0, #1
 800cd1c:	9301      	str	r3, [sp, #4]
 800cd1e:	e7df      	b.n	800cce0 <_dtoa_r+0xa0>
 800cd20:	ec4b ab10 	vmov	d0, sl, fp
 800cd24:	aa10      	add	r2, sp, #64	; 0x40
 800cd26:	a911      	add	r1, sp, #68	; 0x44
 800cd28:	4620      	mov	r0, r4
 800cd2a:	f001 f8b9 	bl	800dea0 <__d2b>
 800cd2e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cd32:	ee08 0a10 	vmov	s16, r0
 800cd36:	2d00      	cmp	r5, #0
 800cd38:	f000 8084 	beq.w	800ce44 <_dtoa_r+0x204>
 800cd3c:	ee19 3a90 	vmov	r3, s19
 800cd40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd44:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd48:	4656      	mov	r6, sl
 800cd4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd52:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cd56:	4b74      	ldr	r3, [pc, #464]	; (800cf28 <_dtoa_r+0x2e8>)
 800cd58:	2200      	movs	r2, #0
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	f7f3 fabb 	bl	80002d8 <__aeabi_dsub>
 800cd62:	a365      	add	r3, pc, #404	; (adr r3, 800cef8 <_dtoa_r+0x2b8>)
 800cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd68:	f7f3 fc6e 	bl	8000648 <__aeabi_dmul>
 800cd6c:	a364      	add	r3, pc, #400	; (adr r3, 800cf00 <_dtoa_r+0x2c0>)
 800cd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd72:	f7f3 fab3 	bl	80002dc <__adddf3>
 800cd76:	4606      	mov	r6, r0
 800cd78:	4628      	mov	r0, r5
 800cd7a:	460f      	mov	r7, r1
 800cd7c:	f7f3 fbfa 	bl	8000574 <__aeabi_i2d>
 800cd80:	a361      	add	r3, pc, #388	; (adr r3, 800cf08 <_dtoa_r+0x2c8>)
 800cd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd86:	f7f3 fc5f 	bl	8000648 <__aeabi_dmul>
 800cd8a:	4602      	mov	r2, r0
 800cd8c:	460b      	mov	r3, r1
 800cd8e:	4630      	mov	r0, r6
 800cd90:	4639      	mov	r1, r7
 800cd92:	f7f3 faa3 	bl	80002dc <__adddf3>
 800cd96:	4606      	mov	r6, r0
 800cd98:	460f      	mov	r7, r1
 800cd9a:	f7f3 ff05 	bl	8000ba8 <__aeabi_d2iz>
 800cd9e:	2200      	movs	r2, #0
 800cda0:	9000      	str	r0, [sp, #0]
 800cda2:	2300      	movs	r3, #0
 800cda4:	4630      	mov	r0, r6
 800cda6:	4639      	mov	r1, r7
 800cda8:	f7f3 fec0 	bl	8000b2c <__aeabi_dcmplt>
 800cdac:	b150      	cbz	r0, 800cdc4 <_dtoa_r+0x184>
 800cdae:	9800      	ldr	r0, [sp, #0]
 800cdb0:	f7f3 fbe0 	bl	8000574 <__aeabi_i2d>
 800cdb4:	4632      	mov	r2, r6
 800cdb6:	463b      	mov	r3, r7
 800cdb8:	f7f3 feae 	bl	8000b18 <__aeabi_dcmpeq>
 800cdbc:	b910      	cbnz	r0, 800cdc4 <_dtoa_r+0x184>
 800cdbe:	9b00      	ldr	r3, [sp, #0]
 800cdc0:	3b01      	subs	r3, #1
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	9b00      	ldr	r3, [sp, #0]
 800cdc6:	2b16      	cmp	r3, #22
 800cdc8:	d85a      	bhi.n	800ce80 <_dtoa_r+0x240>
 800cdca:	9a00      	ldr	r2, [sp, #0]
 800cdcc:	4b57      	ldr	r3, [pc, #348]	; (800cf2c <_dtoa_r+0x2ec>)
 800cdce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cdd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd6:	ec51 0b19 	vmov	r0, r1, d9
 800cdda:	f7f3 fea7 	bl	8000b2c <__aeabi_dcmplt>
 800cdde:	2800      	cmp	r0, #0
 800cde0:	d050      	beq.n	800ce84 <_dtoa_r+0x244>
 800cde2:	9b00      	ldr	r3, [sp, #0]
 800cde4:	3b01      	subs	r3, #1
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	2300      	movs	r3, #0
 800cdea:	930b      	str	r3, [sp, #44]	; 0x2c
 800cdec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cdee:	1b5d      	subs	r5, r3, r5
 800cdf0:	1e6b      	subs	r3, r5, #1
 800cdf2:	9305      	str	r3, [sp, #20]
 800cdf4:	bf45      	ittet	mi
 800cdf6:	f1c5 0301 	rsbmi	r3, r5, #1
 800cdfa:	9304      	strmi	r3, [sp, #16]
 800cdfc:	2300      	movpl	r3, #0
 800cdfe:	2300      	movmi	r3, #0
 800ce00:	bf4c      	ite	mi
 800ce02:	9305      	strmi	r3, [sp, #20]
 800ce04:	9304      	strpl	r3, [sp, #16]
 800ce06:	9b00      	ldr	r3, [sp, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	db3d      	blt.n	800ce88 <_dtoa_r+0x248>
 800ce0c:	9b05      	ldr	r3, [sp, #20]
 800ce0e:	9a00      	ldr	r2, [sp, #0]
 800ce10:	920a      	str	r2, [sp, #40]	; 0x28
 800ce12:	4413      	add	r3, r2
 800ce14:	9305      	str	r3, [sp, #20]
 800ce16:	2300      	movs	r3, #0
 800ce18:	9307      	str	r3, [sp, #28]
 800ce1a:	9b06      	ldr	r3, [sp, #24]
 800ce1c:	2b09      	cmp	r3, #9
 800ce1e:	f200 8089 	bhi.w	800cf34 <_dtoa_r+0x2f4>
 800ce22:	2b05      	cmp	r3, #5
 800ce24:	bfc4      	itt	gt
 800ce26:	3b04      	subgt	r3, #4
 800ce28:	9306      	strgt	r3, [sp, #24]
 800ce2a:	9b06      	ldr	r3, [sp, #24]
 800ce2c:	f1a3 0302 	sub.w	r3, r3, #2
 800ce30:	bfcc      	ite	gt
 800ce32:	2500      	movgt	r5, #0
 800ce34:	2501      	movle	r5, #1
 800ce36:	2b03      	cmp	r3, #3
 800ce38:	f200 8087 	bhi.w	800cf4a <_dtoa_r+0x30a>
 800ce3c:	e8df f003 	tbb	[pc, r3]
 800ce40:	59383a2d 	.word	0x59383a2d
 800ce44:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ce48:	441d      	add	r5, r3
 800ce4a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce4e:	2b20      	cmp	r3, #32
 800ce50:	bfc1      	itttt	gt
 800ce52:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce56:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce5a:	fa0b f303 	lslgt.w	r3, fp, r3
 800ce5e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce62:	bfda      	itte	le
 800ce64:	f1c3 0320 	rsble	r3, r3, #32
 800ce68:	fa06 f003 	lslle.w	r0, r6, r3
 800ce6c:	4318      	orrgt	r0, r3
 800ce6e:	f7f3 fb71 	bl	8000554 <__aeabi_ui2d>
 800ce72:	2301      	movs	r3, #1
 800ce74:	4606      	mov	r6, r0
 800ce76:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce7a:	3d01      	subs	r5, #1
 800ce7c:	930e      	str	r3, [sp, #56]	; 0x38
 800ce7e:	e76a      	b.n	800cd56 <_dtoa_r+0x116>
 800ce80:	2301      	movs	r3, #1
 800ce82:	e7b2      	b.n	800cdea <_dtoa_r+0x1aa>
 800ce84:	900b      	str	r0, [sp, #44]	; 0x2c
 800ce86:	e7b1      	b.n	800cdec <_dtoa_r+0x1ac>
 800ce88:	9b04      	ldr	r3, [sp, #16]
 800ce8a:	9a00      	ldr	r2, [sp, #0]
 800ce8c:	1a9b      	subs	r3, r3, r2
 800ce8e:	9304      	str	r3, [sp, #16]
 800ce90:	4253      	negs	r3, r2
 800ce92:	9307      	str	r3, [sp, #28]
 800ce94:	2300      	movs	r3, #0
 800ce96:	930a      	str	r3, [sp, #40]	; 0x28
 800ce98:	e7bf      	b.n	800ce1a <_dtoa_r+0x1da>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9308      	str	r3, [sp, #32]
 800ce9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	dc55      	bgt.n	800cf50 <_dtoa_r+0x310>
 800cea4:	2301      	movs	r3, #1
 800cea6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ceaa:	461a      	mov	r2, r3
 800ceac:	9209      	str	r2, [sp, #36]	; 0x24
 800ceae:	e00c      	b.n	800ceca <_dtoa_r+0x28a>
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e7f3      	b.n	800ce9c <_dtoa_r+0x25c>
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ceb8:	9308      	str	r3, [sp, #32]
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	4413      	add	r3, r2
 800cebe:	9302      	str	r3, [sp, #8]
 800cec0:	3301      	adds	r3, #1
 800cec2:	2b01      	cmp	r3, #1
 800cec4:	9303      	str	r3, [sp, #12]
 800cec6:	bfb8      	it	lt
 800cec8:	2301      	movlt	r3, #1
 800ceca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cecc:	2200      	movs	r2, #0
 800cece:	6042      	str	r2, [r0, #4]
 800ced0:	2204      	movs	r2, #4
 800ced2:	f102 0614 	add.w	r6, r2, #20
 800ced6:	429e      	cmp	r6, r3
 800ced8:	6841      	ldr	r1, [r0, #4]
 800ceda:	d93d      	bls.n	800cf58 <_dtoa_r+0x318>
 800cedc:	4620      	mov	r0, r4
 800cede:	f000 fcb7 	bl	800d850 <_Balloc>
 800cee2:	9001      	str	r0, [sp, #4]
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d13b      	bne.n	800cf60 <_dtoa_r+0x320>
 800cee8:	4b11      	ldr	r3, [pc, #68]	; (800cf30 <_dtoa_r+0x2f0>)
 800ceea:	4602      	mov	r2, r0
 800ceec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cef0:	e6c0      	b.n	800cc74 <_dtoa_r+0x34>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e7df      	b.n	800ceb6 <_dtoa_r+0x276>
 800cef6:	bf00      	nop
 800cef8:	636f4361 	.word	0x636f4361
 800cefc:	3fd287a7 	.word	0x3fd287a7
 800cf00:	8b60c8b3 	.word	0x8b60c8b3
 800cf04:	3fc68a28 	.word	0x3fc68a28
 800cf08:	509f79fb 	.word	0x509f79fb
 800cf0c:	3fd34413 	.word	0x3fd34413
 800cf10:	0800fecd 	.word	0x0800fecd
 800cf14:	0800fee4 	.word	0x0800fee4
 800cf18:	7ff00000 	.word	0x7ff00000
 800cf1c:	0800fec9 	.word	0x0800fec9
 800cf20:	0800fec0 	.word	0x0800fec0
 800cf24:	0800fe9d 	.word	0x0800fe9d
 800cf28:	3ff80000 	.word	0x3ff80000
 800cf2c:	0800ffd8 	.word	0x0800ffd8
 800cf30:	0800ff3f 	.word	0x0800ff3f
 800cf34:	2501      	movs	r5, #1
 800cf36:	2300      	movs	r3, #0
 800cf38:	9306      	str	r3, [sp, #24]
 800cf3a:	9508      	str	r5, [sp, #32]
 800cf3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cf40:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf44:	2200      	movs	r2, #0
 800cf46:	2312      	movs	r3, #18
 800cf48:	e7b0      	b.n	800ceac <_dtoa_r+0x26c>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	9308      	str	r3, [sp, #32]
 800cf4e:	e7f5      	b.n	800cf3c <_dtoa_r+0x2fc>
 800cf50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf52:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cf56:	e7b8      	b.n	800ceca <_dtoa_r+0x28a>
 800cf58:	3101      	adds	r1, #1
 800cf5a:	6041      	str	r1, [r0, #4]
 800cf5c:	0052      	lsls	r2, r2, #1
 800cf5e:	e7b8      	b.n	800ced2 <_dtoa_r+0x292>
 800cf60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf62:	9a01      	ldr	r2, [sp, #4]
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	2b0e      	cmp	r3, #14
 800cf6a:	f200 809d 	bhi.w	800d0a8 <_dtoa_r+0x468>
 800cf6e:	2d00      	cmp	r5, #0
 800cf70:	f000 809a 	beq.w	800d0a8 <_dtoa_r+0x468>
 800cf74:	9b00      	ldr	r3, [sp, #0]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	dd32      	ble.n	800cfe0 <_dtoa_r+0x3a0>
 800cf7a:	4ab7      	ldr	r2, [pc, #732]	; (800d258 <_dtoa_r+0x618>)
 800cf7c:	f003 030f 	and.w	r3, r3, #15
 800cf80:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cf84:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf88:	9b00      	ldr	r3, [sp, #0]
 800cf8a:	05d8      	lsls	r0, r3, #23
 800cf8c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cf90:	d516      	bpl.n	800cfc0 <_dtoa_r+0x380>
 800cf92:	4bb2      	ldr	r3, [pc, #712]	; (800d25c <_dtoa_r+0x61c>)
 800cf94:	ec51 0b19 	vmov	r0, r1, d9
 800cf98:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf9c:	f7f3 fc7e 	bl	800089c <__aeabi_ddiv>
 800cfa0:	f007 070f 	and.w	r7, r7, #15
 800cfa4:	4682      	mov	sl, r0
 800cfa6:	468b      	mov	fp, r1
 800cfa8:	2503      	movs	r5, #3
 800cfaa:	4eac      	ldr	r6, [pc, #688]	; (800d25c <_dtoa_r+0x61c>)
 800cfac:	b957      	cbnz	r7, 800cfc4 <_dtoa_r+0x384>
 800cfae:	4642      	mov	r2, r8
 800cfb0:	464b      	mov	r3, r9
 800cfb2:	4650      	mov	r0, sl
 800cfb4:	4659      	mov	r1, fp
 800cfb6:	f7f3 fc71 	bl	800089c <__aeabi_ddiv>
 800cfba:	4682      	mov	sl, r0
 800cfbc:	468b      	mov	fp, r1
 800cfbe:	e028      	b.n	800d012 <_dtoa_r+0x3d2>
 800cfc0:	2502      	movs	r5, #2
 800cfc2:	e7f2      	b.n	800cfaa <_dtoa_r+0x36a>
 800cfc4:	07f9      	lsls	r1, r7, #31
 800cfc6:	d508      	bpl.n	800cfda <_dtoa_r+0x39a>
 800cfc8:	4640      	mov	r0, r8
 800cfca:	4649      	mov	r1, r9
 800cfcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cfd0:	f7f3 fb3a 	bl	8000648 <__aeabi_dmul>
 800cfd4:	3501      	adds	r5, #1
 800cfd6:	4680      	mov	r8, r0
 800cfd8:	4689      	mov	r9, r1
 800cfda:	107f      	asrs	r7, r7, #1
 800cfdc:	3608      	adds	r6, #8
 800cfde:	e7e5      	b.n	800cfac <_dtoa_r+0x36c>
 800cfe0:	f000 809b 	beq.w	800d11a <_dtoa_r+0x4da>
 800cfe4:	9b00      	ldr	r3, [sp, #0]
 800cfe6:	4f9d      	ldr	r7, [pc, #628]	; (800d25c <_dtoa_r+0x61c>)
 800cfe8:	425e      	negs	r6, r3
 800cfea:	4b9b      	ldr	r3, [pc, #620]	; (800d258 <_dtoa_r+0x618>)
 800cfec:	f006 020f 	and.w	r2, r6, #15
 800cff0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff8:	ec51 0b19 	vmov	r0, r1, d9
 800cffc:	f7f3 fb24 	bl	8000648 <__aeabi_dmul>
 800d000:	1136      	asrs	r6, r6, #4
 800d002:	4682      	mov	sl, r0
 800d004:	468b      	mov	fp, r1
 800d006:	2300      	movs	r3, #0
 800d008:	2502      	movs	r5, #2
 800d00a:	2e00      	cmp	r6, #0
 800d00c:	d17a      	bne.n	800d104 <_dtoa_r+0x4c4>
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1d3      	bne.n	800cfba <_dtoa_r+0x37a>
 800d012:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d014:	2b00      	cmp	r3, #0
 800d016:	f000 8082 	beq.w	800d11e <_dtoa_r+0x4de>
 800d01a:	4b91      	ldr	r3, [pc, #580]	; (800d260 <_dtoa_r+0x620>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	4650      	mov	r0, sl
 800d020:	4659      	mov	r1, fp
 800d022:	f7f3 fd83 	bl	8000b2c <__aeabi_dcmplt>
 800d026:	2800      	cmp	r0, #0
 800d028:	d079      	beq.n	800d11e <_dtoa_r+0x4de>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d076      	beq.n	800d11e <_dtoa_r+0x4de>
 800d030:	9b02      	ldr	r3, [sp, #8]
 800d032:	2b00      	cmp	r3, #0
 800d034:	dd36      	ble.n	800d0a4 <_dtoa_r+0x464>
 800d036:	9b00      	ldr	r3, [sp, #0]
 800d038:	4650      	mov	r0, sl
 800d03a:	4659      	mov	r1, fp
 800d03c:	1e5f      	subs	r7, r3, #1
 800d03e:	2200      	movs	r2, #0
 800d040:	4b88      	ldr	r3, [pc, #544]	; (800d264 <_dtoa_r+0x624>)
 800d042:	f7f3 fb01 	bl	8000648 <__aeabi_dmul>
 800d046:	9e02      	ldr	r6, [sp, #8]
 800d048:	4682      	mov	sl, r0
 800d04a:	468b      	mov	fp, r1
 800d04c:	3501      	adds	r5, #1
 800d04e:	4628      	mov	r0, r5
 800d050:	f7f3 fa90 	bl	8000574 <__aeabi_i2d>
 800d054:	4652      	mov	r2, sl
 800d056:	465b      	mov	r3, fp
 800d058:	f7f3 faf6 	bl	8000648 <__aeabi_dmul>
 800d05c:	4b82      	ldr	r3, [pc, #520]	; (800d268 <_dtoa_r+0x628>)
 800d05e:	2200      	movs	r2, #0
 800d060:	f7f3 f93c 	bl	80002dc <__adddf3>
 800d064:	46d0      	mov	r8, sl
 800d066:	46d9      	mov	r9, fp
 800d068:	4682      	mov	sl, r0
 800d06a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d06e:	2e00      	cmp	r6, #0
 800d070:	d158      	bne.n	800d124 <_dtoa_r+0x4e4>
 800d072:	4b7e      	ldr	r3, [pc, #504]	; (800d26c <_dtoa_r+0x62c>)
 800d074:	2200      	movs	r2, #0
 800d076:	4640      	mov	r0, r8
 800d078:	4649      	mov	r1, r9
 800d07a:	f7f3 f92d 	bl	80002d8 <__aeabi_dsub>
 800d07e:	4652      	mov	r2, sl
 800d080:	465b      	mov	r3, fp
 800d082:	4680      	mov	r8, r0
 800d084:	4689      	mov	r9, r1
 800d086:	f7f3 fd6f 	bl	8000b68 <__aeabi_dcmpgt>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	f040 8295 	bne.w	800d5ba <_dtoa_r+0x97a>
 800d090:	4652      	mov	r2, sl
 800d092:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d096:	4640      	mov	r0, r8
 800d098:	4649      	mov	r1, r9
 800d09a:	f7f3 fd47 	bl	8000b2c <__aeabi_dcmplt>
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	f040 8289 	bne.w	800d5b6 <_dtoa_r+0x976>
 800d0a4:	ec5b ab19 	vmov	sl, fp, d9
 800d0a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	f2c0 8148 	blt.w	800d340 <_dtoa_r+0x700>
 800d0b0:	9a00      	ldr	r2, [sp, #0]
 800d0b2:	2a0e      	cmp	r2, #14
 800d0b4:	f300 8144 	bgt.w	800d340 <_dtoa_r+0x700>
 800d0b8:	4b67      	ldr	r3, [pc, #412]	; (800d258 <_dtoa_r+0x618>)
 800d0ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d0be:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f280 80d5 	bge.w	800d274 <_dtoa_r+0x634>
 800d0ca:	9b03      	ldr	r3, [sp, #12]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	f300 80d1 	bgt.w	800d274 <_dtoa_r+0x634>
 800d0d2:	f040 826f 	bne.w	800d5b4 <_dtoa_r+0x974>
 800d0d6:	4b65      	ldr	r3, [pc, #404]	; (800d26c <_dtoa_r+0x62c>)
 800d0d8:	2200      	movs	r2, #0
 800d0da:	4640      	mov	r0, r8
 800d0dc:	4649      	mov	r1, r9
 800d0de:	f7f3 fab3 	bl	8000648 <__aeabi_dmul>
 800d0e2:	4652      	mov	r2, sl
 800d0e4:	465b      	mov	r3, fp
 800d0e6:	f7f3 fd35 	bl	8000b54 <__aeabi_dcmpge>
 800d0ea:	9e03      	ldr	r6, [sp, #12]
 800d0ec:	4637      	mov	r7, r6
 800d0ee:	2800      	cmp	r0, #0
 800d0f0:	f040 8245 	bne.w	800d57e <_dtoa_r+0x93e>
 800d0f4:	9d01      	ldr	r5, [sp, #4]
 800d0f6:	2331      	movs	r3, #49	; 0x31
 800d0f8:	f805 3b01 	strb.w	r3, [r5], #1
 800d0fc:	9b00      	ldr	r3, [sp, #0]
 800d0fe:	3301      	adds	r3, #1
 800d100:	9300      	str	r3, [sp, #0]
 800d102:	e240      	b.n	800d586 <_dtoa_r+0x946>
 800d104:	07f2      	lsls	r2, r6, #31
 800d106:	d505      	bpl.n	800d114 <_dtoa_r+0x4d4>
 800d108:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d10c:	f7f3 fa9c 	bl	8000648 <__aeabi_dmul>
 800d110:	3501      	adds	r5, #1
 800d112:	2301      	movs	r3, #1
 800d114:	1076      	asrs	r6, r6, #1
 800d116:	3708      	adds	r7, #8
 800d118:	e777      	b.n	800d00a <_dtoa_r+0x3ca>
 800d11a:	2502      	movs	r5, #2
 800d11c:	e779      	b.n	800d012 <_dtoa_r+0x3d2>
 800d11e:	9f00      	ldr	r7, [sp, #0]
 800d120:	9e03      	ldr	r6, [sp, #12]
 800d122:	e794      	b.n	800d04e <_dtoa_r+0x40e>
 800d124:	9901      	ldr	r1, [sp, #4]
 800d126:	4b4c      	ldr	r3, [pc, #304]	; (800d258 <_dtoa_r+0x618>)
 800d128:	4431      	add	r1, r6
 800d12a:	910d      	str	r1, [sp, #52]	; 0x34
 800d12c:	9908      	ldr	r1, [sp, #32]
 800d12e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d132:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d136:	2900      	cmp	r1, #0
 800d138:	d043      	beq.n	800d1c2 <_dtoa_r+0x582>
 800d13a:	494d      	ldr	r1, [pc, #308]	; (800d270 <_dtoa_r+0x630>)
 800d13c:	2000      	movs	r0, #0
 800d13e:	f7f3 fbad 	bl	800089c <__aeabi_ddiv>
 800d142:	4652      	mov	r2, sl
 800d144:	465b      	mov	r3, fp
 800d146:	f7f3 f8c7 	bl	80002d8 <__aeabi_dsub>
 800d14a:	9d01      	ldr	r5, [sp, #4]
 800d14c:	4682      	mov	sl, r0
 800d14e:	468b      	mov	fp, r1
 800d150:	4649      	mov	r1, r9
 800d152:	4640      	mov	r0, r8
 800d154:	f7f3 fd28 	bl	8000ba8 <__aeabi_d2iz>
 800d158:	4606      	mov	r6, r0
 800d15a:	f7f3 fa0b 	bl	8000574 <__aeabi_i2d>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	4640      	mov	r0, r8
 800d164:	4649      	mov	r1, r9
 800d166:	f7f3 f8b7 	bl	80002d8 <__aeabi_dsub>
 800d16a:	3630      	adds	r6, #48	; 0x30
 800d16c:	f805 6b01 	strb.w	r6, [r5], #1
 800d170:	4652      	mov	r2, sl
 800d172:	465b      	mov	r3, fp
 800d174:	4680      	mov	r8, r0
 800d176:	4689      	mov	r9, r1
 800d178:	f7f3 fcd8 	bl	8000b2c <__aeabi_dcmplt>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	d163      	bne.n	800d248 <_dtoa_r+0x608>
 800d180:	4642      	mov	r2, r8
 800d182:	464b      	mov	r3, r9
 800d184:	4936      	ldr	r1, [pc, #216]	; (800d260 <_dtoa_r+0x620>)
 800d186:	2000      	movs	r0, #0
 800d188:	f7f3 f8a6 	bl	80002d8 <__aeabi_dsub>
 800d18c:	4652      	mov	r2, sl
 800d18e:	465b      	mov	r3, fp
 800d190:	f7f3 fccc 	bl	8000b2c <__aeabi_dcmplt>
 800d194:	2800      	cmp	r0, #0
 800d196:	f040 80b5 	bne.w	800d304 <_dtoa_r+0x6c4>
 800d19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d19c:	429d      	cmp	r5, r3
 800d19e:	d081      	beq.n	800d0a4 <_dtoa_r+0x464>
 800d1a0:	4b30      	ldr	r3, [pc, #192]	; (800d264 <_dtoa_r+0x624>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	4659      	mov	r1, fp
 800d1a8:	f7f3 fa4e 	bl	8000648 <__aeabi_dmul>
 800d1ac:	4b2d      	ldr	r3, [pc, #180]	; (800d264 <_dtoa_r+0x624>)
 800d1ae:	4682      	mov	sl, r0
 800d1b0:	468b      	mov	fp, r1
 800d1b2:	4640      	mov	r0, r8
 800d1b4:	4649      	mov	r1, r9
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	f7f3 fa46 	bl	8000648 <__aeabi_dmul>
 800d1bc:	4680      	mov	r8, r0
 800d1be:	4689      	mov	r9, r1
 800d1c0:	e7c6      	b.n	800d150 <_dtoa_r+0x510>
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	4659      	mov	r1, fp
 800d1c6:	f7f3 fa3f 	bl	8000648 <__aeabi_dmul>
 800d1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1cc:	9d01      	ldr	r5, [sp, #4]
 800d1ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	468b      	mov	fp, r1
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	4640      	mov	r0, r8
 800d1d8:	f7f3 fce6 	bl	8000ba8 <__aeabi_d2iz>
 800d1dc:	4606      	mov	r6, r0
 800d1de:	f7f3 f9c9 	bl	8000574 <__aeabi_i2d>
 800d1e2:	3630      	adds	r6, #48	; 0x30
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	4640      	mov	r0, r8
 800d1ea:	4649      	mov	r1, r9
 800d1ec:	f7f3 f874 	bl	80002d8 <__aeabi_dsub>
 800d1f0:	f805 6b01 	strb.w	r6, [r5], #1
 800d1f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1f6:	429d      	cmp	r5, r3
 800d1f8:	4680      	mov	r8, r0
 800d1fa:	4689      	mov	r9, r1
 800d1fc:	f04f 0200 	mov.w	r2, #0
 800d200:	d124      	bne.n	800d24c <_dtoa_r+0x60c>
 800d202:	4b1b      	ldr	r3, [pc, #108]	; (800d270 <_dtoa_r+0x630>)
 800d204:	4650      	mov	r0, sl
 800d206:	4659      	mov	r1, fp
 800d208:	f7f3 f868 	bl	80002dc <__adddf3>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	4640      	mov	r0, r8
 800d212:	4649      	mov	r1, r9
 800d214:	f7f3 fca8 	bl	8000b68 <__aeabi_dcmpgt>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d173      	bne.n	800d304 <_dtoa_r+0x6c4>
 800d21c:	4652      	mov	r2, sl
 800d21e:	465b      	mov	r3, fp
 800d220:	4913      	ldr	r1, [pc, #76]	; (800d270 <_dtoa_r+0x630>)
 800d222:	2000      	movs	r0, #0
 800d224:	f7f3 f858 	bl	80002d8 <__aeabi_dsub>
 800d228:	4602      	mov	r2, r0
 800d22a:	460b      	mov	r3, r1
 800d22c:	4640      	mov	r0, r8
 800d22e:	4649      	mov	r1, r9
 800d230:	f7f3 fc7c 	bl	8000b2c <__aeabi_dcmplt>
 800d234:	2800      	cmp	r0, #0
 800d236:	f43f af35 	beq.w	800d0a4 <_dtoa_r+0x464>
 800d23a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d23c:	1e6b      	subs	r3, r5, #1
 800d23e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d240:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d244:	2b30      	cmp	r3, #48	; 0x30
 800d246:	d0f8      	beq.n	800d23a <_dtoa_r+0x5fa>
 800d248:	9700      	str	r7, [sp, #0]
 800d24a:	e049      	b.n	800d2e0 <_dtoa_r+0x6a0>
 800d24c:	4b05      	ldr	r3, [pc, #20]	; (800d264 <_dtoa_r+0x624>)
 800d24e:	f7f3 f9fb 	bl	8000648 <__aeabi_dmul>
 800d252:	4680      	mov	r8, r0
 800d254:	4689      	mov	r9, r1
 800d256:	e7bd      	b.n	800d1d4 <_dtoa_r+0x594>
 800d258:	0800ffd8 	.word	0x0800ffd8
 800d25c:	0800ffb0 	.word	0x0800ffb0
 800d260:	3ff00000 	.word	0x3ff00000
 800d264:	40240000 	.word	0x40240000
 800d268:	401c0000 	.word	0x401c0000
 800d26c:	40140000 	.word	0x40140000
 800d270:	3fe00000 	.word	0x3fe00000
 800d274:	9d01      	ldr	r5, [sp, #4]
 800d276:	4656      	mov	r6, sl
 800d278:	465f      	mov	r7, fp
 800d27a:	4642      	mov	r2, r8
 800d27c:	464b      	mov	r3, r9
 800d27e:	4630      	mov	r0, r6
 800d280:	4639      	mov	r1, r7
 800d282:	f7f3 fb0b 	bl	800089c <__aeabi_ddiv>
 800d286:	f7f3 fc8f 	bl	8000ba8 <__aeabi_d2iz>
 800d28a:	4682      	mov	sl, r0
 800d28c:	f7f3 f972 	bl	8000574 <__aeabi_i2d>
 800d290:	4642      	mov	r2, r8
 800d292:	464b      	mov	r3, r9
 800d294:	f7f3 f9d8 	bl	8000648 <__aeabi_dmul>
 800d298:	4602      	mov	r2, r0
 800d29a:	460b      	mov	r3, r1
 800d29c:	4630      	mov	r0, r6
 800d29e:	4639      	mov	r1, r7
 800d2a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d2a4:	f7f3 f818 	bl	80002d8 <__aeabi_dsub>
 800d2a8:	f805 6b01 	strb.w	r6, [r5], #1
 800d2ac:	9e01      	ldr	r6, [sp, #4]
 800d2ae:	9f03      	ldr	r7, [sp, #12]
 800d2b0:	1bae      	subs	r6, r5, r6
 800d2b2:	42b7      	cmp	r7, r6
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	d135      	bne.n	800d326 <_dtoa_r+0x6e6>
 800d2ba:	f7f3 f80f 	bl	80002dc <__adddf3>
 800d2be:	4642      	mov	r2, r8
 800d2c0:	464b      	mov	r3, r9
 800d2c2:	4606      	mov	r6, r0
 800d2c4:	460f      	mov	r7, r1
 800d2c6:	f7f3 fc4f 	bl	8000b68 <__aeabi_dcmpgt>
 800d2ca:	b9d0      	cbnz	r0, 800d302 <_dtoa_r+0x6c2>
 800d2cc:	4642      	mov	r2, r8
 800d2ce:	464b      	mov	r3, r9
 800d2d0:	4630      	mov	r0, r6
 800d2d2:	4639      	mov	r1, r7
 800d2d4:	f7f3 fc20 	bl	8000b18 <__aeabi_dcmpeq>
 800d2d8:	b110      	cbz	r0, 800d2e0 <_dtoa_r+0x6a0>
 800d2da:	f01a 0f01 	tst.w	sl, #1
 800d2de:	d110      	bne.n	800d302 <_dtoa_r+0x6c2>
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	ee18 1a10 	vmov	r1, s16
 800d2e6:	f000 faf3 	bl	800d8d0 <_Bfree>
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	9800      	ldr	r0, [sp, #0]
 800d2ee:	702b      	strb	r3, [r5, #0]
 800d2f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	6018      	str	r0, [r3, #0]
 800d2f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f43f acf1 	beq.w	800cce0 <_dtoa_r+0xa0>
 800d2fe:	601d      	str	r5, [r3, #0]
 800d300:	e4ee      	b.n	800cce0 <_dtoa_r+0xa0>
 800d302:	9f00      	ldr	r7, [sp, #0]
 800d304:	462b      	mov	r3, r5
 800d306:	461d      	mov	r5, r3
 800d308:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d30c:	2a39      	cmp	r2, #57	; 0x39
 800d30e:	d106      	bne.n	800d31e <_dtoa_r+0x6de>
 800d310:	9a01      	ldr	r2, [sp, #4]
 800d312:	429a      	cmp	r2, r3
 800d314:	d1f7      	bne.n	800d306 <_dtoa_r+0x6c6>
 800d316:	9901      	ldr	r1, [sp, #4]
 800d318:	2230      	movs	r2, #48	; 0x30
 800d31a:	3701      	adds	r7, #1
 800d31c:	700a      	strb	r2, [r1, #0]
 800d31e:	781a      	ldrb	r2, [r3, #0]
 800d320:	3201      	adds	r2, #1
 800d322:	701a      	strb	r2, [r3, #0]
 800d324:	e790      	b.n	800d248 <_dtoa_r+0x608>
 800d326:	4ba6      	ldr	r3, [pc, #664]	; (800d5c0 <_dtoa_r+0x980>)
 800d328:	2200      	movs	r2, #0
 800d32a:	f7f3 f98d 	bl	8000648 <__aeabi_dmul>
 800d32e:	2200      	movs	r2, #0
 800d330:	2300      	movs	r3, #0
 800d332:	4606      	mov	r6, r0
 800d334:	460f      	mov	r7, r1
 800d336:	f7f3 fbef 	bl	8000b18 <__aeabi_dcmpeq>
 800d33a:	2800      	cmp	r0, #0
 800d33c:	d09d      	beq.n	800d27a <_dtoa_r+0x63a>
 800d33e:	e7cf      	b.n	800d2e0 <_dtoa_r+0x6a0>
 800d340:	9a08      	ldr	r2, [sp, #32]
 800d342:	2a00      	cmp	r2, #0
 800d344:	f000 80d7 	beq.w	800d4f6 <_dtoa_r+0x8b6>
 800d348:	9a06      	ldr	r2, [sp, #24]
 800d34a:	2a01      	cmp	r2, #1
 800d34c:	f300 80ba 	bgt.w	800d4c4 <_dtoa_r+0x884>
 800d350:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d352:	2a00      	cmp	r2, #0
 800d354:	f000 80b2 	beq.w	800d4bc <_dtoa_r+0x87c>
 800d358:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d35c:	9e07      	ldr	r6, [sp, #28]
 800d35e:	9d04      	ldr	r5, [sp, #16]
 800d360:	9a04      	ldr	r2, [sp, #16]
 800d362:	441a      	add	r2, r3
 800d364:	9204      	str	r2, [sp, #16]
 800d366:	9a05      	ldr	r2, [sp, #20]
 800d368:	2101      	movs	r1, #1
 800d36a:	441a      	add	r2, r3
 800d36c:	4620      	mov	r0, r4
 800d36e:	9205      	str	r2, [sp, #20]
 800d370:	f000 fb66 	bl	800da40 <__i2b>
 800d374:	4607      	mov	r7, r0
 800d376:	2d00      	cmp	r5, #0
 800d378:	dd0c      	ble.n	800d394 <_dtoa_r+0x754>
 800d37a:	9b05      	ldr	r3, [sp, #20]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	dd09      	ble.n	800d394 <_dtoa_r+0x754>
 800d380:	42ab      	cmp	r3, r5
 800d382:	9a04      	ldr	r2, [sp, #16]
 800d384:	bfa8      	it	ge
 800d386:	462b      	movge	r3, r5
 800d388:	1ad2      	subs	r2, r2, r3
 800d38a:	9204      	str	r2, [sp, #16]
 800d38c:	9a05      	ldr	r2, [sp, #20]
 800d38e:	1aed      	subs	r5, r5, r3
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	9305      	str	r3, [sp, #20]
 800d394:	9b07      	ldr	r3, [sp, #28]
 800d396:	b31b      	cbz	r3, 800d3e0 <_dtoa_r+0x7a0>
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	f000 80af 	beq.w	800d4fe <_dtoa_r+0x8be>
 800d3a0:	2e00      	cmp	r6, #0
 800d3a2:	dd13      	ble.n	800d3cc <_dtoa_r+0x78c>
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	4632      	mov	r2, r6
 800d3a8:	4620      	mov	r0, r4
 800d3aa:	f000 fc09 	bl	800dbc0 <__pow5mult>
 800d3ae:	ee18 2a10 	vmov	r2, s16
 800d3b2:	4601      	mov	r1, r0
 800d3b4:	4607      	mov	r7, r0
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 fb58 	bl	800da6c <__multiply>
 800d3bc:	ee18 1a10 	vmov	r1, s16
 800d3c0:	4680      	mov	r8, r0
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	f000 fa84 	bl	800d8d0 <_Bfree>
 800d3c8:	ee08 8a10 	vmov	s16, r8
 800d3cc:	9b07      	ldr	r3, [sp, #28]
 800d3ce:	1b9a      	subs	r2, r3, r6
 800d3d0:	d006      	beq.n	800d3e0 <_dtoa_r+0x7a0>
 800d3d2:	ee18 1a10 	vmov	r1, s16
 800d3d6:	4620      	mov	r0, r4
 800d3d8:	f000 fbf2 	bl	800dbc0 <__pow5mult>
 800d3dc:	ee08 0a10 	vmov	s16, r0
 800d3e0:	2101      	movs	r1, #1
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f000 fb2c 	bl	800da40 <__i2b>
 800d3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	f340 8088 	ble.w	800d502 <_dtoa_r+0x8c2>
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	4601      	mov	r1, r0
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 fbe2 	bl	800dbc0 <__pow5mult>
 800d3fc:	9b06      	ldr	r3, [sp, #24]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	4606      	mov	r6, r0
 800d402:	f340 8081 	ble.w	800d508 <_dtoa_r+0x8c8>
 800d406:	f04f 0800 	mov.w	r8, #0
 800d40a:	6933      	ldr	r3, [r6, #16]
 800d40c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d410:	6918      	ldr	r0, [r3, #16]
 800d412:	f000 fac5 	bl	800d9a0 <__hi0bits>
 800d416:	f1c0 0020 	rsb	r0, r0, #32
 800d41a:	9b05      	ldr	r3, [sp, #20]
 800d41c:	4418      	add	r0, r3
 800d41e:	f010 001f 	ands.w	r0, r0, #31
 800d422:	f000 8092 	beq.w	800d54a <_dtoa_r+0x90a>
 800d426:	f1c0 0320 	rsb	r3, r0, #32
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	f340 808a 	ble.w	800d544 <_dtoa_r+0x904>
 800d430:	f1c0 001c 	rsb	r0, r0, #28
 800d434:	9b04      	ldr	r3, [sp, #16]
 800d436:	4403      	add	r3, r0
 800d438:	9304      	str	r3, [sp, #16]
 800d43a:	9b05      	ldr	r3, [sp, #20]
 800d43c:	4403      	add	r3, r0
 800d43e:	4405      	add	r5, r0
 800d440:	9305      	str	r3, [sp, #20]
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	dd07      	ble.n	800d458 <_dtoa_r+0x818>
 800d448:	ee18 1a10 	vmov	r1, s16
 800d44c:	461a      	mov	r2, r3
 800d44e:	4620      	mov	r0, r4
 800d450:	f000 fc10 	bl	800dc74 <__lshift>
 800d454:	ee08 0a10 	vmov	s16, r0
 800d458:	9b05      	ldr	r3, [sp, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	dd05      	ble.n	800d46a <_dtoa_r+0x82a>
 800d45e:	4631      	mov	r1, r6
 800d460:	461a      	mov	r2, r3
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fc06 	bl	800dc74 <__lshift>
 800d468:	4606      	mov	r6, r0
 800d46a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d06e      	beq.n	800d54e <_dtoa_r+0x90e>
 800d470:	ee18 0a10 	vmov	r0, s16
 800d474:	4631      	mov	r1, r6
 800d476:	f000 fc6d 	bl	800dd54 <__mcmp>
 800d47a:	2800      	cmp	r0, #0
 800d47c:	da67      	bge.n	800d54e <_dtoa_r+0x90e>
 800d47e:	9b00      	ldr	r3, [sp, #0]
 800d480:	3b01      	subs	r3, #1
 800d482:	ee18 1a10 	vmov	r1, s16
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	220a      	movs	r2, #10
 800d48a:	2300      	movs	r3, #0
 800d48c:	4620      	mov	r0, r4
 800d48e:	f000 fa41 	bl	800d914 <__multadd>
 800d492:	9b08      	ldr	r3, [sp, #32]
 800d494:	ee08 0a10 	vmov	s16, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f000 81b1 	beq.w	800d800 <_dtoa_r+0xbc0>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	220a      	movs	r2, #10
 800d4a4:	4620      	mov	r0, r4
 800d4a6:	f000 fa35 	bl	800d914 <__multadd>
 800d4aa:	9b02      	ldr	r3, [sp, #8]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	4607      	mov	r7, r0
 800d4b0:	f300 808e 	bgt.w	800d5d0 <_dtoa_r+0x990>
 800d4b4:	9b06      	ldr	r3, [sp, #24]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	dc51      	bgt.n	800d55e <_dtoa_r+0x91e>
 800d4ba:	e089      	b.n	800d5d0 <_dtoa_r+0x990>
 800d4bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d4be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4c2:	e74b      	b.n	800d35c <_dtoa_r+0x71c>
 800d4c4:	9b03      	ldr	r3, [sp, #12]
 800d4c6:	1e5e      	subs	r6, r3, #1
 800d4c8:	9b07      	ldr	r3, [sp, #28]
 800d4ca:	42b3      	cmp	r3, r6
 800d4cc:	bfbf      	itttt	lt
 800d4ce:	9b07      	ldrlt	r3, [sp, #28]
 800d4d0:	9607      	strlt	r6, [sp, #28]
 800d4d2:	1af2      	sublt	r2, r6, r3
 800d4d4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d4d6:	bfb6      	itet	lt
 800d4d8:	189b      	addlt	r3, r3, r2
 800d4da:	1b9e      	subge	r6, r3, r6
 800d4dc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d4de:	9b03      	ldr	r3, [sp, #12]
 800d4e0:	bfb8      	it	lt
 800d4e2:	2600      	movlt	r6, #0
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	bfb7      	itett	lt
 800d4e8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d4ec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d4f0:	1a9d      	sublt	r5, r3, r2
 800d4f2:	2300      	movlt	r3, #0
 800d4f4:	e734      	b.n	800d360 <_dtoa_r+0x720>
 800d4f6:	9e07      	ldr	r6, [sp, #28]
 800d4f8:	9d04      	ldr	r5, [sp, #16]
 800d4fa:	9f08      	ldr	r7, [sp, #32]
 800d4fc:	e73b      	b.n	800d376 <_dtoa_r+0x736>
 800d4fe:	9a07      	ldr	r2, [sp, #28]
 800d500:	e767      	b.n	800d3d2 <_dtoa_r+0x792>
 800d502:	9b06      	ldr	r3, [sp, #24]
 800d504:	2b01      	cmp	r3, #1
 800d506:	dc18      	bgt.n	800d53a <_dtoa_r+0x8fa>
 800d508:	f1ba 0f00 	cmp.w	sl, #0
 800d50c:	d115      	bne.n	800d53a <_dtoa_r+0x8fa>
 800d50e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d512:	b993      	cbnz	r3, 800d53a <_dtoa_r+0x8fa>
 800d514:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d518:	0d1b      	lsrs	r3, r3, #20
 800d51a:	051b      	lsls	r3, r3, #20
 800d51c:	b183      	cbz	r3, 800d540 <_dtoa_r+0x900>
 800d51e:	9b04      	ldr	r3, [sp, #16]
 800d520:	3301      	adds	r3, #1
 800d522:	9304      	str	r3, [sp, #16]
 800d524:	9b05      	ldr	r3, [sp, #20]
 800d526:	3301      	adds	r3, #1
 800d528:	9305      	str	r3, [sp, #20]
 800d52a:	f04f 0801 	mov.w	r8, #1
 800d52e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d530:	2b00      	cmp	r3, #0
 800d532:	f47f af6a 	bne.w	800d40a <_dtoa_r+0x7ca>
 800d536:	2001      	movs	r0, #1
 800d538:	e76f      	b.n	800d41a <_dtoa_r+0x7da>
 800d53a:	f04f 0800 	mov.w	r8, #0
 800d53e:	e7f6      	b.n	800d52e <_dtoa_r+0x8ee>
 800d540:	4698      	mov	r8, r3
 800d542:	e7f4      	b.n	800d52e <_dtoa_r+0x8ee>
 800d544:	f43f af7d 	beq.w	800d442 <_dtoa_r+0x802>
 800d548:	4618      	mov	r0, r3
 800d54a:	301c      	adds	r0, #28
 800d54c:	e772      	b.n	800d434 <_dtoa_r+0x7f4>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	2b00      	cmp	r3, #0
 800d552:	dc37      	bgt.n	800d5c4 <_dtoa_r+0x984>
 800d554:	9b06      	ldr	r3, [sp, #24]
 800d556:	2b02      	cmp	r3, #2
 800d558:	dd34      	ble.n	800d5c4 <_dtoa_r+0x984>
 800d55a:	9b03      	ldr	r3, [sp, #12]
 800d55c:	9302      	str	r3, [sp, #8]
 800d55e:	9b02      	ldr	r3, [sp, #8]
 800d560:	b96b      	cbnz	r3, 800d57e <_dtoa_r+0x93e>
 800d562:	4631      	mov	r1, r6
 800d564:	2205      	movs	r2, #5
 800d566:	4620      	mov	r0, r4
 800d568:	f000 f9d4 	bl	800d914 <__multadd>
 800d56c:	4601      	mov	r1, r0
 800d56e:	4606      	mov	r6, r0
 800d570:	ee18 0a10 	vmov	r0, s16
 800d574:	f000 fbee 	bl	800dd54 <__mcmp>
 800d578:	2800      	cmp	r0, #0
 800d57a:	f73f adbb 	bgt.w	800d0f4 <_dtoa_r+0x4b4>
 800d57e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d580:	9d01      	ldr	r5, [sp, #4]
 800d582:	43db      	mvns	r3, r3
 800d584:	9300      	str	r3, [sp, #0]
 800d586:	f04f 0800 	mov.w	r8, #0
 800d58a:	4631      	mov	r1, r6
 800d58c:	4620      	mov	r0, r4
 800d58e:	f000 f99f 	bl	800d8d0 <_Bfree>
 800d592:	2f00      	cmp	r7, #0
 800d594:	f43f aea4 	beq.w	800d2e0 <_dtoa_r+0x6a0>
 800d598:	f1b8 0f00 	cmp.w	r8, #0
 800d59c:	d005      	beq.n	800d5aa <_dtoa_r+0x96a>
 800d59e:	45b8      	cmp	r8, r7
 800d5a0:	d003      	beq.n	800d5aa <_dtoa_r+0x96a>
 800d5a2:	4641      	mov	r1, r8
 800d5a4:	4620      	mov	r0, r4
 800d5a6:	f000 f993 	bl	800d8d0 <_Bfree>
 800d5aa:	4639      	mov	r1, r7
 800d5ac:	4620      	mov	r0, r4
 800d5ae:	f000 f98f 	bl	800d8d0 <_Bfree>
 800d5b2:	e695      	b.n	800d2e0 <_dtoa_r+0x6a0>
 800d5b4:	2600      	movs	r6, #0
 800d5b6:	4637      	mov	r7, r6
 800d5b8:	e7e1      	b.n	800d57e <_dtoa_r+0x93e>
 800d5ba:	9700      	str	r7, [sp, #0]
 800d5bc:	4637      	mov	r7, r6
 800d5be:	e599      	b.n	800d0f4 <_dtoa_r+0x4b4>
 800d5c0:	40240000 	.word	0x40240000
 800d5c4:	9b08      	ldr	r3, [sp, #32]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	f000 80ca 	beq.w	800d760 <_dtoa_r+0xb20>
 800d5cc:	9b03      	ldr	r3, [sp, #12]
 800d5ce:	9302      	str	r3, [sp, #8]
 800d5d0:	2d00      	cmp	r5, #0
 800d5d2:	dd05      	ble.n	800d5e0 <_dtoa_r+0x9a0>
 800d5d4:	4639      	mov	r1, r7
 800d5d6:	462a      	mov	r2, r5
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 fb4b 	bl	800dc74 <__lshift>
 800d5de:	4607      	mov	r7, r0
 800d5e0:	f1b8 0f00 	cmp.w	r8, #0
 800d5e4:	d05b      	beq.n	800d69e <_dtoa_r+0xa5e>
 800d5e6:	6879      	ldr	r1, [r7, #4]
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f000 f931 	bl	800d850 <_Balloc>
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	b928      	cbnz	r0, 800d5fe <_dtoa_r+0x9be>
 800d5f2:	4b87      	ldr	r3, [pc, #540]	; (800d810 <_dtoa_r+0xbd0>)
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d5fa:	f7ff bb3b 	b.w	800cc74 <_dtoa_r+0x34>
 800d5fe:	693a      	ldr	r2, [r7, #16]
 800d600:	3202      	adds	r2, #2
 800d602:	0092      	lsls	r2, r2, #2
 800d604:	f107 010c 	add.w	r1, r7, #12
 800d608:	300c      	adds	r0, #12
 800d60a:	f000 f913 	bl	800d834 <memcpy>
 800d60e:	2201      	movs	r2, #1
 800d610:	4629      	mov	r1, r5
 800d612:	4620      	mov	r0, r4
 800d614:	f000 fb2e 	bl	800dc74 <__lshift>
 800d618:	9b01      	ldr	r3, [sp, #4]
 800d61a:	f103 0901 	add.w	r9, r3, #1
 800d61e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d622:	4413      	add	r3, r2
 800d624:	9305      	str	r3, [sp, #20]
 800d626:	f00a 0301 	and.w	r3, sl, #1
 800d62a:	46b8      	mov	r8, r7
 800d62c:	9304      	str	r3, [sp, #16]
 800d62e:	4607      	mov	r7, r0
 800d630:	4631      	mov	r1, r6
 800d632:	ee18 0a10 	vmov	r0, s16
 800d636:	f7ff fa77 	bl	800cb28 <quorem>
 800d63a:	4641      	mov	r1, r8
 800d63c:	9002      	str	r0, [sp, #8]
 800d63e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d642:	ee18 0a10 	vmov	r0, s16
 800d646:	f000 fb85 	bl	800dd54 <__mcmp>
 800d64a:	463a      	mov	r2, r7
 800d64c:	9003      	str	r0, [sp, #12]
 800d64e:	4631      	mov	r1, r6
 800d650:	4620      	mov	r0, r4
 800d652:	f000 fb9b 	bl	800dd8c <__mdiff>
 800d656:	68c2      	ldr	r2, [r0, #12]
 800d658:	f109 3bff 	add.w	fp, r9, #4294967295
 800d65c:	4605      	mov	r5, r0
 800d65e:	bb02      	cbnz	r2, 800d6a2 <_dtoa_r+0xa62>
 800d660:	4601      	mov	r1, r0
 800d662:	ee18 0a10 	vmov	r0, s16
 800d666:	f000 fb75 	bl	800dd54 <__mcmp>
 800d66a:	4602      	mov	r2, r0
 800d66c:	4629      	mov	r1, r5
 800d66e:	4620      	mov	r0, r4
 800d670:	9207      	str	r2, [sp, #28]
 800d672:	f000 f92d 	bl	800d8d0 <_Bfree>
 800d676:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d67a:	ea43 0102 	orr.w	r1, r3, r2
 800d67e:	9b04      	ldr	r3, [sp, #16]
 800d680:	430b      	orrs	r3, r1
 800d682:	464d      	mov	r5, r9
 800d684:	d10f      	bne.n	800d6a6 <_dtoa_r+0xa66>
 800d686:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d68a:	d02a      	beq.n	800d6e2 <_dtoa_r+0xaa2>
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	dd02      	ble.n	800d698 <_dtoa_r+0xa58>
 800d692:	9b02      	ldr	r3, [sp, #8]
 800d694:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d698:	f88b a000 	strb.w	sl, [fp]
 800d69c:	e775      	b.n	800d58a <_dtoa_r+0x94a>
 800d69e:	4638      	mov	r0, r7
 800d6a0:	e7ba      	b.n	800d618 <_dtoa_r+0x9d8>
 800d6a2:	2201      	movs	r2, #1
 800d6a4:	e7e2      	b.n	800d66c <_dtoa_r+0xa2c>
 800d6a6:	9b03      	ldr	r3, [sp, #12]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	db04      	blt.n	800d6b6 <_dtoa_r+0xa76>
 800d6ac:	9906      	ldr	r1, [sp, #24]
 800d6ae:	430b      	orrs	r3, r1
 800d6b0:	9904      	ldr	r1, [sp, #16]
 800d6b2:	430b      	orrs	r3, r1
 800d6b4:	d122      	bne.n	800d6fc <_dtoa_r+0xabc>
 800d6b6:	2a00      	cmp	r2, #0
 800d6b8:	ddee      	ble.n	800d698 <_dtoa_r+0xa58>
 800d6ba:	ee18 1a10 	vmov	r1, s16
 800d6be:	2201      	movs	r2, #1
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	f000 fad7 	bl	800dc74 <__lshift>
 800d6c6:	4631      	mov	r1, r6
 800d6c8:	ee08 0a10 	vmov	s16, r0
 800d6cc:	f000 fb42 	bl	800dd54 <__mcmp>
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	dc03      	bgt.n	800d6dc <_dtoa_r+0xa9c>
 800d6d4:	d1e0      	bne.n	800d698 <_dtoa_r+0xa58>
 800d6d6:	f01a 0f01 	tst.w	sl, #1
 800d6da:	d0dd      	beq.n	800d698 <_dtoa_r+0xa58>
 800d6dc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d6e0:	d1d7      	bne.n	800d692 <_dtoa_r+0xa52>
 800d6e2:	2339      	movs	r3, #57	; 0x39
 800d6e4:	f88b 3000 	strb.w	r3, [fp]
 800d6e8:	462b      	mov	r3, r5
 800d6ea:	461d      	mov	r5, r3
 800d6ec:	3b01      	subs	r3, #1
 800d6ee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d6f2:	2a39      	cmp	r2, #57	; 0x39
 800d6f4:	d071      	beq.n	800d7da <_dtoa_r+0xb9a>
 800d6f6:	3201      	adds	r2, #1
 800d6f8:	701a      	strb	r2, [r3, #0]
 800d6fa:	e746      	b.n	800d58a <_dtoa_r+0x94a>
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	dd07      	ble.n	800d710 <_dtoa_r+0xad0>
 800d700:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d704:	d0ed      	beq.n	800d6e2 <_dtoa_r+0xaa2>
 800d706:	f10a 0301 	add.w	r3, sl, #1
 800d70a:	f88b 3000 	strb.w	r3, [fp]
 800d70e:	e73c      	b.n	800d58a <_dtoa_r+0x94a>
 800d710:	9b05      	ldr	r3, [sp, #20]
 800d712:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d716:	4599      	cmp	r9, r3
 800d718:	d047      	beq.n	800d7aa <_dtoa_r+0xb6a>
 800d71a:	ee18 1a10 	vmov	r1, s16
 800d71e:	2300      	movs	r3, #0
 800d720:	220a      	movs	r2, #10
 800d722:	4620      	mov	r0, r4
 800d724:	f000 f8f6 	bl	800d914 <__multadd>
 800d728:	45b8      	cmp	r8, r7
 800d72a:	ee08 0a10 	vmov	s16, r0
 800d72e:	f04f 0300 	mov.w	r3, #0
 800d732:	f04f 020a 	mov.w	r2, #10
 800d736:	4641      	mov	r1, r8
 800d738:	4620      	mov	r0, r4
 800d73a:	d106      	bne.n	800d74a <_dtoa_r+0xb0a>
 800d73c:	f000 f8ea 	bl	800d914 <__multadd>
 800d740:	4680      	mov	r8, r0
 800d742:	4607      	mov	r7, r0
 800d744:	f109 0901 	add.w	r9, r9, #1
 800d748:	e772      	b.n	800d630 <_dtoa_r+0x9f0>
 800d74a:	f000 f8e3 	bl	800d914 <__multadd>
 800d74e:	4639      	mov	r1, r7
 800d750:	4680      	mov	r8, r0
 800d752:	2300      	movs	r3, #0
 800d754:	220a      	movs	r2, #10
 800d756:	4620      	mov	r0, r4
 800d758:	f000 f8dc 	bl	800d914 <__multadd>
 800d75c:	4607      	mov	r7, r0
 800d75e:	e7f1      	b.n	800d744 <_dtoa_r+0xb04>
 800d760:	9b03      	ldr	r3, [sp, #12]
 800d762:	9302      	str	r3, [sp, #8]
 800d764:	9d01      	ldr	r5, [sp, #4]
 800d766:	ee18 0a10 	vmov	r0, s16
 800d76a:	4631      	mov	r1, r6
 800d76c:	f7ff f9dc 	bl	800cb28 <quorem>
 800d770:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d774:	9b01      	ldr	r3, [sp, #4]
 800d776:	f805 ab01 	strb.w	sl, [r5], #1
 800d77a:	1aea      	subs	r2, r5, r3
 800d77c:	9b02      	ldr	r3, [sp, #8]
 800d77e:	4293      	cmp	r3, r2
 800d780:	dd09      	ble.n	800d796 <_dtoa_r+0xb56>
 800d782:	ee18 1a10 	vmov	r1, s16
 800d786:	2300      	movs	r3, #0
 800d788:	220a      	movs	r2, #10
 800d78a:	4620      	mov	r0, r4
 800d78c:	f000 f8c2 	bl	800d914 <__multadd>
 800d790:	ee08 0a10 	vmov	s16, r0
 800d794:	e7e7      	b.n	800d766 <_dtoa_r+0xb26>
 800d796:	9b02      	ldr	r3, [sp, #8]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	bfc8      	it	gt
 800d79c:	461d      	movgt	r5, r3
 800d79e:	9b01      	ldr	r3, [sp, #4]
 800d7a0:	bfd8      	it	le
 800d7a2:	2501      	movle	r5, #1
 800d7a4:	441d      	add	r5, r3
 800d7a6:	f04f 0800 	mov.w	r8, #0
 800d7aa:	ee18 1a10 	vmov	r1, s16
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f000 fa5f 	bl	800dc74 <__lshift>
 800d7b6:	4631      	mov	r1, r6
 800d7b8:	ee08 0a10 	vmov	s16, r0
 800d7bc:	f000 faca 	bl	800dd54 <__mcmp>
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	dc91      	bgt.n	800d6e8 <_dtoa_r+0xaa8>
 800d7c4:	d102      	bne.n	800d7cc <_dtoa_r+0xb8c>
 800d7c6:	f01a 0f01 	tst.w	sl, #1
 800d7ca:	d18d      	bne.n	800d6e8 <_dtoa_r+0xaa8>
 800d7cc:	462b      	mov	r3, r5
 800d7ce:	461d      	mov	r5, r3
 800d7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7d4:	2a30      	cmp	r2, #48	; 0x30
 800d7d6:	d0fa      	beq.n	800d7ce <_dtoa_r+0xb8e>
 800d7d8:	e6d7      	b.n	800d58a <_dtoa_r+0x94a>
 800d7da:	9a01      	ldr	r2, [sp, #4]
 800d7dc:	429a      	cmp	r2, r3
 800d7de:	d184      	bne.n	800d6ea <_dtoa_r+0xaaa>
 800d7e0:	9b00      	ldr	r3, [sp, #0]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	9300      	str	r3, [sp, #0]
 800d7e6:	2331      	movs	r3, #49	; 0x31
 800d7e8:	7013      	strb	r3, [r2, #0]
 800d7ea:	e6ce      	b.n	800d58a <_dtoa_r+0x94a>
 800d7ec:	4b09      	ldr	r3, [pc, #36]	; (800d814 <_dtoa_r+0xbd4>)
 800d7ee:	f7ff ba95 	b.w	800cd1c <_dtoa_r+0xdc>
 800d7f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	f47f aa6e 	bne.w	800ccd6 <_dtoa_r+0x96>
 800d7fa:	4b07      	ldr	r3, [pc, #28]	; (800d818 <_dtoa_r+0xbd8>)
 800d7fc:	f7ff ba8e 	b.w	800cd1c <_dtoa_r+0xdc>
 800d800:	9b02      	ldr	r3, [sp, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	dcae      	bgt.n	800d764 <_dtoa_r+0xb24>
 800d806:	9b06      	ldr	r3, [sp, #24]
 800d808:	2b02      	cmp	r3, #2
 800d80a:	f73f aea8 	bgt.w	800d55e <_dtoa_r+0x91e>
 800d80e:	e7a9      	b.n	800d764 <_dtoa_r+0xb24>
 800d810:	0800ff3f 	.word	0x0800ff3f
 800d814:	0800fe9c 	.word	0x0800fe9c
 800d818:	0800fec0 	.word	0x0800fec0

0800d81c <_localeconv_r>:
 800d81c:	4800      	ldr	r0, [pc, #0]	; (800d820 <_localeconv_r+0x4>)
 800d81e:	4770      	bx	lr
 800d820:	20000180 	.word	0x20000180

0800d824 <malloc>:
 800d824:	4b02      	ldr	r3, [pc, #8]	; (800d830 <malloc+0xc>)
 800d826:	4601      	mov	r1, r0
 800d828:	6818      	ldr	r0, [r3, #0]
 800d82a:	f000 bc17 	b.w	800e05c <_malloc_r>
 800d82e:	bf00      	nop
 800d830:	2000002c 	.word	0x2000002c

0800d834 <memcpy>:
 800d834:	440a      	add	r2, r1
 800d836:	4291      	cmp	r1, r2
 800d838:	f100 33ff 	add.w	r3, r0, #4294967295
 800d83c:	d100      	bne.n	800d840 <memcpy+0xc>
 800d83e:	4770      	bx	lr
 800d840:	b510      	push	{r4, lr}
 800d842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d84a:	4291      	cmp	r1, r2
 800d84c:	d1f9      	bne.n	800d842 <memcpy+0xe>
 800d84e:	bd10      	pop	{r4, pc}

0800d850 <_Balloc>:
 800d850:	b570      	push	{r4, r5, r6, lr}
 800d852:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d854:	4604      	mov	r4, r0
 800d856:	460d      	mov	r5, r1
 800d858:	b976      	cbnz	r6, 800d878 <_Balloc+0x28>
 800d85a:	2010      	movs	r0, #16
 800d85c:	f7ff ffe2 	bl	800d824 <malloc>
 800d860:	4602      	mov	r2, r0
 800d862:	6260      	str	r0, [r4, #36]	; 0x24
 800d864:	b920      	cbnz	r0, 800d870 <_Balloc+0x20>
 800d866:	4b18      	ldr	r3, [pc, #96]	; (800d8c8 <_Balloc+0x78>)
 800d868:	4818      	ldr	r0, [pc, #96]	; (800d8cc <_Balloc+0x7c>)
 800d86a:	2166      	movs	r1, #102	; 0x66
 800d86c:	f000 fdd6 	bl	800e41c <__assert_func>
 800d870:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d874:	6006      	str	r6, [r0, #0]
 800d876:	60c6      	str	r6, [r0, #12]
 800d878:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d87a:	68f3      	ldr	r3, [r6, #12]
 800d87c:	b183      	cbz	r3, 800d8a0 <_Balloc+0x50>
 800d87e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d880:	68db      	ldr	r3, [r3, #12]
 800d882:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d886:	b9b8      	cbnz	r0, 800d8b8 <_Balloc+0x68>
 800d888:	2101      	movs	r1, #1
 800d88a:	fa01 f605 	lsl.w	r6, r1, r5
 800d88e:	1d72      	adds	r2, r6, #5
 800d890:	0092      	lsls	r2, r2, #2
 800d892:	4620      	mov	r0, r4
 800d894:	f000 fb60 	bl	800df58 <_calloc_r>
 800d898:	b160      	cbz	r0, 800d8b4 <_Balloc+0x64>
 800d89a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d89e:	e00e      	b.n	800d8be <_Balloc+0x6e>
 800d8a0:	2221      	movs	r2, #33	; 0x21
 800d8a2:	2104      	movs	r1, #4
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	f000 fb57 	bl	800df58 <_calloc_r>
 800d8aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8ac:	60f0      	str	r0, [r6, #12]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1e4      	bne.n	800d87e <_Balloc+0x2e>
 800d8b4:	2000      	movs	r0, #0
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	6802      	ldr	r2, [r0, #0]
 800d8ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8be:	2300      	movs	r3, #0
 800d8c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8c4:	e7f7      	b.n	800d8b6 <_Balloc+0x66>
 800d8c6:	bf00      	nop
 800d8c8:	0800fecd 	.word	0x0800fecd
 800d8cc:	0800ff50 	.word	0x0800ff50

0800d8d0 <_Bfree>:
 800d8d0:	b570      	push	{r4, r5, r6, lr}
 800d8d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8d4:	4605      	mov	r5, r0
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	b976      	cbnz	r6, 800d8f8 <_Bfree+0x28>
 800d8da:	2010      	movs	r0, #16
 800d8dc:	f7ff ffa2 	bl	800d824 <malloc>
 800d8e0:	4602      	mov	r2, r0
 800d8e2:	6268      	str	r0, [r5, #36]	; 0x24
 800d8e4:	b920      	cbnz	r0, 800d8f0 <_Bfree+0x20>
 800d8e6:	4b09      	ldr	r3, [pc, #36]	; (800d90c <_Bfree+0x3c>)
 800d8e8:	4809      	ldr	r0, [pc, #36]	; (800d910 <_Bfree+0x40>)
 800d8ea:	218a      	movs	r1, #138	; 0x8a
 800d8ec:	f000 fd96 	bl	800e41c <__assert_func>
 800d8f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8f4:	6006      	str	r6, [r0, #0]
 800d8f6:	60c6      	str	r6, [r0, #12]
 800d8f8:	b13c      	cbz	r4, 800d90a <_Bfree+0x3a>
 800d8fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d8fc:	6862      	ldr	r2, [r4, #4]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d904:	6021      	str	r1, [r4, #0]
 800d906:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d90a:	bd70      	pop	{r4, r5, r6, pc}
 800d90c:	0800fecd 	.word	0x0800fecd
 800d910:	0800ff50 	.word	0x0800ff50

0800d914 <__multadd>:
 800d914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d918:	690d      	ldr	r5, [r1, #16]
 800d91a:	4607      	mov	r7, r0
 800d91c:	460c      	mov	r4, r1
 800d91e:	461e      	mov	r6, r3
 800d920:	f101 0c14 	add.w	ip, r1, #20
 800d924:	2000      	movs	r0, #0
 800d926:	f8dc 3000 	ldr.w	r3, [ip]
 800d92a:	b299      	uxth	r1, r3
 800d92c:	fb02 6101 	mla	r1, r2, r1, r6
 800d930:	0c1e      	lsrs	r6, r3, #16
 800d932:	0c0b      	lsrs	r3, r1, #16
 800d934:	fb02 3306 	mla	r3, r2, r6, r3
 800d938:	b289      	uxth	r1, r1
 800d93a:	3001      	adds	r0, #1
 800d93c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d940:	4285      	cmp	r5, r0
 800d942:	f84c 1b04 	str.w	r1, [ip], #4
 800d946:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d94a:	dcec      	bgt.n	800d926 <__multadd+0x12>
 800d94c:	b30e      	cbz	r6, 800d992 <__multadd+0x7e>
 800d94e:	68a3      	ldr	r3, [r4, #8]
 800d950:	42ab      	cmp	r3, r5
 800d952:	dc19      	bgt.n	800d988 <__multadd+0x74>
 800d954:	6861      	ldr	r1, [r4, #4]
 800d956:	4638      	mov	r0, r7
 800d958:	3101      	adds	r1, #1
 800d95a:	f7ff ff79 	bl	800d850 <_Balloc>
 800d95e:	4680      	mov	r8, r0
 800d960:	b928      	cbnz	r0, 800d96e <__multadd+0x5a>
 800d962:	4602      	mov	r2, r0
 800d964:	4b0c      	ldr	r3, [pc, #48]	; (800d998 <__multadd+0x84>)
 800d966:	480d      	ldr	r0, [pc, #52]	; (800d99c <__multadd+0x88>)
 800d968:	21b5      	movs	r1, #181	; 0xb5
 800d96a:	f000 fd57 	bl	800e41c <__assert_func>
 800d96e:	6922      	ldr	r2, [r4, #16]
 800d970:	3202      	adds	r2, #2
 800d972:	f104 010c 	add.w	r1, r4, #12
 800d976:	0092      	lsls	r2, r2, #2
 800d978:	300c      	adds	r0, #12
 800d97a:	f7ff ff5b 	bl	800d834 <memcpy>
 800d97e:	4621      	mov	r1, r4
 800d980:	4638      	mov	r0, r7
 800d982:	f7ff ffa5 	bl	800d8d0 <_Bfree>
 800d986:	4644      	mov	r4, r8
 800d988:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d98c:	3501      	adds	r5, #1
 800d98e:	615e      	str	r6, [r3, #20]
 800d990:	6125      	str	r5, [r4, #16]
 800d992:	4620      	mov	r0, r4
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d998:	0800ff3f 	.word	0x0800ff3f
 800d99c:	0800ff50 	.word	0x0800ff50

0800d9a0 <__hi0bits>:
 800d9a0:	0c03      	lsrs	r3, r0, #16
 800d9a2:	041b      	lsls	r3, r3, #16
 800d9a4:	b9d3      	cbnz	r3, 800d9dc <__hi0bits+0x3c>
 800d9a6:	0400      	lsls	r0, r0, #16
 800d9a8:	2310      	movs	r3, #16
 800d9aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d9ae:	bf04      	itt	eq
 800d9b0:	0200      	lsleq	r0, r0, #8
 800d9b2:	3308      	addeq	r3, #8
 800d9b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d9b8:	bf04      	itt	eq
 800d9ba:	0100      	lsleq	r0, r0, #4
 800d9bc:	3304      	addeq	r3, #4
 800d9be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d9c2:	bf04      	itt	eq
 800d9c4:	0080      	lsleq	r0, r0, #2
 800d9c6:	3302      	addeq	r3, #2
 800d9c8:	2800      	cmp	r0, #0
 800d9ca:	db05      	blt.n	800d9d8 <__hi0bits+0x38>
 800d9cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d9d0:	f103 0301 	add.w	r3, r3, #1
 800d9d4:	bf08      	it	eq
 800d9d6:	2320      	moveq	r3, #32
 800d9d8:	4618      	mov	r0, r3
 800d9da:	4770      	bx	lr
 800d9dc:	2300      	movs	r3, #0
 800d9de:	e7e4      	b.n	800d9aa <__hi0bits+0xa>

0800d9e0 <__lo0bits>:
 800d9e0:	6803      	ldr	r3, [r0, #0]
 800d9e2:	f013 0207 	ands.w	r2, r3, #7
 800d9e6:	4601      	mov	r1, r0
 800d9e8:	d00b      	beq.n	800da02 <__lo0bits+0x22>
 800d9ea:	07da      	lsls	r2, r3, #31
 800d9ec:	d423      	bmi.n	800da36 <__lo0bits+0x56>
 800d9ee:	0798      	lsls	r0, r3, #30
 800d9f0:	bf49      	itett	mi
 800d9f2:	085b      	lsrmi	r3, r3, #1
 800d9f4:	089b      	lsrpl	r3, r3, #2
 800d9f6:	2001      	movmi	r0, #1
 800d9f8:	600b      	strmi	r3, [r1, #0]
 800d9fa:	bf5c      	itt	pl
 800d9fc:	600b      	strpl	r3, [r1, #0]
 800d9fe:	2002      	movpl	r0, #2
 800da00:	4770      	bx	lr
 800da02:	b298      	uxth	r0, r3
 800da04:	b9a8      	cbnz	r0, 800da32 <__lo0bits+0x52>
 800da06:	0c1b      	lsrs	r3, r3, #16
 800da08:	2010      	movs	r0, #16
 800da0a:	b2da      	uxtb	r2, r3
 800da0c:	b90a      	cbnz	r2, 800da12 <__lo0bits+0x32>
 800da0e:	3008      	adds	r0, #8
 800da10:	0a1b      	lsrs	r3, r3, #8
 800da12:	071a      	lsls	r2, r3, #28
 800da14:	bf04      	itt	eq
 800da16:	091b      	lsreq	r3, r3, #4
 800da18:	3004      	addeq	r0, #4
 800da1a:	079a      	lsls	r2, r3, #30
 800da1c:	bf04      	itt	eq
 800da1e:	089b      	lsreq	r3, r3, #2
 800da20:	3002      	addeq	r0, #2
 800da22:	07da      	lsls	r2, r3, #31
 800da24:	d403      	bmi.n	800da2e <__lo0bits+0x4e>
 800da26:	085b      	lsrs	r3, r3, #1
 800da28:	f100 0001 	add.w	r0, r0, #1
 800da2c:	d005      	beq.n	800da3a <__lo0bits+0x5a>
 800da2e:	600b      	str	r3, [r1, #0]
 800da30:	4770      	bx	lr
 800da32:	4610      	mov	r0, r2
 800da34:	e7e9      	b.n	800da0a <__lo0bits+0x2a>
 800da36:	2000      	movs	r0, #0
 800da38:	4770      	bx	lr
 800da3a:	2020      	movs	r0, #32
 800da3c:	4770      	bx	lr
	...

0800da40 <__i2b>:
 800da40:	b510      	push	{r4, lr}
 800da42:	460c      	mov	r4, r1
 800da44:	2101      	movs	r1, #1
 800da46:	f7ff ff03 	bl	800d850 <_Balloc>
 800da4a:	4602      	mov	r2, r0
 800da4c:	b928      	cbnz	r0, 800da5a <__i2b+0x1a>
 800da4e:	4b05      	ldr	r3, [pc, #20]	; (800da64 <__i2b+0x24>)
 800da50:	4805      	ldr	r0, [pc, #20]	; (800da68 <__i2b+0x28>)
 800da52:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da56:	f000 fce1 	bl	800e41c <__assert_func>
 800da5a:	2301      	movs	r3, #1
 800da5c:	6144      	str	r4, [r0, #20]
 800da5e:	6103      	str	r3, [r0, #16]
 800da60:	bd10      	pop	{r4, pc}
 800da62:	bf00      	nop
 800da64:	0800ff3f 	.word	0x0800ff3f
 800da68:	0800ff50 	.word	0x0800ff50

0800da6c <__multiply>:
 800da6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da70:	4691      	mov	r9, r2
 800da72:	690a      	ldr	r2, [r1, #16]
 800da74:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da78:	429a      	cmp	r2, r3
 800da7a:	bfb8      	it	lt
 800da7c:	460b      	movlt	r3, r1
 800da7e:	460c      	mov	r4, r1
 800da80:	bfbc      	itt	lt
 800da82:	464c      	movlt	r4, r9
 800da84:	4699      	movlt	r9, r3
 800da86:	6927      	ldr	r7, [r4, #16]
 800da88:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da8c:	68a3      	ldr	r3, [r4, #8]
 800da8e:	6861      	ldr	r1, [r4, #4]
 800da90:	eb07 060a 	add.w	r6, r7, sl
 800da94:	42b3      	cmp	r3, r6
 800da96:	b085      	sub	sp, #20
 800da98:	bfb8      	it	lt
 800da9a:	3101      	addlt	r1, #1
 800da9c:	f7ff fed8 	bl	800d850 <_Balloc>
 800daa0:	b930      	cbnz	r0, 800dab0 <__multiply+0x44>
 800daa2:	4602      	mov	r2, r0
 800daa4:	4b44      	ldr	r3, [pc, #272]	; (800dbb8 <__multiply+0x14c>)
 800daa6:	4845      	ldr	r0, [pc, #276]	; (800dbbc <__multiply+0x150>)
 800daa8:	f240 115d 	movw	r1, #349	; 0x15d
 800daac:	f000 fcb6 	bl	800e41c <__assert_func>
 800dab0:	f100 0514 	add.w	r5, r0, #20
 800dab4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dab8:	462b      	mov	r3, r5
 800daba:	2200      	movs	r2, #0
 800dabc:	4543      	cmp	r3, r8
 800dabe:	d321      	bcc.n	800db04 <__multiply+0x98>
 800dac0:	f104 0314 	add.w	r3, r4, #20
 800dac4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dac8:	f109 0314 	add.w	r3, r9, #20
 800dacc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dad0:	9202      	str	r2, [sp, #8]
 800dad2:	1b3a      	subs	r2, r7, r4
 800dad4:	3a15      	subs	r2, #21
 800dad6:	f022 0203 	bic.w	r2, r2, #3
 800dada:	3204      	adds	r2, #4
 800dadc:	f104 0115 	add.w	r1, r4, #21
 800dae0:	428f      	cmp	r7, r1
 800dae2:	bf38      	it	cc
 800dae4:	2204      	movcc	r2, #4
 800dae6:	9201      	str	r2, [sp, #4]
 800dae8:	9a02      	ldr	r2, [sp, #8]
 800daea:	9303      	str	r3, [sp, #12]
 800daec:	429a      	cmp	r2, r3
 800daee:	d80c      	bhi.n	800db0a <__multiply+0x9e>
 800daf0:	2e00      	cmp	r6, #0
 800daf2:	dd03      	ble.n	800dafc <__multiply+0x90>
 800daf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d05a      	beq.n	800dbb2 <__multiply+0x146>
 800dafc:	6106      	str	r6, [r0, #16]
 800dafe:	b005      	add	sp, #20
 800db00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	f843 2b04 	str.w	r2, [r3], #4
 800db08:	e7d8      	b.n	800dabc <__multiply+0x50>
 800db0a:	f8b3 a000 	ldrh.w	sl, [r3]
 800db0e:	f1ba 0f00 	cmp.w	sl, #0
 800db12:	d024      	beq.n	800db5e <__multiply+0xf2>
 800db14:	f104 0e14 	add.w	lr, r4, #20
 800db18:	46a9      	mov	r9, r5
 800db1a:	f04f 0c00 	mov.w	ip, #0
 800db1e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db22:	f8d9 1000 	ldr.w	r1, [r9]
 800db26:	fa1f fb82 	uxth.w	fp, r2
 800db2a:	b289      	uxth	r1, r1
 800db2c:	fb0a 110b 	mla	r1, sl, fp, r1
 800db30:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db34:	f8d9 2000 	ldr.w	r2, [r9]
 800db38:	4461      	add	r1, ip
 800db3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db3e:	fb0a c20b 	mla	r2, sl, fp, ip
 800db42:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db46:	b289      	uxth	r1, r1
 800db48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db4c:	4577      	cmp	r7, lr
 800db4e:	f849 1b04 	str.w	r1, [r9], #4
 800db52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db56:	d8e2      	bhi.n	800db1e <__multiply+0xb2>
 800db58:	9a01      	ldr	r2, [sp, #4]
 800db5a:	f845 c002 	str.w	ip, [r5, r2]
 800db5e:	9a03      	ldr	r2, [sp, #12]
 800db60:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db64:	3304      	adds	r3, #4
 800db66:	f1b9 0f00 	cmp.w	r9, #0
 800db6a:	d020      	beq.n	800dbae <__multiply+0x142>
 800db6c:	6829      	ldr	r1, [r5, #0]
 800db6e:	f104 0c14 	add.w	ip, r4, #20
 800db72:	46ae      	mov	lr, r5
 800db74:	f04f 0a00 	mov.w	sl, #0
 800db78:	f8bc b000 	ldrh.w	fp, [ip]
 800db7c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db80:	fb09 220b 	mla	r2, r9, fp, r2
 800db84:	4492      	add	sl, r2
 800db86:	b289      	uxth	r1, r1
 800db88:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db8c:	f84e 1b04 	str.w	r1, [lr], #4
 800db90:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db94:	f8be 1000 	ldrh.w	r1, [lr]
 800db98:	0c12      	lsrs	r2, r2, #16
 800db9a:	fb09 1102 	mla	r1, r9, r2, r1
 800db9e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dba2:	4567      	cmp	r7, ip
 800dba4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dba8:	d8e6      	bhi.n	800db78 <__multiply+0x10c>
 800dbaa:	9a01      	ldr	r2, [sp, #4]
 800dbac:	50a9      	str	r1, [r5, r2]
 800dbae:	3504      	adds	r5, #4
 800dbb0:	e79a      	b.n	800dae8 <__multiply+0x7c>
 800dbb2:	3e01      	subs	r6, #1
 800dbb4:	e79c      	b.n	800daf0 <__multiply+0x84>
 800dbb6:	bf00      	nop
 800dbb8:	0800ff3f 	.word	0x0800ff3f
 800dbbc:	0800ff50 	.word	0x0800ff50

0800dbc0 <__pow5mult>:
 800dbc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbc4:	4615      	mov	r5, r2
 800dbc6:	f012 0203 	ands.w	r2, r2, #3
 800dbca:	4606      	mov	r6, r0
 800dbcc:	460f      	mov	r7, r1
 800dbce:	d007      	beq.n	800dbe0 <__pow5mult+0x20>
 800dbd0:	4c25      	ldr	r4, [pc, #148]	; (800dc68 <__pow5mult+0xa8>)
 800dbd2:	3a01      	subs	r2, #1
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dbda:	f7ff fe9b 	bl	800d914 <__multadd>
 800dbde:	4607      	mov	r7, r0
 800dbe0:	10ad      	asrs	r5, r5, #2
 800dbe2:	d03d      	beq.n	800dc60 <__pow5mult+0xa0>
 800dbe4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dbe6:	b97c      	cbnz	r4, 800dc08 <__pow5mult+0x48>
 800dbe8:	2010      	movs	r0, #16
 800dbea:	f7ff fe1b 	bl	800d824 <malloc>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	6270      	str	r0, [r6, #36]	; 0x24
 800dbf2:	b928      	cbnz	r0, 800dc00 <__pow5mult+0x40>
 800dbf4:	4b1d      	ldr	r3, [pc, #116]	; (800dc6c <__pow5mult+0xac>)
 800dbf6:	481e      	ldr	r0, [pc, #120]	; (800dc70 <__pow5mult+0xb0>)
 800dbf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dbfc:	f000 fc0e 	bl	800e41c <__assert_func>
 800dc00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dc04:	6004      	str	r4, [r0, #0]
 800dc06:	60c4      	str	r4, [r0, #12]
 800dc08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dc0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc10:	b94c      	cbnz	r4, 800dc26 <__pow5mult+0x66>
 800dc12:	f240 2171 	movw	r1, #625	; 0x271
 800dc16:	4630      	mov	r0, r6
 800dc18:	f7ff ff12 	bl	800da40 <__i2b>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc22:	4604      	mov	r4, r0
 800dc24:	6003      	str	r3, [r0, #0]
 800dc26:	f04f 0900 	mov.w	r9, #0
 800dc2a:	07eb      	lsls	r3, r5, #31
 800dc2c:	d50a      	bpl.n	800dc44 <__pow5mult+0x84>
 800dc2e:	4639      	mov	r1, r7
 800dc30:	4622      	mov	r2, r4
 800dc32:	4630      	mov	r0, r6
 800dc34:	f7ff ff1a 	bl	800da6c <__multiply>
 800dc38:	4639      	mov	r1, r7
 800dc3a:	4680      	mov	r8, r0
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	f7ff fe47 	bl	800d8d0 <_Bfree>
 800dc42:	4647      	mov	r7, r8
 800dc44:	106d      	asrs	r5, r5, #1
 800dc46:	d00b      	beq.n	800dc60 <__pow5mult+0xa0>
 800dc48:	6820      	ldr	r0, [r4, #0]
 800dc4a:	b938      	cbnz	r0, 800dc5c <__pow5mult+0x9c>
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4630      	mov	r0, r6
 800dc52:	f7ff ff0b 	bl	800da6c <__multiply>
 800dc56:	6020      	str	r0, [r4, #0]
 800dc58:	f8c0 9000 	str.w	r9, [r0]
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	e7e4      	b.n	800dc2a <__pow5mult+0x6a>
 800dc60:	4638      	mov	r0, r7
 800dc62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc66:	bf00      	nop
 800dc68:	080100a0 	.word	0x080100a0
 800dc6c:	0800fecd 	.word	0x0800fecd
 800dc70:	0800ff50 	.word	0x0800ff50

0800dc74 <__lshift>:
 800dc74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc78:	460c      	mov	r4, r1
 800dc7a:	6849      	ldr	r1, [r1, #4]
 800dc7c:	6923      	ldr	r3, [r4, #16]
 800dc7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc82:	68a3      	ldr	r3, [r4, #8]
 800dc84:	4607      	mov	r7, r0
 800dc86:	4691      	mov	r9, r2
 800dc88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc8c:	f108 0601 	add.w	r6, r8, #1
 800dc90:	42b3      	cmp	r3, r6
 800dc92:	db0b      	blt.n	800dcac <__lshift+0x38>
 800dc94:	4638      	mov	r0, r7
 800dc96:	f7ff fddb 	bl	800d850 <_Balloc>
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	b948      	cbnz	r0, 800dcb2 <__lshift+0x3e>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	4b2a      	ldr	r3, [pc, #168]	; (800dd4c <__lshift+0xd8>)
 800dca2:	482b      	ldr	r0, [pc, #172]	; (800dd50 <__lshift+0xdc>)
 800dca4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dca8:	f000 fbb8 	bl	800e41c <__assert_func>
 800dcac:	3101      	adds	r1, #1
 800dcae:	005b      	lsls	r3, r3, #1
 800dcb0:	e7ee      	b.n	800dc90 <__lshift+0x1c>
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	f100 0114 	add.w	r1, r0, #20
 800dcb8:	f100 0210 	add.w	r2, r0, #16
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	4553      	cmp	r3, sl
 800dcc0:	db37      	blt.n	800dd32 <__lshift+0xbe>
 800dcc2:	6920      	ldr	r0, [r4, #16]
 800dcc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dcc8:	f104 0314 	add.w	r3, r4, #20
 800dccc:	f019 091f 	ands.w	r9, r9, #31
 800dcd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dcd4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dcd8:	d02f      	beq.n	800dd3a <__lshift+0xc6>
 800dcda:	f1c9 0e20 	rsb	lr, r9, #32
 800dcde:	468a      	mov	sl, r1
 800dce0:	f04f 0c00 	mov.w	ip, #0
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	fa02 f209 	lsl.w	r2, r2, r9
 800dcea:	ea42 020c 	orr.w	r2, r2, ip
 800dcee:	f84a 2b04 	str.w	r2, [sl], #4
 800dcf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcf6:	4298      	cmp	r0, r3
 800dcf8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dcfc:	d8f2      	bhi.n	800dce4 <__lshift+0x70>
 800dcfe:	1b03      	subs	r3, r0, r4
 800dd00:	3b15      	subs	r3, #21
 800dd02:	f023 0303 	bic.w	r3, r3, #3
 800dd06:	3304      	adds	r3, #4
 800dd08:	f104 0215 	add.w	r2, r4, #21
 800dd0c:	4290      	cmp	r0, r2
 800dd0e:	bf38      	it	cc
 800dd10:	2304      	movcc	r3, #4
 800dd12:	f841 c003 	str.w	ip, [r1, r3]
 800dd16:	f1bc 0f00 	cmp.w	ip, #0
 800dd1a:	d001      	beq.n	800dd20 <__lshift+0xac>
 800dd1c:	f108 0602 	add.w	r6, r8, #2
 800dd20:	3e01      	subs	r6, #1
 800dd22:	4638      	mov	r0, r7
 800dd24:	612e      	str	r6, [r5, #16]
 800dd26:	4621      	mov	r1, r4
 800dd28:	f7ff fdd2 	bl	800d8d0 <_Bfree>
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd32:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd36:	3301      	adds	r3, #1
 800dd38:	e7c1      	b.n	800dcbe <__lshift+0x4a>
 800dd3a:	3904      	subs	r1, #4
 800dd3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd40:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd44:	4298      	cmp	r0, r3
 800dd46:	d8f9      	bhi.n	800dd3c <__lshift+0xc8>
 800dd48:	e7ea      	b.n	800dd20 <__lshift+0xac>
 800dd4a:	bf00      	nop
 800dd4c:	0800ff3f 	.word	0x0800ff3f
 800dd50:	0800ff50 	.word	0x0800ff50

0800dd54 <__mcmp>:
 800dd54:	b530      	push	{r4, r5, lr}
 800dd56:	6902      	ldr	r2, [r0, #16]
 800dd58:	690c      	ldr	r4, [r1, #16]
 800dd5a:	1b12      	subs	r2, r2, r4
 800dd5c:	d10e      	bne.n	800dd7c <__mcmp+0x28>
 800dd5e:	f100 0314 	add.w	r3, r0, #20
 800dd62:	3114      	adds	r1, #20
 800dd64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd74:	42a5      	cmp	r5, r4
 800dd76:	d003      	beq.n	800dd80 <__mcmp+0x2c>
 800dd78:	d305      	bcc.n	800dd86 <__mcmp+0x32>
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	4610      	mov	r0, r2
 800dd7e:	bd30      	pop	{r4, r5, pc}
 800dd80:	4283      	cmp	r3, r0
 800dd82:	d3f3      	bcc.n	800dd6c <__mcmp+0x18>
 800dd84:	e7fa      	b.n	800dd7c <__mcmp+0x28>
 800dd86:	f04f 32ff 	mov.w	r2, #4294967295
 800dd8a:	e7f7      	b.n	800dd7c <__mcmp+0x28>

0800dd8c <__mdiff>:
 800dd8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	460c      	mov	r4, r1
 800dd92:	4606      	mov	r6, r0
 800dd94:	4611      	mov	r1, r2
 800dd96:	4620      	mov	r0, r4
 800dd98:	4690      	mov	r8, r2
 800dd9a:	f7ff ffdb 	bl	800dd54 <__mcmp>
 800dd9e:	1e05      	subs	r5, r0, #0
 800dda0:	d110      	bne.n	800ddc4 <__mdiff+0x38>
 800dda2:	4629      	mov	r1, r5
 800dda4:	4630      	mov	r0, r6
 800dda6:	f7ff fd53 	bl	800d850 <_Balloc>
 800ddaa:	b930      	cbnz	r0, 800ddba <__mdiff+0x2e>
 800ddac:	4b3a      	ldr	r3, [pc, #232]	; (800de98 <__mdiff+0x10c>)
 800ddae:	4602      	mov	r2, r0
 800ddb0:	f240 2132 	movw	r1, #562	; 0x232
 800ddb4:	4839      	ldr	r0, [pc, #228]	; (800de9c <__mdiff+0x110>)
 800ddb6:	f000 fb31 	bl	800e41c <__assert_func>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddc4:	bfa4      	itt	ge
 800ddc6:	4643      	movge	r3, r8
 800ddc8:	46a0      	movge	r8, r4
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ddd0:	bfa6      	itte	ge
 800ddd2:	461c      	movge	r4, r3
 800ddd4:	2500      	movge	r5, #0
 800ddd6:	2501      	movlt	r5, #1
 800ddd8:	f7ff fd3a 	bl	800d850 <_Balloc>
 800dddc:	b920      	cbnz	r0, 800dde8 <__mdiff+0x5c>
 800ddde:	4b2e      	ldr	r3, [pc, #184]	; (800de98 <__mdiff+0x10c>)
 800dde0:	4602      	mov	r2, r0
 800dde2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800dde6:	e7e5      	b.n	800ddb4 <__mdiff+0x28>
 800dde8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ddec:	6926      	ldr	r6, [r4, #16]
 800ddee:	60c5      	str	r5, [r0, #12]
 800ddf0:	f104 0914 	add.w	r9, r4, #20
 800ddf4:	f108 0514 	add.w	r5, r8, #20
 800ddf8:	f100 0e14 	add.w	lr, r0, #20
 800ddfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800de00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800de04:	f108 0210 	add.w	r2, r8, #16
 800de08:	46f2      	mov	sl, lr
 800de0a:	2100      	movs	r1, #0
 800de0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800de10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de14:	fa1f f883 	uxth.w	r8, r3
 800de18:	fa11 f18b 	uxtah	r1, r1, fp
 800de1c:	0c1b      	lsrs	r3, r3, #16
 800de1e:	eba1 0808 	sub.w	r8, r1, r8
 800de22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de2a:	fa1f f888 	uxth.w	r8, r8
 800de2e:	1419      	asrs	r1, r3, #16
 800de30:	454e      	cmp	r6, r9
 800de32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de36:	f84a 3b04 	str.w	r3, [sl], #4
 800de3a:	d8e7      	bhi.n	800de0c <__mdiff+0x80>
 800de3c:	1b33      	subs	r3, r6, r4
 800de3e:	3b15      	subs	r3, #21
 800de40:	f023 0303 	bic.w	r3, r3, #3
 800de44:	3304      	adds	r3, #4
 800de46:	3415      	adds	r4, #21
 800de48:	42a6      	cmp	r6, r4
 800de4a:	bf38      	it	cc
 800de4c:	2304      	movcc	r3, #4
 800de4e:	441d      	add	r5, r3
 800de50:	4473      	add	r3, lr
 800de52:	469e      	mov	lr, r3
 800de54:	462e      	mov	r6, r5
 800de56:	4566      	cmp	r6, ip
 800de58:	d30e      	bcc.n	800de78 <__mdiff+0xec>
 800de5a:	f10c 0203 	add.w	r2, ip, #3
 800de5e:	1b52      	subs	r2, r2, r5
 800de60:	f022 0203 	bic.w	r2, r2, #3
 800de64:	3d03      	subs	r5, #3
 800de66:	45ac      	cmp	ip, r5
 800de68:	bf38      	it	cc
 800de6a:	2200      	movcc	r2, #0
 800de6c:	441a      	add	r2, r3
 800de6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800de72:	b17b      	cbz	r3, 800de94 <__mdiff+0x108>
 800de74:	6107      	str	r7, [r0, #16]
 800de76:	e7a3      	b.n	800ddc0 <__mdiff+0x34>
 800de78:	f856 8b04 	ldr.w	r8, [r6], #4
 800de7c:	fa11 f288 	uxtah	r2, r1, r8
 800de80:	1414      	asrs	r4, r2, #16
 800de82:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de86:	b292      	uxth	r2, r2
 800de88:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de8c:	f84e 2b04 	str.w	r2, [lr], #4
 800de90:	1421      	asrs	r1, r4, #16
 800de92:	e7e0      	b.n	800de56 <__mdiff+0xca>
 800de94:	3f01      	subs	r7, #1
 800de96:	e7ea      	b.n	800de6e <__mdiff+0xe2>
 800de98:	0800ff3f 	.word	0x0800ff3f
 800de9c:	0800ff50 	.word	0x0800ff50

0800dea0 <__d2b>:
 800dea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dea4:	4689      	mov	r9, r1
 800dea6:	2101      	movs	r1, #1
 800dea8:	ec57 6b10 	vmov	r6, r7, d0
 800deac:	4690      	mov	r8, r2
 800deae:	f7ff fccf 	bl	800d850 <_Balloc>
 800deb2:	4604      	mov	r4, r0
 800deb4:	b930      	cbnz	r0, 800dec4 <__d2b+0x24>
 800deb6:	4602      	mov	r2, r0
 800deb8:	4b25      	ldr	r3, [pc, #148]	; (800df50 <__d2b+0xb0>)
 800deba:	4826      	ldr	r0, [pc, #152]	; (800df54 <__d2b+0xb4>)
 800debc:	f240 310a 	movw	r1, #778	; 0x30a
 800dec0:	f000 faac 	bl	800e41c <__assert_func>
 800dec4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800dec8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800decc:	bb35      	cbnz	r5, 800df1c <__d2b+0x7c>
 800dece:	2e00      	cmp	r6, #0
 800ded0:	9301      	str	r3, [sp, #4]
 800ded2:	d028      	beq.n	800df26 <__d2b+0x86>
 800ded4:	4668      	mov	r0, sp
 800ded6:	9600      	str	r6, [sp, #0]
 800ded8:	f7ff fd82 	bl	800d9e0 <__lo0bits>
 800dedc:	9900      	ldr	r1, [sp, #0]
 800dede:	b300      	cbz	r0, 800df22 <__d2b+0x82>
 800dee0:	9a01      	ldr	r2, [sp, #4]
 800dee2:	f1c0 0320 	rsb	r3, r0, #32
 800dee6:	fa02 f303 	lsl.w	r3, r2, r3
 800deea:	430b      	orrs	r3, r1
 800deec:	40c2      	lsrs	r2, r0
 800deee:	6163      	str	r3, [r4, #20]
 800def0:	9201      	str	r2, [sp, #4]
 800def2:	9b01      	ldr	r3, [sp, #4]
 800def4:	61a3      	str	r3, [r4, #24]
 800def6:	2b00      	cmp	r3, #0
 800def8:	bf14      	ite	ne
 800defa:	2202      	movne	r2, #2
 800defc:	2201      	moveq	r2, #1
 800defe:	6122      	str	r2, [r4, #16]
 800df00:	b1d5      	cbz	r5, 800df38 <__d2b+0x98>
 800df02:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800df06:	4405      	add	r5, r0
 800df08:	f8c9 5000 	str.w	r5, [r9]
 800df0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df10:	f8c8 0000 	str.w	r0, [r8]
 800df14:	4620      	mov	r0, r4
 800df16:	b003      	add	sp, #12
 800df18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df20:	e7d5      	b.n	800dece <__d2b+0x2e>
 800df22:	6161      	str	r1, [r4, #20]
 800df24:	e7e5      	b.n	800def2 <__d2b+0x52>
 800df26:	a801      	add	r0, sp, #4
 800df28:	f7ff fd5a 	bl	800d9e0 <__lo0bits>
 800df2c:	9b01      	ldr	r3, [sp, #4]
 800df2e:	6163      	str	r3, [r4, #20]
 800df30:	2201      	movs	r2, #1
 800df32:	6122      	str	r2, [r4, #16]
 800df34:	3020      	adds	r0, #32
 800df36:	e7e3      	b.n	800df00 <__d2b+0x60>
 800df38:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df40:	f8c9 0000 	str.w	r0, [r9]
 800df44:	6918      	ldr	r0, [r3, #16]
 800df46:	f7ff fd2b 	bl	800d9a0 <__hi0bits>
 800df4a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df4e:	e7df      	b.n	800df10 <__d2b+0x70>
 800df50:	0800ff3f 	.word	0x0800ff3f
 800df54:	0800ff50 	.word	0x0800ff50

0800df58 <_calloc_r>:
 800df58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df5a:	fba1 2402 	umull	r2, r4, r1, r2
 800df5e:	b94c      	cbnz	r4, 800df74 <_calloc_r+0x1c>
 800df60:	4611      	mov	r1, r2
 800df62:	9201      	str	r2, [sp, #4]
 800df64:	f000 f87a 	bl	800e05c <_malloc_r>
 800df68:	9a01      	ldr	r2, [sp, #4]
 800df6a:	4605      	mov	r5, r0
 800df6c:	b930      	cbnz	r0, 800df7c <_calloc_r+0x24>
 800df6e:	4628      	mov	r0, r5
 800df70:	b003      	add	sp, #12
 800df72:	bd30      	pop	{r4, r5, pc}
 800df74:	220c      	movs	r2, #12
 800df76:	6002      	str	r2, [r0, #0]
 800df78:	2500      	movs	r5, #0
 800df7a:	e7f8      	b.n	800df6e <_calloc_r+0x16>
 800df7c:	4621      	mov	r1, r4
 800df7e:	f7fe f941 	bl	800c204 <memset>
 800df82:	e7f4      	b.n	800df6e <_calloc_r+0x16>

0800df84 <_free_r>:
 800df84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df86:	2900      	cmp	r1, #0
 800df88:	d044      	beq.n	800e014 <_free_r+0x90>
 800df8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df8e:	9001      	str	r0, [sp, #4]
 800df90:	2b00      	cmp	r3, #0
 800df92:	f1a1 0404 	sub.w	r4, r1, #4
 800df96:	bfb8      	it	lt
 800df98:	18e4      	addlt	r4, r4, r3
 800df9a:	f000 fa9b 	bl	800e4d4 <__malloc_lock>
 800df9e:	4a1e      	ldr	r2, [pc, #120]	; (800e018 <_free_r+0x94>)
 800dfa0:	9801      	ldr	r0, [sp, #4]
 800dfa2:	6813      	ldr	r3, [r2, #0]
 800dfa4:	b933      	cbnz	r3, 800dfb4 <_free_r+0x30>
 800dfa6:	6063      	str	r3, [r4, #4]
 800dfa8:	6014      	str	r4, [r2, #0]
 800dfaa:	b003      	add	sp, #12
 800dfac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfb0:	f000 ba96 	b.w	800e4e0 <__malloc_unlock>
 800dfb4:	42a3      	cmp	r3, r4
 800dfb6:	d908      	bls.n	800dfca <_free_r+0x46>
 800dfb8:	6825      	ldr	r5, [r4, #0]
 800dfba:	1961      	adds	r1, r4, r5
 800dfbc:	428b      	cmp	r3, r1
 800dfbe:	bf01      	itttt	eq
 800dfc0:	6819      	ldreq	r1, [r3, #0]
 800dfc2:	685b      	ldreq	r3, [r3, #4]
 800dfc4:	1949      	addeq	r1, r1, r5
 800dfc6:	6021      	streq	r1, [r4, #0]
 800dfc8:	e7ed      	b.n	800dfa6 <_free_r+0x22>
 800dfca:	461a      	mov	r2, r3
 800dfcc:	685b      	ldr	r3, [r3, #4]
 800dfce:	b10b      	cbz	r3, 800dfd4 <_free_r+0x50>
 800dfd0:	42a3      	cmp	r3, r4
 800dfd2:	d9fa      	bls.n	800dfca <_free_r+0x46>
 800dfd4:	6811      	ldr	r1, [r2, #0]
 800dfd6:	1855      	adds	r5, r2, r1
 800dfd8:	42a5      	cmp	r5, r4
 800dfda:	d10b      	bne.n	800dff4 <_free_r+0x70>
 800dfdc:	6824      	ldr	r4, [r4, #0]
 800dfde:	4421      	add	r1, r4
 800dfe0:	1854      	adds	r4, r2, r1
 800dfe2:	42a3      	cmp	r3, r4
 800dfe4:	6011      	str	r1, [r2, #0]
 800dfe6:	d1e0      	bne.n	800dfaa <_free_r+0x26>
 800dfe8:	681c      	ldr	r4, [r3, #0]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	6053      	str	r3, [r2, #4]
 800dfee:	4421      	add	r1, r4
 800dff0:	6011      	str	r1, [r2, #0]
 800dff2:	e7da      	b.n	800dfaa <_free_r+0x26>
 800dff4:	d902      	bls.n	800dffc <_free_r+0x78>
 800dff6:	230c      	movs	r3, #12
 800dff8:	6003      	str	r3, [r0, #0]
 800dffa:	e7d6      	b.n	800dfaa <_free_r+0x26>
 800dffc:	6825      	ldr	r5, [r4, #0]
 800dffe:	1961      	adds	r1, r4, r5
 800e000:	428b      	cmp	r3, r1
 800e002:	bf04      	itt	eq
 800e004:	6819      	ldreq	r1, [r3, #0]
 800e006:	685b      	ldreq	r3, [r3, #4]
 800e008:	6063      	str	r3, [r4, #4]
 800e00a:	bf04      	itt	eq
 800e00c:	1949      	addeq	r1, r1, r5
 800e00e:	6021      	streq	r1, [r4, #0]
 800e010:	6054      	str	r4, [r2, #4]
 800e012:	e7ca      	b.n	800dfaa <_free_r+0x26>
 800e014:	b003      	add	sp, #12
 800e016:	bd30      	pop	{r4, r5, pc}
 800e018:	20000768 	.word	0x20000768

0800e01c <sbrk_aligned>:
 800e01c:	b570      	push	{r4, r5, r6, lr}
 800e01e:	4e0e      	ldr	r6, [pc, #56]	; (800e058 <sbrk_aligned+0x3c>)
 800e020:	460c      	mov	r4, r1
 800e022:	6831      	ldr	r1, [r6, #0]
 800e024:	4605      	mov	r5, r0
 800e026:	b911      	cbnz	r1, 800e02e <sbrk_aligned+0x12>
 800e028:	f000 f9e8 	bl	800e3fc <_sbrk_r>
 800e02c:	6030      	str	r0, [r6, #0]
 800e02e:	4621      	mov	r1, r4
 800e030:	4628      	mov	r0, r5
 800e032:	f000 f9e3 	bl	800e3fc <_sbrk_r>
 800e036:	1c43      	adds	r3, r0, #1
 800e038:	d00a      	beq.n	800e050 <sbrk_aligned+0x34>
 800e03a:	1cc4      	adds	r4, r0, #3
 800e03c:	f024 0403 	bic.w	r4, r4, #3
 800e040:	42a0      	cmp	r0, r4
 800e042:	d007      	beq.n	800e054 <sbrk_aligned+0x38>
 800e044:	1a21      	subs	r1, r4, r0
 800e046:	4628      	mov	r0, r5
 800e048:	f000 f9d8 	bl	800e3fc <_sbrk_r>
 800e04c:	3001      	adds	r0, #1
 800e04e:	d101      	bne.n	800e054 <sbrk_aligned+0x38>
 800e050:	f04f 34ff 	mov.w	r4, #4294967295
 800e054:	4620      	mov	r0, r4
 800e056:	bd70      	pop	{r4, r5, r6, pc}
 800e058:	2000076c 	.word	0x2000076c

0800e05c <_malloc_r>:
 800e05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e060:	1ccd      	adds	r5, r1, #3
 800e062:	f025 0503 	bic.w	r5, r5, #3
 800e066:	3508      	adds	r5, #8
 800e068:	2d0c      	cmp	r5, #12
 800e06a:	bf38      	it	cc
 800e06c:	250c      	movcc	r5, #12
 800e06e:	2d00      	cmp	r5, #0
 800e070:	4607      	mov	r7, r0
 800e072:	db01      	blt.n	800e078 <_malloc_r+0x1c>
 800e074:	42a9      	cmp	r1, r5
 800e076:	d905      	bls.n	800e084 <_malloc_r+0x28>
 800e078:	230c      	movs	r3, #12
 800e07a:	603b      	str	r3, [r7, #0]
 800e07c:	2600      	movs	r6, #0
 800e07e:	4630      	mov	r0, r6
 800e080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e084:	4e2e      	ldr	r6, [pc, #184]	; (800e140 <_malloc_r+0xe4>)
 800e086:	f000 fa25 	bl	800e4d4 <__malloc_lock>
 800e08a:	6833      	ldr	r3, [r6, #0]
 800e08c:	461c      	mov	r4, r3
 800e08e:	bb34      	cbnz	r4, 800e0de <_malloc_r+0x82>
 800e090:	4629      	mov	r1, r5
 800e092:	4638      	mov	r0, r7
 800e094:	f7ff ffc2 	bl	800e01c <sbrk_aligned>
 800e098:	1c43      	adds	r3, r0, #1
 800e09a:	4604      	mov	r4, r0
 800e09c:	d14d      	bne.n	800e13a <_malloc_r+0xde>
 800e09e:	6834      	ldr	r4, [r6, #0]
 800e0a0:	4626      	mov	r6, r4
 800e0a2:	2e00      	cmp	r6, #0
 800e0a4:	d140      	bne.n	800e128 <_malloc_r+0xcc>
 800e0a6:	6823      	ldr	r3, [r4, #0]
 800e0a8:	4631      	mov	r1, r6
 800e0aa:	4638      	mov	r0, r7
 800e0ac:	eb04 0803 	add.w	r8, r4, r3
 800e0b0:	f000 f9a4 	bl	800e3fc <_sbrk_r>
 800e0b4:	4580      	cmp	r8, r0
 800e0b6:	d13a      	bne.n	800e12e <_malloc_r+0xd2>
 800e0b8:	6821      	ldr	r1, [r4, #0]
 800e0ba:	3503      	adds	r5, #3
 800e0bc:	1a6d      	subs	r5, r5, r1
 800e0be:	f025 0503 	bic.w	r5, r5, #3
 800e0c2:	3508      	adds	r5, #8
 800e0c4:	2d0c      	cmp	r5, #12
 800e0c6:	bf38      	it	cc
 800e0c8:	250c      	movcc	r5, #12
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	4638      	mov	r0, r7
 800e0ce:	f7ff ffa5 	bl	800e01c <sbrk_aligned>
 800e0d2:	3001      	adds	r0, #1
 800e0d4:	d02b      	beq.n	800e12e <_malloc_r+0xd2>
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	442b      	add	r3, r5
 800e0da:	6023      	str	r3, [r4, #0]
 800e0dc:	e00e      	b.n	800e0fc <_malloc_r+0xa0>
 800e0de:	6822      	ldr	r2, [r4, #0]
 800e0e0:	1b52      	subs	r2, r2, r5
 800e0e2:	d41e      	bmi.n	800e122 <_malloc_r+0xc6>
 800e0e4:	2a0b      	cmp	r2, #11
 800e0e6:	d916      	bls.n	800e116 <_malloc_r+0xba>
 800e0e8:	1961      	adds	r1, r4, r5
 800e0ea:	42a3      	cmp	r3, r4
 800e0ec:	6025      	str	r5, [r4, #0]
 800e0ee:	bf18      	it	ne
 800e0f0:	6059      	strne	r1, [r3, #4]
 800e0f2:	6863      	ldr	r3, [r4, #4]
 800e0f4:	bf08      	it	eq
 800e0f6:	6031      	streq	r1, [r6, #0]
 800e0f8:	5162      	str	r2, [r4, r5]
 800e0fa:	604b      	str	r3, [r1, #4]
 800e0fc:	4638      	mov	r0, r7
 800e0fe:	f104 060b 	add.w	r6, r4, #11
 800e102:	f000 f9ed 	bl	800e4e0 <__malloc_unlock>
 800e106:	f026 0607 	bic.w	r6, r6, #7
 800e10a:	1d23      	adds	r3, r4, #4
 800e10c:	1af2      	subs	r2, r6, r3
 800e10e:	d0b6      	beq.n	800e07e <_malloc_r+0x22>
 800e110:	1b9b      	subs	r3, r3, r6
 800e112:	50a3      	str	r3, [r4, r2]
 800e114:	e7b3      	b.n	800e07e <_malloc_r+0x22>
 800e116:	6862      	ldr	r2, [r4, #4]
 800e118:	42a3      	cmp	r3, r4
 800e11a:	bf0c      	ite	eq
 800e11c:	6032      	streq	r2, [r6, #0]
 800e11e:	605a      	strne	r2, [r3, #4]
 800e120:	e7ec      	b.n	800e0fc <_malloc_r+0xa0>
 800e122:	4623      	mov	r3, r4
 800e124:	6864      	ldr	r4, [r4, #4]
 800e126:	e7b2      	b.n	800e08e <_malloc_r+0x32>
 800e128:	4634      	mov	r4, r6
 800e12a:	6876      	ldr	r6, [r6, #4]
 800e12c:	e7b9      	b.n	800e0a2 <_malloc_r+0x46>
 800e12e:	230c      	movs	r3, #12
 800e130:	603b      	str	r3, [r7, #0]
 800e132:	4638      	mov	r0, r7
 800e134:	f000 f9d4 	bl	800e4e0 <__malloc_unlock>
 800e138:	e7a1      	b.n	800e07e <_malloc_r+0x22>
 800e13a:	6025      	str	r5, [r4, #0]
 800e13c:	e7de      	b.n	800e0fc <_malloc_r+0xa0>
 800e13e:	bf00      	nop
 800e140:	20000768 	.word	0x20000768

0800e144 <__ssputs_r>:
 800e144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e148:	688e      	ldr	r6, [r1, #8]
 800e14a:	429e      	cmp	r6, r3
 800e14c:	4682      	mov	sl, r0
 800e14e:	460c      	mov	r4, r1
 800e150:	4690      	mov	r8, r2
 800e152:	461f      	mov	r7, r3
 800e154:	d838      	bhi.n	800e1c8 <__ssputs_r+0x84>
 800e156:	898a      	ldrh	r2, [r1, #12]
 800e158:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e15c:	d032      	beq.n	800e1c4 <__ssputs_r+0x80>
 800e15e:	6825      	ldr	r5, [r4, #0]
 800e160:	6909      	ldr	r1, [r1, #16]
 800e162:	eba5 0901 	sub.w	r9, r5, r1
 800e166:	6965      	ldr	r5, [r4, #20]
 800e168:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e16c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e170:	3301      	adds	r3, #1
 800e172:	444b      	add	r3, r9
 800e174:	106d      	asrs	r5, r5, #1
 800e176:	429d      	cmp	r5, r3
 800e178:	bf38      	it	cc
 800e17a:	461d      	movcc	r5, r3
 800e17c:	0553      	lsls	r3, r2, #21
 800e17e:	d531      	bpl.n	800e1e4 <__ssputs_r+0xa0>
 800e180:	4629      	mov	r1, r5
 800e182:	f7ff ff6b 	bl	800e05c <_malloc_r>
 800e186:	4606      	mov	r6, r0
 800e188:	b950      	cbnz	r0, 800e1a0 <__ssputs_r+0x5c>
 800e18a:	230c      	movs	r3, #12
 800e18c:	f8ca 3000 	str.w	r3, [sl]
 800e190:	89a3      	ldrh	r3, [r4, #12]
 800e192:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e196:	81a3      	strh	r3, [r4, #12]
 800e198:	f04f 30ff 	mov.w	r0, #4294967295
 800e19c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1a0:	6921      	ldr	r1, [r4, #16]
 800e1a2:	464a      	mov	r2, r9
 800e1a4:	f7ff fb46 	bl	800d834 <memcpy>
 800e1a8:	89a3      	ldrh	r3, [r4, #12]
 800e1aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1b2:	81a3      	strh	r3, [r4, #12]
 800e1b4:	6126      	str	r6, [r4, #16]
 800e1b6:	6165      	str	r5, [r4, #20]
 800e1b8:	444e      	add	r6, r9
 800e1ba:	eba5 0509 	sub.w	r5, r5, r9
 800e1be:	6026      	str	r6, [r4, #0]
 800e1c0:	60a5      	str	r5, [r4, #8]
 800e1c2:	463e      	mov	r6, r7
 800e1c4:	42be      	cmp	r6, r7
 800e1c6:	d900      	bls.n	800e1ca <__ssputs_r+0x86>
 800e1c8:	463e      	mov	r6, r7
 800e1ca:	6820      	ldr	r0, [r4, #0]
 800e1cc:	4632      	mov	r2, r6
 800e1ce:	4641      	mov	r1, r8
 800e1d0:	f000 f966 	bl	800e4a0 <memmove>
 800e1d4:	68a3      	ldr	r3, [r4, #8]
 800e1d6:	1b9b      	subs	r3, r3, r6
 800e1d8:	60a3      	str	r3, [r4, #8]
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	4433      	add	r3, r6
 800e1de:	6023      	str	r3, [r4, #0]
 800e1e0:	2000      	movs	r0, #0
 800e1e2:	e7db      	b.n	800e19c <__ssputs_r+0x58>
 800e1e4:	462a      	mov	r2, r5
 800e1e6:	f000 f981 	bl	800e4ec <_realloc_r>
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	2800      	cmp	r0, #0
 800e1ee:	d1e1      	bne.n	800e1b4 <__ssputs_r+0x70>
 800e1f0:	6921      	ldr	r1, [r4, #16]
 800e1f2:	4650      	mov	r0, sl
 800e1f4:	f7ff fec6 	bl	800df84 <_free_r>
 800e1f8:	e7c7      	b.n	800e18a <__ssputs_r+0x46>
	...

0800e1fc <_svfiprintf_r>:
 800e1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e200:	4698      	mov	r8, r3
 800e202:	898b      	ldrh	r3, [r1, #12]
 800e204:	061b      	lsls	r3, r3, #24
 800e206:	b09d      	sub	sp, #116	; 0x74
 800e208:	4607      	mov	r7, r0
 800e20a:	460d      	mov	r5, r1
 800e20c:	4614      	mov	r4, r2
 800e20e:	d50e      	bpl.n	800e22e <_svfiprintf_r+0x32>
 800e210:	690b      	ldr	r3, [r1, #16]
 800e212:	b963      	cbnz	r3, 800e22e <_svfiprintf_r+0x32>
 800e214:	2140      	movs	r1, #64	; 0x40
 800e216:	f7ff ff21 	bl	800e05c <_malloc_r>
 800e21a:	6028      	str	r0, [r5, #0]
 800e21c:	6128      	str	r0, [r5, #16]
 800e21e:	b920      	cbnz	r0, 800e22a <_svfiprintf_r+0x2e>
 800e220:	230c      	movs	r3, #12
 800e222:	603b      	str	r3, [r7, #0]
 800e224:	f04f 30ff 	mov.w	r0, #4294967295
 800e228:	e0d1      	b.n	800e3ce <_svfiprintf_r+0x1d2>
 800e22a:	2340      	movs	r3, #64	; 0x40
 800e22c:	616b      	str	r3, [r5, #20]
 800e22e:	2300      	movs	r3, #0
 800e230:	9309      	str	r3, [sp, #36]	; 0x24
 800e232:	2320      	movs	r3, #32
 800e234:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e238:	f8cd 800c 	str.w	r8, [sp, #12]
 800e23c:	2330      	movs	r3, #48	; 0x30
 800e23e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3e8 <_svfiprintf_r+0x1ec>
 800e242:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e246:	f04f 0901 	mov.w	r9, #1
 800e24a:	4623      	mov	r3, r4
 800e24c:	469a      	mov	sl, r3
 800e24e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e252:	b10a      	cbz	r2, 800e258 <_svfiprintf_r+0x5c>
 800e254:	2a25      	cmp	r2, #37	; 0x25
 800e256:	d1f9      	bne.n	800e24c <_svfiprintf_r+0x50>
 800e258:	ebba 0b04 	subs.w	fp, sl, r4
 800e25c:	d00b      	beq.n	800e276 <_svfiprintf_r+0x7a>
 800e25e:	465b      	mov	r3, fp
 800e260:	4622      	mov	r2, r4
 800e262:	4629      	mov	r1, r5
 800e264:	4638      	mov	r0, r7
 800e266:	f7ff ff6d 	bl	800e144 <__ssputs_r>
 800e26a:	3001      	adds	r0, #1
 800e26c:	f000 80aa 	beq.w	800e3c4 <_svfiprintf_r+0x1c8>
 800e270:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e272:	445a      	add	r2, fp
 800e274:	9209      	str	r2, [sp, #36]	; 0x24
 800e276:	f89a 3000 	ldrb.w	r3, [sl]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	f000 80a2 	beq.w	800e3c4 <_svfiprintf_r+0x1c8>
 800e280:	2300      	movs	r3, #0
 800e282:	f04f 32ff 	mov.w	r2, #4294967295
 800e286:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e28a:	f10a 0a01 	add.w	sl, sl, #1
 800e28e:	9304      	str	r3, [sp, #16]
 800e290:	9307      	str	r3, [sp, #28]
 800e292:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e296:	931a      	str	r3, [sp, #104]	; 0x68
 800e298:	4654      	mov	r4, sl
 800e29a:	2205      	movs	r2, #5
 800e29c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a0:	4851      	ldr	r0, [pc, #324]	; (800e3e8 <_svfiprintf_r+0x1ec>)
 800e2a2:	f7f1 ffc5 	bl	8000230 <memchr>
 800e2a6:	9a04      	ldr	r2, [sp, #16]
 800e2a8:	b9d8      	cbnz	r0, 800e2e2 <_svfiprintf_r+0xe6>
 800e2aa:	06d0      	lsls	r0, r2, #27
 800e2ac:	bf44      	itt	mi
 800e2ae:	2320      	movmi	r3, #32
 800e2b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b4:	0711      	lsls	r1, r2, #28
 800e2b6:	bf44      	itt	mi
 800e2b8:	232b      	movmi	r3, #43	; 0x2b
 800e2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2be:	f89a 3000 	ldrb.w	r3, [sl]
 800e2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c4:	d015      	beq.n	800e2f2 <_svfiprintf_r+0xf6>
 800e2c6:	9a07      	ldr	r2, [sp, #28]
 800e2c8:	4654      	mov	r4, sl
 800e2ca:	2000      	movs	r0, #0
 800e2cc:	f04f 0c0a 	mov.w	ip, #10
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2d6:	3b30      	subs	r3, #48	; 0x30
 800e2d8:	2b09      	cmp	r3, #9
 800e2da:	d94e      	bls.n	800e37a <_svfiprintf_r+0x17e>
 800e2dc:	b1b0      	cbz	r0, 800e30c <_svfiprintf_r+0x110>
 800e2de:	9207      	str	r2, [sp, #28]
 800e2e0:	e014      	b.n	800e30c <_svfiprintf_r+0x110>
 800e2e2:	eba0 0308 	sub.w	r3, r0, r8
 800e2e6:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ea:	4313      	orrs	r3, r2
 800e2ec:	9304      	str	r3, [sp, #16]
 800e2ee:	46a2      	mov	sl, r4
 800e2f0:	e7d2      	b.n	800e298 <_svfiprintf_r+0x9c>
 800e2f2:	9b03      	ldr	r3, [sp, #12]
 800e2f4:	1d19      	adds	r1, r3, #4
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	9103      	str	r1, [sp, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	bfbb      	ittet	lt
 800e2fe:	425b      	neglt	r3, r3
 800e300:	f042 0202 	orrlt.w	r2, r2, #2
 800e304:	9307      	strge	r3, [sp, #28]
 800e306:	9307      	strlt	r3, [sp, #28]
 800e308:	bfb8      	it	lt
 800e30a:	9204      	strlt	r2, [sp, #16]
 800e30c:	7823      	ldrb	r3, [r4, #0]
 800e30e:	2b2e      	cmp	r3, #46	; 0x2e
 800e310:	d10c      	bne.n	800e32c <_svfiprintf_r+0x130>
 800e312:	7863      	ldrb	r3, [r4, #1]
 800e314:	2b2a      	cmp	r3, #42	; 0x2a
 800e316:	d135      	bne.n	800e384 <_svfiprintf_r+0x188>
 800e318:	9b03      	ldr	r3, [sp, #12]
 800e31a:	1d1a      	adds	r2, r3, #4
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	9203      	str	r2, [sp, #12]
 800e320:	2b00      	cmp	r3, #0
 800e322:	bfb8      	it	lt
 800e324:	f04f 33ff 	movlt.w	r3, #4294967295
 800e328:	3402      	adds	r4, #2
 800e32a:	9305      	str	r3, [sp, #20]
 800e32c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3f8 <_svfiprintf_r+0x1fc>
 800e330:	7821      	ldrb	r1, [r4, #0]
 800e332:	2203      	movs	r2, #3
 800e334:	4650      	mov	r0, sl
 800e336:	f7f1 ff7b 	bl	8000230 <memchr>
 800e33a:	b140      	cbz	r0, 800e34e <_svfiprintf_r+0x152>
 800e33c:	2340      	movs	r3, #64	; 0x40
 800e33e:	eba0 000a 	sub.w	r0, r0, sl
 800e342:	fa03 f000 	lsl.w	r0, r3, r0
 800e346:	9b04      	ldr	r3, [sp, #16]
 800e348:	4303      	orrs	r3, r0
 800e34a:	3401      	adds	r4, #1
 800e34c:	9304      	str	r3, [sp, #16]
 800e34e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e352:	4826      	ldr	r0, [pc, #152]	; (800e3ec <_svfiprintf_r+0x1f0>)
 800e354:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e358:	2206      	movs	r2, #6
 800e35a:	f7f1 ff69 	bl	8000230 <memchr>
 800e35e:	2800      	cmp	r0, #0
 800e360:	d038      	beq.n	800e3d4 <_svfiprintf_r+0x1d8>
 800e362:	4b23      	ldr	r3, [pc, #140]	; (800e3f0 <_svfiprintf_r+0x1f4>)
 800e364:	bb1b      	cbnz	r3, 800e3ae <_svfiprintf_r+0x1b2>
 800e366:	9b03      	ldr	r3, [sp, #12]
 800e368:	3307      	adds	r3, #7
 800e36a:	f023 0307 	bic.w	r3, r3, #7
 800e36e:	3308      	adds	r3, #8
 800e370:	9303      	str	r3, [sp, #12]
 800e372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e374:	4433      	add	r3, r6
 800e376:	9309      	str	r3, [sp, #36]	; 0x24
 800e378:	e767      	b.n	800e24a <_svfiprintf_r+0x4e>
 800e37a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e37e:	460c      	mov	r4, r1
 800e380:	2001      	movs	r0, #1
 800e382:	e7a5      	b.n	800e2d0 <_svfiprintf_r+0xd4>
 800e384:	2300      	movs	r3, #0
 800e386:	3401      	adds	r4, #1
 800e388:	9305      	str	r3, [sp, #20]
 800e38a:	4619      	mov	r1, r3
 800e38c:	f04f 0c0a 	mov.w	ip, #10
 800e390:	4620      	mov	r0, r4
 800e392:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e396:	3a30      	subs	r2, #48	; 0x30
 800e398:	2a09      	cmp	r2, #9
 800e39a:	d903      	bls.n	800e3a4 <_svfiprintf_r+0x1a8>
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d0c5      	beq.n	800e32c <_svfiprintf_r+0x130>
 800e3a0:	9105      	str	r1, [sp, #20]
 800e3a2:	e7c3      	b.n	800e32c <_svfiprintf_r+0x130>
 800e3a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3a8:	4604      	mov	r4, r0
 800e3aa:	2301      	movs	r3, #1
 800e3ac:	e7f0      	b.n	800e390 <_svfiprintf_r+0x194>
 800e3ae:	ab03      	add	r3, sp, #12
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	462a      	mov	r2, r5
 800e3b4:	4b0f      	ldr	r3, [pc, #60]	; (800e3f4 <_svfiprintf_r+0x1f8>)
 800e3b6:	a904      	add	r1, sp, #16
 800e3b8:	4638      	mov	r0, r7
 800e3ba:	f7fd ffcb 	bl	800c354 <_printf_float>
 800e3be:	1c42      	adds	r2, r0, #1
 800e3c0:	4606      	mov	r6, r0
 800e3c2:	d1d6      	bne.n	800e372 <_svfiprintf_r+0x176>
 800e3c4:	89ab      	ldrh	r3, [r5, #12]
 800e3c6:	065b      	lsls	r3, r3, #25
 800e3c8:	f53f af2c 	bmi.w	800e224 <_svfiprintf_r+0x28>
 800e3cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3ce:	b01d      	add	sp, #116	; 0x74
 800e3d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d4:	ab03      	add	r3, sp, #12
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	462a      	mov	r2, r5
 800e3da:	4b06      	ldr	r3, [pc, #24]	; (800e3f4 <_svfiprintf_r+0x1f8>)
 800e3dc:	a904      	add	r1, sp, #16
 800e3de:	4638      	mov	r0, r7
 800e3e0:	f7fe fa5c 	bl	800c89c <_printf_i>
 800e3e4:	e7eb      	b.n	800e3be <_svfiprintf_r+0x1c2>
 800e3e6:	bf00      	nop
 800e3e8:	080100ac 	.word	0x080100ac
 800e3ec:	080100b6 	.word	0x080100b6
 800e3f0:	0800c355 	.word	0x0800c355
 800e3f4:	0800e145 	.word	0x0800e145
 800e3f8:	080100b2 	.word	0x080100b2

0800e3fc <_sbrk_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4d06      	ldr	r5, [pc, #24]	; (800e418 <_sbrk_r+0x1c>)
 800e400:	2300      	movs	r3, #0
 800e402:	4604      	mov	r4, r0
 800e404:	4608      	mov	r0, r1
 800e406:	602b      	str	r3, [r5, #0]
 800e408:	f7f6 fe2c 	bl	8005064 <_sbrk>
 800e40c:	1c43      	adds	r3, r0, #1
 800e40e:	d102      	bne.n	800e416 <_sbrk_r+0x1a>
 800e410:	682b      	ldr	r3, [r5, #0]
 800e412:	b103      	cbz	r3, 800e416 <_sbrk_r+0x1a>
 800e414:	6023      	str	r3, [r4, #0]
 800e416:	bd38      	pop	{r3, r4, r5, pc}
 800e418:	20000770 	.word	0x20000770

0800e41c <__assert_func>:
 800e41c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e41e:	4614      	mov	r4, r2
 800e420:	461a      	mov	r2, r3
 800e422:	4b09      	ldr	r3, [pc, #36]	; (800e448 <__assert_func+0x2c>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4605      	mov	r5, r0
 800e428:	68d8      	ldr	r0, [r3, #12]
 800e42a:	b14c      	cbz	r4, 800e440 <__assert_func+0x24>
 800e42c:	4b07      	ldr	r3, [pc, #28]	; (800e44c <__assert_func+0x30>)
 800e42e:	9100      	str	r1, [sp, #0]
 800e430:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e434:	4906      	ldr	r1, [pc, #24]	; (800e450 <__assert_func+0x34>)
 800e436:	462b      	mov	r3, r5
 800e438:	f000 f80e 	bl	800e458 <fiprintf>
 800e43c:	f000 faac 	bl	800e998 <abort>
 800e440:	4b04      	ldr	r3, [pc, #16]	; (800e454 <__assert_func+0x38>)
 800e442:	461c      	mov	r4, r3
 800e444:	e7f3      	b.n	800e42e <__assert_func+0x12>
 800e446:	bf00      	nop
 800e448:	2000002c 	.word	0x2000002c
 800e44c:	080100bd 	.word	0x080100bd
 800e450:	080100ca 	.word	0x080100ca
 800e454:	080100f8 	.word	0x080100f8

0800e458 <fiprintf>:
 800e458:	b40e      	push	{r1, r2, r3}
 800e45a:	b503      	push	{r0, r1, lr}
 800e45c:	4601      	mov	r1, r0
 800e45e:	ab03      	add	r3, sp, #12
 800e460:	4805      	ldr	r0, [pc, #20]	; (800e478 <fiprintf+0x20>)
 800e462:	f853 2b04 	ldr.w	r2, [r3], #4
 800e466:	6800      	ldr	r0, [r0, #0]
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	f000 f897 	bl	800e59c <_vfiprintf_r>
 800e46e:	b002      	add	sp, #8
 800e470:	f85d eb04 	ldr.w	lr, [sp], #4
 800e474:	b003      	add	sp, #12
 800e476:	4770      	bx	lr
 800e478:	2000002c 	.word	0x2000002c

0800e47c <__ascii_mbtowc>:
 800e47c:	b082      	sub	sp, #8
 800e47e:	b901      	cbnz	r1, 800e482 <__ascii_mbtowc+0x6>
 800e480:	a901      	add	r1, sp, #4
 800e482:	b142      	cbz	r2, 800e496 <__ascii_mbtowc+0x1a>
 800e484:	b14b      	cbz	r3, 800e49a <__ascii_mbtowc+0x1e>
 800e486:	7813      	ldrb	r3, [r2, #0]
 800e488:	600b      	str	r3, [r1, #0]
 800e48a:	7812      	ldrb	r2, [r2, #0]
 800e48c:	1e10      	subs	r0, r2, #0
 800e48e:	bf18      	it	ne
 800e490:	2001      	movne	r0, #1
 800e492:	b002      	add	sp, #8
 800e494:	4770      	bx	lr
 800e496:	4610      	mov	r0, r2
 800e498:	e7fb      	b.n	800e492 <__ascii_mbtowc+0x16>
 800e49a:	f06f 0001 	mvn.w	r0, #1
 800e49e:	e7f8      	b.n	800e492 <__ascii_mbtowc+0x16>

0800e4a0 <memmove>:
 800e4a0:	4288      	cmp	r0, r1
 800e4a2:	b510      	push	{r4, lr}
 800e4a4:	eb01 0402 	add.w	r4, r1, r2
 800e4a8:	d902      	bls.n	800e4b0 <memmove+0x10>
 800e4aa:	4284      	cmp	r4, r0
 800e4ac:	4623      	mov	r3, r4
 800e4ae:	d807      	bhi.n	800e4c0 <memmove+0x20>
 800e4b0:	1e43      	subs	r3, r0, #1
 800e4b2:	42a1      	cmp	r1, r4
 800e4b4:	d008      	beq.n	800e4c8 <memmove+0x28>
 800e4b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e4ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e4be:	e7f8      	b.n	800e4b2 <memmove+0x12>
 800e4c0:	4402      	add	r2, r0
 800e4c2:	4601      	mov	r1, r0
 800e4c4:	428a      	cmp	r2, r1
 800e4c6:	d100      	bne.n	800e4ca <memmove+0x2a>
 800e4c8:	bd10      	pop	{r4, pc}
 800e4ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e4d2:	e7f7      	b.n	800e4c4 <memmove+0x24>

0800e4d4 <__malloc_lock>:
 800e4d4:	4801      	ldr	r0, [pc, #4]	; (800e4dc <__malloc_lock+0x8>)
 800e4d6:	f000 bc1f 	b.w	800ed18 <__retarget_lock_acquire_recursive>
 800e4da:	bf00      	nop
 800e4dc:	20000774 	.word	0x20000774

0800e4e0 <__malloc_unlock>:
 800e4e0:	4801      	ldr	r0, [pc, #4]	; (800e4e8 <__malloc_unlock+0x8>)
 800e4e2:	f000 bc1a 	b.w	800ed1a <__retarget_lock_release_recursive>
 800e4e6:	bf00      	nop
 800e4e8:	20000774 	.word	0x20000774

0800e4ec <_realloc_r>:
 800e4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f0:	4680      	mov	r8, r0
 800e4f2:	4614      	mov	r4, r2
 800e4f4:	460e      	mov	r6, r1
 800e4f6:	b921      	cbnz	r1, 800e502 <_realloc_r+0x16>
 800e4f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	f7ff bdad 	b.w	800e05c <_malloc_r>
 800e502:	b92a      	cbnz	r2, 800e510 <_realloc_r+0x24>
 800e504:	f7ff fd3e 	bl	800df84 <_free_r>
 800e508:	4625      	mov	r5, r4
 800e50a:	4628      	mov	r0, r5
 800e50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e510:	f000 fc6a 	bl	800ede8 <_malloc_usable_size_r>
 800e514:	4284      	cmp	r4, r0
 800e516:	4607      	mov	r7, r0
 800e518:	d802      	bhi.n	800e520 <_realloc_r+0x34>
 800e51a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e51e:	d812      	bhi.n	800e546 <_realloc_r+0x5a>
 800e520:	4621      	mov	r1, r4
 800e522:	4640      	mov	r0, r8
 800e524:	f7ff fd9a 	bl	800e05c <_malloc_r>
 800e528:	4605      	mov	r5, r0
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d0ed      	beq.n	800e50a <_realloc_r+0x1e>
 800e52e:	42bc      	cmp	r4, r7
 800e530:	4622      	mov	r2, r4
 800e532:	4631      	mov	r1, r6
 800e534:	bf28      	it	cs
 800e536:	463a      	movcs	r2, r7
 800e538:	f7ff f97c 	bl	800d834 <memcpy>
 800e53c:	4631      	mov	r1, r6
 800e53e:	4640      	mov	r0, r8
 800e540:	f7ff fd20 	bl	800df84 <_free_r>
 800e544:	e7e1      	b.n	800e50a <_realloc_r+0x1e>
 800e546:	4635      	mov	r5, r6
 800e548:	e7df      	b.n	800e50a <_realloc_r+0x1e>

0800e54a <__sfputc_r>:
 800e54a:	6893      	ldr	r3, [r2, #8]
 800e54c:	3b01      	subs	r3, #1
 800e54e:	2b00      	cmp	r3, #0
 800e550:	b410      	push	{r4}
 800e552:	6093      	str	r3, [r2, #8]
 800e554:	da08      	bge.n	800e568 <__sfputc_r+0x1e>
 800e556:	6994      	ldr	r4, [r2, #24]
 800e558:	42a3      	cmp	r3, r4
 800e55a:	db01      	blt.n	800e560 <__sfputc_r+0x16>
 800e55c:	290a      	cmp	r1, #10
 800e55e:	d103      	bne.n	800e568 <__sfputc_r+0x1e>
 800e560:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e564:	f000 b94a 	b.w	800e7fc <__swbuf_r>
 800e568:	6813      	ldr	r3, [r2, #0]
 800e56a:	1c58      	adds	r0, r3, #1
 800e56c:	6010      	str	r0, [r2, #0]
 800e56e:	7019      	strb	r1, [r3, #0]
 800e570:	4608      	mov	r0, r1
 800e572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e576:	4770      	bx	lr

0800e578 <__sfputs_r>:
 800e578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e57a:	4606      	mov	r6, r0
 800e57c:	460f      	mov	r7, r1
 800e57e:	4614      	mov	r4, r2
 800e580:	18d5      	adds	r5, r2, r3
 800e582:	42ac      	cmp	r4, r5
 800e584:	d101      	bne.n	800e58a <__sfputs_r+0x12>
 800e586:	2000      	movs	r0, #0
 800e588:	e007      	b.n	800e59a <__sfputs_r+0x22>
 800e58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e58e:	463a      	mov	r2, r7
 800e590:	4630      	mov	r0, r6
 800e592:	f7ff ffda 	bl	800e54a <__sfputc_r>
 800e596:	1c43      	adds	r3, r0, #1
 800e598:	d1f3      	bne.n	800e582 <__sfputs_r+0xa>
 800e59a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e59c <_vfiprintf_r>:
 800e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a0:	460d      	mov	r5, r1
 800e5a2:	b09d      	sub	sp, #116	; 0x74
 800e5a4:	4614      	mov	r4, r2
 800e5a6:	4698      	mov	r8, r3
 800e5a8:	4606      	mov	r6, r0
 800e5aa:	b118      	cbz	r0, 800e5b4 <_vfiprintf_r+0x18>
 800e5ac:	6983      	ldr	r3, [r0, #24]
 800e5ae:	b90b      	cbnz	r3, 800e5b4 <_vfiprintf_r+0x18>
 800e5b0:	f000 fb14 	bl	800ebdc <__sinit>
 800e5b4:	4b89      	ldr	r3, [pc, #548]	; (800e7dc <_vfiprintf_r+0x240>)
 800e5b6:	429d      	cmp	r5, r3
 800e5b8:	d11b      	bne.n	800e5f2 <_vfiprintf_r+0x56>
 800e5ba:	6875      	ldr	r5, [r6, #4]
 800e5bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5be:	07d9      	lsls	r1, r3, #31
 800e5c0:	d405      	bmi.n	800e5ce <_vfiprintf_r+0x32>
 800e5c2:	89ab      	ldrh	r3, [r5, #12]
 800e5c4:	059a      	lsls	r2, r3, #22
 800e5c6:	d402      	bmi.n	800e5ce <_vfiprintf_r+0x32>
 800e5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ca:	f000 fba5 	bl	800ed18 <__retarget_lock_acquire_recursive>
 800e5ce:	89ab      	ldrh	r3, [r5, #12]
 800e5d0:	071b      	lsls	r3, r3, #28
 800e5d2:	d501      	bpl.n	800e5d8 <_vfiprintf_r+0x3c>
 800e5d4:	692b      	ldr	r3, [r5, #16]
 800e5d6:	b9eb      	cbnz	r3, 800e614 <_vfiprintf_r+0x78>
 800e5d8:	4629      	mov	r1, r5
 800e5da:	4630      	mov	r0, r6
 800e5dc:	f000 f96e 	bl	800e8bc <__swsetup_r>
 800e5e0:	b1c0      	cbz	r0, 800e614 <_vfiprintf_r+0x78>
 800e5e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5e4:	07dc      	lsls	r4, r3, #31
 800e5e6:	d50e      	bpl.n	800e606 <_vfiprintf_r+0x6a>
 800e5e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e5ec:	b01d      	add	sp, #116	; 0x74
 800e5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5f2:	4b7b      	ldr	r3, [pc, #492]	; (800e7e0 <_vfiprintf_r+0x244>)
 800e5f4:	429d      	cmp	r5, r3
 800e5f6:	d101      	bne.n	800e5fc <_vfiprintf_r+0x60>
 800e5f8:	68b5      	ldr	r5, [r6, #8]
 800e5fa:	e7df      	b.n	800e5bc <_vfiprintf_r+0x20>
 800e5fc:	4b79      	ldr	r3, [pc, #484]	; (800e7e4 <_vfiprintf_r+0x248>)
 800e5fe:	429d      	cmp	r5, r3
 800e600:	bf08      	it	eq
 800e602:	68f5      	ldreq	r5, [r6, #12]
 800e604:	e7da      	b.n	800e5bc <_vfiprintf_r+0x20>
 800e606:	89ab      	ldrh	r3, [r5, #12]
 800e608:	0598      	lsls	r0, r3, #22
 800e60a:	d4ed      	bmi.n	800e5e8 <_vfiprintf_r+0x4c>
 800e60c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e60e:	f000 fb84 	bl	800ed1a <__retarget_lock_release_recursive>
 800e612:	e7e9      	b.n	800e5e8 <_vfiprintf_r+0x4c>
 800e614:	2300      	movs	r3, #0
 800e616:	9309      	str	r3, [sp, #36]	; 0x24
 800e618:	2320      	movs	r3, #32
 800e61a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e61e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e622:	2330      	movs	r3, #48	; 0x30
 800e624:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e7e8 <_vfiprintf_r+0x24c>
 800e628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e62c:	f04f 0901 	mov.w	r9, #1
 800e630:	4623      	mov	r3, r4
 800e632:	469a      	mov	sl, r3
 800e634:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e638:	b10a      	cbz	r2, 800e63e <_vfiprintf_r+0xa2>
 800e63a:	2a25      	cmp	r2, #37	; 0x25
 800e63c:	d1f9      	bne.n	800e632 <_vfiprintf_r+0x96>
 800e63e:	ebba 0b04 	subs.w	fp, sl, r4
 800e642:	d00b      	beq.n	800e65c <_vfiprintf_r+0xc0>
 800e644:	465b      	mov	r3, fp
 800e646:	4622      	mov	r2, r4
 800e648:	4629      	mov	r1, r5
 800e64a:	4630      	mov	r0, r6
 800e64c:	f7ff ff94 	bl	800e578 <__sfputs_r>
 800e650:	3001      	adds	r0, #1
 800e652:	f000 80aa 	beq.w	800e7aa <_vfiprintf_r+0x20e>
 800e656:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e658:	445a      	add	r2, fp
 800e65a:	9209      	str	r2, [sp, #36]	; 0x24
 800e65c:	f89a 3000 	ldrb.w	r3, [sl]
 800e660:	2b00      	cmp	r3, #0
 800e662:	f000 80a2 	beq.w	800e7aa <_vfiprintf_r+0x20e>
 800e666:	2300      	movs	r3, #0
 800e668:	f04f 32ff 	mov.w	r2, #4294967295
 800e66c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e670:	f10a 0a01 	add.w	sl, sl, #1
 800e674:	9304      	str	r3, [sp, #16]
 800e676:	9307      	str	r3, [sp, #28]
 800e678:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e67c:	931a      	str	r3, [sp, #104]	; 0x68
 800e67e:	4654      	mov	r4, sl
 800e680:	2205      	movs	r2, #5
 800e682:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e686:	4858      	ldr	r0, [pc, #352]	; (800e7e8 <_vfiprintf_r+0x24c>)
 800e688:	f7f1 fdd2 	bl	8000230 <memchr>
 800e68c:	9a04      	ldr	r2, [sp, #16]
 800e68e:	b9d8      	cbnz	r0, 800e6c8 <_vfiprintf_r+0x12c>
 800e690:	06d1      	lsls	r1, r2, #27
 800e692:	bf44      	itt	mi
 800e694:	2320      	movmi	r3, #32
 800e696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e69a:	0713      	lsls	r3, r2, #28
 800e69c:	bf44      	itt	mi
 800e69e:	232b      	movmi	r3, #43	; 0x2b
 800e6a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e6a4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e6aa:	d015      	beq.n	800e6d8 <_vfiprintf_r+0x13c>
 800e6ac:	9a07      	ldr	r2, [sp, #28]
 800e6ae:	4654      	mov	r4, sl
 800e6b0:	2000      	movs	r0, #0
 800e6b2:	f04f 0c0a 	mov.w	ip, #10
 800e6b6:	4621      	mov	r1, r4
 800e6b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6bc:	3b30      	subs	r3, #48	; 0x30
 800e6be:	2b09      	cmp	r3, #9
 800e6c0:	d94e      	bls.n	800e760 <_vfiprintf_r+0x1c4>
 800e6c2:	b1b0      	cbz	r0, 800e6f2 <_vfiprintf_r+0x156>
 800e6c4:	9207      	str	r2, [sp, #28]
 800e6c6:	e014      	b.n	800e6f2 <_vfiprintf_r+0x156>
 800e6c8:	eba0 0308 	sub.w	r3, r0, r8
 800e6cc:	fa09 f303 	lsl.w	r3, r9, r3
 800e6d0:	4313      	orrs	r3, r2
 800e6d2:	9304      	str	r3, [sp, #16]
 800e6d4:	46a2      	mov	sl, r4
 800e6d6:	e7d2      	b.n	800e67e <_vfiprintf_r+0xe2>
 800e6d8:	9b03      	ldr	r3, [sp, #12]
 800e6da:	1d19      	adds	r1, r3, #4
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	9103      	str	r1, [sp, #12]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	bfbb      	ittet	lt
 800e6e4:	425b      	neglt	r3, r3
 800e6e6:	f042 0202 	orrlt.w	r2, r2, #2
 800e6ea:	9307      	strge	r3, [sp, #28]
 800e6ec:	9307      	strlt	r3, [sp, #28]
 800e6ee:	bfb8      	it	lt
 800e6f0:	9204      	strlt	r2, [sp, #16]
 800e6f2:	7823      	ldrb	r3, [r4, #0]
 800e6f4:	2b2e      	cmp	r3, #46	; 0x2e
 800e6f6:	d10c      	bne.n	800e712 <_vfiprintf_r+0x176>
 800e6f8:	7863      	ldrb	r3, [r4, #1]
 800e6fa:	2b2a      	cmp	r3, #42	; 0x2a
 800e6fc:	d135      	bne.n	800e76a <_vfiprintf_r+0x1ce>
 800e6fe:	9b03      	ldr	r3, [sp, #12]
 800e700:	1d1a      	adds	r2, r3, #4
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	9203      	str	r2, [sp, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	bfb8      	it	lt
 800e70a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e70e:	3402      	adds	r4, #2
 800e710:	9305      	str	r3, [sp, #20]
 800e712:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e7f8 <_vfiprintf_r+0x25c>
 800e716:	7821      	ldrb	r1, [r4, #0]
 800e718:	2203      	movs	r2, #3
 800e71a:	4650      	mov	r0, sl
 800e71c:	f7f1 fd88 	bl	8000230 <memchr>
 800e720:	b140      	cbz	r0, 800e734 <_vfiprintf_r+0x198>
 800e722:	2340      	movs	r3, #64	; 0x40
 800e724:	eba0 000a 	sub.w	r0, r0, sl
 800e728:	fa03 f000 	lsl.w	r0, r3, r0
 800e72c:	9b04      	ldr	r3, [sp, #16]
 800e72e:	4303      	orrs	r3, r0
 800e730:	3401      	adds	r4, #1
 800e732:	9304      	str	r3, [sp, #16]
 800e734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e738:	482c      	ldr	r0, [pc, #176]	; (800e7ec <_vfiprintf_r+0x250>)
 800e73a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e73e:	2206      	movs	r2, #6
 800e740:	f7f1 fd76 	bl	8000230 <memchr>
 800e744:	2800      	cmp	r0, #0
 800e746:	d03f      	beq.n	800e7c8 <_vfiprintf_r+0x22c>
 800e748:	4b29      	ldr	r3, [pc, #164]	; (800e7f0 <_vfiprintf_r+0x254>)
 800e74a:	bb1b      	cbnz	r3, 800e794 <_vfiprintf_r+0x1f8>
 800e74c:	9b03      	ldr	r3, [sp, #12]
 800e74e:	3307      	adds	r3, #7
 800e750:	f023 0307 	bic.w	r3, r3, #7
 800e754:	3308      	adds	r3, #8
 800e756:	9303      	str	r3, [sp, #12]
 800e758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e75a:	443b      	add	r3, r7
 800e75c:	9309      	str	r3, [sp, #36]	; 0x24
 800e75e:	e767      	b.n	800e630 <_vfiprintf_r+0x94>
 800e760:	fb0c 3202 	mla	r2, ip, r2, r3
 800e764:	460c      	mov	r4, r1
 800e766:	2001      	movs	r0, #1
 800e768:	e7a5      	b.n	800e6b6 <_vfiprintf_r+0x11a>
 800e76a:	2300      	movs	r3, #0
 800e76c:	3401      	adds	r4, #1
 800e76e:	9305      	str	r3, [sp, #20]
 800e770:	4619      	mov	r1, r3
 800e772:	f04f 0c0a 	mov.w	ip, #10
 800e776:	4620      	mov	r0, r4
 800e778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e77c:	3a30      	subs	r2, #48	; 0x30
 800e77e:	2a09      	cmp	r2, #9
 800e780:	d903      	bls.n	800e78a <_vfiprintf_r+0x1ee>
 800e782:	2b00      	cmp	r3, #0
 800e784:	d0c5      	beq.n	800e712 <_vfiprintf_r+0x176>
 800e786:	9105      	str	r1, [sp, #20]
 800e788:	e7c3      	b.n	800e712 <_vfiprintf_r+0x176>
 800e78a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e78e:	4604      	mov	r4, r0
 800e790:	2301      	movs	r3, #1
 800e792:	e7f0      	b.n	800e776 <_vfiprintf_r+0x1da>
 800e794:	ab03      	add	r3, sp, #12
 800e796:	9300      	str	r3, [sp, #0]
 800e798:	462a      	mov	r2, r5
 800e79a:	4b16      	ldr	r3, [pc, #88]	; (800e7f4 <_vfiprintf_r+0x258>)
 800e79c:	a904      	add	r1, sp, #16
 800e79e:	4630      	mov	r0, r6
 800e7a0:	f7fd fdd8 	bl	800c354 <_printf_float>
 800e7a4:	4607      	mov	r7, r0
 800e7a6:	1c78      	adds	r0, r7, #1
 800e7a8:	d1d6      	bne.n	800e758 <_vfiprintf_r+0x1bc>
 800e7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e7ac:	07d9      	lsls	r1, r3, #31
 800e7ae:	d405      	bmi.n	800e7bc <_vfiprintf_r+0x220>
 800e7b0:	89ab      	ldrh	r3, [r5, #12]
 800e7b2:	059a      	lsls	r2, r3, #22
 800e7b4:	d402      	bmi.n	800e7bc <_vfiprintf_r+0x220>
 800e7b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e7b8:	f000 faaf 	bl	800ed1a <__retarget_lock_release_recursive>
 800e7bc:	89ab      	ldrh	r3, [r5, #12]
 800e7be:	065b      	lsls	r3, r3, #25
 800e7c0:	f53f af12 	bmi.w	800e5e8 <_vfiprintf_r+0x4c>
 800e7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e7c6:	e711      	b.n	800e5ec <_vfiprintf_r+0x50>
 800e7c8:	ab03      	add	r3, sp, #12
 800e7ca:	9300      	str	r3, [sp, #0]
 800e7cc:	462a      	mov	r2, r5
 800e7ce:	4b09      	ldr	r3, [pc, #36]	; (800e7f4 <_vfiprintf_r+0x258>)
 800e7d0:	a904      	add	r1, sp, #16
 800e7d2:	4630      	mov	r0, r6
 800e7d4:	f7fe f862 	bl	800c89c <_printf_i>
 800e7d8:	e7e4      	b.n	800e7a4 <_vfiprintf_r+0x208>
 800e7da:	bf00      	nop
 800e7dc:	08010224 	.word	0x08010224
 800e7e0:	08010244 	.word	0x08010244
 800e7e4:	08010204 	.word	0x08010204
 800e7e8:	080100ac 	.word	0x080100ac
 800e7ec:	080100b6 	.word	0x080100b6
 800e7f0:	0800c355 	.word	0x0800c355
 800e7f4:	0800e579 	.word	0x0800e579
 800e7f8:	080100b2 	.word	0x080100b2

0800e7fc <__swbuf_r>:
 800e7fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fe:	460e      	mov	r6, r1
 800e800:	4614      	mov	r4, r2
 800e802:	4605      	mov	r5, r0
 800e804:	b118      	cbz	r0, 800e80e <__swbuf_r+0x12>
 800e806:	6983      	ldr	r3, [r0, #24]
 800e808:	b90b      	cbnz	r3, 800e80e <__swbuf_r+0x12>
 800e80a:	f000 f9e7 	bl	800ebdc <__sinit>
 800e80e:	4b21      	ldr	r3, [pc, #132]	; (800e894 <__swbuf_r+0x98>)
 800e810:	429c      	cmp	r4, r3
 800e812:	d12b      	bne.n	800e86c <__swbuf_r+0x70>
 800e814:	686c      	ldr	r4, [r5, #4]
 800e816:	69a3      	ldr	r3, [r4, #24]
 800e818:	60a3      	str	r3, [r4, #8]
 800e81a:	89a3      	ldrh	r3, [r4, #12]
 800e81c:	071a      	lsls	r2, r3, #28
 800e81e:	d52f      	bpl.n	800e880 <__swbuf_r+0x84>
 800e820:	6923      	ldr	r3, [r4, #16]
 800e822:	b36b      	cbz	r3, 800e880 <__swbuf_r+0x84>
 800e824:	6923      	ldr	r3, [r4, #16]
 800e826:	6820      	ldr	r0, [r4, #0]
 800e828:	1ac0      	subs	r0, r0, r3
 800e82a:	6963      	ldr	r3, [r4, #20]
 800e82c:	b2f6      	uxtb	r6, r6
 800e82e:	4283      	cmp	r3, r0
 800e830:	4637      	mov	r7, r6
 800e832:	dc04      	bgt.n	800e83e <__swbuf_r+0x42>
 800e834:	4621      	mov	r1, r4
 800e836:	4628      	mov	r0, r5
 800e838:	f000 f93c 	bl	800eab4 <_fflush_r>
 800e83c:	bb30      	cbnz	r0, 800e88c <__swbuf_r+0x90>
 800e83e:	68a3      	ldr	r3, [r4, #8]
 800e840:	3b01      	subs	r3, #1
 800e842:	60a3      	str	r3, [r4, #8]
 800e844:	6823      	ldr	r3, [r4, #0]
 800e846:	1c5a      	adds	r2, r3, #1
 800e848:	6022      	str	r2, [r4, #0]
 800e84a:	701e      	strb	r6, [r3, #0]
 800e84c:	6963      	ldr	r3, [r4, #20]
 800e84e:	3001      	adds	r0, #1
 800e850:	4283      	cmp	r3, r0
 800e852:	d004      	beq.n	800e85e <__swbuf_r+0x62>
 800e854:	89a3      	ldrh	r3, [r4, #12]
 800e856:	07db      	lsls	r3, r3, #31
 800e858:	d506      	bpl.n	800e868 <__swbuf_r+0x6c>
 800e85a:	2e0a      	cmp	r6, #10
 800e85c:	d104      	bne.n	800e868 <__swbuf_r+0x6c>
 800e85e:	4621      	mov	r1, r4
 800e860:	4628      	mov	r0, r5
 800e862:	f000 f927 	bl	800eab4 <_fflush_r>
 800e866:	b988      	cbnz	r0, 800e88c <__swbuf_r+0x90>
 800e868:	4638      	mov	r0, r7
 800e86a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e86c:	4b0a      	ldr	r3, [pc, #40]	; (800e898 <__swbuf_r+0x9c>)
 800e86e:	429c      	cmp	r4, r3
 800e870:	d101      	bne.n	800e876 <__swbuf_r+0x7a>
 800e872:	68ac      	ldr	r4, [r5, #8]
 800e874:	e7cf      	b.n	800e816 <__swbuf_r+0x1a>
 800e876:	4b09      	ldr	r3, [pc, #36]	; (800e89c <__swbuf_r+0xa0>)
 800e878:	429c      	cmp	r4, r3
 800e87a:	bf08      	it	eq
 800e87c:	68ec      	ldreq	r4, [r5, #12]
 800e87e:	e7ca      	b.n	800e816 <__swbuf_r+0x1a>
 800e880:	4621      	mov	r1, r4
 800e882:	4628      	mov	r0, r5
 800e884:	f000 f81a 	bl	800e8bc <__swsetup_r>
 800e888:	2800      	cmp	r0, #0
 800e88a:	d0cb      	beq.n	800e824 <__swbuf_r+0x28>
 800e88c:	f04f 37ff 	mov.w	r7, #4294967295
 800e890:	e7ea      	b.n	800e868 <__swbuf_r+0x6c>
 800e892:	bf00      	nop
 800e894:	08010224 	.word	0x08010224
 800e898:	08010244 	.word	0x08010244
 800e89c:	08010204 	.word	0x08010204

0800e8a0 <__ascii_wctomb>:
 800e8a0:	b149      	cbz	r1, 800e8b6 <__ascii_wctomb+0x16>
 800e8a2:	2aff      	cmp	r2, #255	; 0xff
 800e8a4:	bf85      	ittet	hi
 800e8a6:	238a      	movhi	r3, #138	; 0x8a
 800e8a8:	6003      	strhi	r3, [r0, #0]
 800e8aa:	700a      	strbls	r2, [r1, #0]
 800e8ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800e8b0:	bf98      	it	ls
 800e8b2:	2001      	movls	r0, #1
 800e8b4:	4770      	bx	lr
 800e8b6:	4608      	mov	r0, r1
 800e8b8:	4770      	bx	lr
	...

0800e8bc <__swsetup_r>:
 800e8bc:	4b32      	ldr	r3, [pc, #200]	; (800e988 <__swsetup_r+0xcc>)
 800e8be:	b570      	push	{r4, r5, r6, lr}
 800e8c0:	681d      	ldr	r5, [r3, #0]
 800e8c2:	4606      	mov	r6, r0
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	b125      	cbz	r5, 800e8d2 <__swsetup_r+0x16>
 800e8c8:	69ab      	ldr	r3, [r5, #24]
 800e8ca:	b913      	cbnz	r3, 800e8d2 <__swsetup_r+0x16>
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	f000 f985 	bl	800ebdc <__sinit>
 800e8d2:	4b2e      	ldr	r3, [pc, #184]	; (800e98c <__swsetup_r+0xd0>)
 800e8d4:	429c      	cmp	r4, r3
 800e8d6:	d10f      	bne.n	800e8f8 <__swsetup_r+0x3c>
 800e8d8:	686c      	ldr	r4, [r5, #4]
 800e8da:	89a3      	ldrh	r3, [r4, #12]
 800e8dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8e0:	0719      	lsls	r1, r3, #28
 800e8e2:	d42c      	bmi.n	800e93e <__swsetup_r+0x82>
 800e8e4:	06dd      	lsls	r5, r3, #27
 800e8e6:	d411      	bmi.n	800e90c <__swsetup_r+0x50>
 800e8e8:	2309      	movs	r3, #9
 800e8ea:	6033      	str	r3, [r6, #0]
 800e8ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8f0:	81a3      	strh	r3, [r4, #12]
 800e8f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8f6:	e03e      	b.n	800e976 <__swsetup_r+0xba>
 800e8f8:	4b25      	ldr	r3, [pc, #148]	; (800e990 <__swsetup_r+0xd4>)
 800e8fa:	429c      	cmp	r4, r3
 800e8fc:	d101      	bne.n	800e902 <__swsetup_r+0x46>
 800e8fe:	68ac      	ldr	r4, [r5, #8]
 800e900:	e7eb      	b.n	800e8da <__swsetup_r+0x1e>
 800e902:	4b24      	ldr	r3, [pc, #144]	; (800e994 <__swsetup_r+0xd8>)
 800e904:	429c      	cmp	r4, r3
 800e906:	bf08      	it	eq
 800e908:	68ec      	ldreq	r4, [r5, #12]
 800e90a:	e7e6      	b.n	800e8da <__swsetup_r+0x1e>
 800e90c:	0758      	lsls	r0, r3, #29
 800e90e:	d512      	bpl.n	800e936 <__swsetup_r+0x7a>
 800e910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e912:	b141      	cbz	r1, 800e926 <__swsetup_r+0x6a>
 800e914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e918:	4299      	cmp	r1, r3
 800e91a:	d002      	beq.n	800e922 <__swsetup_r+0x66>
 800e91c:	4630      	mov	r0, r6
 800e91e:	f7ff fb31 	bl	800df84 <_free_r>
 800e922:	2300      	movs	r3, #0
 800e924:	6363      	str	r3, [r4, #52]	; 0x34
 800e926:	89a3      	ldrh	r3, [r4, #12]
 800e928:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e92c:	81a3      	strh	r3, [r4, #12]
 800e92e:	2300      	movs	r3, #0
 800e930:	6063      	str	r3, [r4, #4]
 800e932:	6923      	ldr	r3, [r4, #16]
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	89a3      	ldrh	r3, [r4, #12]
 800e938:	f043 0308 	orr.w	r3, r3, #8
 800e93c:	81a3      	strh	r3, [r4, #12]
 800e93e:	6923      	ldr	r3, [r4, #16]
 800e940:	b94b      	cbnz	r3, 800e956 <__swsetup_r+0x9a>
 800e942:	89a3      	ldrh	r3, [r4, #12]
 800e944:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e948:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e94c:	d003      	beq.n	800e956 <__swsetup_r+0x9a>
 800e94e:	4621      	mov	r1, r4
 800e950:	4630      	mov	r0, r6
 800e952:	f000 fa09 	bl	800ed68 <__smakebuf_r>
 800e956:	89a0      	ldrh	r0, [r4, #12]
 800e958:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e95c:	f010 0301 	ands.w	r3, r0, #1
 800e960:	d00a      	beq.n	800e978 <__swsetup_r+0xbc>
 800e962:	2300      	movs	r3, #0
 800e964:	60a3      	str	r3, [r4, #8]
 800e966:	6963      	ldr	r3, [r4, #20]
 800e968:	425b      	negs	r3, r3
 800e96a:	61a3      	str	r3, [r4, #24]
 800e96c:	6923      	ldr	r3, [r4, #16]
 800e96e:	b943      	cbnz	r3, 800e982 <__swsetup_r+0xc6>
 800e970:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e974:	d1ba      	bne.n	800e8ec <__swsetup_r+0x30>
 800e976:	bd70      	pop	{r4, r5, r6, pc}
 800e978:	0781      	lsls	r1, r0, #30
 800e97a:	bf58      	it	pl
 800e97c:	6963      	ldrpl	r3, [r4, #20]
 800e97e:	60a3      	str	r3, [r4, #8]
 800e980:	e7f4      	b.n	800e96c <__swsetup_r+0xb0>
 800e982:	2000      	movs	r0, #0
 800e984:	e7f7      	b.n	800e976 <__swsetup_r+0xba>
 800e986:	bf00      	nop
 800e988:	2000002c 	.word	0x2000002c
 800e98c:	08010224 	.word	0x08010224
 800e990:	08010244 	.word	0x08010244
 800e994:	08010204 	.word	0x08010204

0800e998 <abort>:
 800e998:	b508      	push	{r3, lr}
 800e99a:	2006      	movs	r0, #6
 800e99c:	f000 fa54 	bl	800ee48 <raise>
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	f7f6 fae7 	bl	8004f74 <_exit>
	...

0800e9a8 <__sflush_r>:
 800e9a8:	898a      	ldrh	r2, [r1, #12]
 800e9aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ae:	4605      	mov	r5, r0
 800e9b0:	0710      	lsls	r0, r2, #28
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	d458      	bmi.n	800ea68 <__sflush_r+0xc0>
 800e9b6:	684b      	ldr	r3, [r1, #4]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	dc05      	bgt.n	800e9c8 <__sflush_r+0x20>
 800e9bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	dc02      	bgt.n	800e9c8 <__sflush_r+0x20>
 800e9c2:	2000      	movs	r0, #0
 800e9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9ca:	2e00      	cmp	r6, #0
 800e9cc:	d0f9      	beq.n	800e9c2 <__sflush_r+0x1a>
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9d4:	682f      	ldr	r7, [r5, #0]
 800e9d6:	602b      	str	r3, [r5, #0]
 800e9d8:	d032      	beq.n	800ea40 <__sflush_r+0x98>
 800e9da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9dc:	89a3      	ldrh	r3, [r4, #12]
 800e9de:	075a      	lsls	r2, r3, #29
 800e9e0:	d505      	bpl.n	800e9ee <__sflush_r+0x46>
 800e9e2:	6863      	ldr	r3, [r4, #4]
 800e9e4:	1ac0      	subs	r0, r0, r3
 800e9e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9e8:	b10b      	cbz	r3, 800e9ee <__sflush_r+0x46>
 800e9ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9ec:	1ac0      	subs	r0, r0, r3
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9f4:	6a21      	ldr	r1, [r4, #32]
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	47b0      	blx	r6
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	d106      	bne.n	800ea0e <__sflush_r+0x66>
 800ea00:	6829      	ldr	r1, [r5, #0]
 800ea02:	291d      	cmp	r1, #29
 800ea04:	d82c      	bhi.n	800ea60 <__sflush_r+0xb8>
 800ea06:	4a2a      	ldr	r2, [pc, #168]	; (800eab0 <__sflush_r+0x108>)
 800ea08:	40ca      	lsrs	r2, r1
 800ea0a:	07d6      	lsls	r6, r2, #31
 800ea0c:	d528      	bpl.n	800ea60 <__sflush_r+0xb8>
 800ea0e:	2200      	movs	r2, #0
 800ea10:	6062      	str	r2, [r4, #4]
 800ea12:	04d9      	lsls	r1, r3, #19
 800ea14:	6922      	ldr	r2, [r4, #16]
 800ea16:	6022      	str	r2, [r4, #0]
 800ea18:	d504      	bpl.n	800ea24 <__sflush_r+0x7c>
 800ea1a:	1c42      	adds	r2, r0, #1
 800ea1c:	d101      	bne.n	800ea22 <__sflush_r+0x7a>
 800ea1e:	682b      	ldr	r3, [r5, #0]
 800ea20:	b903      	cbnz	r3, 800ea24 <__sflush_r+0x7c>
 800ea22:	6560      	str	r0, [r4, #84]	; 0x54
 800ea24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea26:	602f      	str	r7, [r5, #0]
 800ea28:	2900      	cmp	r1, #0
 800ea2a:	d0ca      	beq.n	800e9c2 <__sflush_r+0x1a>
 800ea2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea30:	4299      	cmp	r1, r3
 800ea32:	d002      	beq.n	800ea3a <__sflush_r+0x92>
 800ea34:	4628      	mov	r0, r5
 800ea36:	f7ff faa5 	bl	800df84 <_free_r>
 800ea3a:	2000      	movs	r0, #0
 800ea3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ea3e:	e7c1      	b.n	800e9c4 <__sflush_r+0x1c>
 800ea40:	6a21      	ldr	r1, [r4, #32]
 800ea42:	2301      	movs	r3, #1
 800ea44:	4628      	mov	r0, r5
 800ea46:	47b0      	blx	r6
 800ea48:	1c41      	adds	r1, r0, #1
 800ea4a:	d1c7      	bne.n	800e9dc <__sflush_r+0x34>
 800ea4c:	682b      	ldr	r3, [r5, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d0c4      	beq.n	800e9dc <__sflush_r+0x34>
 800ea52:	2b1d      	cmp	r3, #29
 800ea54:	d001      	beq.n	800ea5a <__sflush_r+0xb2>
 800ea56:	2b16      	cmp	r3, #22
 800ea58:	d101      	bne.n	800ea5e <__sflush_r+0xb6>
 800ea5a:	602f      	str	r7, [r5, #0]
 800ea5c:	e7b1      	b.n	800e9c2 <__sflush_r+0x1a>
 800ea5e:	89a3      	ldrh	r3, [r4, #12]
 800ea60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea64:	81a3      	strh	r3, [r4, #12]
 800ea66:	e7ad      	b.n	800e9c4 <__sflush_r+0x1c>
 800ea68:	690f      	ldr	r7, [r1, #16]
 800ea6a:	2f00      	cmp	r7, #0
 800ea6c:	d0a9      	beq.n	800e9c2 <__sflush_r+0x1a>
 800ea6e:	0793      	lsls	r3, r2, #30
 800ea70:	680e      	ldr	r6, [r1, #0]
 800ea72:	bf08      	it	eq
 800ea74:	694b      	ldreq	r3, [r1, #20]
 800ea76:	600f      	str	r7, [r1, #0]
 800ea78:	bf18      	it	ne
 800ea7a:	2300      	movne	r3, #0
 800ea7c:	eba6 0807 	sub.w	r8, r6, r7
 800ea80:	608b      	str	r3, [r1, #8]
 800ea82:	f1b8 0f00 	cmp.w	r8, #0
 800ea86:	dd9c      	ble.n	800e9c2 <__sflush_r+0x1a>
 800ea88:	6a21      	ldr	r1, [r4, #32]
 800ea8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea8c:	4643      	mov	r3, r8
 800ea8e:	463a      	mov	r2, r7
 800ea90:	4628      	mov	r0, r5
 800ea92:	47b0      	blx	r6
 800ea94:	2800      	cmp	r0, #0
 800ea96:	dc06      	bgt.n	800eaa6 <__sflush_r+0xfe>
 800ea98:	89a3      	ldrh	r3, [r4, #12]
 800ea9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea9e:	81a3      	strh	r3, [r4, #12]
 800eaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa4:	e78e      	b.n	800e9c4 <__sflush_r+0x1c>
 800eaa6:	4407      	add	r7, r0
 800eaa8:	eba8 0800 	sub.w	r8, r8, r0
 800eaac:	e7e9      	b.n	800ea82 <__sflush_r+0xda>
 800eaae:	bf00      	nop
 800eab0:	20400001 	.word	0x20400001

0800eab4 <_fflush_r>:
 800eab4:	b538      	push	{r3, r4, r5, lr}
 800eab6:	690b      	ldr	r3, [r1, #16]
 800eab8:	4605      	mov	r5, r0
 800eaba:	460c      	mov	r4, r1
 800eabc:	b913      	cbnz	r3, 800eac4 <_fflush_r+0x10>
 800eabe:	2500      	movs	r5, #0
 800eac0:	4628      	mov	r0, r5
 800eac2:	bd38      	pop	{r3, r4, r5, pc}
 800eac4:	b118      	cbz	r0, 800eace <_fflush_r+0x1a>
 800eac6:	6983      	ldr	r3, [r0, #24]
 800eac8:	b90b      	cbnz	r3, 800eace <_fflush_r+0x1a>
 800eaca:	f000 f887 	bl	800ebdc <__sinit>
 800eace:	4b14      	ldr	r3, [pc, #80]	; (800eb20 <_fflush_r+0x6c>)
 800ead0:	429c      	cmp	r4, r3
 800ead2:	d11b      	bne.n	800eb0c <_fflush_r+0x58>
 800ead4:	686c      	ldr	r4, [r5, #4]
 800ead6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d0ef      	beq.n	800eabe <_fflush_r+0xa>
 800eade:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eae0:	07d0      	lsls	r0, r2, #31
 800eae2:	d404      	bmi.n	800eaee <_fflush_r+0x3a>
 800eae4:	0599      	lsls	r1, r3, #22
 800eae6:	d402      	bmi.n	800eaee <_fflush_r+0x3a>
 800eae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaea:	f000 f915 	bl	800ed18 <__retarget_lock_acquire_recursive>
 800eaee:	4628      	mov	r0, r5
 800eaf0:	4621      	mov	r1, r4
 800eaf2:	f7ff ff59 	bl	800e9a8 <__sflush_r>
 800eaf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eaf8:	07da      	lsls	r2, r3, #31
 800eafa:	4605      	mov	r5, r0
 800eafc:	d4e0      	bmi.n	800eac0 <_fflush_r+0xc>
 800eafe:	89a3      	ldrh	r3, [r4, #12]
 800eb00:	059b      	lsls	r3, r3, #22
 800eb02:	d4dd      	bmi.n	800eac0 <_fflush_r+0xc>
 800eb04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb06:	f000 f908 	bl	800ed1a <__retarget_lock_release_recursive>
 800eb0a:	e7d9      	b.n	800eac0 <_fflush_r+0xc>
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <_fflush_r+0x70>)
 800eb0e:	429c      	cmp	r4, r3
 800eb10:	d101      	bne.n	800eb16 <_fflush_r+0x62>
 800eb12:	68ac      	ldr	r4, [r5, #8]
 800eb14:	e7df      	b.n	800ead6 <_fflush_r+0x22>
 800eb16:	4b04      	ldr	r3, [pc, #16]	; (800eb28 <_fflush_r+0x74>)
 800eb18:	429c      	cmp	r4, r3
 800eb1a:	bf08      	it	eq
 800eb1c:	68ec      	ldreq	r4, [r5, #12]
 800eb1e:	e7da      	b.n	800ead6 <_fflush_r+0x22>
 800eb20:	08010224 	.word	0x08010224
 800eb24:	08010244 	.word	0x08010244
 800eb28:	08010204 	.word	0x08010204

0800eb2c <std>:
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	b510      	push	{r4, lr}
 800eb30:	4604      	mov	r4, r0
 800eb32:	e9c0 3300 	strd	r3, r3, [r0]
 800eb36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb3a:	6083      	str	r3, [r0, #8]
 800eb3c:	8181      	strh	r1, [r0, #12]
 800eb3e:	6643      	str	r3, [r0, #100]	; 0x64
 800eb40:	81c2      	strh	r2, [r0, #14]
 800eb42:	6183      	str	r3, [r0, #24]
 800eb44:	4619      	mov	r1, r3
 800eb46:	2208      	movs	r2, #8
 800eb48:	305c      	adds	r0, #92	; 0x5c
 800eb4a:	f7fd fb5b 	bl	800c204 <memset>
 800eb4e:	4b05      	ldr	r3, [pc, #20]	; (800eb64 <std+0x38>)
 800eb50:	6263      	str	r3, [r4, #36]	; 0x24
 800eb52:	4b05      	ldr	r3, [pc, #20]	; (800eb68 <std+0x3c>)
 800eb54:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb56:	4b05      	ldr	r3, [pc, #20]	; (800eb6c <std+0x40>)
 800eb58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb5a:	4b05      	ldr	r3, [pc, #20]	; (800eb70 <std+0x44>)
 800eb5c:	6224      	str	r4, [r4, #32]
 800eb5e:	6323      	str	r3, [r4, #48]	; 0x30
 800eb60:	bd10      	pop	{r4, pc}
 800eb62:	bf00      	nop
 800eb64:	0800ee81 	.word	0x0800ee81
 800eb68:	0800eea3 	.word	0x0800eea3
 800eb6c:	0800eedb 	.word	0x0800eedb
 800eb70:	0800eeff 	.word	0x0800eeff

0800eb74 <_cleanup_r>:
 800eb74:	4901      	ldr	r1, [pc, #4]	; (800eb7c <_cleanup_r+0x8>)
 800eb76:	f000 b8af 	b.w	800ecd8 <_fwalk_reent>
 800eb7a:	bf00      	nop
 800eb7c:	0800eab5 	.word	0x0800eab5

0800eb80 <__sfmoreglue>:
 800eb80:	b570      	push	{r4, r5, r6, lr}
 800eb82:	2268      	movs	r2, #104	; 0x68
 800eb84:	1e4d      	subs	r5, r1, #1
 800eb86:	4355      	muls	r5, r2
 800eb88:	460e      	mov	r6, r1
 800eb8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb8e:	f7ff fa65 	bl	800e05c <_malloc_r>
 800eb92:	4604      	mov	r4, r0
 800eb94:	b140      	cbz	r0, 800eba8 <__sfmoreglue+0x28>
 800eb96:	2100      	movs	r1, #0
 800eb98:	e9c0 1600 	strd	r1, r6, [r0]
 800eb9c:	300c      	adds	r0, #12
 800eb9e:	60a0      	str	r0, [r4, #8]
 800eba0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eba4:	f7fd fb2e 	bl	800c204 <memset>
 800eba8:	4620      	mov	r0, r4
 800ebaa:	bd70      	pop	{r4, r5, r6, pc}

0800ebac <__sfp_lock_acquire>:
 800ebac:	4801      	ldr	r0, [pc, #4]	; (800ebb4 <__sfp_lock_acquire+0x8>)
 800ebae:	f000 b8b3 	b.w	800ed18 <__retarget_lock_acquire_recursive>
 800ebb2:	bf00      	nop
 800ebb4:	20000775 	.word	0x20000775

0800ebb8 <__sfp_lock_release>:
 800ebb8:	4801      	ldr	r0, [pc, #4]	; (800ebc0 <__sfp_lock_release+0x8>)
 800ebba:	f000 b8ae 	b.w	800ed1a <__retarget_lock_release_recursive>
 800ebbe:	bf00      	nop
 800ebc0:	20000775 	.word	0x20000775

0800ebc4 <__sinit_lock_acquire>:
 800ebc4:	4801      	ldr	r0, [pc, #4]	; (800ebcc <__sinit_lock_acquire+0x8>)
 800ebc6:	f000 b8a7 	b.w	800ed18 <__retarget_lock_acquire_recursive>
 800ebca:	bf00      	nop
 800ebcc:	20000776 	.word	0x20000776

0800ebd0 <__sinit_lock_release>:
 800ebd0:	4801      	ldr	r0, [pc, #4]	; (800ebd8 <__sinit_lock_release+0x8>)
 800ebd2:	f000 b8a2 	b.w	800ed1a <__retarget_lock_release_recursive>
 800ebd6:	bf00      	nop
 800ebd8:	20000776 	.word	0x20000776

0800ebdc <__sinit>:
 800ebdc:	b510      	push	{r4, lr}
 800ebde:	4604      	mov	r4, r0
 800ebe0:	f7ff fff0 	bl	800ebc4 <__sinit_lock_acquire>
 800ebe4:	69a3      	ldr	r3, [r4, #24]
 800ebe6:	b11b      	cbz	r3, 800ebf0 <__sinit+0x14>
 800ebe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebec:	f7ff bff0 	b.w	800ebd0 <__sinit_lock_release>
 800ebf0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebf4:	6523      	str	r3, [r4, #80]	; 0x50
 800ebf6:	4b13      	ldr	r3, [pc, #76]	; (800ec44 <__sinit+0x68>)
 800ebf8:	4a13      	ldr	r2, [pc, #76]	; (800ec48 <__sinit+0x6c>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebfe:	42a3      	cmp	r3, r4
 800ec00:	bf04      	itt	eq
 800ec02:	2301      	moveq	r3, #1
 800ec04:	61a3      	streq	r3, [r4, #24]
 800ec06:	4620      	mov	r0, r4
 800ec08:	f000 f820 	bl	800ec4c <__sfp>
 800ec0c:	6060      	str	r0, [r4, #4]
 800ec0e:	4620      	mov	r0, r4
 800ec10:	f000 f81c 	bl	800ec4c <__sfp>
 800ec14:	60a0      	str	r0, [r4, #8]
 800ec16:	4620      	mov	r0, r4
 800ec18:	f000 f818 	bl	800ec4c <__sfp>
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	60e0      	str	r0, [r4, #12]
 800ec20:	2104      	movs	r1, #4
 800ec22:	6860      	ldr	r0, [r4, #4]
 800ec24:	f7ff ff82 	bl	800eb2c <std>
 800ec28:	68a0      	ldr	r0, [r4, #8]
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	2109      	movs	r1, #9
 800ec2e:	f7ff ff7d 	bl	800eb2c <std>
 800ec32:	68e0      	ldr	r0, [r4, #12]
 800ec34:	2202      	movs	r2, #2
 800ec36:	2112      	movs	r1, #18
 800ec38:	f7ff ff78 	bl	800eb2c <std>
 800ec3c:	2301      	movs	r3, #1
 800ec3e:	61a3      	str	r3, [r4, #24]
 800ec40:	e7d2      	b.n	800ebe8 <__sinit+0xc>
 800ec42:	bf00      	nop
 800ec44:	0800fe88 	.word	0x0800fe88
 800ec48:	0800eb75 	.word	0x0800eb75

0800ec4c <__sfp>:
 800ec4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec4e:	4607      	mov	r7, r0
 800ec50:	f7ff ffac 	bl	800ebac <__sfp_lock_acquire>
 800ec54:	4b1e      	ldr	r3, [pc, #120]	; (800ecd0 <__sfp+0x84>)
 800ec56:	681e      	ldr	r6, [r3, #0]
 800ec58:	69b3      	ldr	r3, [r6, #24]
 800ec5a:	b913      	cbnz	r3, 800ec62 <__sfp+0x16>
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f7ff ffbd 	bl	800ebdc <__sinit>
 800ec62:	3648      	adds	r6, #72	; 0x48
 800ec64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec68:	3b01      	subs	r3, #1
 800ec6a:	d503      	bpl.n	800ec74 <__sfp+0x28>
 800ec6c:	6833      	ldr	r3, [r6, #0]
 800ec6e:	b30b      	cbz	r3, 800ecb4 <__sfp+0x68>
 800ec70:	6836      	ldr	r6, [r6, #0]
 800ec72:	e7f7      	b.n	800ec64 <__sfp+0x18>
 800ec74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec78:	b9d5      	cbnz	r5, 800ecb0 <__sfp+0x64>
 800ec7a:	4b16      	ldr	r3, [pc, #88]	; (800ecd4 <__sfp+0x88>)
 800ec7c:	60e3      	str	r3, [r4, #12]
 800ec7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec82:	6665      	str	r5, [r4, #100]	; 0x64
 800ec84:	f000 f847 	bl	800ed16 <__retarget_lock_init_recursive>
 800ec88:	f7ff ff96 	bl	800ebb8 <__sfp_lock_release>
 800ec8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec94:	6025      	str	r5, [r4, #0]
 800ec96:	61a5      	str	r5, [r4, #24]
 800ec98:	2208      	movs	r2, #8
 800ec9a:	4629      	mov	r1, r5
 800ec9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800eca0:	f7fd fab0 	bl	800c204 <memset>
 800eca4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800eca8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ecac:	4620      	mov	r0, r4
 800ecae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecb0:	3468      	adds	r4, #104	; 0x68
 800ecb2:	e7d9      	b.n	800ec68 <__sfp+0x1c>
 800ecb4:	2104      	movs	r1, #4
 800ecb6:	4638      	mov	r0, r7
 800ecb8:	f7ff ff62 	bl	800eb80 <__sfmoreglue>
 800ecbc:	4604      	mov	r4, r0
 800ecbe:	6030      	str	r0, [r6, #0]
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d1d5      	bne.n	800ec70 <__sfp+0x24>
 800ecc4:	f7ff ff78 	bl	800ebb8 <__sfp_lock_release>
 800ecc8:	230c      	movs	r3, #12
 800ecca:	603b      	str	r3, [r7, #0]
 800eccc:	e7ee      	b.n	800ecac <__sfp+0x60>
 800ecce:	bf00      	nop
 800ecd0:	0800fe88 	.word	0x0800fe88
 800ecd4:	ffff0001 	.word	0xffff0001

0800ecd8 <_fwalk_reent>:
 800ecd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecdc:	4606      	mov	r6, r0
 800ecde:	4688      	mov	r8, r1
 800ece0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ece4:	2700      	movs	r7, #0
 800ece6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecea:	f1b9 0901 	subs.w	r9, r9, #1
 800ecee:	d505      	bpl.n	800ecfc <_fwalk_reent+0x24>
 800ecf0:	6824      	ldr	r4, [r4, #0]
 800ecf2:	2c00      	cmp	r4, #0
 800ecf4:	d1f7      	bne.n	800ece6 <_fwalk_reent+0xe>
 800ecf6:	4638      	mov	r0, r7
 800ecf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ecfc:	89ab      	ldrh	r3, [r5, #12]
 800ecfe:	2b01      	cmp	r3, #1
 800ed00:	d907      	bls.n	800ed12 <_fwalk_reent+0x3a>
 800ed02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed06:	3301      	adds	r3, #1
 800ed08:	d003      	beq.n	800ed12 <_fwalk_reent+0x3a>
 800ed0a:	4629      	mov	r1, r5
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	47c0      	blx	r8
 800ed10:	4307      	orrs	r7, r0
 800ed12:	3568      	adds	r5, #104	; 0x68
 800ed14:	e7e9      	b.n	800ecea <_fwalk_reent+0x12>

0800ed16 <__retarget_lock_init_recursive>:
 800ed16:	4770      	bx	lr

0800ed18 <__retarget_lock_acquire_recursive>:
 800ed18:	4770      	bx	lr

0800ed1a <__retarget_lock_release_recursive>:
 800ed1a:	4770      	bx	lr

0800ed1c <__swhatbuf_r>:
 800ed1c:	b570      	push	{r4, r5, r6, lr}
 800ed1e:	460e      	mov	r6, r1
 800ed20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed24:	2900      	cmp	r1, #0
 800ed26:	b096      	sub	sp, #88	; 0x58
 800ed28:	4614      	mov	r4, r2
 800ed2a:	461d      	mov	r5, r3
 800ed2c:	da08      	bge.n	800ed40 <__swhatbuf_r+0x24>
 800ed2e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ed32:	2200      	movs	r2, #0
 800ed34:	602a      	str	r2, [r5, #0]
 800ed36:	061a      	lsls	r2, r3, #24
 800ed38:	d410      	bmi.n	800ed5c <__swhatbuf_r+0x40>
 800ed3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed3e:	e00e      	b.n	800ed5e <__swhatbuf_r+0x42>
 800ed40:	466a      	mov	r2, sp
 800ed42:	f000 f903 	bl	800ef4c <_fstat_r>
 800ed46:	2800      	cmp	r0, #0
 800ed48:	dbf1      	blt.n	800ed2e <__swhatbuf_r+0x12>
 800ed4a:	9a01      	ldr	r2, [sp, #4]
 800ed4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ed50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ed54:	425a      	negs	r2, r3
 800ed56:	415a      	adcs	r2, r3
 800ed58:	602a      	str	r2, [r5, #0]
 800ed5a:	e7ee      	b.n	800ed3a <__swhatbuf_r+0x1e>
 800ed5c:	2340      	movs	r3, #64	; 0x40
 800ed5e:	2000      	movs	r0, #0
 800ed60:	6023      	str	r3, [r4, #0]
 800ed62:	b016      	add	sp, #88	; 0x58
 800ed64:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ed68 <__smakebuf_r>:
 800ed68:	898b      	ldrh	r3, [r1, #12]
 800ed6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ed6c:	079d      	lsls	r5, r3, #30
 800ed6e:	4606      	mov	r6, r0
 800ed70:	460c      	mov	r4, r1
 800ed72:	d507      	bpl.n	800ed84 <__smakebuf_r+0x1c>
 800ed74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ed78:	6023      	str	r3, [r4, #0]
 800ed7a:	6123      	str	r3, [r4, #16]
 800ed7c:	2301      	movs	r3, #1
 800ed7e:	6163      	str	r3, [r4, #20]
 800ed80:	b002      	add	sp, #8
 800ed82:	bd70      	pop	{r4, r5, r6, pc}
 800ed84:	ab01      	add	r3, sp, #4
 800ed86:	466a      	mov	r2, sp
 800ed88:	f7ff ffc8 	bl	800ed1c <__swhatbuf_r>
 800ed8c:	9900      	ldr	r1, [sp, #0]
 800ed8e:	4605      	mov	r5, r0
 800ed90:	4630      	mov	r0, r6
 800ed92:	f7ff f963 	bl	800e05c <_malloc_r>
 800ed96:	b948      	cbnz	r0, 800edac <__smakebuf_r+0x44>
 800ed98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed9c:	059a      	lsls	r2, r3, #22
 800ed9e:	d4ef      	bmi.n	800ed80 <__smakebuf_r+0x18>
 800eda0:	f023 0303 	bic.w	r3, r3, #3
 800eda4:	f043 0302 	orr.w	r3, r3, #2
 800eda8:	81a3      	strh	r3, [r4, #12]
 800edaa:	e7e3      	b.n	800ed74 <__smakebuf_r+0xc>
 800edac:	4b0d      	ldr	r3, [pc, #52]	; (800ede4 <__smakebuf_r+0x7c>)
 800edae:	62b3      	str	r3, [r6, #40]	; 0x28
 800edb0:	89a3      	ldrh	r3, [r4, #12]
 800edb2:	6020      	str	r0, [r4, #0]
 800edb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800edb8:	81a3      	strh	r3, [r4, #12]
 800edba:	9b00      	ldr	r3, [sp, #0]
 800edbc:	6163      	str	r3, [r4, #20]
 800edbe:	9b01      	ldr	r3, [sp, #4]
 800edc0:	6120      	str	r0, [r4, #16]
 800edc2:	b15b      	cbz	r3, 800eddc <__smakebuf_r+0x74>
 800edc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edc8:	4630      	mov	r0, r6
 800edca:	f000 f8d1 	bl	800ef70 <_isatty_r>
 800edce:	b128      	cbz	r0, 800eddc <__smakebuf_r+0x74>
 800edd0:	89a3      	ldrh	r3, [r4, #12]
 800edd2:	f023 0303 	bic.w	r3, r3, #3
 800edd6:	f043 0301 	orr.w	r3, r3, #1
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	89a0      	ldrh	r0, [r4, #12]
 800edde:	4305      	orrs	r5, r0
 800ede0:	81a5      	strh	r5, [r4, #12]
 800ede2:	e7cd      	b.n	800ed80 <__smakebuf_r+0x18>
 800ede4:	0800eb75 	.word	0x0800eb75

0800ede8 <_malloc_usable_size_r>:
 800ede8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edec:	1f18      	subs	r0, r3, #4
 800edee:	2b00      	cmp	r3, #0
 800edf0:	bfbc      	itt	lt
 800edf2:	580b      	ldrlt	r3, [r1, r0]
 800edf4:	18c0      	addlt	r0, r0, r3
 800edf6:	4770      	bx	lr

0800edf8 <_raise_r>:
 800edf8:	291f      	cmp	r1, #31
 800edfa:	b538      	push	{r3, r4, r5, lr}
 800edfc:	4604      	mov	r4, r0
 800edfe:	460d      	mov	r5, r1
 800ee00:	d904      	bls.n	800ee0c <_raise_r+0x14>
 800ee02:	2316      	movs	r3, #22
 800ee04:	6003      	str	r3, [r0, #0]
 800ee06:	f04f 30ff 	mov.w	r0, #4294967295
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ee0e:	b112      	cbz	r2, 800ee16 <_raise_r+0x1e>
 800ee10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ee14:	b94b      	cbnz	r3, 800ee2a <_raise_r+0x32>
 800ee16:	4620      	mov	r0, r4
 800ee18:	f000 f830 	bl	800ee7c <_getpid_r>
 800ee1c:	462a      	mov	r2, r5
 800ee1e:	4601      	mov	r1, r0
 800ee20:	4620      	mov	r0, r4
 800ee22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ee26:	f000 b817 	b.w	800ee58 <_kill_r>
 800ee2a:	2b01      	cmp	r3, #1
 800ee2c:	d00a      	beq.n	800ee44 <_raise_r+0x4c>
 800ee2e:	1c59      	adds	r1, r3, #1
 800ee30:	d103      	bne.n	800ee3a <_raise_r+0x42>
 800ee32:	2316      	movs	r3, #22
 800ee34:	6003      	str	r3, [r0, #0]
 800ee36:	2001      	movs	r0, #1
 800ee38:	e7e7      	b.n	800ee0a <_raise_r+0x12>
 800ee3a:	2400      	movs	r4, #0
 800ee3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ee40:	4628      	mov	r0, r5
 800ee42:	4798      	blx	r3
 800ee44:	2000      	movs	r0, #0
 800ee46:	e7e0      	b.n	800ee0a <_raise_r+0x12>

0800ee48 <raise>:
 800ee48:	4b02      	ldr	r3, [pc, #8]	; (800ee54 <raise+0xc>)
 800ee4a:	4601      	mov	r1, r0
 800ee4c:	6818      	ldr	r0, [r3, #0]
 800ee4e:	f7ff bfd3 	b.w	800edf8 <_raise_r>
 800ee52:	bf00      	nop
 800ee54:	2000002c 	.word	0x2000002c

0800ee58 <_kill_r>:
 800ee58:	b538      	push	{r3, r4, r5, lr}
 800ee5a:	4d07      	ldr	r5, [pc, #28]	; (800ee78 <_kill_r+0x20>)
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	4604      	mov	r4, r0
 800ee60:	4608      	mov	r0, r1
 800ee62:	4611      	mov	r1, r2
 800ee64:	602b      	str	r3, [r5, #0]
 800ee66:	f7f6 f875 	bl	8004f54 <_kill>
 800ee6a:	1c43      	adds	r3, r0, #1
 800ee6c:	d102      	bne.n	800ee74 <_kill_r+0x1c>
 800ee6e:	682b      	ldr	r3, [r5, #0]
 800ee70:	b103      	cbz	r3, 800ee74 <_kill_r+0x1c>
 800ee72:	6023      	str	r3, [r4, #0]
 800ee74:	bd38      	pop	{r3, r4, r5, pc}
 800ee76:	bf00      	nop
 800ee78:	20000770 	.word	0x20000770

0800ee7c <_getpid_r>:
 800ee7c:	f7f6 b862 	b.w	8004f44 <_getpid>

0800ee80 <__sread>:
 800ee80:	b510      	push	{r4, lr}
 800ee82:	460c      	mov	r4, r1
 800ee84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee88:	f000 f894 	bl	800efb4 <_read_r>
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	bfab      	itete	ge
 800ee90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee92:	89a3      	ldrhlt	r3, [r4, #12]
 800ee94:	181b      	addge	r3, r3, r0
 800ee96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee9a:	bfac      	ite	ge
 800ee9c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee9e:	81a3      	strhlt	r3, [r4, #12]
 800eea0:	bd10      	pop	{r4, pc}

0800eea2 <__swrite>:
 800eea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea6:	461f      	mov	r7, r3
 800eea8:	898b      	ldrh	r3, [r1, #12]
 800eeaa:	05db      	lsls	r3, r3, #23
 800eeac:	4605      	mov	r5, r0
 800eeae:	460c      	mov	r4, r1
 800eeb0:	4616      	mov	r6, r2
 800eeb2:	d505      	bpl.n	800eec0 <__swrite+0x1e>
 800eeb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeb8:	2302      	movs	r3, #2
 800eeba:	2200      	movs	r2, #0
 800eebc:	f000 f868 	bl	800ef90 <_lseek_r>
 800eec0:	89a3      	ldrh	r3, [r4, #12]
 800eec2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eec6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eeca:	81a3      	strh	r3, [r4, #12]
 800eecc:	4632      	mov	r2, r6
 800eece:	463b      	mov	r3, r7
 800eed0:	4628      	mov	r0, r5
 800eed2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eed6:	f000 b817 	b.w	800ef08 <_write_r>

0800eeda <__sseek>:
 800eeda:	b510      	push	{r4, lr}
 800eedc:	460c      	mov	r4, r1
 800eede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eee2:	f000 f855 	bl	800ef90 <_lseek_r>
 800eee6:	1c43      	adds	r3, r0, #1
 800eee8:	89a3      	ldrh	r3, [r4, #12]
 800eeea:	bf15      	itete	ne
 800eeec:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eef2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eef6:	81a3      	strheq	r3, [r4, #12]
 800eef8:	bf18      	it	ne
 800eefa:	81a3      	strhne	r3, [r4, #12]
 800eefc:	bd10      	pop	{r4, pc}

0800eefe <__sclose>:
 800eefe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ef02:	f000 b813 	b.w	800ef2c <_close_r>
	...

0800ef08 <_write_r>:
 800ef08:	b538      	push	{r3, r4, r5, lr}
 800ef0a:	4d07      	ldr	r5, [pc, #28]	; (800ef28 <_write_r+0x20>)
 800ef0c:	4604      	mov	r4, r0
 800ef0e:	4608      	mov	r0, r1
 800ef10:	4611      	mov	r1, r2
 800ef12:	2200      	movs	r2, #0
 800ef14:	602a      	str	r2, [r5, #0]
 800ef16:	461a      	mov	r2, r3
 800ef18:	f7f6 f853 	bl	8004fc2 <_write>
 800ef1c:	1c43      	adds	r3, r0, #1
 800ef1e:	d102      	bne.n	800ef26 <_write_r+0x1e>
 800ef20:	682b      	ldr	r3, [r5, #0]
 800ef22:	b103      	cbz	r3, 800ef26 <_write_r+0x1e>
 800ef24:	6023      	str	r3, [r4, #0]
 800ef26:	bd38      	pop	{r3, r4, r5, pc}
 800ef28:	20000770 	.word	0x20000770

0800ef2c <_close_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4d06      	ldr	r5, [pc, #24]	; (800ef48 <_close_r+0x1c>)
 800ef30:	2300      	movs	r3, #0
 800ef32:	4604      	mov	r4, r0
 800ef34:	4608      	mov	r0, r1
 800ef36:	602b      	str	r3, [r5, #0]
 800ef38:	f7f6 f85f 	bl	8004ffa <_close>
 800ef3c:	1c43      	adds	r3, r0, #1
 800ef3e:	d102      	bne.n	800ef46 <_close_r+0x1a>
 800ef40:	682b      	ldr	r3, [r5, #0]
 800ef42:	b103      	cbz	r3, 800ef46 <_close_r+0x1a>
 800ef44:	6023      	str	r3, [r4, #0]
 800ef46:	bd38      	pop	{r3, r4, r5, pc}
 800ef48:	20000770 	.word	0x20000770

0800ef4c <_fstat_r>:
 800ef4c:	b538      	push	{r3, r4, r5, lr}
 800ef4e:	4d07      	ldr	r5, [pc, #28]	; (800ef6c <_fstat_r+0x20>)
 800ef50:	2300      	movs	r3, #0
 800ef52:	4604      	mov	r4, r0
 800ef54:	4608      	mov	r0, r1
 800ef56:	4611      	mov	r1, r2
 800ef58:	602b      	str	r3, [r5, #0]
 800ef5a:	f7f6 f85a 	bl	8005012 <_fstat>
 800ef5e:	1c43      	adds	r3, r0, #1
 800ef60:	d102      	bne.n	800ef68 <_fstat_r+0x1c>
 800ef62:	682b      	ldr	r3, [r5, #0]
 800ef64:	b103      	cbz	r3, 800ef68 <_fstat_r+0x1c>
 800ef66:	6023      	str	r3, [r4, #0]
 800ef68:	bd38      	pop	{r3, r4, r5, pc}
 800ef6a:	bf00      	nop
 800ef6c:	20000770 	.word	0x20000770

0800ef70 <_isatty_r>:
 800ef70:	b538      	push	{r3, r4, r5, lr}
 800ef72:	4d06      	ldr	r5, [pc, #24]	; (800ef8c <_isatty_r+0x1c>)
 800ef74:	2300      	movs	r3, #0
 800ef76:	4604      	mov	r4, r0
 800ef78:	4608      	mov	r0, r1
 800ef7a:	602b      	str	r3, [r5, #0]
 800ef7c:	f7f6 f859 	bl	8005032 <_isatty>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	d102      	bne.n	800ef8a <_isatty_r+0x1a>
 800ef84:	682b      	ldr	r3, [r5, #0]
 800ef86:	b103      	cbz	r3, 800ef8a <_isatty_r+0x1a>
 800ef88:	6023      	str	r3, [r4, #0]
 800ef8a:	bd38      	pop	{r3, r4, r5, pc}
 800ef8c:	20000770 	.word	0x20000770

0800ef90 <_lseek_r>:
 800ef90:	b538      	push	{r3, r4, r5, lr}
 800ef92:	4d07      	ldr	r5, [pc, #28]	; (800efb0 <_lseek_r+0x20>)
 800ef94:	4604      	mov	r4, r0
 800ef96:	4608      	mov	r0, r1
 800ef98:	4611      	mov	r1, r2
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	602a      	str	r2, [r5, #0]
 800ef9e:	461a      	mov	r2, r3
 800efa0:	f7f6 f852 	bl	8005048 <_lseek>
 800efa4:	1c43      	adds	r3, r0, #1
 800efa6:	d102      	bne.n	800efae <_lseek_r+0x1e>
 800efa8:	682b      	ldr	r3, [r5, #0]
 800efaa:	b103      	cbz	r3, 800efae <_lseek_r+0x1e>
 800efac:	6023      	str	r3, [r4, #0]
 800efae:	bd38      	pop	{r3, r4, r5, pc}
 800efb0:	20000770 	.word	0x20000770

0800efb4 <_read_r>:
 800efb4:	b538      	push	{r3, r4, r5, lr}
 800efb6:	4d07      	ldr	r5, [pc, #28]	; (800efd4 <_read_r+0x20>)
 800efb8:	4604      	mov	r4, r0
 800efba:	4608      	mov	r0, r1
 800efbc:	4611      	mov	r1, r2
 800efbe:	2200      	movs	r2, #0
 800efc0:	602a      	str	r2, [r5, #0]
 800efc2:	461a      	mov	r2, r3
 800efc4:	f7f5 ffe0 	bl	8004f88 <_read>
 800efc8:	1c43      	adds	r3, r0, #1
 800efca:	d102      	bne.n	800efd2 <_read_r+0x1e>
 800efcc:	682b      	ldr	r3, [r5, #0]
 800efce:	b103      	cbz	r3, 800efd2 <_read_r+0x1e>
 800efd0:	6023      	str	r3, [r4, #0]
 800efd2:	bd38      	pop	{r3, r4, r5, pc}
 800efd4:	20000770 	.word	0x20000770

0800efd8 <cosf>:
 800efd8:	ee10 3a10 	vmov	r3, s0
 800efdc:	b507      	push	{r0, r1, r2, lr}
 800efde:	4a1e      	ldr	r2, [pc, #120]	; (800f058 <cosf+0x80>)
 800efe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800efe4:	4293      	cmp	r3, r2
 800efe6:	dc06      	bgt.n	800eff6 <cosf+0x1e>
 800efe8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800f05c <cosf+0x84>
 800efec:	b003      	add	sp, #12
 800efee:	f85d eb04 	ldr.w	lr, [sp], #4
 800eff2:	f000 bacd 	b.w	800f590 <__kernel_cosf>
 800eff6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800effa:	db04      	blt.n	800f006 <cosf+0x2e>
 800effc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f000:	b003      	add	sp, #12
 800f002:	f85d fb04 	ldr.w	pc, [sp], #4
 800f006:	4668      	mov	r0, sp
 800f008:	f000 f982 	bl	800f310 <__ieee754_rem_pio2f>
 800f00c:	f000 0003 	and.w	r0, r0, #3
 800f010:	2801      	cmp	r0, #1
 800f012:	d009      	beq.n	800f028 <cosf+0x50>
 800f014:	2802      	cmp	r0, #2
 800f016:	d010      	beq.n	800f03a <cosf+0x62>
 800f018:	b9b0      	cbnz	r0, 800f048 <cosf+0x70>
 800f01a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f01e:	ed9d 0a00 	vldr	s0, [sp]
 800f022:	f000 fab5 	bl	800f590 <__kernel_cosf>
 800f026:	e7eb      	b.n	800f000 <cosf+0x28>
 800f028:	eddd 0a01 	vldr	s1, [sp, #4]
 800f02c:	ed9d 0a00 	vldr	s0, [sp]
 800f030:	f000 fd84 	bl	800fb3c <__kernel_sinf>
 800f034:	eeb1 0a40 	vneg.f32	s0, s0
 800f038:	e7e2      	b.n	800f000 <cosf+0x28>
 800f03a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f03e:	ed9d 0a00 	vldr	s0, [sp]
 800f042:	f000 faa5 	bl	800f590 <__kernel_cosf>
 800f046:	e7f5      	b.n	800f034 <cosf+0x5c>
 800f048:	eddd 0a01 	vldr	s1, [sp, #4]
 800f04c:	ed9d 0a00 	vldr	s0, [sp]
 800f050:	2001      	movs	r0, #1
 800f052:	f000 fd73 	bl	800fb3c <__kernel_sinf>
 800f056:	e7d3      	b.n	800f000 <cosf+0x28>
 800f058:	3f490fd8 	.word	0x3f490fd8
 800f05c:	00000000 	.word	0x00000000

0800f060 <fmaxf>:
 800f060:	b508      	push	{r3, lr}
 800f062:	ed2d 8b02 	vpush	{d8}
 800f066:	eeb0 8a40 	vmov.f32	s16, s0
 800f06a:	eef0 8a60 	vmov.f32	s17, s1
 800f06e:	f000 f82d 	bl	800f0cc <__fpclassifyf>
 800f072:	b148      	cbz	r0, 800f088 <fmaxf+0x28>
 800f074:	eeb0 0a68 	vmov.f32	s0, s17
 800f078:	f000 f828 	bl	800f0cc <__fpclassifyf>
 800f07c:	b130      	cbz	r0, 800f08c <fmaxf+0x2c>
 800f07e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f086:	dc01      	bgt.n	800f08c <fmaxf+0x2c>
 800f088:	eeb0 8a68 	vmov.f32	s16, s17
 800f08c:	eeb0 0a48 	vmov.f32	s0, s16
 800f090:	ecbd 8b02 	vpop	{d8}
 800f094:	bd08      	pop	{r3, pc}

0800f096 <fminf>:
 800f096:	b508      	push	{r3, lr}
 800f098:	ed2d 8b02 	vpush	{d8}
 800f09c:	eeb0 8a40 	vmov.f32	s16, s0
 800f0a0:	eef0 8a60 	vmov.f32	s17, s1
 800f0a4:	f000 f812 	bl	800f0cc <__fpclassifyf>
 800f0a8:	b148      	cbz	r0, 800f0be <fminf+0x28>
 800f0aa:	eeb0 0a68 	vmov.f32	s0, s17
 800f0ae:	f000 f80d 	bl	800f0cc <__fpclassifyf>
 800f0b2:	b130      	cbz	r0, 800f0c2 <fminf+0x2c>
 800f0b4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f0b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0bc:	d401      	bmi.n	800f0c2 <fminf+0x2c>
 800f0be:	eeb0 8a68 	vmov.f32	s16, s17
 800f0c2:	eeb0 0a48 	vmov.f32	s0, s16
 800f0c6:	ecbd 8b02 	vpop	{d8}
 800f0ca:	bd08      	pop	{r3, pc}

0800f0cc <__fpclassifyf>:
 800f0cc:	ee10 3a10 	vmov	r3, s0
 800f0d0:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 800f0d4:	d00d      	beq.n	800f0f2 <__fpclassifyf+0x26>
 800f0d6:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800f0da:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800f0de:	d30a      	bcc.n	800f0f6 <__fpclassifyf+0x2a>
 800f0e0:	4b07      	ldr	r3, [pc, #28]	; (800f100 <__fpclassifyf+0x34>)
 800f0e2:	1e42      	subs	r2, r0, #1
 800f0e4:	429a      	cmp	r2, r3
 800f0e6:	d908      	bls.n	800f0fa <__fpclassifyf+0x2e>
 800f0e8:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800f0ec:	4258      	negs	r0, r3
 800f0ee:	4158      	adcs	r0, r3
 800f0f0:	4770      	bx	lr
 800f0f2:	2002      	movs	r0, #2
 800f0f4:	4770      	bx	lr
 800f0f6:	2004      	movs	r0, #4
 800f0f8:	4770      	bx	lr
 800f0fa:	2003      	movs	r0, #3
 800f0fc:	4770      	bx	lr
 800f0fe:	bf00      	nop
 800f100:	007ffffe 	.word	0x007ffffe

0800f104 <sinf>:
 800f104:	ee10 3a10 	vmov	r3, s0
 800f108:	b507      	push	{r0, r1, r2, lr}
 800f10a:	4a1f      	ldr	r2, [pc, #124]	; (800f188 <sinf+0x84>)
 800f10c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f110:	4293      	cmp	r3, r2
 800f112:	dc07      	bgt.n	800f124 <sinf+0x20>
 800f114:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800f18c <sinf+0x88>
 800f118:	2000      	movs	r0, #0
 800f11a:	b003      	add	sp, #12
 800f11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f120:	f000 bd0c 	b.w	800fb3c <__kernel_sinf>
 800f124:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f128:	db04      	blt.n	800f134 <sinf+0x30>
 800f12a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f12e:	b003      	add	sp, #12
 800f130:	f85d fb04 	ldr.w	pc, [sp], #4
 800f134:	4668      	mov	r0, sp
 800f136:	f000 f8eb 	bl	800f310 <__ieee754_rem_pio2f>
 800f13a:	f000 0003 	and.w	r0, r0, #3
 800f13e:	2801      	cmp	r0, #1
 800f140:	d00a      	beq.n	800f158 <sinf+0x54>
 800f142:	2802      	cmp	r0, #2
 800f144:	d00f      	beq.n	800f166 <sinf+0x62>
 800f146:	b9c0      	cbnz	r0, 800f17a <sinf+0x76>
 800f148:	eddd 0a01 	vldr	s1, [sp, #4]
 800f14c:	ed9d 0a00 	vldr	s0, [sp]
 800f150:	2001      	movs	r0, #1
 800f152:	f000 fcf3 	bl	800fb3c <__kernel_sinf>
 800f156:	e7ea      	b.n	800f12e <sinf+0x2a>
 800f158:	eddd 0a01 	vldr	s1, [sp, #4]
 800f15c:	ed9d 0a00 	vldr	s0, [sp]
 800f160:	f000 fa16 	bl	800f590 <__kernel_cosf>
 800f164:	e7e3      	b.n	800f12e <sinf+0x2a>
 800f166:	eddd 0a01 	vldr	s1, [sp, #4]
 800f16a:	ed9d 0a00 	vldr	s0, [sp]
 800f16e:	2001      	movs	r0, #1
 800f170:	f000 fce4 	bl	800fb3c <__kernel_sinf>
 800f174:	eeb1 0a40 	vneg.f32	s0, s0
 800f178:	e7d9      	b.n	800f12e <sinf+0x2a>
 800f17a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f17e:	ed9d 0a00 	vldr	s0, [sp]
 800f182:	f000 fa05 	bl	800f590 <__kernel_cosf>
 800f186:	e7f5      	b.n	800f174 <sinf+0x70>
 800f188:	3f490fd8 	.word	0x3f490fd8
 800f18c:	00000000 	.word	0x00000000

0800f190 <fmodf>:
 800f190:	b508      	push	{r3, lr}
 800f192:	ed2d 8b02 	vpush	{d8}
 800f196:	eef0 8a40 	vmov.f32	s17, s0
 800f19a:	eeb0 8a60 	vmov.f32	s16, s1
 800f19e:	f000 f835 	bl	800f20c <__ieee754_fmodf>
 800f1a2:	eef4 8a48 	vcmp.f32	s17, s16
 800f1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1aa:	d60c      	bvs.n	800f1c6 <fmodf+0x36>
 800f1ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f1cc <fmodf+0x3c>
 800f1b0:	eeb4 8a68 	vcmp.f32	s16, s17
 800f1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1b8:	d105      	bne.n	800f1c6 <fmodf+0x36>
 800f1ba:	f7fc fff9 	bl	800c1b0 <__errno>
 800f1be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f1c2:	2321      	movs	r3, #33	; 0x21
 800f1c4:	6003      	str	r3, [r0, #0]
 800f1c6:	ecbd 8b02 	vpop	{d8}
 800f1ca:	bd08      	pop	{r3, pc}
 800f1cc:	00000000 	.word	0x00000000

0800f1d0 <sqrtf>:
 800f1d0:	b508      	push	{r3, lr}
 800f1d2:	ed2d 8b02 	vpush	{d8}
 800f1d6:	eeb0 8a40 	vmov.f32	s16, s0
 800f1da:	f000 f9d5 	bl	800f588 <__ieee754_sqrtf>
 800f1de:	eeb4 8a48 	vcmp.f32	s16, s16
 800f1e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e6:	d60c      	bvs.n	800f202 <sqrtf+0x32>
 800f1e8:	eddf 8a07 	vldr	s17, [pc, #28]	; 800f208 <sqrtf+0x38>
 800f1ec:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	d505      	bpl.n	800f202 <sqrtf+0x32>
 800f1f6:	f7fc ffdb 	bl	800c1b0 <__errno>
 800f1fa:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f1fe:	2321      	movs	r3, #33	; 0x21
 800f200:	6003      	str	r3, [r0, #0]
 800f202:	ecbd 8b02 	vpop	{d8}
 800f206:	bd08      	pop	{r3, pc}
 800f208:	00000000 	.word	0x00000000

0800f20c <__ieee754_fmodf>:
 800f20c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f20e:	ee10 5a90 	vmov	r5, s1
 800f212:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 800f216:	d009      	beq.n	800f22c <__ieee754_fmodf+0x20>
 800f218:	ee10 2a10 	vmov	r2, s0
 800f21c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800f220:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f224:	da02      	bge.n	800f22c <__ieee754_fmodf+0x20>
 800f226:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800f22a:	dd04      	ble.n	800f236 <__ieee754_fmodf+0x2a>
 800f22c:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f230:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f236:	42a3      	cmp	r3, r4
 800f238:	dbfc      	blt.n	800f234 <__ieee754_fmodf+0x28>
 800f23a:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 800f23e:	d105      	bne.n	800f24c <__ieee754_fmodf+0x40>
 800f240:	4b32      	ldr	r3, [pc, #200]	; (800f30c <__ieee754_fmodf+0x100>)
 800f242:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 800f246:	ed93 0a00 	vldr	s0, [r3]
 800f24a:	e7f3      	b.n	800f234 <__ieee754_fmodf+0x28>
 800f24c:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 800f250:	d13f      	bne.n	800f2d2 <__ieee754_fmodf+0xc6>
 800f252:	0219      	lsls	r1, r3, #8
 800f254:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800f258:	2900      	cmp	r1, #0
 800f25a:	dc37      	bgt.n	800f2cc <__ieee754_fmodf+0xc0>
 800f25c:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 800f260:	d13d      	bne.n	800f2de <__ieee754_fmodf+0xd2>
 800f262:	0227      	lsls	r7, r4, #8
 800f264:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800f268:	2f00      	cmp	r7, #0
 800f26a:	da35      	bge.n	800f2d8 <__ieee754_fmodf+0xcc>
 800f26c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800f270:	bfbb      	ittet	lt
 800f272:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f276:	1a12      	sublt	r2, r2, r0
 800f278:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800f27c:	4093      	lsllt	r3, r2
 800f27e:	bfa8      	it	ge
 800f280:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800f284:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f288:	bfb5      	itete	lt
 800f28a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800f28e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 800f292:	1a52      	sublt	r2, r2, r1
 800f294:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 800f298:	bfb8      	it	lt
 800f29a:	4094      	lsllt	r4, r2
 800f29c:	1a40      	subs	r0, r0, r1
 800f29e:	1b1a      	subs	r2, r3, r4
 800f2a0:	bb00      	cbnz	r0, 800f2e4 <__ieee754_fmodf+0xd8>
 800f2a2:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800f2a6:	bf38      	it	cc
 800f2a8:	4613      	movcc	r3, r2
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d0c8      	beq.n	800f240 <__ieee754_fmodf+0x34>
 800f2ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f2b2:	db1f      	blt.n	800f2f4 <__ieee754_fmodf+0xe8>
 800f2b4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800f2b8:	db1f      	blt.n	800f2fa <__ieee754_fmodf+0xee>
 800f2ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800f2be:	317f      	adds	r1, #127	; 0x7f
 800f2c0:	4333      	orrs	r3, r6
 800f2c2:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800f2c6:	ee00 3a10 	vmov	s0, r3
 800f2ca:	e7b3      	b.n	800f234 <__ieee754_fmodf+0x28>
 800f2cc:	3801      	subs	r0, #1
 800f2ce:	0049      	lsls	r1, r1, #1
 800f2d0:	e7c2      	b.n	800f258 <__ieee754_fmodf+0x4c>
 800f2d2:	15d8      	asrs	r0, r3, #23
 800f2d4:	387f      	subs	r0, #127	; 0x7f
 800f2d6:	e7c1      	b.n	800f25c <__ieee754_fmodf+0x50>
 800f2d8:	3901      	subs	r1, #1
 800f2da:	007f      	lsls	r7, r7, #1
 800f2dc:	e7c4      	b.n	800f268 <__ieee754_fmodf+0x5c>
 800f2de:	15e1      	asrs	r1, r4, #23
 800f2e0:	397f      	subs	r1, #127	; 0x7f
 800f2e2:	e7c3      	b.n	800f26c <__ieee754_fmodf+0x60>
 800f2e4:	2a00      	cmp	r2, #0
 800f2e6:	da02      	bge.n	800f2ee <__ieee754_fmodf+0xe2>
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	3801      	subs	r0, #1
 800f2ec:	e7d7      	b.n	800f29e <__ieee754_fmodf+0x92>
 800f2ee:	d0a7      	beq.n	800f240 <__ieee754_fmodf+0x34>
 800f2f0:	0053      	lsls	r3, r2, #1
 800f2f2:	e7fa      	b.n	800f2ea <__ieee754_fmodf+0xde>
 800f2f4:	005b      	lsls	r3, r3, #1
 800f2f6:	3901      	subs	r1, #1
 800f2f8:	e7d9      	b.n	800f2ae <__ieee754_fmodf+0xa2>
 800f2fa:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800f2fe:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800f302:	3182      	adds	r1, #130	; 0x82
 800f304:	410b      	asrs	r3, r1
 800f306:	4333      	orrs	r3, r6
 800f308:	e7dd      	b.n	800f2c6 <__ieee754_fmodf+0xba>
 800f30a:	bf00      	nop
 800f30c:	08010264 	.word	0x08010264

0800f310 <__ieee754_rem_pio2f>:
 800f310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f312:	ee10 6a10 	vmov	r6, s0
 800f316:	4b8e      	ldr	r3, [pc, #568]	; (800f550 <__ieee754_rem_pio2f+0x240>)
 800f318:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800f31c:	429d      	cmp	r5, r3
 800f31e:	b087      	sub	sp, #28
 800f320:	eef0 7a40 	vmov.f32	s15, s0
 800f324:	4604      	mov	r4, r0
 800f326:	dc05      	bgt.n	800f334 <__ieee754_rem_pio2f+0x24>
 800f328:	2300      	movs	r3, #0
 800f32a:	ed80 0a00 	vstr	s0, [r0]
 800f32e:	6043      	str	r3, [r0, #4]
 800f330:	2000      	movs	r0, #0
 800f332:	e01a      	b.n	800f36a <__ieee754_rem_pio2f+0x5a>
 800f334:	4b87      	ldr	r3, [pc, #540]	; (800f554 <__ieee754_rem_pio2f+0x244>)
 800f336:	429d      	cmp	r5, r3
 800f338:	dc46      	bgt.n	800f3c8 <__ieee754_rem_pio2f+0xb8>
 800f33a:	2e00      	cmp	r6, #0
 800f33c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800f558 <__ieee754_rem_pio2f+0x248>
 800f340:	4b86      	ldr	r3, [pc, #536]	; (800f55c <__ieee754_rem_pio2f+0x24c>)
 800f342:	f025 050f 	bic.w	r5, r5, #15
 800f346:	dd1f      	ble.n	800f388 <__ieee754_rem_pio2f+0x78>
 800f348:	429d      	cmp	r5, r3
 800f34a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f34e:	d00e      	beq.n	800f36e <__ieee754_rem_pio2f+0x5e>
 800f350:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800f560 <__ieee754_rem_pio2f+0x250>
 800f354:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800f358:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f35c:	ed80 0a00 	vstr	s0, [r0]
 800f360:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f364:	2001      	movs	r0, #1
 800f366:	edc4 7a01 	vstr	s15, [r4, #4]
 800f36a:	b007      	add	sp, #28
 800f36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f36e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800f564 <__ieee754_rem_pio2f+0x254>
 800f372:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800f568 <__ieee754_rem_pio2f+0x258>
 800f376:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f37a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800f37e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f382:	edc0 6a00 	vstr	s13, [r0]
 800f386:	e7eb      	b.n	800f360 <__ieee754_rem_pio2f+0x50>
 800f388:	429d      	cmp	r5, r3
 800f38a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f38e:	d00e      	beq.n	800f3ae <__ieee754_rem_pio2f+0x9e>
 800f390:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800f560 <__ieee754_rem_pio2f+0x250>
 800f394:	ee37 0a87 	vadd.f32	s0, s15, s14
 800f398:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800f39c:	ed80 0a00 	vstr	s0, [r0]
 800f3a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800f3a8:	edc4 7a01 	vstr	s15, [r4, #4]
 800f3ac:	e7dd      	b.n	800f36a <__ieee754_rem_pio2f+0x5a>
 800f3ae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800f564 <__ieee754_rem_pio2f+0x254>
 800f3b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800f568 <__ieee754_rem_pio2f+0x258>
 800f3b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800f3ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800f3be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f3c2:	edc0 6a00 	vstr	s13, [r0]
 800f3c6:	e7eb      	b.n	800f3a0 <__ieee754_rem_pio2f+0x90>
 800f3c8:	4b68      	ldr	r3, [pc, #416]	; (800f56c <__ieee754_rem_pio2f+0x25c>)
 800f3ca:	429d      	cmp	r5, r3
 800f3cc:	dc72      	bgt.n	800f4b4 <__ieee754_rem_pio2f+0x1a4>
 800f3ce:	f000 fbfd 	bl	800fbcc <fabsf>
 800f3d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800f570 <__ieee754_rem_pio2f+0x260>
 800f3d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f3da:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f3de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f3e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f3e6:	ee17 0a90 	vmov	r0, s15
 800f3ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f558 <__ieee754_rem_pio2f+0x248>
 800f3ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f3f2:	281f      	cmp	r0, #31
 800f3f4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800f560 <__ieee754_rem_pio2f+0x250>
 800f3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3fc:	eeb1 6a47 	vneg.f32	s12, s14
 800f400:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f404:	ee16 2a90 	vmov	r2, s13
 800f408:	dc1c      	bgt.n	800f444 <__ieee754_rem_pio2f+0x134>
 800f40a:	495a      	ldr	r1, [pc, #360]	; (800f574 <__ieee754_rem_pio2f+0x264>)
 800f40c:	1e47      	subs	r7, r0, #1
 800f40e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800f412:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800f416:	428b      	cmp	r3, r1
 800f418:	d014      	beq.n	800f444 <__ieee754_rem_pio2f+0x134>
 800f41a:	6022      	str	r2, [r4, #0]
 800f41c:	ed94 7a00 	vldr	s14, [r4]
 800f420:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f424:	2e00      	cmp	r6, #0
 800f426:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f42a:	ed84 0a01 	vstr	s0, [r4, #4]
 800f42e:	da9c      	bge.n	800f36a <__ieee754_rem_pio2f+0x5a>
 800f430:	eeb1 7a47 	vneg.f32	s14, s14
 800f434:	eeb1 0a40 	vneg.f32	s0, s0
 800f438:	ed84 7a00 	vstr	s14, [r4]
 800f43c:	ed84 0a01 	vstr	s0, [r4, #4]
 800f440:	4240      	negs	r0, r0
 800f442:	e792      	b.n	800f36a <__ieee754_rem_pio2f+0x5a>
 800f444:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f448:	15eb      	asrs	r3, r5, #23
 800f44a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800f44e:	2d08      	cmp	r5, #8
 800f450:	dde3      	ble.n	800f41a <__ieee754_rem_pio2f+0x10a>
 800f452:	eddf 7a44 	vldr	s15, [pc, #272]	; 800f564 <__ieee754_rem_pio2f+0x254>
 800f456:	eddf 5a44 	vldr	s11, [pc, #272]	; 800f568 <__ieee754_rem_pio2f+0x258>
 800f45a:	eef0 6a40 	vmov.f32	s13, s0
 800f45e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800f462:	ee30 0a66 	vsub.f32	s0, s0, s13
 800f466:	eea6 0a27 	vfma.f32	s0, s12, s15
 800f46a:	eef0 7a40 	vmov.f32	s15, s0
 800f46e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f472:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f476:	ee15 2a90 	vmov	r2, s11
 800f47a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f47e:	1a5b      	subs	r3, r3, r1
 800f480:	2b19      	cmp	r3, #25
 800f482:	dc04      	bgt.n	800f48e <__ieee754_rem_pio2f+0x17e>
 800f484:	edc4 5a00 	vstr	s11, [r4]
 800f488:	eeb0 0a66 	vmov.f32	s0, s13
 800f48c:	e7c6      	b.n	800f41c <__ieee754_rem_pio2f+0x10c>
 800f48e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800f578 <__ieee754_rem_pio2f+0x268>
 800f492:	eeb0 0a66 	vmov.f32	s0, s13
 800f496:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f49a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f49e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800f57c <__ieee754_rem_pio2f+0x26c>
 800f4a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f4a6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800f4aa:	ee30 7a67 	vsub.f32	s14, s0, s15
 800f4ae:	ed84 7a00 	vstr	s14, [r4]
 800f4b2:	e7b3      	b.n	800f41c <__ieee754_rem_pio2f+0x10c>
 800f4b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f4b8:	db06      	blt.n	800f4c8 <__ieee754_rem_pio2f+0x1b8>
 800f4ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f4be:	edc0 7a01 	vstr	s15, [r0, #4]
 800f4c2:	edc0 7a00 	vstr	s15, [r0]
 800f4c6:	e733      	b.n	800f330 <__ieee754_rem_pio2f+0x20>
 800f4c8:	15ea      	asrs	r2, r5, #23
 800f4ca:	3a86      	subs	r2, #134	; 0x86
 800f4cc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800f4d0:	ee07 3a90 	vmov	s15, r3
 800f4d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f4d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800f580 <__ieee754_rem_pio2f+0x270>
 800f4dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4e4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800f4e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f4ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800f4f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f4f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f4f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800f4fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800f500:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f508:	edcd 7a05 	vstr	s15, [sp, #20]
 800f50c:	d11e      	bne.n	800f54c <__ieee754_rem_pio2f+0x23c>
 800f50e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f516:	bf14      	ite	ne
 800f518:	2302      	movne	r3, #2
 800f51a:	2301      	moveq	r3, #1
 800f51c:	4919      	ldr	r1, [pc, #100]	; (800f584 <__ieee754_rem_pio2f+0x274>)
 800f51e:	9101      	str	r1, [sp, #4]
 800f520:	2102      	movs	r1, #2
 800f522:	9100      	str	r1, [sp, #0]
 800f524:	a803      	add	r0, sp, #12
 800f526:	4621      	mov	r1, r4
 800f528:	f000 f892 	bl	800f650 <__kernel_rem_pio2f>
 800f52c:	2e00      	cmp	r6, #0
 800f52e:	f6bf af1c 	bge.w	800f36a <__ieee754_rem_pio2f+0x5a>
 800f532:	edd4 7a00 	vldr	s15, [r4]
 800f536:	eef1 7a67 	vneg.f32	s15, s15
 800f53a:	edc4 7a00 	vstr	s15, [r4]
 800f53e:	edd4 7a01 	vldr	s15, [r4, #4]
 800f542:	eef1 7a67 	vneg.f32	s15, s15
 800f546:	edc4 7a01 	vstr	s15, [r4, #4]
 800f54a:	e779      	b.n	800f440 <__ieee754_rem_pio2f+0x130>
 800f54c:	2303      	movs	r3, #3
 800f54e:	e7e5      	b.n	800f51c <__ieee754_rem_pio2f+0x20c>
 800f550:	3f490fd8 	.word	0x3f490fd8
 800f554:	4016cbe3 	.word	0x4016cbe3
 800f558:	3fc90f80 	.word	0x3fc90f80
 800f55c:	3fc90fd0 	.word	0x3fc90fd0
 800f560:	37354443 	.word	0x37354443
 800f564:	37354400 	.word	0x37354400
 800f568:	2e85a308 	.word	0x2e85a308
 800f56c:	43490f80 	.word	0x43490f80
 800f570:	3f22f984 	.word	0x3f22f984
 800f574:	0801026c 	.word	0x0801026c
 800f578:	2e85a300 	.word	0x2e85a300
 800f57c:	248d3132 	.word	0x248d3132
 800f580:	43800000 	.word	0x43800000
 800f584:	080102ec 	.word	0x080102ec

0800f588 <__ieee754_sqrtf>:
 800f588:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f58c:	4770      	bx	lr
	...

0800f590 <__kernel_cosf>:
 800f590:	ee10 3a10 	vmov	r3, s0
 800f594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f598:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800f59c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f5a0:	da05      	bge.n	800f5ae <__kernel_cosf+0x1e>
 800f5a2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f5a6:	ee17 2a90 	vmov	r2, s15
 800f5aa:	2a00      	cmp	r2, #0
 800f5ac:	d03d      	beq.n	800f62a <__kernel_cosf+0x9a>
 800f5ae:	ee60 5a00 	vmul.f32	s11, s0, s0
 800f5b2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800f630 <__kernel_cosf+0xa0>
 800f5b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800f634 <__kernel_cosf+0xa4>
 800f5ba:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800f638 <__kernel_cosf+0xa8>
 800f5be:	4a1f      	ldr	r2, [pc, #124]	; (800f63c <__kernel_cosf+0xac>)
 800f5c0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f5c4:	4293      	cmp	r3, r2
 800f5c6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800f640 <__kernel_cosf+0xb0>
 800f5ca:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f5ce:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800f644 <__kernel_cosf+0xb4>
 800f5d2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f5d6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800f648 <__kernel_cosf+0xb8>
 800f5da:	eee7 7a25 	vfma.f32	s15, s14, s11
 800f5de:	eeb0 7a66 	vmov.f32	s14, s13
 800f5e2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800f5e6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f5ea:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800f5ee:	ee67 6a25 	vmul.f32	s13, s14, s11
 800f5f2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800f5f6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800f5fa:	dc04      	bgt.n	800f606 <__kernel_cosf+0x76>
 800f5fc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800f600:	ee36 0a47 	vsub.f32	s0, s12, s14
 800f604:	4770      	bx	lr
 800f606:	4a11      	ldr	r2, [pc, #68]	; (800f64c <__kernel_cosf+0xbc>)
 800f608:	4293      	cmp	r3, r2
 800f60a:	bfda      	itte	le
 800f60c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800f610:	ee06 3a90 	vmovle	s13, r3
 800f614:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800f618:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f61c:	ee36 0a66 	vsub.f32	s0, s12, s13
 800f620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f624:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f628:	4770      	bx	lr
 800f62a:	eeb0 0a46 	vmov.f32	s0, s12
 800f62e:	4770      	bx	lr
 800f630:	ad47d74e 	.word	0xad47d74e
 800f634:	310f74f6 	.word	0x310f74f6
 800f638:	3d2aaaab 	.word	0x3d2aaaab
 800f63c:	3e999999 	.word	0x3e999999
 800f640:	b493f27c 	.word	0xb493f27c
 800f644:	37d00d01 	.word	0x37d00d01
 800f648:	bab60b61 	.word	0xbab60b61
 800f64c:	3f480000 	.word	0x3f480000

0800f650 <__kernel_rem_pio2f>:
 800f650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f654:	ed2d 8b04 	vpush	{d8-d9}
 800f658:	b0d9      	sub	sp, #356	; 0x164
 800f65a:	4688      	mov	r8, r1
 800f65c:	9002      	str	r0, [sp, #8]
 800f65e:	49bb      	ldr	r1, [pc, #748]	; (800f94c <__kernel_rem_pio2f+0x2fc>)
 800f660:	9866      	ldr	r0, [sp, #408]	; 0x198
 800f662:	9301      	str	r3, [sp, #4]
 800f664:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800f668:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800f66c:	1e59      	subs	r1, r3, #1
 800f66e:	1d13      	adds	r3, r2, #4
 800f670:	db27      	blt.n	800f6c2 <__kernel_rem_pio2f+0x72>
 800f672:	f1b2 0b03 	subs.w	fp, r2, #3
 800f676:	bf48      	it	mi
 800f678:	f102 0b04 	addmi.w	fp, r2, #4
 800f67c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800f680:	1c45      	adds	r5, r0, #1
 800f682:	00ec      	lsls	r4, r5, #3
 800f684:	1a47      	subs	r7, r0, r1
 800f686:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800f68a:	9403      	str	r4, [sp, #12]
 800f68c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800f690:	eb0a 0c01 	add.w	ip, sl, r1
 800f694:	ae1c      	add	r6, sp, #112	; 0x70
 800f696:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800f69a:	2400      	movs	r4, #0
 800f69c:	4564      	cmp	r4, ip
 800f69e:	dd12      	ble.n	800f6c6 <__kernel_rem_pio2f+0x76>
 800f6a0:	9b01      	ldr	r3, [sp, #4]
 800f6a2:	ac1c      	add	r4, sp, #112	; 0x70
 800f6a4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800f6a8:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800f6ac:	f04f 0c00 	mov.w	ip, #0
 800f6b0:	45d4      	cmp	ip, sl
 800f6b2:	dc27      	bgt.n	800f704 <__kernel_rem_pio2f+0xb4>
 800f6b4:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800f6b8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800f6bc:	4627      	mov	r7, r4
 800f6be:	2600      	movs	r6, #0
 800f6c0:	e016      	b.n	800f6f0 <__kernel_rem_pio2f+0xa0>
 800f6c2:	2000      	movs	r0, #0
 800f6c4:	e7dc      	b.n	800f680 <__kernel_rem_pio2f+0x30>
 800f6c6:	42e7      	cmn	r7, r4
 800f6c8:	bf5d      	ittte	pl
 800f6ca:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800f6ce:	ee07 3a90 	vmovpl	s15, r3
 800f6d2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800f6d6:	eef0 7a47 	vmovmi.f32	s15, s14
 800f6da:	ece6 7a01 	vstmia	r6!, {s15}
 800f6de:	3401      	adds	r4, #1
 800f6e0:	e7dc      	b.n	800f69c <__kernel_rem_pio2f+0x4c>
 800f6e2:	ecf9 6a01 	vldmia	r9!, {s13}
 800f6e6:	ed97 7a00 	vldr	s14, [r7]
 800f6ea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f6ee:	3601      	adds	r6, #1
 800f6f0:	428e      	cmp	r6, r1
 800f6f2:	f1a7 0704 	sub.w	r7, r7, #4
 800f6f6:	ddf4      	ble.n	800f6e2 <__kernel_rem_pio2f+0x92>
 800f6f8:	eceb 7a01 	vstmia	fp!, {s15}
 800f6fc:	f10c 0c01 	add.w	ip, ip, #1
 800f700:	3404      	adds	r4, #4
 800f702:	e7d5      	b.n	800f6b0 <__kernel_rem_pio2f+0x60>
 800f704:	ab08      	add	r3, sp, #32
 800f706:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800f70a:	eddf 8a93 	vldr	s17, [pc, #588]	; 800f958 <__kernel_rem_pio2f+0x308>
 800f70e:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800f954 <__kernel_rem_pio2f+0x304>
 800f712:	9304      	str	r3, [sp, #16]
 800f714:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800f718:	4656      	mov	r6, sl
 800f71a:	00b3      	lsls	r3, r6, #2
 800f71c:	9305      	str	r3, [sp, #20]
 800f71e:	ab58      	add	r3, sp, #352	; 0x160
 800f720:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f724:	ac08      	add	r4, sp, #32
 800f726:	ab44      	add	r3, sp, #272	; 0x110
 800f728:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800f72c:	46a4      	mov	ip, r4
 800f72e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800f732:	4637      	mov	r7, r6
 800f734:	2f00      	cmp	r7, #0
 800f736:	f1a0 0004 	sub.w	r0, r0, #4
 800f73a:	dc4f      	bgt.n	800f7dc <__kernel_rem_pio2f+0x18c>
 800f73c:	4628      	mov	r0, r5
 800f73e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f742:	f000 fa8d 	bl	800fc60 <scalbnf>
 800f746:	eeb0 8a40 	vmov.f32	s16, s0
 800f74a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800f74e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800f752:	f000 fa43 	bl	800fbdc <floorf>
 800f756:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800f75a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800f75e:	2d00      	cmp	r5, #0
 800f760:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f764:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f768:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800f76c:	ee17 9a90 	vmov	r9, s15
 800f770:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f774:	dd44      	ble.n	800f800 <__kernel_rem_pio2f+0x1b0>
 800f776:	f106 3cff 	add.w	ip, r6, #4294967295
 800f77a:	ab08      	add	r3, sp, #32
 800f77c:	f1c5 0e08 	rsb	lr, r5, #8
 800f780:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800f784:	fa47 f00e 	asr.w	r0, r7, lr
 800f788:	4481      	add	r9, r0
 800f78a:	fa00 f00e 	lsl.w	r0, r0, lr
 800f78e:	1a3f      	subs	r7, r7, r0
 800f790:	f1c5 0007 	rsb	r0, r5, #7
 800f794:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800f798:	4107      	asrs	r7, r0
 800f79a:	2f00      	cmp	r7, #0
 800f79c:	dd3f      	ble.n	800f81e <__kernel_rem_pio2f+0x1ce>
 800f79e:	f04f 0e00 	mov.w	lr, #0
 800f7a2:	f109 0901 	add.w	r9, r9, #1
 800f7a6:	4673      	mov	r3, lr
 800f7a8:	4576      	cmp	r6, lr
 800f7aa:	dc6b      	bgt.n	800f884 <__kernel_rem_pio2f+0x234>
 800f7ac:	2d00      	cmp	r5, #0
 800f7ae:	dd04      	ble.n	800f7ba <__kernel_rem_pio2f+0x16a>
 800f7b0:	2d01      	cmp	r5, #1
 800f7b2:	d078      	beq.n	800f8a6 <__kernel_rem_pio2f+0x256>
 800f7b4:	2d02      	cmp	r5, #2
 800f7b6:	f000 8081 	beq.w	800f8bc <__kernel_rem_pio2f+0x26c>
 800f7ba:	2f02      	cmp	r7, #2
 800f7bc:	d12f      	bne.n	800f81e <__kernel_rem_pio2f+0x1ce>
 800f7be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f7c2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800f7c6:	b353      	cbz	r3, 800f81e <__kernel_rem_pio2f+0x1ce>
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800f7ce:	f000 fa47 	bl	800fc60 <scalbnf>
 800f7d2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800f7d6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800f7da:	e020      	b.n	800f81e <__kernel_rem_pio2f+0x1ce>
 800f7dc:	ee60 7a28 	vmul.f32	s15, s0, s17
 800f7e0:	3f01      	subs	r7, #1
 800f7e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f7ea:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800f7ee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f7f2:	ecac 0a01 	vstmia	ip!, {s0}
 800f7f6:	ed90 0a00 	vldr	s0, [r0]
 800f7fa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800f7fe:	e799      	b.n	800f734 <__kernel_rem_pio2f+0xe4>
 800f800:	d105      	bne.n	800f80e <__kernel_rem_pio2f+0x1be>
 800f802:	1e70      	subs	r0, r6, #1
 800f804:	ab08      	add	r3, sp, #32
 800f806:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800f80a:	11ff      	asrs	r7, r7, #7
 800f80c:	e7c5      	b.n	800f79a <__kernel_rem_pio2f+0x14a>
 800f80e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f812:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800f816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f81a:	da31      	bge.n	800f880 <__kernel_rem_pio2f+0x230>
 800f81c:	2700      	movs	r7, #0
 800f81e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f826:	f040 809b 	bne.w	800f960 <__kernel_rem_pio2f+0x310>
 800f82a:	1e74      	subs	r4, r6, #1
 800f82c:	46a4      	mov	ip, r4
 800f82e:	2000      	movs	r0, #0
 800f830:	45d4      	cmp	ip, sl
 800f832:	da4a      	bge.n	800f8ca <__kernel_rem_pio2f+0x27a>
 800f834:	2800      	cmp	r0, #0
 800f836:	d07a      	beq.n	800f92e <__kernel_rem_pio2f+0x2de>
 800f838:	ab08      	add	r3, sp, #32
 800f83a:	3d08      	subs	r5, #8
 800f83c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 8081 	beq.w	800f948 <__kernel_rem_pio2f+0x2f8>
 800f846:	4628      	mov	r0, r5
 800f848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f84c:	00a5      	lsls	r5, r4, #2
 800f84e:	f000 fa07 	bl	800fc60 <scalbnf>
 800f852:	aa44      	add	r2, sp, #272	; 0x110
 800f854:	1d2b      	adds	r3, r5, #4
 800f856:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800f958 <__kernel_rem_pio2f+0x308>
 800f85a:	18d1      	adds	r1, r2, r3
 800f85c:	4622      	mov	r2, r4
 800f85e:	2a00      	cmp	r2, #0
 800f860:	f280 80ae 	bge.w	800f9c0 <__kernel_rem_pio2f+0x370>
 800f864:	4622      	mov	r2, r4
 800f866:	2a00      	cmp	r2, #0
 800f868:	f2c0 80cc 	blt.w	800fa04 <__kernel_rem_pio2f+0x3b4>
 800f86c:	a944      	add	r1, sp, #272	; 0x110
 800f86e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800f872:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800f950 <__kernel_rem_pio2f+0x300>
 800f876:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800f87a:	2000      	movs	r0, #0
 800f87c:	1aa1      	subs	r1, r4, r2
 800f87e:	e0b6      	b.n	800f9ee <__kernel_rem_pio2f+0x39e>
 800f880:	2702      	movs	r7, #2
 800f882:	e78c      	b.n	800f79e <__kernel_rem_pio2f+0x14e>
 800f884:	6820      	ldr	r0, [r4, #0]
 800f886:	b94b      	cbnz	r3, 800f89c <__kernel_rem_pio2f+0x24c>
 800f888:	b118      	cbz	r0, 800f892 <__kernel_rem_pio2f+0x242>
 800f88a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800f88e:	6020      	str	r0, [r4, #0]
 800f890:	2001      	movs	r0, #1
 800f892:	f10e 0e01 	add.w	lr, lr, #1
 800f896:	3404      	adds	r4, #4
 800f898:	4603      	mov	r3, r0
 800f89a:	e785      	b.n	800f7a8 <__kernel_rem_pio2f+0x158>
 800f89c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800f8a0:	6020      	str	r0, [r4, #0]
 800f8a2:	4618      	mov	r0, r3
 800f8a4:	e7f5      	b.n	800f892 <__kernel_rem_pio2f+0x242>
 800f8a6:	1e74      	subs	r4, r6, #1
 800f8a8:	a808      	add	r0, sp, #32
 800f8aa:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f8ae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800f8b2:	f10d 0c20 	add.w	ip, sp, #32
 800f8b6:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800f8ba:	e77e      	b.n	800f7ba <__kernel_rem_pio2f+0x16a>
 800f8bc:	1e74      	subs	r4, r6, #1
 800f8be:	a808      	add	r0, sp, #32
 800f8c0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800f8c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800f8c8:	e7f3      	b.n	800f8b2 <__kernel_rem_pio2f+0x262>
 800f8ca:	ab08      	add	r3, sp, #32
 800f8cc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800f8d0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800f8d4:	4318      	orrs	r0, r3
 800f8d6:	e7ab      	b.n	800f830 <__kernel_rem_pio2f+0x1e0>
 800f8d8:	f10c 0c01 	add.w	ip, ip, #1
 800f8dc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800f8e0:	2c00      	cmp	r4, #0
 800f8e2:	d0f9      	beq.n	800f8d8 <__kernel_rem_pio2f+0x288>
 800f8e4:	9b05      	ldr	r3, [sp, #20]
 800f8e6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800f8ea:	eb0d 0003 	add.w	r0, sp, r3
 800f8ee:	9b01      	ldr	r3, [sp, #4]
 800f8f0:	18f4      	adds	r4, r6, r3
 800f8f2:	ab1c      	add	r3, sp, #112	; 0x70
 800f8f4:	1c77      	adds	r7, r6, #1
 800f8f6:	384c      	subs	r0, #76	; 0x4c
 800f8f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f8fc:	4466      	add	r6, ip
 800f8fe:	42be      	cmp	r6, r7
 800f900:	f6ff af0b 	blt.w	800f71a <__kernel_rem_pio2f+0xca>
 800f904:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800f908:	f8dd e008 	ldr.w	lr, [sp, #8]
 800f90c:	ee07 3a90 	vmov	s15, r3
 800f910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f914:	f04f 0c00 	mov.w	ip, #0
 800f918:	ece4 7a01 	vstmia	r4!, {s15}
 800f91c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800f920:	46a1      	mov	r9, r4
 800f922:	458c      	cmp	ip, r1
 800f924:	dd07      	ble.n	800f936 <__kernel_rem_pio2f+0x2e6>
 800f926:	ece0 7a01 	vstmia	r0!, {s15}
 800f92a:	3701      	adds	r7, #1
 800f92c:	e7e7      	b.n	800f8fe <__kernel_rem_pio2f+0x2ae>
 800f92e:	9804      	ldr	r0, [sp, #16]
 800f930:	f04f 0c01 	mov.w	ip, #1
 800f934:	e7d2      	b.n	800f8dc <__kernel_rem_pio2f+0x28c>
 800f936:	ecfe 6a01 	vldmia	lr!, {s13}
 800f93a:	ed39 7a01 	vldmdb	r9!, {s14}
 800f93e:	f10c 0c01 	add.w	ip, ip, #1
 800f942:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f946:	e7ec      	b.n	800f922 <__kernel_rem_pio2f+0x2d2>
 800f948:	3c01      	subs	r4, #1
 800f94a:	e775      	b.n	800f838 <__kernel_rem_pio2f+0x1e8>
 800f94c:	08010630 	.word	0x08010630
 800f950:	08010604 	.word	0x08010604
 800f954:	43800000 	.word	0x43800000
 800f958:	3b800000 	.word	0x3b800000
 800f95c:	00000000 	.word	0x00000000
 800f960:	9b03      	ldr	r3, [sp, #12]
 800f962:	eeb0 0a48 	vmov.f32	s0, s16
 800f966:	1a98      	subs	r0, r3, r2
 800f968:	f000 f97a 	bl	800fc60 <scalbnf>
 800f96c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800f954 <__kernel_rem_pio2f+0x304>
 800f970:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800f974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f978:	db19      	blt.n	800f9ae <__kernel_rem_pio2f+0x35e>
 800f97a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800f958 <__kernel_rem_pio2f+0x308>
 800f97e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800f982:	aa08      	add	r2, sp, #32
 800f984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f988:	1c74      	adds	r4, r6, #1
 800f98a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f98e:	3508      	adds	r5, #8
 800f990:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800f994:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f998:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f99c:	ee10 3a10 	vmov	r3, s0
 800f9a0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f9a4:	ee17 3a90 	vmov	r3, s15
 800f9a8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800f9ac:	e74b      	b.n	800f846 <__kernel_rem_pio2f+0x1f6>
 800f9ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800f9b2:	aa08      	add	r2, sp, #32
 800f9b4:	ee10 3a10 	vmov	r3, s0
 800f9b8:	4634      	mov	r4, r6
 800f9ba:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800f9be:	e742      	b.n	800f846 <__kernel_rem_pio2f+0x1f6>
 800f9c0:	a808      	add	r0, sp, #32
 800f9c2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800f9c6:	9001      	str	r0, [sp, #4]
 800f9c8:	ee07 0a90 	vmov	s15, r0
 800f9cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9d0:	3a01      	subs	r2, #1
 800f9d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800f9d6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800f9da:	ed61 7a01 	vstmdb	r1!, {s15}
 800f9de:	e73e      	b.n	800f85e <__kernel_rem_pio2f+0x20e>
 800f9e0:	ecfc 6a01 	vldmia	ip!, {s13}
 800f9e4:	ecb6 7a01 	vldmia	r6!, {s14}
 800f9e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f9ec:	3001      	adds	r0, #1
 800f9ee:	4550      	cmp	r0, sl
 800f9f0:	dc01      	bgt.n	800f9f6 <__kernel_rem_pio2f+0x3a6>
 800f9f2:	4288      	cmp	r0, r1
 800f9f4:	ddf4      	ble.n	800f9e0 <__kernel_rem_pio2f+0x390>
 800f9f6:	a858      	add	r0, sp, #352	; 0x160
 800f9f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f9fc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800fa00:	3a01      	subs	r2, #1
 800fa02:	e730      	b.n	800f866 <__kernel_rem_pio2f+0x216>
 800fa04:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800fa06:	2a02      	cmp	r2, #2
 800fa08:	dc09      	bgt.n	800fa1e <__kernel_rem_pio2f+0x3ce>
 800fa0a:	2a00      	cmp	r2, #0
 800fa0c:	dc2a      	bgt.n	800fa64 <__kernel_rem_pio2f+0x414>
 800fa0e:	d043      	beq.n	800fa98 <__kernel_rem_pio2f+0x448>
 800fa10:	f009 0007 	and.w	r0, r9, #7
 800fa14:	b059      	add	sp, #356	; 0x164
 800fa16:	ecbd 8b04 	vpop	{d8-d9}
 800fa1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa1e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d1f5      	bne.n	800fa10 <__kernel_rem_pio2f+0x3c0>
 800fa24:	ab30      	add	r3, sp, #192	; 0xc0
 800fa26:	442b      	add	r3, r5
 800fa28:	461a      	mov	r2, r3
 800fa2a:	4619      	mov	r1, r3
 800fa2c:	4620      	mov	r0, r4
 800fa2e:	2800      	cmp	r0, #0
 800fa30:	f1a1 0104 	sub.w	r1, r1, #4
 800fa34:	dc51      	bgt.n	800fada <__kernel_rem_pio2f+0x48a>
 800fa36:	4621      	mov	r1, r4
 800fa38:	2901      	cmp	r1, #1
 800fa3a:	f1a2 0204 	sub.w	r2, r2, #4
 800fa3e:	dc5c      	bgt.n	800fafa <__kernel_rem_pio2f+0x4aa>
 800fa40:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800fa44:	3304      	adds	r3, #4
 800fa46:	2c01      	cmp	r4, #1
 800fa48:	dc67      	bgt.n	800fb1a <__kernel_rem_pio2f+0x4ca>
 800fa4a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800fa4e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800fa52:	2f00      	cmp	r7, #0
 800fa54:	d167      	bne.n	800fb26 <__kernel_rem_pio2f+0x4d6>
 800fa56:	edc8 6a00 	vstr	s13, [r8]
 800fa5a:	ed88 7a01 	vstr	s14, [r8, #4]
 800fa5e:	edc8 7a02 	vstr	s15, [r8, #8]
 800fa62:	e7d5      	b.n	800fa10 <__kernel_rem_pio2f+0x3c0>
 800fa64:	aa30      	add	r2, sp, #192	; 0xc0
 800fa66:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800fa6a:	4413      	add	r3, r2
 800fa6c:	4622      	mov	r2, r4
 800fa6e:	2a00      	cmp	r2, #0
 800fa70:	da24      	bge.n	800fabc <__kernel_rem_pio2f+0x46c>
 800fa72:	b34f      	cbz	r7, 800fac8 <__kernel_rem_pio2f+0x478>
 800fa74:	eef1 7a47 	vneg.f32	s15, s14
 800fa78:	edc8 7a00 	vstr	s15, [r8]
 800fa7c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800fa80:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa84:	aa31      	add	r2, sp, #196	; 0xc4
 800fa86:	2301      	movs	r3, #1
 800fa88:	429c      	cmp	r4, r3
 800fa8a:	da20      	bge.n	800face <__kernel_rem_pio2f+0x47e>
 800fa8c:	b10f      	cbz	r7, 800fa92 <__kernel_rem_pio2f+0x442>
 800fa8e:	eef1 7a67 	vneg.f32	s15, s15
 800fa92:	edc8 7a01 	vstr	s15, [r8, #4]
 800fa96:	e7bb      	b.n	800fa10 <__kernel_rem_pio2f+0x3c0>
 800fa98:	aa30      	add	r2, sp, #192	; 0xc0
 800fa9a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800f95c <__kernel_rem_pio2f+0x30c>
 800fa9e:	4413      	add	r3, r2
 800faa0:	2c00      	cmp	r4, #0
 800faa2:	da05      	bge.n	800fab0 <__kernel_rem_pio2f+0x460>
 800faa4:	b10f      	cbz	r7, 800faaa <__kernel_rem_pio2f+0x45a>
 800faa6:	eef1 7a67 	vneg.f32	s15, s15
 800faaa:	edc8 7a00 	vstr	s15, [r8]
 800faae:	e7af      	b.n	800fa10 <__kernel_rem_pio2f+0x3c0>
 800fab0:	ed33 7a01 	vldmdb	r3!, {s14}
 800fab4:	3c01      	subs	r4, #1
 800fab6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800faba:	e7f1      	b.n	800faa0 <__kernel_rem_pio2f+0x450>
 800fabc:	ed73 7a01 	vldmdb	r3!, {s15}
 800fac0:	3a01      	subs	r2, #1
 800fac2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800fac6:	e7d2      	b.n	800fa6e <__kernel_rem_pio2f+0x41e>
 800fac8:	eef0 7a47 	vmov.f32	s15, s14
 800facc:	e7d4      	b.n	800fa78 <__kernel_rem_pio2f+0x428>
 800face:	ecb2 7a01 	vldmia	r2!, {s14}
 800fad2:	3301      	adds	r3, #1
 800fad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fad8:	e7d6      	b.n	800fa88 <__kernel_rem_pio2f+0x438>
 800fada:	edd1 7a00 	vldr	s15, [r1]
 800fade:	edd1 6a01 	vldr	s13, [r1, #4]
 800fae2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fae6:	3801      	subs	r0, #1
 800fae8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800faec:	ed81 7a00 	vstr	s14, [r1]
 800faf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800faf4:	edc1 7a01 	vstr	s15, [r1, #4]
 800faf8:	e799      	b.n	800fa2e <__kernel_rem_pio2f+0x3de>
 800fafa:	edd2 7a00 	vldr	s15, [r2]
 800fafe:	edd2 6a01 	vldr	s13, [r2, #4]
 800fb02:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fb06:	3901      	subs	r1, #1
 800fb08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fb0c:	ed82 7a00 	vstr	s14, [r2]
 800fb10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fb14:	edc2 7a01 	vstr	s15, [r2, #4]
 800fb18:	e78e      	b.n	800fa38 <__kernel_rem_pio2f+0x3e8>
 800fb1a:	ed33 7a01 	vldmdb	r3!, {s14}
 800fb1e:	3c01      	subs	r4, #1
 800fb20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fb24:	e78f      	b.n	800fa46 <__kernel_rem_pio2f+0x3f6>
 800fb26:	eef1 6a66 	vneg.f32	s13, s13
 800fb2a:	eeb1 7a47 	vneg.f32	s14, s14
 800fb2e:	edc8 6a00 	vstr	s13, [r8]
 800fb32:	ed88 7a01 	vstr	s14, [r8, #4]
 800fb36:	eef1 7a67 	vneg.f32	s15, s15
 800fb3a:	e790      	b.n	800fa5e <__kernel_rem_pio2f+0x40e>

0800fb3c <__kernel_sinf>:
 800fb3c:	ee10 3a10 	vmov	r3, s0
 800fb40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fb44:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800fb48:	da04      	bge.n	800fb54 <__kernel_sinf+0x18>
 800fb4a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fb4e:	ee17 3a90 	vmov	r3, s15
 800fb52:	b35b      	cbz	r3, 800fbac <__kernel_sinf+0x70>
 800fb54:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fb58:	eddf 7a15 	vldr	s15, [pc, #84]	; 800fbb0 <__kernel_sinf+0x74>
 800fb5c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800fbb4 <__kernel_sinf+0x78>
 800fb60:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb64:	eddf 7a14 	vldr	s15, [pc, #80]	; 800fbb8 <__kernel_sinf+0x7c>
 800fb68:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb6c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800fbbc <__kernel_sinf+0x80>
 800fb70:	eea7 6a87 	vfma.f32	s12, s15, s14
 800fb74:	eddf 7a12 	vldr	s15, [pc, #72]	; 800fbc0 <__kernel_sinf+0x84>
 800fb78:	ee60 6a07 	vmul.f32	s13, s0, s14
 800fb7c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fb80:	b930      	cbnz	r0, 800fb90 <__kernel_sinf+0x54>
 800fb82:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800fbc4 <__kernel_sinf+0x88>
 800fb86:	eea7 6a27 	vfma.f32	s12, s14, s15
 800fb8a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800fb8e:	4770      	bx	lr
 800fb90:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800fb94:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800fb98:	eee0 7a86 	vfma.f32	s15, s1, s12
 800fb9c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800fba0:	eddf 7a09 	vldr	s15, [pc, #36]	; 800fbc8 <__kernel_sinf+0x8c>
 800fba4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800fba8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800fbac:	4770      	bx	lr
 800fbae:	bf00      	nop
 800fbb0:	2f2ec9d3 	.word	0x2f2ec9d3
 800fbb4:	b2d72f34 	.word	0xb2d72f34
 800fbb8:	3638ef1b 	.word	0x3638ef1b
 800fbbc:	b9500d01 	.word	0xb9500d01
 800fbc0:	3c088889 	.word	0x3c088889
 800fbc4:	be2aaaab 	.word	0xbe2aaaab
 800fbc8:	3e2aaaab 	.word	0x3e2aaaab

0800fbcc <fabsf>:
 800fbcc:	ee10 3a10 	vmov	r3, s0
 800fbd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fbd4:	ee00 3a10 	vmov	s0, r3
 800fbd8:	4770      	bx	lr
	...

0800fbdc <floorf>:
 800fbdc:	ee10 3a10 	vmov	r3, s0
 800fbe0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fbe4:	3a7f      	subs	r2, #127	; 0x7f
 800fbe6:	2a16      	cmp	r2, #22
 800fbe8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fbec:	dc2a      	bgt.n	800fc44 <floorf+0x68>
 800fbee:	2a00      	cmp	r2, #0
 800fbf0:	da11      	bge.n	800fc16 <floorf+0x3a>
 800fbf2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800fc54 <floorf+0x78>
 800fbf6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fbfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fbfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc02:	dd05      	ble.n	800fc10 <floorf+0x34>
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	da23      	bge.n	800fc50 <floorf+0x74>
 800fc08:	4a13      	ldr	r2, [pc, #76]	; (800fc58 <floorf+0x7c>)
 800fc0a:	2900      	cmp	r1, #0
 800fc0c:	bf18      	it	ne
 800fc0e:	4613      	movne	r3, r2
 800fc10:	ee00 3a10 	vmov	s0, r3
 800fc14:	4770      	bx	lr
 800fc16:	4911      	ldr	r1, [pc, #68]	; (800fc5c <floorf+0x80>)
 800fc18:	4111      	asrs	r1, r2
 800fc1a:	420b      	tst	r3, r1
 800fc1c:	d0fa      	beq.n	800fc14 <floorf+0x38>
 800fc1e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800fc54 <floorf+0x78>
 800fc22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fc26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800fc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc2e:	ddef      	ble.n	800fc10 <floorf+0x34>
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bfbe      	ittt	lt
 800fc34:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800fc38:	fa40 f202 	asrlt.w	r2, r0, r2
 800fc3c:	189b      	addlt	r3, r3, r2
 800fc3e:	ea23 0301 	bic.w	r3, r3, r1
 800fc42:	e7e5      	b.n	800fc10 <floorf+0x34>
 800fc44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800fc48:	d3e4      	bcc.n	800fc14 <floorf+0x38>
 800fc4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc4e:	4770      	bx	lr
 800fc50:	2300      	movs	r3, #0
 800fc52:	e7dd      	b.n	800fc10 <floorf+0x34>
 800fc54:	7149f2ca 	.word	0x7149f2ca
 800fc58:	bf800000 	.word	0xbf800000
 800fc5c:	007fffff 	.word	0x007fffff

0800fc60 <scalbnf>:
 800fc60:	ee10 3a10 	vmov	r3, s0
 800fc64:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fc68:	d025      	beq.n	800fcb6 <scalbnf+0x56>
 800fc6a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fc6e:	d302      	bcc.n	800fc76 <scalbnf+0x16>
 800fc70:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fc74:	4770      	bx	lr
 800fc76:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fc7a:	d122      	bne.n	800fcc2 <scalbnf+0x62>
 800fc7c:	4b2a      	ldr	r3, [pc, #168]	; (800fd28 <scalbnf+0xc8>)
 800fc7e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800fd2c <scalbnf+0xcc>
 800fc82:	4298      	cmp	r0, r3
 800fc84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fc88:	db16      	blt.n	800fcb8 <scalbnf+0x58>
 800fc8a:	ee10 3a10 	vmov	r3, s0
 800fc8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fc92:	3a19      	subs	r2, #25
 800fc94:	4402      	add	r2, r0
 800fc96:	2afe      	cmp	r2, #254	; 0xfe
 800fc98:	dd15      	ble.n	800fcc6 <scalbnf+0x66>
 800fc9a:	ee10 3a10 	vmov	r3, s0
 800fc9e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800fd30 <scalbnf+0xd0>
 800fca2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800fd34 <scalbnf+0xd4>
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	eeb0 7a67 	vmov.f32	s14, s15
 800fcac:	bfb8      	it	lt
 800fcae:	eef0 7a66 	vmovlt.f32	s15, s13
 800fcb2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800fcb6:	4770      	bx	lr
 800fcb8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800fd38 <scalbnf+0xd8>
 800fcbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fcc0:	4770      	bx	lr
 800fcc2:	0dd2      	lsrs	r2, r2, #23
 800fcc4:	e7e6      	b.n	800fc94 <scalbnf+0x34>
 800fcc6:	2a00      	cmp	r2, #0
 800fcc8:	dd06      	ble.n	800fcd8 <scalbnf+0x78>
 800fcca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fcce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fcd2:	ee00 3a10 	vmov	s0, r3
 800fcd6:	4770      	bx	lr
 800fcd8:	f112 0f16 	cmn.w	r2, #22
 800fcdc:	da1a      	bge.n	800fd14 <scalbnf+0xb4>
 800fcde:	f24c 3350 	movw	r3, #50000	; 0xc350
 800fce2:	4298      	cmp	r0, r3
 800fce4:	ee10 3a10 	vmov	r3, s0
 800fce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcec:	dd0a      	ble.n	800fd04 <scalbnf+0xa4>
 800fcee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800fd30 <scalbnf+0xd0>
 800fcf2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800fd34 <scalbnf+0xd4>
 800fcf6:	eef0 7a40 	vmov.f32	s15, s0
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	bf18      	it	ne
 800fcfe:	eeb0 0a47 	vmovne.f32	s0, s14
 800fd02:	e7db      	b.n	800fcbc <scalbnf+0x5c>
 800fd04:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800fd38 <scalbnf+0xd8>
 800fd08:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800fd3c <scalbnf+0xdc>
 800fd0c:	eef0 7a40 	vmov.f32	s15, s0
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	e7f3      	b.n	800fcfc <scalbnf+0x9c>
 800fd14:	3219      	adds	r2, #25
 800fd16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fd1a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800fd1e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800fd40 <scalbnf+0xe0>
 800fd22:	ee07 3a10 	vmov	s14, r3
 800fd26:	e7c4      	b.n	800fcb2 <scalbnf+0x52>
 800fd28:	ffff3cb0 	.word	0xffff3cb0
 800fd2c:	4c000000 	.word	0x4c000000
 800fd30:	7149f2ca 	.word	0x7149f2ca
 800fd34:	f149f2ca 	.word	0xf149f2ca
 800fd38:	0da24260 	.word	0x0da24260
 800fd3c:	8da24260 	.word	0x8da24260
 800fd40:	33000000 	.word	0x33000000

0800fd44 <_init>:
 800fd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd46:	bf00      	nop
 800fd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd4a:	bc08      	pop	{r3}
 800fd4c:	469e      	mov	lr, r3
 800fd4e:	4770      	bx	lr

0800fd50 <_fini>:
 800fd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd52:	bf00      	nop
 800fd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd56:	bc08      	pop	{r3}
 800fd58:	469e      	mov	lr, r3
 800fd5a:	4770      	bx	lr
